!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("file-saver")):"function"==typeof define&&define.amd?define(["exports","file-saver"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).GeneExpressionViolinPlot={},t.saveAs)}(this,(function(t,e){"use strict";function n(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var r,i,o=(1===(r=n).length&&(i=r,r=function(t,e){return n(i(t),e)}),{left:function(t,e,n,i){for(null==n&&(n=0),null==i&&(i=t.length);n<i;){var o=n+i>>>1;r(t[o],e)<0?n=o+1:i=o}return n},right:function(t,e,n,i){for(null==n&&(n=0),null==i&&(i=t.length);n<i;){var o=n+i>>>1;r(t[o],e)>0?i=o:n=o+1}return n}}),a=o.right;function s(t){return null===t?NaN:+t}function l(t,e){var n=function(t,e){var n,r,i=t.length,o=0,a=-1,l=0,u=0;if(null==e)for(;++a<i;)isNaN(n=s(t[a]))||(u+=(r=n-l)*(n-(l+=r/++o)));else for(;++a<i;)isNaN(n=s(e(t[a],a,t)))||(u+=(r=n-l)*(n-(l+=r/++o)));if(o>1)return u/(o-1)}(t,e);return n?Math.sqrt(n):n}function u(t,e){var n,r,i,o=t.length,a=-1;if(null==e){for(;++a<o;)if(null!=(n=t[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=t[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=i=n;++a<o;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]}function c(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o}var f=Math.sqrt(50),h=Math.sqrt(10),p=Math.sqrt(2);function d(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=f?10:o>=h?5:o>=p?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=f?10:o>=h?5:o>=p?2:1)}function g(t,e,n){if(null==n&&(n=s),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),a=+n(t[o],o,t);return a+(+n(t[o+1],o+1,t)-a)*(i-o)}}function v(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r}function y(t,e){var n,r=t.length,i=r,o=-1,a=0;if(null==e)for(;++o<r;)isNaN(n=s(t[o]))?--i:a+=n;else for(;++o<r;)isNaN(n=s(e(t[o],o,t)))?--i:a+=n;if(i)return a/i}function m(t,e){var r,i=t.length,o=-1,a=[];if(null==e)for(;++o<i;)isNaN(r=s(t[o]))||a.push(r);else for(;++o<i;)isNaN(r=s(e(t[o],o,t)))||a.push(r);return g(a.sort(n),.5)}var b="http://www.w3.org/1999/xhtml",x={svg:"http://www.w3.org/2000/svg",xhtml:b,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function w(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),x.hasOwnProperty(e)?{space:x[e],local:t}:t}function _(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===b&&e.documentElement.namespaceURI===b?e.createElement(t):e.createElementNS(n,t)}}function k(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function T(t){var e=w(t);return(e.local?k:_)(e)}function M(){}function A(t){return null==t?M:function(){return this.querySelector(t)}}function S(){return[]}function C(t){return null==t?S:function(){return this.querySelectorAll(t)}}function E(t){return function(){return this.matches(t)}}function N(t){return new Array(t.length)}function D(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}D.prototype={constructor:D,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var j="$";function O(t,e,n,r,i,o){for(var a,s=0,l=e.length,u=o.length;s<u;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new D(t,o[s]);for(;s<l;++s)(a=e[s])&&(i[s]=a)}function L(t,e,n,r,i,o,a){var s,l,u,c={},f=e.length,h=o.length,p=new Array(f);for(s=0;s<f;++s)(l=e[s])&&(p[s]=u=j+a.call(l,l.__data__,s,e),u in c?i[s]=l:c[u]=l);for(s=0;s<h;++s)(l=c[u=j+a.call(t,o[s],s,o)])?(r[s]=l,l.__data__=o[s],c[u]=null):n[s]=new D(t,o[s]);for(s=0;s<f;++s)(l=e[s])&&c[p[s]]===l&&(i[s]=l)}function P(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function q(t){return function(){this.removeAttribute(t)}}function R(t){return function(){this.removeAttributeNS(t.space,t.local)}}function H(t,e){return function(){this.setAttribute(t,e)}}function I(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function z(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function G(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function B(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function V(t){return function(){this.style.removeProperty(t)}}function F(t,e,n){return function(){this.style.setProperty(t,e,n)}}function W(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function X(t,e){return t.style.getPropertyValue(e)||B(t).getComputedStyle(t,null).getPropertyValue(e)}function U(t){return function(){delete this[t]}}function Y(t,e){return function(){this[t]=e}}function J(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function K(t){return t.trim().split(/^|\s+/)}function Q(t){return t.classList||new Z(t)}function Z(t){this._node=t,this._names=K(t.getAttribute("class")||"")}function tt(t,e){for(var n=Q(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function et(t,e){for(var n=Q(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function nt(t){return function(){tt(this,t)}}function rt(t){return function(){et(this,t)}}function it(t,e){return function(){(e.apply(this,arguments)?tt:et)(this,t)}}function ot(){this.textContent=""}function at(t){return function(){this.textContent=t}}function st(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function lt(){this.innerHTML=""}function ut(t){return function(){this.innerHTML=t}}function ct(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function ft(){this.nextSibling&&this.parentNode.appendChild(this)}function ht(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function pt(){return null}function dt(){var t=this.parentNode;t&&t.removeChild(this)}function gt(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function vt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}Z.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var yt={},mt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(yt={mouseenter:"mouseover",mouseleave:"mouseout"}));function bt(t,e,n){return t=xt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function xt(t,e,n){return function(r){var i=mt;mt=r;try{t.call(this,this.__data__,e,n)}finally{mt=i}}}function wt(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function _t(t,e,n){var r=yt.hasOwnProperty(t.type)?bt:xt;return function(i,o,a){var s,l=this.__on,u=r(e,o,a);if(l)for(var c=0,f=l.length;c<f;++c)if((s=l[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=u,s.capture=n),void(s.value=e);this.addEventListener(t.type,u,n),s={type:t.type,name:t.name,value:e,listener:u,capture:n},l?l.push(s):this.__on=[s]}}function kt(t,e,n){var r=B(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Tt(t,e){return function(){return kt(this,t,e)}}function Mt(t,e){return function(){return kt(this,t,e.apply(this,arguments))}}var At=[null];function St(t,e){this._groups=t,this._parents=e}function Ct(){return new St([[document.documentElement]],At)}function Et(t){return"string"==typeof t?new St([[document.querySelector(t)]],[document.documentElement]):new St([[t]],At)}function $t(){for(var t,e=mt;t=e.sourceEvent;)e=t;return e}function Nt(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]}function Dt(t){var e=$t();return e.changedTouches&&(e=e.changedTouches[0]),Nt(t,e)}function jt(t){return"string"==typeof t?new St([document.querySelectorAll(t)],[document.documentElement]):new St([null==t?[]:t],At)}St.prototype=Ct.prototype={constructor:St,select:function(t){"function"!=typeof t&&(t=A(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],l=s.length,u=r[i]=new Array(l),c=0;c<l;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),u[c]=a);return new St(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=C(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],l=s.length,u=0;u<l;++u)(a=s[u])&&(r.push(t.call(a,a.__data__,u,s)),i.push(a));return new St(r,i)},filter:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new St(r,this._parents)},data:function(t,e){if(!t)return p=new Array(this.size()),u=-1,this.each((function(t){p[++u]=t})),p;var n=e?L:O,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var o=i.length,a=new Array(o),s=new Array(o),l=new Array(o),u=0;u<o;++u){var c=r[u],f=i[u],h=f.length,p=t.call(c,c&&c.__data__,u,r),d=p.length,g=s[u]=new Array(d),v=a[u]=new Array(d);n(c,f,g,v,l[u]=new Array(h),p,e);for(var y,m,b=0,x=0;b<d;++b)if(y=g[b]){for(b>=x&&(x=b+1);!(m=v[x])&&++x<d;);y._next=m||null}}return(a=new St(a,r))._enter=s,a._exit=l,a},enter:function(){return new St(this._enter||this._groups.map(N),this._parents)},exit:function(){return new St(this._exit||this._groups.map(N),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),p=0;p<f;++p)(l=u[p]||c[p])&&(h[p]=l);for(;s<r;++s)a[s]=e[s];return new St(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=P);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],l=s.length,u=i[o]=new Array(l),c=0;c<l;++c)(a=s[c])&&(u[c]=a);u.sort(e)}return new St(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=w(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?R:q:"function"==typeof e?n.local?G:z:n.local?I:H)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?V:"function"==typeof e?W:F)(t,e,null==n?"":n)):X(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?U:"function"==typeof e?J:Y)(t,e)):this.node()[t]},classed:function(t,e){var n=K(t+"");if(arguments.length<2){for(var r=Q(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?it:e?nt:rt)(n,e))},text:function(t){return arguments.length?this.each(null==t?ot:("function"==typeof t?st:at)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?lt:("function"==typeof t?ct:ut)(t)):this.node().innerHTML},raise:function(){return this.each(ft)},lower:function(){return this.each(ht)},append:function(t){var e="function"==typeof t?t:T(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:T(t),r=null==e?pt:"function"==typeof e?e:A(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(dt)},clone:function(t){return this.select(t?vt:gt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?_t:wt,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var l,u=0,c=s.length;u<c;++u)for(r=0,l=s[u];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?Mt:Tt)(t,e))}};var Ot="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function Lt(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var Pt={exports:{}};
/*!
   * jQuery JavaScript Library v3.7.1
   * https://jquery.com/
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2023-08-28T13:37Z
   */!function(t){!function(e,n){t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}}("undefined"!=typeof window?window:Ot,(function(t,e){var n=[],r=Object.getPrototypeOf,i=n.slice,o=n.flat?function(t){return n.flat.call(t)}:function(t){return n.concat.apply([],t)},a=n.push,s=n.indexOf,l={},u=l.toString,c=l.hasOwnProperty,f=c.toString,h=f.call(Object),p={},d=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},g=function(t){return null!=t&&t===t.window},v=t.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function m(t,e,n){var r,i,o=(n=n||v).createElement("script");if(o.text=t,e)for(r in y)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function b(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?l[u.call(t)]||"object":typeof t}var x="3.7.1",w=/HTML$/i,_=function(t,e){return new _.fn.init(t,e)};function k(t){var e=!!t&&"length"in t&&t.length,n=b(t);return!d(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function T(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}_.fn=_.prototype={jquery:x,constructor:_,length:0,toArray:function(){return i.call(this)},get:function(t){return null==t?i.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=_.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return _.each(this,t)},map:function(t){return this.pushStack(_.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(i.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(_.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(_.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:n.sort,splice:n.splice},_.extend=_.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||d(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(u&&r&&(_.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||_.isPlainObject(n)?n:{},i=!1,a[e]=_.extend(u,o,r)):void 0!==r&&(a[e]=r));return a},_.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==u.call(t))&&(!(e=r(t))||"function"==typeof(n=c.call(e,"constructor")&&e.constructor)&&f.call(n)===h)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){m(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,r=0;if(k(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},text:function(t){var e,n="",r=0,i=t.nodeType;if(!i)for(;e=t[r++];)n+=_.text(e);return 1===i||11===i?t.textContent:9===i?t.documentElement.textContent:3===i||4===i?t.nodeValue:n},makeArray:function(t,e){var n=e||[];return null!=t&&(k(Object(t))?_.merge(n,"string"==typeof t?[t]:t):a.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:s.call(e,t,n)},isXMLDoc:function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!w.test(e||n&&n.nodeName||"HTML")},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,a=0,s=[];if(k(t))for(r=t.length;a<r;a++)null!=(i=e(t[a],a,n))&&s.push(i);else for(a in t)null!=(i=e(t[a],a,n))&&s.push(i);return o(s)},guid:1,support:p}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=n[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){l["[object "+e+"]"]=e.toLowerCase()}));var M=n.pop,A=n.sort,S=n.splice,C="[\\x20\\t\\r\\n\\f]",E=new RegExp("^"+C+"+|((?:^|[^\\\\])(?:\\\\.)*)"+C+"+$","g");_.contains=function(t,e){var n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(t.contains?t.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))};var $=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function N(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}_.escapeSelector=function(t){return(t+"").replace($,N)};var D=v,j=a;!function(){var e,r,o,a,l,u,f,h,d,g,v=j,y=_.expando,m=0,b=0,x=tt(),w=tt(),k=tt(),$=tt(),N=function(t,e){return t===e&&(l=!0),0},O="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="(?:\\\\[\\da-fA-F]{1,6}"+C+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",P="\\["+C+"*("+L+")(?:"+C+"*([*^$|!~]?=)"+C+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+L+"))|)"+C+"*\\]",q=":("+L+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",R=new RegExp(C+"+","g"),H=new RegExp("^"+C+"*,"+C+"*"),I=new RegExp("^"+C+"*([>+~]|"+C+")"+C+"*"),z=new RegExp(C+"|>"),G=new RegExp(q),B=new RegExp("^"+L+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L+"|[*])"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+C+"*(even|odd|(([+-]|)(\\d*)n|)"+C+"*(?:([+-]|)"+C+"*(\\d+)|))"+C+"*\\)|)","i"),bool:new RegExp("^(?:"+O+")$","i"),needsContext:new RegExp("^"+C+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+C+"*((?:-\\d)?\\d*)"+C+"*\\)|)(?=[^-]|$)","i")},F=/^(?:input|select|textarea|button)$/i,W=/^h\d$/i,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,U=/[+~]/,Y=new RegExp("\\\\[\\da-fA-F]{1,6}"+C+"?|\\\\([^\\r\\n\\f])","g"),J=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},K=function(){lt()},Q=ht((function(t){return!0===t.disabled&&T(t,"fieldset")}),{dir:"parentNode",next:"legend"});try{v.apply(n=i.call(D.childNodes),D.childNodes),n[D.childNodes.length].nodeType}catch(t){v={apply:function(t,e){j.apply(t,i.call(e))},call:function(t){j.apply(t,i.call(arguments,1))}}}function Z(t,e,n,r){var i,o,a,s,l,c,f,g=e&&e.ownerDocument,m=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==m&&9!==m&&11!==m)return n;if(!r&&(lt(e),e=e||u,h)){if(11!==m&&(l=X.exec(t)))if(i=l[1]){if(9===m){if(!(a=e.getElementById(i)))return n;if(a.id===i)return v.call(n,a),n}else if(g&&(a=g.getElementById(i))&&Z.contains(e,a)&&a.id===i)return v.call(n,a),n}else{if(l[2])return v.apply(n,e.getElementsByTagName(t)),n;if((i=l[3])&&e.getElementsByClassName)return v.apply(n,e.getElementsByClassName(i)),n}if(!($[t+" "]||d&&d.test(t))){if(f=t,g=e,1===m&&(z.test(t)||I.test(t))){for((g=U.test(t)&&st(e.parentNode)||e)==e&&p.scope||((s=e.getAttribute("id"))?s=_.escapeSelector(s):e.setAttribute("id",s=y)),o=(c=ct(t)).length;o--;)c[o]=(s?"#"+s:":scope")+" "+ft(c[o]);f=c.join(",")}try{return v.apply(n,g.querySelectorAll(f)),n}catch(e){$(t,!0)}finally{s===y&&e.removeAttribute("id")}}}return mt(t.replace(E,"$1"),e,n,r)}function tt(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function et(t){return t[y]=!0,t}function nt(t){var e=u.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function rt(t){return function(e){return T(e,"input")&&e.type===t}}function it(t){return function(e){return(T(e,"input")||T(e,"button"))&&e.type===t}}function ot(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&Q(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function at(t){return et((function(e){return e=+e,et((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function st(t){return t&&void 0!==t.getElementsByTagName&&t}function lt(t){var e,n=t?t.ownerDocument||t:D;return n!=u&&9===n.nodeType&&n.documentElement?(f=(u=n).documentElement,h=!_.isXMLDoc(u),g=f.matches||f.webkitMatchesSelector||f.msMatchesSelector,f.msMatchesSelector&&D!=u&&(e=u.defaultView)&&e.top!==e&&e.addEventListener("unload",K),p.getById=nt((function(t){return f.appendChild(t).id=_.expando,!u.getElementsByName||!u.getElementsByName(_.expando).length})),p.disconnectedMatch=nt((function(t){return g.call(t,"*")})),p.scope=nt((function(){return u.querySelectorAll(":scope")})),p.cssHas=nt((function(){try{return u.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),p.getById?(r.filter.ID=function(t){var e=t.replace(Y,J);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(Y,J);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):e.querySelectorAll(t)},r.find.CLASS=function(t,e){if(void 0!==e.getElementsByClassName&&h)return e.getElementsByClassName(t)},d=[],nt((function(t){var e;f.appendChild(t).innerHTML="<a id='"+y+"' href='' disabled='disabled'></a><select id='"+y+"-\r\\' disabled='disabled'><option selected=''></option></select>",t.querySelectorAll("[selected]").length||d.push("\\["+C+"*(?:value|"+O+")"),t.querySelectorAll("[id~="+y+"-]").length||d.push("~="),t.querySelectorAll("a#"+y+"+*").length||d.push(".#.+[+~]"),t.querySelectorAll(":checked").length||d.push(":checked"),(e=u.createElement("input")).setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&d.push(":enabled",":disabled"),(e=u.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||d.push("\\["+C+"*name"+C+"*="+C+"*(?:''|\"\")")})),p.cssHas||d.push(":has"),d=d.length&&new RegExp(d.join("|")),N=function(t,e){if(t===e)return l=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!p.sortDetached&&e.compareDocumentPosition(t)===n?t===u||t.ownerDocument==D&&Z.contains(D,t)?-1:e===u||e.ownerDocument==D&&Z.contains(D,e)?1:a?s.call(a,t)-s.call(a,e):0:4&n?-1:1)},u):u}for(e in Z.matches=function(t,e){return Z(t,null,null,e)},Z.matchesSelector=function(t,e){if(lt(t),h&&!$[e+" "]&&(!d||!d.test(e)))try{var n=g.call(t,e);if(n||p.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){$(e,!0)}return Z(e,u,null,[t]).length>0},Z.contains=function(t,e){return(t.ownerDocument||t)!=u&&lt(t),_.contains(t,e)},Z.attr=function(t,e){(t.ownerDocument||t)!=u&&lt(t);var n=r.attrHandle[e.toLowerCase()],i=n&&c.call(r.attrHandle,e.toLowerCase())?n(t,e,!h):void 0;return void 0!==i?i:t.getAttribute(e)},Z.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},_.uniqueSort=function(t){var e,n=[],r=0,o=0;if(l=!p.sortStable,a=!p.sortStable&&i.call(t,0),A.call(t,N),l){for(;e=t[o++];)e===t[o]&&(r=n.push(o));for(;r--;)S.call(t,n[r],1)}return a=null,t},_.fn.uniqueSort=function(){return this.pushStack(_.uniqueSort(i.apply(this)))},r=_.expr={cacheLength:50,createPseudo:et,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Y,J),t[3]=(t[3]||t[4]||t[5]||"").replace(Y,J),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||Z.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&Z.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return V.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&G.test(n)&&(e=ct(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(Y,J).toLowerCase();return"*"===t?function(){return!0}:function(t){return T(t,e)}},CLASS:function(t){var e=x[t+" "];return e||(e=new RegExp("(^|"+C+")"+t+"("+C+"|$)"))&&x(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=Z.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(R," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,l){var u,c,f,h,p,d=o!==a?"nextSibling":"previousSibling",g=e.parentNode,v=s&&e.nodeName.toLowerCase(),b=!l&&!s,x=!1;if(g){if(o){for(;d;){for(f=e;f=f[d];)if(s?T(f,v):1===f.nodeType)return!1;p=d="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?g.firstChild:g.lastChild],a&&b){for(x=(h=(u=(c=g[y]||(g[y]={}))[t]||[])[0]===m&&u[1])&&u[2],f=h&&g.childNodes[h];f=++h&&f&&f[d]||(x=h=0)||p.pop();)if(1===f.nodeType&&++x&&f===e){c[t]=[m,h,x];break}}else if(b&&(x=h=(u=(c=e[y]||(e[y]={}))[t]||[])[0]===m&&u[1]),!1===x)for(;(f=++h&&f&&f[d]||(x=h=0)||p.pop())&&(!(s?T(f,v):1===f.nodeType)||!++x||(b&&((c=f[y]||(f[y]={}))[t]=[m,x]),f!==e)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||Z.error("unsupported pseudo: "+t);return i[y]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?et((function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=s.call(t,o[a])]=!(n[r]=o[a])})):function(t){return i(t,0,n)}):i}},pseudos:{not:et((function(t){var e=[],n=[],r=yt(t.replace(E,"$1"));return r[y]?et((function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:et((function(t){return function(e){return Z(t,e).length>0}})),contains:et((function(t){return t=t.replace(Y,J),function(e){return(e.textContent||_.text(e)).indexOf(t)>-1}})),lang:et((function(t){return B.test(t||"")||Z.error("unsupported lang: "+t),t=t.replace(Y,J).toLowerCase(),function(e){var n;do{if(n=h?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===function(){try{return u.activeElement}catch(t){}}()&&u.hasFocus()&&!!(t.type||t.href||~t.tabIndex)},enabled:ot(!1),disabled:ot(!0),checked:function(t){return T(t,"input")&&!!t.checked||T(t,"option")&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return W.test(t.nodeName)},input:function(t){return F.test(t.nodeName)},button:function(t){return T(t,"input")&&"button"===t.type||T(t,"button")},text:function(t){var e;return T(t,"input")&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:at((function(){return[0]})),last:at((function(t,e){return[e-1]})),eq:at((function(t,e,n){return[n<0?n+e:n]})),even:at((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:at((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:at((function(t,e,n){var r;for(r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:at((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=rt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=it(e);function ut(){}function ct(t,e){var n,i,o,a,s,l,u,c=w[t+" "];if(c)return e?0:c.slice(0);for(s=t,l=[],u=r.preFilter;s;){for(a in n&&!(i=H.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),n=!1,(i=I.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(E," ")}),s=s.slice(n.length)),r.filter)!(i=V[a].exec(s))||u[a]&&!(i=u[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?Z.error(t):w(t,l).slice(0)}function ft(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function ht(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=b++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,l){var u,c,f=[m,s];if(l){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,l))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(c=e[y]||(e[y]={}),i&&T(e,i))e=e[r]||e;else{if((u=c[o])&&u[0]===m&&u[1]===s)return f[2]=u[2];if(c[o]=f,f[2]=t(e,n,l))return!0}return!1}}function pt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function dt(t,e,n,r,i){for(var o,a=[],s=0,l=t.length,u=null!=e;s<l;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),u&&e.push(s)));return a}function gt(t,e,n,r,i,o){return r&&!r[y]&&(r=gt(r)),i&&!i[y]&&(i=gt(i,o)),et((function(o,a,l,u){var c,f,h,p,d=[],g=[],y=a.length,m=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)Z(t,e[r],n);return n}(e||"*",l.nodeType?[l]:l,[]),b=!t||!o&&e?m:dt(m,d,t,l,u);if(n?n(b,p=i||(o?t:y||r)?[]:a,l,u):p=b,r)for(c=dt(p,g),r(c,[],l,u),f=c.length;f--;)(h=c[f])&&(p[g[f]]=!(b[g[f]]=h));if(o){if(i||t){if(i){for(c=[],f=p.length;f--;)(h=p[f])&&c.push(b[f]=h);i(null,p=[],c,u)}for(f=p.length;f--;)(h=p[f])&&(c=i?s.call(o,h):d[f])>-1&&(o[c]=!(a[c]=h))}}else p=dt(p===a?p.splice(y,p.length):p),i?i(null,a,p,u):v.apply(a,p)}))}function vt(t){for(var e,n,i,a=t.length,l=r.relative[t[0].type],u=l||r.relative[" "],c=l?1:0,f=ht((function(t){return t===e}),u,!0),h=ht((function(t){return s.call(e,t)>-1}),u,!0),p=[function(t,n,r){var i=!l&&(r||n!=o)||((e=n).nodeType?f(t,n,r):h(t,n,r));return e=null,i}];c<a;c++)if(n=r.relative[t[c].type])p=[ht(pt(p),n)];else{if((n=r.filter[t[c].type].apply(null,t[c].matches))[y]){for(i=++c;i<a&&!r.relative[t[i].type];i++);return gt(c>1&&pt(p),c>1&&ft(t.slice(0,c-1).concat({value:" "===t[c-2].type?"*":""})).replace(E,"$1"),n,c<i&&vt(t.slice(c,i)),i<a&&vt(t=t.slice(i)),i<a&&ft(t))}p.push(n)}return pt(p)}function yt(t,e){var n,i=[],a=[],s=k[t+" "];if(!s){for(e||(e=ct(t)),n=e.length;n--;)(s=vt(e[n]))[y]?i.push(s):a.push(s);s=k(t,function(t,e){var n=e.length>0,i=t.length>0,a=function(a,s,l,c,f){var p,d,g,y=0,b="0",x=a&&[],w=[],k=o,T=a||i&&r.find.TAG("*",f),A=m+=null==k?1:Math.random()||.1,S=T.length;for(f&&(o=s==u||s||f);b!==S&&null!=(p=T[b]);b++){if(i&&p){for(d=0,s||p.ownerDocument==u||(lt(p),l=!h);g=t[d++];)if(g(p,s||u,l)){v.call(c,p);break}f&&(m=A)}n&&((p=!g&&p)&&y--,a&&x.push(p))}if(y+=b,n&&b!==y){for(d=0;g=e[d++];)g(x,w,s,l);if(a){if(y>0)for(;b--;)x[b]||w[b]||(w[b]=M.call(c));w=dt(w)}v.apply(c,w),f&&!a&&w.length>0&&y+e.length>1&&_.uniqueSort(c)}return f&&(m=A,o=k),x};return n?et(a):a}(a,i)),s.selector=t}return s}function mt(t,e,n,i){var o,a,s,l,u,c="function"==typeof t&&t,f=!i&&ct(t=c.selector||t);if(n=n||[],1===f.length){if((a=f[0]=f[0].slice(0)).length>2&&"ID"===(s=a[0]).type&&9===e.nodeType&&h&&r.relative[a[1].type]){if(!(e=(r.find.ID(s.matches[0].replace(Y,J),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(a.shift().value.length)}for(o=V.needsContext.test(t)?0:a.length;o--&&(s=a[o],!r.relative[l=s.type]);)if((u=r.find[l])&&(i=u(s.matches[0].replace(Y,J),U.test(a[0].type)&&st(e.parentNode)||e))){if(a.splice(o,1),!(t=i.length&&ft(a)))return v.apply(n,i),n;break}}return(c||yt(t,f))(i,e,!h,n,!e||U.test(t)&&st(e.parentNode)||e),n}ut.prototype=r.filters=r.pseudos,r.setFilters=new ut,p.sortStable=y.split("").sort(N).join("")===y,lt(),p.sortDetached=nt((function(t){return 1&t.compareDocumentPosition(u.createElement("fieldset"))})),_.find=Z,_.expr[":"]=_.expr.pseudos,_.unique=_.uniqueSort,Z.compile=yt,Z.select=mt,Z.setDocument=lt,Z.tokenize=ct,Z.escape=_.escapeSelector,Z.getText=_.text,Z.isXML=_.isXMLDoc,Z.selectors=_.expr,Z.support=_.support,Z.uniqueSort=_.uniqueSort}();var O=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&_(t).is(n))break;r.push(t)}return r},L=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},P=_.expr.match.needsContext,q=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function R(t,e,n){return d(e)?_.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?_.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?_.grep(t,(function(t){return s.call(e,t)>-1!==n})):_.filter(e,t,n)}_.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?_.find.matchesSelector(r,t)?[r]:[]:_.find.matches(t,_.grep(e,(function(t){return 1===t.nodeType})))},_.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(_(t).filter((function(){for(e=0;e<r;e++)if(_.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)_.find(t,i[e],n);return r>1?_.uniqueSort(n):n},filter:function(t){return this.pushStack(R(this,t||[],!1))},not:function(t){return this.pushStack(R(this,t||[],!0))},is:function(t){return!!R(this,"string"==typeof t&&P.test(t)?_(t):t||[],!1).length}});var H,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,z=_.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||H,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:I.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof _?e[0]:e,_.merge(this,_.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:v,!0)),q.test(r[1])&&_.isPlainObject(e))for(r in e)d(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=v.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):d(t)?void 0!==n.ready?n.ready(t):t(_):_.makeArray(t,this)};z.prototype=_.fn,H=_(v);var G=/^(?:parents|prev(?:Until|All))/,B={children:!0,contents:!0,next:!0,prev:!0};function V(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}_.fn.extend({has:function(t){var e=_(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(_.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&_(t);if(!P.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&_.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?_.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?s.call(_(t),this[0]):s.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),_.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return O(t,"parentNode")},parentsUntil:function(t,e,n){return O(t,"parentNode",n)},next:function(t){return V(t,"nextSibling")},prev:function(t){return V(t,"previousSibling")},nextAll:function(t){return O(t,"nextSibling")},prevAll:function(t){return O(t,"previousSibling")},nextUntil:function(t,e,n){return O(t,"nextSibling",n)},prevUntil:function(t,e,n){return O(t,"previousSibling",n)},siblings:function(t){return L((t.parentNode||{}).firstChild,t)},children:function(t){return L(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(T(t,"template")&&(t=t.content||t),_.merge([],t.childNodes))}},(function(t,e){_.fn[t]=function(n,r){var i=_.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=_.filter(r,i)),this.length>1&&(B[t]||_.uniqueSort(i),G.test(t)&&i.reverse()),this.pushStack(i)}}));var F=/[^\x20\t\r\n\f]+/g;function W(t){return t}function X(t){throw t}function U(t,e,n,r){var i;try{t&&d(i=t.promise)?i.call(t).done(e).fail(n):t&&d(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}_.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return _.each(t.match(F)||[],(function(t,n){e[n]=!0})),e}(t):_.extend({},t);var e,n,r,i,o=[],a=[],s=-1,l=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){_.each(n,(function(n,r){d(r)?t.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==b(r)&&e(r)}))}(arguments),n&&!e&&l()),this},remove:function(){return _.each(arguments,(function(t,e){for(var n;(n=_.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?_.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},_.extend({Deferred:function(e){var n=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return _.Deferred((function(e){_.each(n,(function(n,r){var i=d(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&d(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(e,r,i){var o=0;function a(e,n,r,i){return function(){var s=this,l=arguments,u=function(){var t,u;if(!(e<o)){if((t=r.apply(s,l))===n.promise())throw new TypeError("Thenable self-resolution");u=t&&("object"==typeof t||"function"==typeof t)&&t.then,d(u)?i?u.call(t,a(o,n,W,i),a(o,n,X,i)):(o++,u.call(t,a(o,n,W,i),a(o,n,X,i),a(o,n,W,n.notifyWith))):(r!==W&&(s=void 0,l=[t]),(i||n.resolveWith)(s,l))}},c=i?u:function(){try{u()}catch(t){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(t,c.error),e+1>=o&&(r!==X&&(s=void 0,l=[t]),n.rejectWith(s,l))}};e?c():(_.Deferred.getErrorHook?c.error=_.Deferred.getErrorHook():_.Deferred.getStackHook&&(c.error=_.Deferred.getStackHook()),t.setTimeout(c))}}return _.Deferred((function(t){n[0][3].add(a(0,t,d(i)?i:W,t.notifyWith)),n[1][3].add(a(0,t,d(e)?e:W)),n[2][3].add(a(0,t,d(r)?r:X))})).promise()},promise:function(t){return null!=t?_.extend(t,i):i}},o={};return _.each(n,(function(t,e){var a=e[2],s=e[5];i[e[1]]=a.add,s&&a.add((function(){r=s}),n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),a.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),o=i.call(arguments),a=_.Deferred(),s=function(t){return function(n){r[t]=this,o[t]=arguments.length>1?i.call(arguments):n,--e||a.resolveWith(r,o)}};if(e<=1&&(U(t,a.done(s(n)).resolve,a.reject,!e),"pending"===a.state()||d(o[n]&&o[n].then)))return a.then();for(;n--;)U(o[n],s(n),a.reject);return a.promise()}});var Y=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&Y.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},_.readyException=function(e){t.setTimeout((function(){throw e}))};var J=_.Deferred();function K(){v.removeEventListener("DOMContentLoaded",K),t.removeEventListener("load",K),_.ready()}_.fn.ready=function(t){return J.then(t).catch((function(t){_.readyException(t)})),this},_.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--_.readyWait:_.isReady)||(_.isReady=!0,!0!==t&&--_.readyWait>0||J.resolveWith(v,[_]))}}),_.ready.then=J.then,"complete"===v.readyState||"loading"!==v.readyState&&!v.documentElement.doScroll?t.setTimeout(_.ready):(v.addEventListener("DOMContentLoaded",K),t.addEventListener("load",K));var Q=function(t,e,n,r,i,o,a){var s=0,l=t.length,u=null==n;if("object"===b(n))for(s in i=!0,n)Q(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,d(r)||(a=!0),u&&(a?(e.call(t,r),e=null):(u=e,e=function(t,e,n){return u.call(_(t),n)})),e))for(;s<l;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:u?e.call(t):l?e(t[0],n):o},Z=/^-ms-/,tt=/-([a-z])/g;function et(t,e){return e.toUpperCase()}function nt(t){return t.replace(Z,"ms-").replace(tt,et)}var rt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function it(){this.expando=_.expando+it.uid++}it.uid=1,it.prototype={cache:function(t){var e=t[this.expando];return e||(e={},rt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[nt(e)]=n;else for(r in e)i[nt(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][nt(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(nt):(e=nt(e))in r?[e]:e.match(F)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||_.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!_.isEmptyObject(e)}};var ot=new it,at=new it,st=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,lt=/[A-Z]/g;function ut(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(lt,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:st.test(t)?JSON.parse(t):t)}(n)}catch(t){}at.set(t,e,n)}else n=void 0;return n}_.extend({hasData:function(t){return at.hasData(t)||ot.hasData(t)},data:function(t,e,n){return at.access(t,e,n)},removeData:function(t,e){at.remove(t,e)},_data:function(t,e,n){return ot.access(t,e,n)},_removeData:function(t,e){ot.remove(t,e)}}),_.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=at.get(o),1===o.nodeType&&!ot.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=nt(r.slice(5)),ut(o,r,i[r]));ot.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){at.set(this,t)})):Q(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=at.get(o,t))||void 0!==(n=ut(o,t))?n:void 0;this.each((function(){at.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){at.remove(this,t)}))}}),_.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=ot.get(t,e),n&&(!r||Array.isArray(n)?r=ot.access(t,e,_.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=_.queue(t,e),r=n.length,i=n.shift(),o=_._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){_.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return ot.get(t,n)||ot.access(t,n,{empty:_.Callbacks("once memory").add((function(){ot.remove(t,[e+"queue",n])}))})}}),_.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?_.queue(this[0],t):void 0===e?this:this.each((function(){var n=_.queue(this,t,e);_._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&_.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){_.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=_.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=ot.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var ct=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ft=new RegExp("^(?:([+-])=|)("+ct+")([a-z%]*)$","i"),ht=["Top","Right","Bottom","Left"],pt=v.documentElement,dt=function(t){return _.contains(t.ownerDocument,t)},gt={composed:!0};pt.getRootNode&&(dt=function(t){return _.contains(t.ownerDocument,t)||t.getRootNode(gt)===t.ownerDocument});var vt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&dt(t)&&"none"===_.css(t,"display")};function yt(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return _.css(t,e,"")},l=s(),u=n&&n[3]||(_.cssNumber[e]?"":"px"),c=t.nodeType&&(_.cssNumber[e]||"px"!==u&&+l)&&ft.exec(_.css(t,e));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)_.style(t,e,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,_.style(t,e,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var mt={};function bt(t){var e,n=t.ownerDocument,r=t.nodeName,i=mt[r];return i||(e=n.body.appendChild(n.createElement(r)),i=_.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),mt[r]=i,i)}function xt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=ot.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&vt(r)&&(i[o]=bt(r))):"none"!==n&&(i[o]="none",ot.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}_.fn.extend({show:function(){return xt(this,!0)},hide:function(){return xt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){vt(this)?_(this).show():_(this).hide()}))}});var wt,_t,kt=/^(?:checkbox|radio)$/i,Tt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Mt=/^$|^module$|\/(?:java|ecma)script/i;wt=v.createDocumentFragment().appendChild(v.createElement("div")),(_t=v.createElement("input")).setAttribute("type","radio"),_t.setAttribute("checked","checked"),_t.setAttribute("name","t"),wt.appendChild(_t),p.checkClone=wt.cloneNode(!0).cloneNode(!0).lastChild.checked,wt.innerHTML="<textarea>x</textarea>",p.noCloneChecked=!!wt.cloneNode(!0).lastChild.defaultValue,wt.innerHTML="<option></option>",p.option=!!wt.lastChild;var At={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function St(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&T(t,e)?_.merge([t],n):n}function Ct(t,e){for(var n=0,r=t.length;n<r;n++)ot.set(t[n],"globalEval",!e||ot.get(e[n],"globalEval"))}At.tbody=At.tfoot=At.colgroup=At.caption=At.thead,At.th=At.td,p.option||(At.optgroup=At.option=[1,"<select multiple='multiple'>","</select>"]);var Et=/<|&#?\w+;/;function $t(t,e,n,r,i){for(var o,a,s,l,u,c,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===b(o))_.merge(h,o.nodeType?[o]:o);else if(Et.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(Tt.exec(o)||["",""])[1].toLowerCase(),l=At[s]||At._default,a.innerHTML=l[1]+_.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;_.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(r&&_.inArray(o,r)>-1)i&&i.push(o);else if(u=dt(o),a=St(f.appendChild(o),"script"),u&&Ct(a),n)for(c=0;o=a[c++];)Mt.test(o.type||"")&&n.push(o);return f}var Nt=/^([^.]*)(?:\.(.+)|)/;function Dt(){return!0}function jt(){return!1}function Ot(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)Ot(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=jt;else if(!i)return t;return 1===o&&(a=i,i=function(t){return _().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=_.guid++)),t.each((function(){_.event.add(this,e,i,r,n)}))}function Lt(t,e,n){n?(ot.set(t,e,!1),_.event.add(t,e,{namespace:!1,handler:function(t){var n,r=ot.get(this,e);if(1&t.isTrigger&&this[e]){if(r)(_.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=i.call(arguments),ot.set(this,e,r),this[e](),n=ot.get(this,e),ot.set(this,e,!1),r!==n)return t.stopImmediatePropagation(),t.preventDefault(),n}else r&&(ot.set(this,e,_.event.trigger(r[0],r.slice(1),this)),t.stopPropagation(),t.isImmediatePropagationStopped=Dt)}})):void 0===ot.get(t,e)&&_.event.add(t,e,Dt)}_.event={global:{},add:function(t,e,n,r,i){var o,a,s,l,u,c,f,h,p,d,g,v=ot.get(t);if(rt(t))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&_.find.matchesSelector(pt,i),n.guid||(n.guid=_.guid++),(l=v.events)||(l=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return void 0!==_&&_.event.triggered!==e.type?_.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(F)||[""]).length;u--;)p=g=(s=Nt.exec(e[u])||[])[1],d=(s[2]||"").split(".").sort(),p&&(f=_.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=_.event.special[p]||{},c=_.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&_.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=l[p])||((h=l[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,d,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,c):h.push(c),_.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,s,l,u,c,f,h,p,d,g,v=ot.hasData(t)&&ot.get(t);if(v&&(l=v.events)){for(u=(e=(e||"").match(F)||[""]).length;u--;)if(p=g=(s=Nt.exec(e[u])||[])[1],d=(s[2]||"").split(".").sort(),p){for(f=_.event.special[p]||{},h=l[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(t,c));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,d,v.handle)||_.removeEvent(t,p,v.handle),delete l[p])}else for(p in l)_.event.remove(t,p+e[u],n,r,!0);_.isEmptyObject(l)&&ot.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=new Array(arguments.length),l=_.event.fix(t),u=(ot.get(this,"events")||Object.create(null))[l.type]||[],c=_.event.special[l.type]||{};for(s[0]=l,e=1;e<arguments.length;e++)s[e]=arguments[e];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=_.event.handlers.call(this,l,u),e=0;(i=a[e++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(r=((_.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,r,i,o,a,s=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?_(i,this).index(u)>-1:_.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<e.length&&s.push({elem:u,handlers:e.slice(l)}),s},addProp:function(t,e){Object.defineProperty(_.Event.prototype,t,{enumerable:!0,configurable:!0,get:d(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[_.expando]?t:new _.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return kt.test(e.type)&&e.click&&T(e,"input")&&Lt(e,"click",!0),!1},trigger:function(t){var e=this||t;return kt.test(e.type)&&e.click&&T(e,"input")&&Lt(e,"click"),!0},_default:function(t){var e=t.target;return kt.test(e.type)&&e.click&&T(e,"input")&&ot.get(e,"click")||T(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},_.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},_.Event=function(t,e){if(!(this instanceof _.Event))return new _.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Dt:jt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&_.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:jt,isPropagationStopped:jt,isImmediatePropagationStopped:jt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Dt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Dt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Dt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},_.event.addProp),_.each({focus:"focusin",blur:"focusout"},(function(t,e){function n(t){if(v.documentMode){var n=ot.get(this,"handle"),r=_.event.fix(t);r.type="focusin"===t.type?"focus":"blur",r.isSimulated=!0,n(t),r.target===r.currentTarget&&n(r)}else _.event.simulate(e,t.target,_.event.fix(t))}_.event.special[t]={setup:function(){var r;if(Lt(this,t,!0),!v.documentMode)return!1;(r=ot.get(this,e))||this.addEventListener(e,n),ot.set(this,e,(r||0)+1)},trigger:function(){return Lt(this,t),!0},teardown:function(){var t;if(!v.documentMode)return!1;(t=ot.get(this,e)-1)?ot.set(this,e,t):(this.removeEventListener(e,n),ot.remove(this,e))},_default:function(e){return ot.get(e.target,t)},delegateType:e},_.event.special[e]={setup:function(){var r=this.ownerDocument||this.document||this,i=v.documentMode?this:r,o=ot.get(i,e);o||(v.documentMode?this.addEventListener(e,n):r.addEventListener(t,n,!0)),ot.set(i,e,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=v.documentMode?this:r,o=ot.get(i,e)-1;o?ot.set(i,e,o):(v.documentMode?this.removeEventListener(e,n):r.removeEventListener(t,n,!0),ot.remove(i,e))}}})),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){_.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||_.contains(this,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}})),_.fn.extend({on:function(t,e,n,r){return Ot(this,t,e,n,r)},one:function(t,e,n,r){return Ot(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,_(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=jt),this.each((function(){_.event.remove(this,t,n,e)}))}});var Pt=/<script|<style|<link/i,qt=/checked\s*(?:[^=]|=\s*.checked.)/i,Rt=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Ht(t,e){return T(t,"table")&&T(11!==e.nodeType?e:e.firstChild,"tr")&&_(t).children("tbody")[0]||t}function It(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function zt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Gt(t,e){var n,r,i,o,a,s;if(1===e.nodeType){if(ot.hasData(t)&&(s=ot.get(t).events))for(i in ot.remove(e,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)_.event.add(e,i,s[i][n]);at.hasData(t)&&(o=at.access(t),a=_.extend({},o),at.set(e,a))}}function Bt(t,e){var n=e.nodeName.toLowerCase();"input"===n&&kt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Vt(t,e,n,r){e=o(e);var i,a,s,l,u,c,f=0,h=t.length,g=h-1,v=e[0],y=d(v);if(y||h>1&&"string"==typeof v&&!p.checkClone&&qt.test(v))return t.each((function(i){var o=t.eq(i);y&&(e[0]=v.call(this,i,o.html())),Vt(o,e,n,r)}));if(h&&(a=(i=$t(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=a),a||r)){for(l=(s=_.map(St(i,"script"),It)).length;f<h;f++)u=i,f!==g&&(u=_.clone(u,!0,!0),l&&_.merge(s,St(u,"script"))),n.call(t[f],u,f);if(l)for(c=s[s.length-1].ownerDocument,_.map(s,zt),f=0;f<l;f++)u=s[f],Mt.test(u.type||"")&&!ot.access(u,"globalEval")&&_.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?_._evalUrl&&!u.noModule&&_._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):m(u.textContent.replace(Rt,""),u,c))}return t}function Ft(t,e,n){for(var r,i=e?_.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||_.cleanData(St(r)),r.parentNode&&(n&&dt(r)&&Ct(St(r,"script")),r.parentNode.removeChild(r));return t}_.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),l=dt(t);if(!(p.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||_.isXMLDoc(t)))for(a=St(s),r=0,i=(o=St(t)).length;r<i;r++)Bt(o[r],a[r]);if(e)if(n)for(o=o||St(t),a=a||St(s),r=0,i=o.length;r<i;r++)Gt(o[r],a[r]);else Gt(t,s);return(a=St(s,"script")).length>0&&Ct(a,!l&&St(t,"script")),s},cleanData:function(t){for(var e,n,r,i=_.event.special,o=0;void 0!==(n=t[o]);o++)if(rt(n)){if(e=n[ot.expando]){if(e.events)for(r in e.events)i[r]?_.event.remove(n,r):_.removeEvent(n,r,e.handle);n[ot.expando]=void 0}n[at.expando]&&(n[at.expando]=void 0)}}}),_.fn.extend({detach:function(t){return Ft(this,t,!0)},remove:function(t){return Ft(this,t)},text:function(t){return Q(this,(function(t){return void 0===t?_.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Vt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ht(this,t).appendChild(t)}))},prepend:function(){return Vt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ht(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Vt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Vt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(_.cleanData(St(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return _.clone(this,t,e)}))},html:function(t){return Q(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Pt.test(t)&&!At[(Tt.exec(t)||["",""])[1].toLowerCase()]){t=_.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(_.cleanData(St(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Vt(this,arguments,(function(e){var n=this.parentNode;_.inArray(this,t)<0&&(_.cleanData(St(this)),n&&n.replaceChild(e,this))}),t)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){_.fn[t]=function(t){for(var n,r=[],i=_(t),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),_(i[s])[e](n),a.apply(r,n.get());return this.pushStack(r)}}));var Wt=new RegExp("^("+ct+")(?!px)[a-z%]+$","i"),Xt=/^--/,Ut=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Yt=function(t,e,n){var r,i,o={};for(i in e)o[i]=t.style[i],t.style[i]=e[i];for(i in r=n.call(t),e)t.style[i]=o[i];return r},Jt=new RegExp(ht.join("|"),"i");function Kt(t,e,n){var r,i,o,a,s=Xt.test(e),l=t.style;return(n=n||Ut(t))&&(a=n.getPropertyValue(e)||n[e],s&&a&&(a=a.replace(E,"$1")||void 0),""!==a||dt(t)||(a=_.style(t,e)),!p.pixelBoxStyles()&&Wt.test(a)&&Jt.test(e)&&(r=l.width,i=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=i,l.maxWidth=o)),void 0!==a?a+"":a}function Qt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",pt.appendChild(u).appendChild(c);var e=t.getComputedStyle(c);r="1%"!==e.top,l=12===n(e.marginLeft),c.style.right="60%",a=36===n(e.right),i=36===n(e.width),c.style.position="absolute",o=12===n(c.offsetWidth/3),pt.removeChild(u),c=null}}function n(t){return Math.round(parseFloat(t))}var r,i,o,a,s,l,u=v.createElement("div"),c=v.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",p.clearCloneStyle="content-box"===c.style.backgroundClip,_.extend(p,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,n,r,i;return null==s&&(e=v.createElement("table"),n=v.createElement("tr"),r=v.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",n.style.cssText="box-sizing:content-box;border:1px solid",n.style.height="1px",r.style.height="9px",r.style.display="block",pt.appendChild(e).appendChild(n).appendChild(r),i=t.getComputedStyle(n),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===n.offsetHeight,pt.removeChild(e)),s}}))}();var Zt=["Webkit","Moz","ms"],te=v.createElement("div").style,ee={};function ne(t){var e=_.cssProps[t]||ee[t];return e||(t in te?t:ee[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Zt.length;n--;)if((t=Zt[n]+e)in te)return t}(t)||t)}var re=/^(none|table(?!-c[ea]).+)/,ie={position:"absolute",visibility:"hidden",display:"block"},oe={letterSpacing:"0",fontWeight:"400"};function ae(t,e,n){var r=ft.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function se(t,e,n,r,i,o){var a="width"===e?1:0,s=0,l=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=_.css(t,n+ht[a],!0,i)),r?("content"===n&&(l-=_.css(t,"padding"+ht[a],!0,i)),"margin"!==n&&(l-=_.css(t,"border"+ht[a]+"Width",!0,i))):(l+=_.css(t,"padding"+ht[a],!0,i),"padding"!==n?l+=_.css(t,"border"+ht[a]+"Width",!0,i):s+=_.css(t,"border"+ht[a]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-s-.5))||0),l+u}function le(t,e,n){var r=Ut(t),i=(!p.boxSizingReliable()||n)&&"border-box"===_.css(t,"boxSizing",!1,r),o=i,a=Kt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(Wt.test(a)){if(!n)return a;a="auto"}return(!p.boxSizingReliable()&&i||!p.reliableTrDimensions()&&T(t,"tr")||"auto"===a||!parseFloat(a)&&"inline"===_.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===_.css(t,"boxSizing",!1,r),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+se(t,e,n||(i?"border":"content"),o,r,a)+"px"}function ue(t,e,n,r,i){return new ue.prototype.init(t,e,n,r,i)}_.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Kt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=nt(e),l=Xt.test(e),u=t.style;if(l||(e=ne(s)),a=_.cssHooks[e]||_.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:u[e];"string"===(o=typeof n)&&(i=ft.exec(n))&&i[1]&&(n=yt(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(_.cssNumber[s]?"":"px")),p.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(l?u.setProperty(e,n):u[e]=n))}},css:function(t,e,n,r){var i,o,a,s=nt(e);return Xt.test(e)||(e=ne(s)),(a=_.cssHooks[e]||_.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=Kt(t,e,r)),"normal"===i&&e in oe&&(i=oe[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),_.each(["height","width"],(function(t,e){_.cssHooks[e]={get:function(t,n,r){if(n)return!re.test(_.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?le(t,e,r):Yt(t,ie,(function(){return le(t,e,r)}))},set:function(t,n,r){var i,o=Ut(t),a=!p.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===_.css(t,"boxSizing",!1,o),l=r?se(t,e,r,s,o):0;return s&&a&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-se(t,e,"border",!1,o)-.5)),l&&(i=ft.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=_.css(t,e)),ae(0,n,l)}}})),_.cssHooks.marginLeft=Qt(p.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Kt(t,"marginLeft"))||t.getBoundingClientRect().left-Yt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),_.each({margin:"",padding:"",border:"Width"},(function(t,e){_.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ht[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(_.cssHooks[t+e].set=ae)})),_.fn.extend({css:function(t,e){return Q(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Ut(t),i=e.length;a<i;a++)o[e[a]]=_.css(t,e[a],!1,r);return o}return void 0!==n?_.style(t,e,n):_.css(t,e)}),t,e,arguments.length>1)}}),_.Tween=ue,ue.prototype={constructor:ue,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||_.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(_.cssNumber[n]?"":"px")},cur:function(){var t=ue.propHooks[this.prop];return t&&t.get?t.get(this):ue.propHooks._default.get(this)},run:function(t){var e,n=ue.propHooks[this.prop];return this.options.duration?this.pos=e=_.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ue.propHooks._default.set(this),this}},ue.prototype.init.prototype=ue.prototype,ue.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=_.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){_.fx.step[t.prop]?_.fx.step[t.prop](t):1!==t.elem.nodeType||!_.cssHooks[t.prop]&&null==t.elem.style[ne(t.prop)]?t.elem[t.prop]=t.now:_.style(t.elem,t.prop,t.now+t.unit)}}},ue.propHooks.scrollTop=ue.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},_.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},_.fx=ue.prototype.init,_.fx.step={};var ce,fe,he=/^(?:toggle|show|hide)$/,pe=/queueHooks$/;function de(){fe&&(!1===v.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(de):t.setTimeout(de,_.fx.interval),_.fx.tick())}function ge(){return t.setTimeout((function(){ce=void 0})),ce=Date.now()}function ve(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ht[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function ye(t,e,n){for(var r,i=(me.tweeners[e]||[]).concat(me.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function me(t,e,n){var r,i,o=0,a=me.prefilters.length,s=_.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var e=ce||ge(),n=Math.max(0,u.startTime+u.duration-e),r=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(r);return s.notifyWith(t,[u,r,n]),r<1&&a?n:(a||s.notifyWith(t,[u,1,0]),s.resolveWith(t,[u]),!1)},u=s.promise({elem:t,props:_.extend({},e),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},n),originalProperties:e,originalOptions:n,startTime:ce||ge(),duration:n.duration,tweens:[],createTween:function(e,n){var r=_.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(r),r},stop:function(e){var n=0,r=e?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return e?(s.notifyWith(t,[u,1,0]),s.resolveWith(t,[u,e])):s.rejectWith(t,[u,e]),this}}),c=u.props;for(!function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=nt(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=_.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(c,u.opts.specialEasing);o<a;o++)if(r=me.prefilters[o].call(u,t,c,u.opts))return d(r.stop)&&(_._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return _.map(c,ye,u),d(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),_.fx.timer(_.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u}_.Animation=_.extend(me,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return yt(n.elem,t,ft.exec(e),n),n}]},tweener:function(t,e){d(t)?(e=t,t=["*"]):t=t.match(F);for(var n,r=0,i=t.length;r<i;r++)n=t[r],me.tweeners[n]=me.tweeners[n]||[],me.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,l,u,c,f="width"in e||"height"in e,h=this,p={},d=t.style,g=t.nodeType&&vt(t),v=ot.get(t,"fxshow");for(r in n.queue||(null==(a=_._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,_.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],he.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}p[r]=v&&v[r]||_.style(t,r)}if((l=!_.isEmptyObject(e))||!_.isEmptyObject(p))for(r in f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(u=v&&v.display)&&(u=ot.get(t,"display")),"none"===(c=_.css(t,"display"))&&(u?c=u:(xt([t],!0),u=t.style.display||u,c=_.css(t,"display"),xt([t]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===_.css(t,"float")&&(l||(h.done((function(){d.display=u})),null==u&&(c=d.display,u="none"===c?"":c)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),l=!1,p)l||(v?"hidden"in v&&(g=v.hidden):v=ot.access(t,"fxshow",{display:u}),o&&(v.hidden=!g),g&&xt([t],!0),h.done((function(){for(r in g||xt([t]),ot.remove(t,"fxshow"),p)_.style(t,r,p[r])}))),l=ye(g?v[r]:0,r,h),r in v||(v[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?me.prefilters.unshift(t):me.prefilters.push(t)}}),_.speed=function(t,e,n){var r=t&&"object"==typeof t?_.extend({},t):{complete:n||!n&&e||d(t)&&t,duration:t,easing:n&&e||e&&!d(e)&&e};return _.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in _.fx.speeds?r.duration=_.fx.speeds[r.duration]:r.duration=_.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){d(r.old)&&r.old.call(this),r.queue&&_.dequeue(this,r.queue)},r},_.fn.extend({fadeTo:function(t,e,n,r){return this.filter(vt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=_.isEmptyObject(t),o=_.speed(e,n,r),a=function(){var e=me(this,_.extend({},t),o);(i||ot.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=_.timers,a=ot.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&pe.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||_.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=ot.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=_.timers,a=r?r.length:0;for(n.finish=!0,_.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),_.each(["toggle","show","hide"],(function(t,e){var n=_.fn[e];_.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(ve(e,!0),t,r,i)}})),_.each({slideDown:ve("show"),slideUp:ve("hide"),slideToggle:ve("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){_.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),_.timers=[],_.fx.tick=function(){var t,e=0,n=_.timers;for(ce=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||_.fx.stop(),ce=void 0},_.fx.timer=function(t){_.timers.push(t),_.fx.start()},_.fx.interval=13,_.fx.start=function(){fe||(fe=!0,de())},_.fx.stop=function(){fe=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(e,n){return e=_.fx&&_.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,r){var i=t.setTimeout(n,e);r.stop=function(){t.clearTimeout(i)}}))},function(){var t=v.createElement("input"),e=v.createElement("select").appendChild(v.createElement("option"));t.type="checkbox",p.checkOn=""!==t.value,p.optSelected=e.selected,(t=v.createElement("input")).value="t",t.type="radio",p.radioValue="t"===t.value}();var be,xe=_.expr.attrHandle;_.fn.extend({attr:function(t,e){return Q(this,_.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){_.removeAttr(this,t)}))}}),_.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?_.prop(t,e,n):(1===o&&_.isXMLDoc(t)||(i=_.attrHooks[e.toLowerCase()]||(_.expr.match.bool.test(e)?be:void 0)),void 0!==n?null===n?void _.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=_.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!p.radioValue&&"radio"===e&&T(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(F);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),be={set:function(t,e,n){return!1===e?_.removeAttr(t,n):t.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=xe[e]||_.find.attr;xe[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=xe[a],xe[a]=i,i=null!=n(t,e,r)?a:null,xe[a]=o),i}}));var we=/^(?:input|select|textarea|button)$/i,_e=/^(?:a|area)$/i;function ke(t){return(t.match(F)||[]).join(" ")}function Te(t){return t.getAttribute&&t.getAttribute("class")||""}function Me(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(F)||[]}_.fn.extend({prop:function(t,e){return Q(this,_.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[_.propFix[t]||t]}))}}),_.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&_.isXMLDoc(t)||(e=_.propFix[e]||e,i=_.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=_.find.attr(t,"tabindex");return e?parseInt(e,10):we.test(t.nodeName)||_e.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),p.optSelected||(_.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){_.propFix[this.toLowerCase()]=this})),_.fn.extend({addClass:function(t){var e,n,r,i,o,a;return d(t)?this.each((function(e){_(this).addClass(t.call(this,e,Te(this)))})):(e=Me(t)).length?this.each((function(){if(r=Te(this),n=1===this.nodeType&&" "+ke(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=ke(n),r!==a&&this.setAttribute("class",a)}})):this},removeClass:function(t){var e,n,r,i,o,a;return d(t)?this.each((function(e){_(this).removeClass(t.call(this,e,Te(this)))})):arguments.length?(e=Me(t)).length?this.each((function(){if(r=Te(this),n=1===this.nodeType&&" "+ke(r)+" "){for(o=0;o<e.length;o++)for(i=e[o];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");a=ke(n),r!==a&&this.setAttribute("class",a)}})):this:this.attr("class","")},toggleClass:function(t,e){var n,r,i,o,a=typeof t,s="string"===a||Array.isArray(t);return d(t)?this.each((function(n){_(this).toggleClass(t.call(this,n,Te(this),e),e)})):"boolean"==typeof e&&s?e?this.addClass(t):this.removeClass(t):(n=Me(t),this.each((function(){if(s)for(o=_(this),i=0;i<n.length;i++)r=n[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==a||((r=Te(this))&&ot.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":ot.get(this,"__className__")||""))})))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+ke(Te(n))+" ").indexOf(e)>-1)return!0;return!1}});var Ae=/\r/g;_.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=d(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,_(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=_.map(i,(function(t){return null==t?"":t+""}))),(e=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=_.valHooks[i.type]||_.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Ae,""):null==n?"":n:void 0}}),_.extend({valHooks:{option:{get:function(t){var e=_.find.attr(t,"value");return null!=e?e:ke(_.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!T(n.parentNode,"optgroup"))){if(e=_(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=_.makeArray(e),a=i.length;a--;)((r=i[a]).selected=_.inArray(_.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),_.each(["radio","checkbox"],(function(){_.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=_.inArray(_(t).val(),e)>-1}},p.checkOn||(_.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}));var Se=t.location,Ce={guid:Date.now()},Ee=/\?/;_.parseXML=function(e){var n,r;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){}return r=n&&n.getElementsByTagName("parsererror")[0],n&&!r||_.error("Invalid XML: "+(r?_.map(r.childNodes,(function(t){return t.textContent})).join("\n"):e)),n};var $e=/^(?:focusinfocus|focusoutblur)$/,Ne=function(t){t.stopPropagation()};_.extend(_.event,{trigger:function(e,n,r,i){var o,a,s,l,u,f,h,p,y=[r||v],m=c.call(e,"type")?e.type:e,b=c.call(e,"namespace")?e.namespace.split("."):[];if(a=p=s=r=r||v,3!==r.nodeType&&8!==r.nodeType&&!$e.test(m+_.event.triggered)&&(m.indexOf(".")>-1&&(b=m.split("."),m=b.shift(),b.sort()),u=m.indexOf(":")<0&&"on"+m,(e=e[_.expando]?e:new _.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=b.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),n=null==n?[e]:_.makeArray(n,[e]),h=_.event.special[m]||{},i||!h.trigger||!1!==h.trigger.apply(r,n))){if(!i&&!h.noBubble&&!g(r)){for(l=h.delegateType||m,$e.test(l+m)||(a=a.parentNode);a;a=a.parentNode)y.push(a),s=a;s===(r.ownerDocument||v)&&y.push(s.defaultView||s.parentWindow||t)}for(o=0;(a=y[o++])&&!e.isPropagationStopped();)p=a,e.type=o>1?l:h.bindType||m,(f=(ot.get(a,"events")||Object.create(null))[e.type]&&ot.get(a,"handle"))&&f.apply(a,n),(f=u&&a[u])&&f.apply&&rt(a)&&(e.result=f.apply(a,n),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(y.pop(),n)||!rt(r)||u&&d(r[m])&&!g(r)&&((s=r[u])&&(r[u]=null),_.event.triggered=m,e.isPropagationStopped()&&p.addEventListener(m,Ne),r[m](),e.isPropagationStopped()&&p.removeEventListener(m,Ne),_.event.triggered=void 0,s&&(r[u]=s)),e.result}},simulate:function(t,e,n){var r=_.extend(new _.Event,n,{type:t,isSimulated:!0});_.event.trigger(r,null,e)}}),_.fn.extend({trigger:function(t,e){return this.each((function(){_.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return _.event.trigger(t,e,n,!0)}});var De=/\[\]$/,je=/\r?\n/g,Oe=/^(?:submit|button|image|reset|file)$/i,Le=/^(?:input|select|textarea|keygen)/i;function Pe(t,e,n,r){var i;if(Array.isArray(e))_.each(e,(function(e,i){n||De.test(t)?r(t,i):Pe(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==b(e))r(t,e);else for(i in e)Pe(t+"["+i+"]",e[i],n,r)}_.param=function(t,e){var n,r=[],i=function(t,e){var n=d(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!_.isPlainObject(t))_.each(t,(function(){i(this.name,this.value)}));else for(n in t)Pe(n,t[n],e,i);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=_.prop(this,"elements");return t?_.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!_(this).is(":disabled")&&Le.test(this.nodeName)&&!Oe.test(t)&&(this.checked||!kt.test(t))})).map((function(t,e){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,(function(t){return{name:e.name,value:t.replace(je,"\r\n")}})):{name:e.name,value:n.replace(je,"\r\n")}})).get()}});var qe=/%20/g,Re=/#.*$/,He=/([?&])_=[^&]*/,Ie=/^(.*?):[ \t]*([^\r\n]*)$/gm,ze=/^(?:GET|HEAD)$/,Ge=/^\/\//,Be={},Ve={},Fe="*/".concat("*"),We=v.createElement("a");function Xe(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(F)||[];if(d(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Ue(t,e,n,r){var i={},o=t===Ve;function a(s){var l;return i[s]=!0,_.each(t[s]||[],(function(t,s){var u=s(e,n,r);return"string"!=typeof u||o||i[u]?o?!(l=u):void 0:(e.dataTypes.unshift(u),a(u),!1)})),l}return a(e.dataTypes[0])||!i["*"]&&a("*")}function Ye(t,e){var n,r,i=_.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&_.extend(!0,t,r),t}We.href=Se.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Se.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Se.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Fe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ye(Ye(t,_.ajaxSettings),e):Ye(_.ajaxSettings,t)},ajaxPrefilter:Xe(Be),ajaxTransport:Xe(Ve),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var r,i,o,a,s,l,u,c,f,h,p=_.ajaxSetup({},n),d=p.context||p,g=p.context&&(d.nodeType||d.jquery)?_(d):_.event,y=_.Deferred(),m=_.Callbacks("once memory"),b=p.statusCode||{},x={},w={},k="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(u){if(!a)for(a={};e=Ie.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(t,e){return null==u&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==u&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(u)T.always(t[T.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||k;return r&&r.abort(e),M(0,e),this}};if(y.promise(T),p.url=((e||p.url||Se.href)+"").replace(Ge,Se.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(F)||[""],null==p.crossDomain){l=v.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=We.protocol+"//"+We.host!=l.protocol+"//"+l.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=_.param(p.data,p.traditional)),Ue(Be,p,n,T),u)return T;for(f in(c=_.event&&p.global)&&0==_.active++&&_.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!ze.test(p.type),i=p.url.replace(Re,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(qe,"+")):(h=p.url.slice(i.length),p.data&&(p.processData||"string"==typeof p.data)&&(i+=(Ee.test(i)?"&":"?")+p.data,delete p.data),!1===p.cache&&(i=i.replace(He,"$1"),h=(Ee.test(i)?"&":"?")+"_="+Ce.guid+++h),p.url=i+h),p.ifModified&&(_.lastModified[i]&&T.setRequestHeader("If-Modified-Since",_.lastModified[i]),_.etag[i]&&T.setRequestHeader("If-None-Match",_.etag[i])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Fe+"; q=0.01":""):p.accepts["*"]),p.headers)T.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(d,T,p)||u))return T.abort();if(k="abort",m.add(p.complete),T.done(p.success),T.fail(p.error),r=Ue(Ve,p,n,T)){if(T.readyState=1,c&&g.trigger("ajaxSend",[T,p]),u)return T;p.async&&p.timeout>0&&(s=t.setTimeout((function(){T.abort("timeout")}),p.timeout));try{u=!1,r.send(x,M)}catch(t){if(u)throw t;M(-1,t)}}else M(-1,"No Transport");function M(e,n,a,l){var f,h,v,x,w,k=n;u||(u=!0,s&&t.clearTimeout(s),r=void 0,o=l||"",T.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(x=function(t,e,n){for(var r,i,o,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||t.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(p,T,a)),!f&&_.inArray("script",p.dataTypes)>-1&&_.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),x=function(t,e,n,r){var i,o,a,s,l,u={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)u[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if((s=i.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(p,x,T,f),f?(p.ifModified&&((w=T.getResponseHeader("Last-Modified"))&&(_.lastModified[i]=w),(w=T.getResponseHeader("etag"))&&(_.etag[i]=w)),204===e||"HEAD"===p.type?k="nocontent":304===e?k="notmodified":(k=x.state,h=x.data,f=!(v=x.error))):(v=k,!e&&k||(k="error",e<0&&(e=0))),T.status=e,T.statusText=(n||k)+"",f?y.resolveWith(d,[h,k,T]):y.rejectWith(d,[T,k,v]),T.statusCode(b),b=void 0,c&&g.trigger(f?"ajaxSuccess":"ajaxError",[T,p,f?h:v]),m.fireWith(d,[T,k]),c&&(g.trigger("ajaxComplete",[T,p]),--_.active||_.event.trigger("ajaxStop")))}return T},getJSON:function(t,e,n){return _.get(t,e,n,"json")},getScript:function(t,e){return _.get(t,void 0,e,"script")}}),_.each(["get","post"],(function(t,e){_[e]=function(t,n,r,i){return d(n)&&(i=i||r,r=n,n=void 0),_.ajax(_.extend({url:t,type:e,dataType:i,data:n,success:r},_.isPlainObject(t)&&t))}})),_.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),_._evalUrl=function(t,e,n){return _.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){_.globalEval(t,e,n)}})},_.fn.extend({wrapAll:function(t){var e;return this[0]&&(d(t)&&(t=t.call(this[0])),e=_(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return d(t)?this.each((function(e){_(this).wrapInner(t.call(this,e))})):this.each((function(){var e=_(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=d(t);return this.each((function(n){_(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){_(this).replaceWith(this.childNodes)})),this}}),_.expr.pseudos.hidden=function(t){return!_.expr.pseudos.visible(t)},_.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var Je={0:200,1223:204},Ke=_.ajaxSettings.xhr();p.cors=!!Ke&&"withCredentials"in Ke,p.ajax=Ke=!!Ke,_.ajaxTransport((function(e){var n,r;if(p.cors||Ke&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);n=function(t){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Je[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&t.setTimeout((function(){n&&r()}))},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}})),_.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return _.globalEval(t),t}}}),_.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),_.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=_("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),v.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Qe,Ze=[],tn=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ze.pop()||_.expando+"_"+Ce.guid++;return this[t]=!0,t}}),_.ajaxPrefilter("json jsonp",(function(e,n,r){var i,o,a,s=!1!==e.jsonp&&(tn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&tn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=d(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(tn,"$1"+i):!1!==e.jsonp&&(e.url+=(Ee.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||_.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=t[i],t[i]=function(){a=arguments},r.always((function(){void 0===o?_(t).removeProp(i):t[i]=o,e[i]&&(e.jsonpCallback=n.jsonpCallback,Ze.push(i)),a&&d(o)&&o(a[0]),a=o=void 0})),"script"})),p.createHTMLDocument=((Qe=v.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Qe.childNodes.length),_.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(p.createHTMLDocument?((r=(e=v.implementation.createHTMLDocument("")).createElement("base")).href=v.location.href,e.head.appendChild(r)):e=v),o=!n&&[],(i=q.exec(t))?[e.createElement(i[1])]:(i=$t([t],e,o),o&&o.length&&_(o).remove(),_.merge([],i.childNodes)));var r,i,o},_.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=ke(t.slice(s)),t=t.slice(0,s)),d(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&_.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?_("<div>").append(_.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},_.expr.pseudos.animated=function(t){return _.grep(_.timers,(function(e){return t===e.elem})).length},_.offset={setOffset:function(t,e,n){var r,i,o,a,s,l,u=_.css(t,"position"),c=_(t),f={};"static"===u&&(t.style.position="relative"),s=c.offset(),o=_.css(t,"top"),l=_.css(t,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),d(e)&&(e=e.call(t,n,_.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+i),"using"in e?e.using.call(t,f):c.css(f)}},_.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){_.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===_.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===_.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=_(t).offset()).top+=_.css(t,"borderTopWidth",!0),i.left+=_.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-_.css(r,"marginTop",!0),left:e.left-i.left-_.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===_.css(t,"position");)t=t.offsetParent;return t||pt}))}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;_.fn[t]=function(r){return Q(this,(function(t,r,i){var o;if(g(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),_.each(["top","left"],(function(t,e){_.cssHooks[e]=Qt(p.pixelPosition,(function(t,n){if(n)return n=Kt(t,e),Wt.test(n)?_(t).position()[e]+"px":n}))})),_.each({Height:"height",Width:"width"},(function(t,e){_.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){_.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Q(this,(function(e,n,i){var o;return g(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?_.css(e,n,s):_.style(e,n,i,s)}),e,a?i:void 0,a)}}))})),_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){_.fn[e]=function(t){return this.on(e,t)}})),_.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.on("mouseenter",t).on("mouseleave",e||t)}}),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){_.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var en=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;_.proxy=function(t,e){var n,r,o;if("string"==typeof e&&(n=t[e],e=t,t=n),d(t))return r=i.call(arguments,2),o=function(){return t.apply(e||this,r.concat(i.call(arguments)))},o.guid=t.guid=t.guid||_.guid++,o},_.holdReady=function(t){t?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=T,_.isFunction=d,_.isWindow=g,_.camelCase=nt,_.type=b,_.now=Date.now,_.isNumeric=function(t){var e=_.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},_.trim=function(t){return null==t?"":(t+"").replace(en,"$1")};var nn=t.jQuery,rn=t.$;return _.noConflict=function(e){return t.$===_&&(t.$=rn),e&&t.jQuery===_&&(t.jQuery=nn),_},void 0===e&&(t.jQuery=t.$=_),_}))}(Pt);var qt=Lt(Pt.exports);function Rt(){const t="https://gtexportal.org/api/v2/",e="gtex_v8";return{singleCellExpression:t+"expression/singleNucleusGeneExpression?datasetId=gtex_snrnaseq_pilot&gencodeId=",singleCellExpressionSummary:t+"expression/singleNucleusGeneExpressionSummary",dyneqtl:t+"association/dyneqtl",snp:t+"dataset/variant?snpId=",variantId:t+"dataset/variant?variantId=",exonExp:t+"expression/clusteredMedianExonExpression?gencodeId=",transcriptExp:t+"expression/clusteredMedianTranscriptExpression?gencodeId=",junctionExp:t+"expression/clusteredMedianJunctionExpression?gencodeId=",transcript:t+`reference/transcript?datasetId=${e}&gencodeId=`,exon:t+`reference/exon?datasetId=${e}&gencodeId=`,geneModel:t+"dataset/collapsedGeneModelExon?gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?gencodeId=",geneExp:t+"expression/geneExpression?gencodeId=",medGeneExp:t+"expression/clusteredMedianGeneExpression",topInTissueFiltered:t+"expression/topExpressedGene?filterMtGene=true&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?&filterMtGene=false&tissueSiteDetailId=",geneId:t+"reference/gene?geneId=",tissue:t+"dataset/tissueSiteDetail",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",dynsqtl:t+"association/dynsqtl",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}async function Ht(t,e=250){let n,r=[],i=0;do{const o=It(t,i,e);n=await fetch(o).then((t=>t.json())),r=r.concat(n.data),i+=1}while(i<n.paging_info.numberOfPages);return r}function It(t,e,n=250){let r;const i="page="+e;r=t.includes("?")?t+"&"+i:t+"?"+i;return r=r+"&"+("itemsPerPage="+n),r}var zt="$";function Gt(){}function Bt(t,e){var n=new Gt;if(t instanceof Gt)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}function Vt(){var t,e,n,r=[],i=[];function o(n,i,a,s){if(i>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var l,u,c,f=-1,h=n.length,p=r[i++],d=Bt(),g=a();++f<h;)(c=d.get(l=p(u=n[f])+""))?c.push(u):d.set(l,[u]);return d.each((function(t,e){s(g,e,o(t,i,a,s))})),g}function a(t,n){if(++n>r.length)return t;var o,s=i[n-1];return null!=e&&n>=r.length?o=t.entries():(o=[],t.each((function(t,e){o.push({key:e,values:a(t,n)})}))),null!=s?o.sort((function(t,e){return s(t.key,e.key)})):o}return n={object:function(t){return o(t,0,Ft,Wt)},map:function(t){return o(t,0,Xt,Ut)},entries:function(t){return a(o(t,0,Xt,Ut),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return i[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function Ft(){return{}}function Wt(t,e,n){t[e]=n}function Xt(){return Bt()}function Ut(t,e,n){t.set(e,n)}function Yt(){}Gt.prototype=Bt.prototype={constructor:Gt,has:function(t){return zt+t in this},get:function(t){return this[zt+t]},set:function(t,e){return this[zt+t]=e,this},remove:function(t){var e=zt+t;return e in this&&delete this[e]},clear:function(){for(var t in this)t[0]===zt&&delete this[t]},keys:function(){var t=[];for(var e in this)e[0]===zt&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)e[0]===zt&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)e[0]===zt&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)e[0]===zt&&++t;return t},empty:function(){for(var t in this)if(t[0]===zt)return!1;return!0},each:function(t){for(var e in this)e[0]===zt&&t(this[e],e.slice(1),this)}};var Jt=Bt.prototype;function Kt(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Qt(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}Yt.prototype={constructor:Yt,has:Jt.has,add:function(t){return this[zt+(t+="")]=t,this},remove:Jt.remove,clear:Jt.clear,values:Jt.keys,size:Jt.size,empty:Jt.empty,each:Jt.each};var Zt=Array.prototype,te=Zt.map,ee=Zt.slice,ne={name:"implicit"};function re(){var t=Bt(),e=[],n=[],r=ne;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==ne)return r;t.set(o,a=e.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=Bt();for(var r,o,a=-1,s=n.length;++a<s;)t.has(o=(r=n[a])+"")||t.set(o,e.push(r));return i},i.range=function(t){return arguments.length?(n=ee.call(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return re(e,n).unknown(r)},Kt.apply(i,arguments),i}function ie(){var t,e,n=re().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,s=0,l=0,u=.5;function f(){var n=r().length,f=o[1]<o[0],h=o[f-0],p=o[1-f];t=(p-h)/Math.max(1,n-s+2*l),a&&(t=Math.floor(t)),h+=(p-h-t*(n-s))*u,e=t*(1-s),a&&(h=Math.round(h),e=Math.round(e));var d=c(n).map((function(e){return h+t*e}));return i(f?d.reverse():d)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),f()):r()},n.range=function(t){return arguments.length?(o=[+t[0],+t[1]],f()):o.slice()},n.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,f()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,f()):a},n.padding=function(t){return arguments.length?(s=Math.min(1,l=+t),f()):s},n.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),f()):s},n.paddingOuter=function(t){return arguments.length?(l=+t,f()):l},n.align=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),f()):u},n.copy=function(){return ie(r(),o).round(a).paddingInner(s).paddingOuter(l).align(u)},Kt.apply(f(),arguments)}function oe(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function ae(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function se(){}var le=.7,ue=1/le,ce="\\s*([+-]?\\d+)\\s*",fe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",he="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",pe=/^#([0-9a-f]{3,8})$/,de=new RegExp("^rgb\\("+[ce,ce,ce]+"\\)$"),ge=new RegExp("^rgb\\("+[he,he,he]+"\\)$"),ve=new RegExp("^rgba\\("+[ce,ce,ce,fe]+"\\)$"),ye=new RegExp("^rgba\\("+[he,he,he,fe]+"\\)$"),me=new RegExp("^hsl\\("+[fe,he,he]+"\\)$"),be=new RegExp("^hsla\\("+[fe,he,he,fe]+"\\)$"),xe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function we(){return this.rgb().formatHex()}function _e(){return this.rgb().formatRgb()}function ke(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=pe.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Te(e):3===n?new Se(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Me(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Me(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=de.exec(t))?new Se(e[1],e[2],e[3],1):(e=ge.exec(t))?new Se(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ve.exec(t))?Me(e[1],e[2],e[3],e[4]):(e=ye.exec(t))?Me(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=me.exec(t))?Ne(e[1],e[2]/100,e[3]/100,1):(e=be.exec(t))?Ne(e[1],e[2]/100,e[3]/100,e[4]):xe.hasOwnProperty(t)?Te(xe[t]):"transparent"===t?new Se(NaN,NaN,NaN,0):null}function Te(t){return new Se(t>>16&255,t>>8&255,255&t,1)}function Me(t,e,n,r){return r<=0&&(t=e=n=NaN),new Se(t,e,n,r)}function Ae(t,e,n,r){return 1===arguments.length?((i=t)instanceof se||(i=ke(i)),i?new Se((i=i.rgb()).r,i.g,i.b,i.opacity):new Se):new Se(t,e,n,null==r?1:r);var i}function Se(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Ce(){return"#"+$e(this.r)+$e(this.g)+$e(this.b)}function Ee(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function $e(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Ne(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new je(t,e,n,r)}function De(t){if(t instanceof je)return new je(t.h,t.s,t.l,t.opacity);if(t instanceof se||(t=ke(t)),!t)return new je;if(t instanceof je)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,l=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=l<.5?o+i:2-o-i,a*=60):s=l>0&&l<1?0:a,new je(a,s,l,t.opacity)}function je(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Oe(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Le(t){return function(){return t}}function Pe(t){return 1==(t=+t)?qe:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Le(isNaN(e)?n:e)}}function qe(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Le(isNaN(t)?e:t)}oe(se,ke,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:we,formatHex:we,formatHsl:function(){return De(this).formatHsl()},formatRgb:_e,toString:_e}),oe(Se,Ae,ae(se,{brighter:function(t){return t=null==t?ue:Math.pow(ue,t),new Se(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?le:Math.pow(le,t),new Se(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Ce,formatHex:Ce,formatRgb:Ee,toString:Ee})),oe(je,(function(t,e,n,r){return 1===arguments.length?De(t):new je(t,e,n,null==r?1:r)}),ae(se,{brighter:function(t){return t=null==t?ue:Math.pow(ue,t),new je(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?le:Math.pow(le,t),new je(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Se(Oe(t>=240?t-240:t+120,i,r),Oe(t,i,r),Oe(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Re=function t(e){var n=Pe(e);function r(t,e){var r=n((t=Ae(t)).r,(e=Ae(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=qe(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);var He,Ie=(He=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return function(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}((n-r/e)*e,a,i,o,s)}},function(t){var e,n,r=t.length,i=new Array(r),o=new Array(r),a=new Array(r);for(e=0;e<r;++e)n=Ae(t[e]),i[e]=n.r||0,o[e]=n.g||0,a[e]=n.b||0;return i=He(i),o=He(o),a=He(a),n.opacity=1,function(t){return n.r=i(t),n.g=o(t),n.b=a(t),n+""}});function ze(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}}function Ge(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Ye(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}function Be(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Ve(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Fe(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ye(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}var We=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Xe=new RegExp(We.source,"g");function Ue(t,e){var n,r,i,o=We.lastIndex=Xe.lastIndex=0,a=-1,s=[],l=[];for(t+="",e+="";(n=We.exec(t))&&(r=Xe.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,l.push({i:a,x:Ve(n,r)})),o=Xe.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)s[(n=l[r]).i]=n.x(t);return s.join("")})}function Ye(t,e){var n,r=typeof e;return null==e||"boolean"===r?Le(e):("number"===r?Ve:"string"===r?(n=ke(e))?(e=n,Re):Ue:e instanceof ke?Re:e instanceof Date?Be:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?ze:Array.isArray(e)?Ge:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Fe:Ve)(t,e)}function Je(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var Ke,Qe,Ze,tn,en=180/Math.PI,nn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function rn(t,e,n,r,i,o){var a,s,l;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),t*r<e*n&&(t=-t,e=-e,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*en,skewX:Math.atan(l)*en,scaleX:a,scaleY:s}}function on(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],l=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var l=a.push("translate(",null,e,null,n);s.push({i:l-4,x:Ve(t,i)},{i:l-2,x:Ve(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ve(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,l),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ve(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,l),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Ve(t,n)},{i:s-2,x:Ve(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,l),o=a=null,function(t){for(var e,n=-1,r=l.length;++n<r;)s[(e=l[n]).i]=e.x(t);return s.join("")}}}var an=on((function(t){return"none"===t?nn:(Ke||(Ke=document.createElement("DIV"),Qe=document.documentElement,Ze=document.defaultView),Ke.style.transform=t,t=Ze.getComputedStyle(Qe.appendChild(Ke),null).getPropertyValue("transform"),Qe.removeChild(Ke),rn(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),sn=on((function(t){return null==t?nn:(tn||(tn=document.createElementNS("http://www.w3.org/2000/svg","g")),tn.setAttribute("transform",t),(t=tn.transform.baseVal.consolidate())?rn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):nn)}),", ",")",")");function ln(t){return+t}var un=[0,1];function cn(t){return t}function fn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function hn(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function pn(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=fn(i,r),o=n(a,o)):(r=fn(r,i),o=n(o,a)),function(t){return o(r(t))}}function dn(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),s=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<r;)i[s]=fn(t[s],t[s+1]),o[s]=n(e[s],e[s+1]);return function(e){var n=a(t,e,1,r)-1;return o[n](i[n](e))}}function gn(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function vn(){var t,e,n,r,i,o,a=un,s=un,l=Ye,u=cn;function c(){return r=Math.min(a.length,s.length)>2?dn:pn,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,l)))(t(u(e)))}return f.invert=function(n){return u(e((o||(o=r(s,a.map(t),Ve)))(n)))},f.domain=function(t){return arguments.length?(a=te.call(t,ln),u===cn||(u=hn(a)),c()):a.slice()},f.range=function(t){return arguments.length?(s=ee.call(t),c()):s.slice()},f.rangeRound=function(t){return s=ee.call(t),l=Je,c()},f.clamp=function(t){return arguments.length?(u=t?hn(a):cn,f):u!==cn},f.interpolate=function(t){return arguments.length?(l=t,c()):l},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function yn(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function mn(t){return(t=yn(Math.abs(t)))?t[1]:NaN}var bn,xn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function wn(t){if(!(e=xn.exec(t)))throw new Error("invalid format: "+t);var e;return new _n({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function _n(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function kn(t,e){var n=yn(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}wn.prototype=_n.prototype,_n.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Tn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return kn(100*t,e)},r:kn,s:function(t,e){var n=yn(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(bn=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+yn(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Mn(t){return t}var An,Sn,Cn,En=Array.prototype.map,$n=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Nn(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Mn:(e=En.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],l=0;i>0&&s>0&&(l+s+1>r&&(s=Math.max(1,r-l)),o.push(t.substring(i-=s,i+s)),!((l+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Mn:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(En.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",u=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=wn(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,g=t.comma,v=t.precision,y=t.trim,m=t.type;"n"===m?(g=!0,m="g"):Tn[m]||(void 0===v&&(v=12),y=!0,m="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",x="$"===h?o:/[%p]/.test(m)?l:"",w=Tn[m],_=/[defgprs%]/.test(m);function k(t){var i,o,l,h=b,k=x;if("c"===m)k=w(t)+k,t="";else{var T=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:w(Math.abs(t),v),y&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),T&&0==+t&&"+"!==f&&(T=!1),h=(T?"("===f?f:u:"-"===f||"("===f?"":f)+h,k=("s"===m?$n[8+bn/3]:"")+k+(T&&"("===f?")":""),_)for(i=-1,o=t.length;++i<o;)if(48>(l=t.charCodeAt(i))||l>57){k=(46===l?a+t.slice(i+1):t.slice(i))+k,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var M=h.length+t.length+k.length,A=M<d?new Array(d-M+1).join(e):"";switch(g&&p&&(t=r(A+t,A.length?d-k.length:1/0),A=""),n){case"<":t=h+t+k+A;break;case"=":t=h+A+t+k;break;case"^":t=A.slice(0,M=A.length>>1)+h+t+k+A.slice(M);break;default:t=A+h+t+k}return s(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),k.toString=function(){return t+""},k}return{format:f,formatPrefix:function(t,e){var n=f(((t=wn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(mn(e)/3))),i=Math.pow(10,-r),o=$n[8+r/3];return function(t){return n(i*t)+o}}}}function Dn(t,e,n,r){var i,o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=f?i*=10:o>=h?i*=5:o>=p&&(i*=2),e<t?-i:i}(t,e,n);switch((r=wn(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(mn(e)/3)))-mn(Math.abs(t)))}(o,a))||(r.precision=i),Cn(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,mn(e)-mn(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-mn(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Sn(r)}function jn(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=d(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Dn(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],l=i[a];return l<s&&(r=s,s=l,l=r,r=o,o=a,a=r),(r=d(s,l,n))>0?r=d(s=Math.floor(s/r)*r,l=Math.ceil(l/r)*r,n):r<0&&(r=d(s=Math.ceil(s*r)/r,l=Math.floor(l*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(l/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(l*r)/r,e(i)),t},t}function On(){var t,e,n=(t=cn,e=cn,vn()(t,e));return n.copy=function(){return gn(n,On())},Kt.apply(n,arguments),jn(n)}function Ln(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function Pn(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function qn(t){return t<0?-t*t:t*t}function Rn(t){var e=t(cn,cn),n=1;return e.exponent=function(e){return arguments.length?1===(n=+e)?t(cn,cn):.5===n?t(Pn,qn):t(Ln(n),Ln(1/n)):n},jn(e)}function Hn(){var t=Rn(vn());return t.copy=function(){return gn(t,Hn()).exponent(t.exponent())},Kt.apply(t,arguments),t}function In(){return Hn.apply(null,arguments).exponent(.5)}function zn(){var t=jn(function(){var t,e,n,r,i,o=0,a=1,s=cn,l=!1;function u(e){return isNaN(e=+e)?i:s(0===n?.5:(e=(r(e)-t)*n,l?Math.max(0,Math.min(1,e)):e))}return u.domain=function(i){return arguments.length?(t=r(o=+i[0]),e=r(a=+i[1]),n=t===e?0:1/(e-t),u):[o,a]},u.clamp=function(t){return arguments.length?(l=!!t,u):l},u.interpolator=function(t){return arguments.length?(s=t,u):s},u.unknown=function(t){return arguments.length?(i=t,u):i},function(i){return r=i,t=i(o),e=i(a),n=t===e?0:1/(e-t),u}}()(cn));return t.copy=function(){return e=t,zn().domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown());var e},Qt.apply(t,arguments)}An=Nn({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Sn=An.format,Cn=An.formatPrefix;var Gn=Math.PI,Bn=2*Gn,Vn=1e-6,Fn=Bn-Vn;function Wn(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Xn(){return new Wn}function Un(t){return function(){return t}}Wn.prototype=Xn.prototype={constructor:Wn,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,l=r-e,u=o-t,c=a-e,f=u*u+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>Vn)if(Math.abs(c*s-l*u)>Vn&&i){var h=n-o,p=r-a,d=s*s+l*l,g=h*h+p*p,v=Math.sqrt(d),y=Math.sqrt(f),m=i*Math.tan((Gn-Math.acos((d+f-g)/(2*v*y)))/2),b=m/y,x=m/v;Math.abs(b-1)>Vn&&(this._+="L"+(t+b*u)+","+(e+b*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>u*p)+","+(this._x1=t+x*s)+","+(this._y1=e+x*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),l=t+a,u=e+s,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+u:(Math.abs(this._x1-l)>Vn||Math.abs(this._y1-u)>Vn)&&(this._+="L"+l+","+u),n&&(f<0&&(f=f%Bn+Bn),f>Fn?this._+="A"+n+","+n+",0,1,"+c+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=l)+","+(this._y1=u):f>Vn&&(this._+="A"+n+","+n+",0,"+ +(f>=Gn)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Yn=Math.abs,Jn=Math.atan2,Kn=Math.cos,Qn=Math.max,Zn=Math.min,tr=Math.sin,er=Math.sqrt,nr=1e-12,rr=Math.PI,ir=rr/2,or=2*rr;function ar(t){return t>=1?ir:t<=-1?-ir:Math.asin(t)}function sr(t){return t.innerRadius}function lr(t){return t.outerRadius}function ur(t){return t.startAngle}function cr(t){return t.endAngle}function fr(t){return t&&t.padAngle}function hr(t,e,n,r,i,o,a){var s=t-n,l=e-r,u=(a?o:-o)/er(s*s+l*l),c=u*l,f=-u*s,h=t+c,p=e+f,d=n+c,g=r+f,v=(h+d)/2,y=(p+g)/2,m=d-h,b=g-p,x=m*m+b*b,w=i-o,_=h*g-d*p,k=(b<0?-1:1)*er(Qn(0,w*w*x-_*_)),T=(_*b-m*k)/x,M=(-_*m-b*k)/x,A=(_*b+m*k)/x,S=(-_*m+b*k)/x,C=T-v,E=M-y,$=A-v,N=S-y;return C*C+E*E>$*$+N*N&&(T=A,M=S),{cx:T,cy:M,x01:-c,y01:-f,x11:T*(i/w-1),y11:M*(i/w-1)}}function pr(){var t=sr,e=lr,n=Un(0),r=null,i=ur,o=cr,a=fr,s=null;function l(){var l,u,c=+t.apply(this,arguments),f=+e.apply(this,arguments),h=i.apply(this,arguments)-ir,p=o.apply(this,arguments)-ir,d=Yn(p-h),g=p>h;if(s||(s=l=Xn()),f<c&&(u=f,f=c,c=u),f>nr)if(d>or-nr)s.moveTo(f*Kn(h),f*tr(h)),s.arc(0,0,f,h,p,!g),c>nr&&(s.moveTo(c*Kn(p),c*tr(p)),s.arc(0,0,c,p,h,g));else{var v,y,m=h,b=p,x=h,w=p,_=d,k=d,T=a.apply(this,arguments)/2,M=T>nr&&(r?+r.apply(this,arguments):er(c*c+f*f)),A=Zn(Yn(f-c)/2,+n.apply(this,arguments)),S=A,C=A;if(M>nr){var E=ar(M/c*tr(T)),$=ar(M/f*tr(T));(_-=2*E)>nr?(x+=E*=g?1:-1,w-=E):(_=0,x=w=(h+p)/2),(k-=2*$)>nr?(m+=$*=g?1:-1,b-=$):(k=0,m=b=(h+p)/2)}var N=f*Kn(m),D=f*tr(m),j=c*Kn(w),O=c*tr(w);if(A>nr){var L,P=f*Kn(b),q=f*tr(b),R=c*Kn(x),H=c*tr(x);if(d<rr&&(L=function(t,e,n,r,i,o,a,s){var l=n-t,u=r-e,c=a-i,f=s-o,h=f*l-c*u;if(!(h*h<nr))return[t+(h=(c*(e-o)-f*(t-i))/h)*l,e+h*u]}(N,D,R,H,P,q,j,O))){var I=N-L[0],z=D-L[1],G=P-L[0],B=q-L[1],V=1/tr(function(t){return t>1?0:t<-1?rr:Math.acos(t)}((I*G+z*B)/(er(I*I+z*z)*er(G*G+B*B)))/2),F=er(L[0]*L[0]+L[1]*L[1]);S=Zn(A,(c-F)/(V-1)),C=Zn(A,(f-F)/(V+1))}}k>nr?C>nr?(v=hr(R,H,N,D,f,C,g),y=hr(P,q,j,O,f,C,g),s.moveTo(v.cx+v.x01,v.cy+v.y01),C<A?s.arc(v.cx,v.cy,C,Jn(v.y01,v.x01),Jn(y.y01,y.x01),!g):(s.arc(v.cx,v.cy,C,Jn(v.y01,v.x01),Jn(v.y11,v.x11),!g),s.arc(0,0,f,Jn(v.cy+v.y11,v.cx+v.x11),Jn(y.cy+y.y11,y.cx+y.x11),!g),s.arc(y.cx,y.cy,C,Jn(y.y11,y.x11),Jn(y.y01,y.x01),!g))):(s.moveTo(N,D),s.arc(0,0,f,m,b,!g)):s.moveTo(N,D),c>nr&&_>nr?S>nr?(v=hr(j,O,P,q,c,-S,g),y=hr(N,D,R,H,c,-S,g),s.lineTo(v.cx+v.x01,v.cy+v.y01),S<A?s.arc(v.cx,v.cy,S,Jn(v.y01,v.x01),Jn(y.y01,y.x01),!g):(s.arc(v.cx,v.cy,S,Jn(v.y01,v.x01),Jn(v.y11,v.x11),!g),s.arc(0,0,c,Jn(v.cy+v.y11,v.cx+v.x11),Jn(y.cy+y.y11,y.cx+y.x11),g),s.arc(y.cx,y.cy,S,Jn(y.y11,y.x11),Jn(y.y01,y.x01),!g))):s.arc(0,0,c,w,x,g):s.lineTo(j,O)}else s.moveTo(0,0);if(s.closePath(),l)return s=null,l+""||null}return l.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-rr/2;return[Kn(r)*n,tr(r)*n]},l.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Un(+e),l):t},l.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Un(+t),l):e},l.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Un(+t),l):n},l.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Un(+t),l):r},l.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Un(+t),l):i},l.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Un(+t),l):o},l.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:Un(+t),l):a},l.context=function(t){return arguments.length?(s=null==t?null:t,l):s},l}function dr(t){this._context=t}function gr(t){return new dr(t)}function vr(t){return t[0]}function yr(t){return t[1]}function mr(){var t=vr,e=null,n=Un(0),r=yr,i=Un(!0),o=null,a=gr,s=null;function l(l){var u,c,f,h,p,d=l.length,g=!1,v=new Array(d),y=new Array(d);for(null==o&&(s=a(p=Xn())),u=0;u<=d;++u){if(!(u<d&&i(h=l[u],u,l))===g)if(g=!g)c=u,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),f=u-1;f>=c;--f)s.point(v[f],y[f]);s.lineEnd(),s.areaEnd()}g&&(v[u]=+t(h,u,l),y[u]=+n(h,u,l),s.point(e?+e(h,u,l):v[u],r?+r(h,u,l):y[u]))}if(p)return s=null,p+""||null}function u(){return function(){var t=vr,e=yr,n=Un(!0),r=null,i=gr,o=null;function a(a){var s,l,u,c=a.length,f=!1;for(null==r&&(o=i(u=Xn())),s=0;s<=c;++s)!(s<c&&n(l=a[s],s,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(l,s,a),+e(l,s,a));if(u)return o=null,u+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:Un(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:Un(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:Un(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:Un(+n),e=null,l):t},l.x0=function(e){return arguments.length?(t="function"==typeof e?e:Un(+e),l):t},l.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:Un(+t),l):e},l.y=function(t){return arguments.length?(n="function"==typeof t?t:Un(+t),r=null,l):n},l.y0=function(t){return arguments.length?(n="function"==typeof t?t:Un(+t),l):n},l.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Un(+t),l):r},l.lineX0=l.lineY0=function(){return u().x(t).y(n)},l.lineY1=function(){return u().x(t).y(r)},l.lineX1=function(){return u().x(e).y(n)},l.defined=function(t){return arguments.length?(i="function"==typeof t?t:Un(!!t),l):i},l.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),l):a},l.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),l):o},l}function br(t,e){return e<t?-1:e>t?1:e>=t?0:NaN}function xr(t){return t}dr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var wr=Array.prototype.slice;function _r(t){return t}var kr=1,Tr=2,Mr=3,Ar=4,Sr=1e-6;function Cr(t){return"translate("+(t+.5)+",0)"}function Er(t){return"translate(0,"+(t+.5)+")"}function $r(t){return function(e){return+t(e)}}function Nr(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function Dr(){return!this.__axis}function jr(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,l=t===kr||t===Ar?-1:1,u=t===Ar||t===Tr?"x":"y",c=t===kr||t===Mr?Cr:Er;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,p=null==i?e.tickFormat?e.tickFormat.apply(e,n):_r:i,d=Math.max(o,0)+s,g=e.range(),v=+g[0]+.5,y=+g[g.length-1]+.5,m=(e.bandwidth?Nr:$r)(e.copy()),b=f.selection?f.selection():f,x=b.selectAll(".domain").data([null]),w=b.selectAll(".tick").data(h,e).order(),_=w.exit(),k=w.enter().append("g").attr("class","tick"),T=w.select("line"),M=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(k),T=T.merge(k.append("line").attr("stroke","currentColor").attr(u+"2",l*o)),M=M.merge(k.append("text").attr("fill","currentColor").attr(u,l*d).attr("dy",t===kr?"0em":t===Mr?"0.71em":"0.32em")),f!==b&&(x=x.transition(f),w=w.transition(f),T=T.transition(f),M=M.transition(f),_=_.transition(f).attr("opacity",Sr).attr("transform",(function(t){return isFinite(t=m(t))?c(t):this.getAttribute("transform")})),k.attr("opacity",Sr).attr("transform",(function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:m(t))}))),_.remove(),x.attr("d",t===Ar||t==Tr?a?"M"+l*a+","+v+"H0.5V"+y+"H"+l*a:"M0.5,"+v+"V"+y:a?"M"+v+","+l*a+"V0.5H"+y+"V"+l*a:"M"+v+",0.5H"+y),w.attr("opacity",1).attr("transform",(function(t){return c(m(t))})),T.attr(u+"2",l*o),M.attr(u,l*d).text(p),b.filter(Dr).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Tr?"start":t===Ar?"end":"middle"),b.each((function(){this.__axis=m}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=wr.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:wr.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:wr.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f}function Or(t){return jr(kr,t)}function Lr(t){return jr(Mr,t)}var Pr={value:function(){}};function qr(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Rr(r)}function Rr(t){this._=t}function Hr(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function Ir(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Pr,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}function zr(){mt.preventDefault(),mt.stopImmediatePropagation()}Rr.prototype=qr.prototype={constructor:Rr,on:function(t,e){var n,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<s;)if(n=(t=o[a]).type)i[n]=Ir(i[n],t.name,e);else if(null==e)for(n in i)i[n]=Ir(i[n],t.name,null);return this}for(;++a<s;)if((n=(t=o[a]).type)&&(n=Hr(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Rr(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var Gr,Br,Vr=0,Fr=0,Wr=0,Xr=1e3,Ur=0,Yr=0,Jr=0,Kr="object"==typeof performance&&performance.now?performance:Date,Qr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Zr(){return Yr||(Qr(ti),Yr=Kr.now()+Jr)}function ti(){Yr=0}function ei(){this._call=this._time=this._next=null}function ni(t,e,n){var r=new ei;return r.restart(t,e,n),r}function ri(){Yr=(Ur=Kr.now())+Jr,Vr=Fr=0;try{!function(){Zr(),++Vr;for(var t,e=Gr;e;)(t=Yr-e._time)>=0&&e._call.call(null,t),e=e._next;--Vr}()}finally{Vr=0,function(){var t,e,n=Gr,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Gr=e);Br=t,oi(r)}(),Yr=0}}function ii(){var t=Kr.now(),e=t-Ur;e>Xr&&(Jr-=e,Ur=t)}function oi(t){Vr||(Fr&&(Fr=clearTimeout(Fr)),t-Yr>24?(t<1/0&&(Fr=setTimeout(ri,t-Kr.now()-Jr)),Wr&&(Wr=clearInterval(Wr))):(Wr||(Ur=Kr.now(),Wr=setInterval(ii,Xr)),Vr=1,Qr(ri)))}function ai(t,e,n){var r=new ei;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r}ei.prototype=ni.prototype={constructor:ei,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Zr():+n)+(null==e?0:+e),this._next||Br===this||(Br?Br._next=this:Gr=this,Br=this),this._call=t,this._time=n,oi()},stop:function(){this._call&&(this._call=null,this._time=1/0,oi())}};var si=qr("start","end","cancel","interrupt"),li=[],ui=0,ci=1,fi=2,hi=3,pi=4,di=5,gi=6;function vi(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(t){n.state=ci,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)}function a(o){var u,c,f,h;if(n.state!==ci)return l();for(u in i)if((h=i[u]).name===n.name){if(h.state===hi)return ai(a);h.state===pi?(h.state=gi,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[u]):+u<e&&(h.state=gi,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[u])}if(ai((function(){n.state===hi&&(n.state=pi,n.timer.restart(s,n.delay,n.time),s(o))})),n.state=fi,n.on.call("start",t,t.__data__,n.index,n.group),n.state===fi){for(n.state=hi,r=new Array(f=n.tween.length),u=0,c=-1;u<f;++u)(h=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function s(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=di,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===di&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var r in n.state=gi,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=ni(o,0,n.time)}(t,n,{name:e,index:r,group:i,on:si,tween:li,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:ui})}function yi(t,e){var n=bi(t,e);if(n.state>ui)throw new Error("too late; already scheduled");return n}function mi(t,e){var n=bi(t,e);if(n.state>hi)throw new Error("too late; already running");return n}function bi(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function xi(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>fi&&n.state<di,n.state=gi,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}function wi(t,e){var n,r;return function(){var i=mi(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function _i(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=mi(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},l=0,u=i.length;l<u;++l)if(i[l].name===e){i[l]=s;break}l===u&&i.push(s)}o.tween=i}}function ki(t,e,n){var r=t._id;return t.each((function(){var t=mi(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return bi(t,r).value[e]}}function Ti(t,e){var n;return("number"==typeof e?Ve:e instanceof ke?Re:(n=ke(e))?(e=n,Re):Ue)(t,e)}function Mi(t){return function(){this.removeAttribute(t)}}function Ai(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Si(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function Ci(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function Ei(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttribute(t))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttribute(t)}}function $i(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttributeNS(t.space,t.local)}}function Ni(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,i)),n}return i._value=e,i}function Di(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,i)),n}return i._value=e,i}function ji(t,e){return function(){yi(this,t).delay=+e.apply(this,arguments)}}function Oi(t,e){return e=+e,function(){yi(this,t).delay=e}}function Li(t,e){return function(){mi(this,t).duration=+e.apply(this,arguments)}}function Pi(t,e){return e=+e,function(){mi(this,t).duration=e}}var qi=Ct.prototype.constructor;function Ri(t){return function(){this.style.removeProperty(t)}}var Hi=0;function Ii(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function zi(){return++Hi}var Gi=Ct.prototype;Ii.prototype={constructor:Ii,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=A(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,l,u=r[a],c=u.length,f=o[a]=new Array(c),h=0;h<c;++h)(s=u[h])&&(l=t.call(s,s.__data__,h,u))&&("__data__"in s&&(l.__data__=s.__data__),f[h]=l,vi(f[h],e,n,h,f,bi(s,n)));return new Ii(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=C(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var l,u=r[s],c=u.length,f=0;f<c;++f)if(l=u[f]){for(var h,p=t.call(l,l.__data__,f,u),d=bi(l,n),g=0,v=p.length;g<v;++g)(h=p[g])&&vi(h,e,n,g,p,d);o.push(p),a.push(l)}return new Ii(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new Ii(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),p=0;p<f;++p)(l=u[p]||c[p])&&(h[p]=l);for(;s<r;++s)a[s]=e[s];return new Ii(a,this._parents,this._name,this._id)},selection:function(){return new qi(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=zi(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)if(a=s[u]){var c=bi(a,e);vi(a,t,n,u,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Ii(r,this._parents,t,n)},call:Gi.call,nodes:Gi.nodes,node:Gi.node,size:Gi.size,empty:Gi.empty,each:Gi.each,on:function(t,e){var n=this._id;return arguments.length<2?bi(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?yi:mi;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}(n,t,e))},attr:function(t,e){var n=w(t),r="transform"===n?sn:Ti;return this.attrTween(t,"function"==typeof e?(n.local?$i:Ei)(n,r,ki(this,"attr."+t,e)):null==e?(n.local?Ai:Mi)(n):(n.local?Ci:Si)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=w(t);return this.tween(n,(r.local?Ni:Di)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?an:Ti;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=X(this,t),a=(this.style.removeProperty(t),X(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,Ri(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=X(this,t),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(t),l=s=X(this,t)),a===l?null:a===r&&l===i?o:(i=l,o=e(r=a,s))}}(t,r,ki(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var l=mi(this,t),u=l.on,c=null==l.value[a]?o||(o=Ri(e)):void 0;u===n&&i===c||(r=(n=u).copy()).on(s,i=c),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=X(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,o,n)),r}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(ki(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=bi(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?wi:_i)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?ji:Oi)(e,t)):bi(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Li:Pi)(e,t)):bi(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){mi(this,t).ease=e}}(e,t)):bi(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},l={value:function(){0==--i&&o()}};n.each((function(){var n=mi(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(l)),n.on=e}))}))}};var Bi={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Vi(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Bi.time=Zr(),Bi;return n}function Fi(t){return function(){return t}}function Wi(t,e,n){this.target=t,this.type=e,this.selection=n}function Xi(){mt.stopImmediatePropagation()}function Ui(){mt.preventDefault(),mt.stopImmediatePropagation()}Ct.prototype.interrupt=function(t){return this.each((function(){xi(this,t)}))},Ct.prototype.transition=function(t){var e,n;t instanceof Ii?(e=t._id,t=t._name):(e=zi(),(n=Bi).time=Zr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)(a=s[u])&&vi(a,t,e,u,s,n||Vi(a,e));return new Ii(r,this._parents,t,e)};var Yi={name:"drag"},Ji={name:"space"},Ki={name:"handle"},Qi={name:"center"};function Zi(t){return[+t[0],+t[1]]}function to(t){return[Zi(t[0]),Zi(t[1])]}function eo(t){return function(e){return function(t,e,n){arguments.length<3&&(n=e,e=$t().changedTouches);for(var r,i=0,o=e?e.length:0;i<o;++i)if((r=e[i]).identifier===n)return Nt(t,r);return null}(e,mt.touches,t)}}var no={name:"x",handles:["w","e"].map(co),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},ro={name:"y",handles:["n","s"].map(co),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},io={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(co),input:function(t){return null==t?null:to(t)},output:function(t){return t}},oo={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},ao={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},so={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},lo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},uo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function co(t){return{type:t}}function fo(){return!mt.ctrlKey&&!mt.button}function ho(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function po(){return navigator.maxTouchPoints||"ontouchstart"in this}function go(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function vo(){return function(t){var e,n=ho,r=fo,i=po,o=!0,a=qr("start","brush","end"),s=6;function l(e){var n=e.property("__brush",g).selectAll(".overlay").data([co("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",oo.overlay).merge(n).each((function(){var t=go(this).extent;Et(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([co("selection")]).enter().append("rect").attr("class","selection").attr("cursor",oo.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return oo[t.type]})),e.each(u).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",p).on("touchend.brush touchcancel.brush",d).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function u(){var t=Et(this),e=go(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-s/2:e[0][0]-s/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-s/2:e[0][1]-s/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+s:s})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+s:s}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,e,n){var r=t.__brush.emitter;return!r||n&&r.clean?new f(t,e,n):r}function f(t,e,n){this.that=t,this.args=e,this.state=t.__brush,this.active=0,this.clean=n}function h(){if((!e||mt.touches)&&r.apply(this,arguments)){var n,i,a,s,l,f,h,p,d,g,v,y=this,m=mt.target.__data__.type,b="selection"===(o&&mt.metaKey?m="overlay":m)?Yi:o&&mt.altKey?Qi:Ki,x=t===ro?null:lo[m],w=t===no?null:uo[m],_=go(y),k=_.extent,T=_.selection,M=k[0][0],A=k[0][1],S=k[1][0],C=k[1][1],E=0,$=0,N=x&&w&&o&&mt.shiftKey,D=mt.touches?eo(mt.changedTouches[0].identifier):Dt,j=D(y),O=j,L=c(y,arguments,!0).beforestart();"overlay"===m?(T&&(d=!0),_.selection=T=[[n=t===ro?M:j[0],a=t===no?A:j[1]],[l=t===ro?S:n,h=t===no?C:a]]):(n=T[0][0],a=T[0][1],l=T[1][0],h=T[1][1]),i=n,s=a,f=l,p=h;var P=Et(y).attr("pointer-events","none"),q=P.selectAll(".overlay").attr("cursor",oo[m]);if(mt.touches)L.moved=H,L.ended=z;else{var R=Et(mt.view).on("mousemove.brush",H,!0).on("mouseup.brush",z,!0);o&&R.on("keydown.brush",G,!0).on("keyup.brush",B,!0),function(t){var e=t.document.documentElement,n=Et(t).on("dragstart.drag",zr,!0);"onselectstart"in e?n.on("selectstart.drag",zr,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(mt.view)}Xi(),xi(y),u.call(y),L.start()}function H(){var t=D(y);!N||g||v||(Math.abs(t[0]-O[0])>Math.abs(t[1]-O[1])?v=!0:g=!0),O=t,d=!0,Ui(),I()}function I(){var t;switch(E=O[0]-j[0],$=O[1]-j[1],b){case Ji:case Yi:x&&(E=Math.max(M-n,Math.min(S-l,E)),i=n+E,f=l+E),w&&($=Math.max(A-a,Math.min(C-h,$)),s=a+$,p=h+$);break;case Ki:x<0?(E=Math.max(M-n,Math.min(S-n,E)),i=n+E,f=l):x>0&&(E=Math.max(M-l,Math.min(S-l,E)),i=n,f=l+E),w<0?($=Math.max(A-a,Math.min(C-a,$)),s=a+$,p=h):w>0&&($=Math.max(A-h,Math.min(C-h,$)),s=a,p=h+$);break;case Qi:x&&(i=Math.max(M,Math.min(S,n-E*x)),f=Math.max(M,Math.min(S,l+E*x))),w&&(s=Math.max(A,Math.min(C,a-$*w)),p=Math.max(A,Math.min(C,h+$*w)))}f<i&&(x*=-1,t=n,n=l,l=t,t=i,i=f,f=t,m in ao&&q.attr("cursor",oo[m=ao[m]])),p<s&&(w*=-1,t=a,a=h,h=t,t=s,s=p,p=t,m in so&&q.attr("cursor",oo[m=so[m]])),_.selection&&(T=_.selection),g&&(i=T[0][0],f=T[1][0]),v&&(s=T[0][1],p=T[1][1]),T[0][0]===i&&T[0][1]===s&&T[1][0]===f&&T[1][1]===p||(_.selection=[[i,s],[f,p]],u.call(y),L.brush())}function z(){if(Xi(),mt.touches){if(mt.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else!function(t,e){var n=t.document.documentElement,r=Et(t).on("dragstart.drag",null);e&&(r.on("click.drag",zr,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(mt.view,d),R.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);P.attr("pointer-events","all"),q.attr("cursor",oo.overlay),_.selection&&(T=_.selection),function(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}(T)&&(_.selection=null,u.call(y)),L.end()}function G(){switch(mt.keyCode){case 16:N=x&&w;break;case 18:b===Ki&&(x&&(l=f-E*x,n=i+E*x),w&&(h=p-$*w,a=s+$*w),b=Qi,I());break;case 32:b!==Ki&&b!==Qi||(x<0?l=f-E:x>0&&(n=i-E),w<0?h=p-$:w>0&&(a=s-$),b=Ji,q.attr("cursor",oo.selection),I());break;default:return}Ui()}function B(){switch(mt.keyCode){case 16:N&&(g=v=N=!1,I());break;case 18:b===Qi&&(x<0?l=f:x>0&&(n=i),w<0?h=p:w>0&&(a=s),b=Ki,I());break;case 32:b===Ji&&(mt.altKey?(x&&(l=f-E*x,n=i+E*x),w&&(h=p-$*w,a=s+$*w),b=Qi):(x<0?l=f:x>0&&(n=i),w<0?h=p:w>0&&(a=s),b=Ki),q.attr("cursor",oo[m]),I());break;default:return}Ui()}}function p(){c(this,arguments).moved()}function d(){c(this,arguments).ended()}function g(){var e=this.__brush||{selection:null};return e.extent=to(n.apply(this,arguments)),e.dim=t,e}return l.move=function(e,n){e.selection?e.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var e=this,r=e.__brush,i=c(e,arguments),o=r.selection,a=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),s=Ye(o,a);function l(t){r.selection=1===t&&null===a?null:s(t),u.call(e),i.brush()}return null!==o&&null!==a?l:l(1)})):e.each((function(){var e=this,r=arguments,i=e.__brush,o=t.input("function"==typeof n?n.apply(e,r):n,i.extent),a=c(e,r).beforestart();xi(e),i.selection=null===o?null:o,u.call(e),a.start().brush().end()}))},l.clear=function(t){l.move(t,null)},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,r){var i=mt;t.sourceEvent=mt,mt=t;try{return e.apply(n,r)}finally{mt=i}}(new Wi(l,e,t.output(this.state.selection)),a.apply,a,[e,this.that,this.args])}},l.extent=function(t){return arguments.length?(n="function"==typeof t?t:Fi(to(t)),l):n},l.filter=function(t){return arguments.length?(r="function"==typeof t?t:Fi(!!t),l):r},l.touchable=function(t){return arguments.length?(i="function"==typeof t?t:Fi(!!t),l):i},l.handleSize=function(t){return arguments.length?(s=+t,l):s},l.keyModifiers=function(t){return arguments.length?(o=!!t,l):o},l.on=function(){var t=a.on.apply(a,arguments);return t===a?l:t},l}(io)}function yo(){return Math.random()}!function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(yo);var mo=function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(yo);!function t(e){function n(){var t=mo.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(yo);var bo=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(yo);function xo(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}function wo(t){return Ie(t[t.length-1])}!function t(e){function n(t){var n=bo.source(e)(t);return function(){return n()/t}}return n.source=t,n}(yo),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(yo);var _o=wo(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(xo)),ko=wo(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(xo));function To(){this._=null}function Mo(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Ao(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function So(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Co(t){for(;t.L;)t=t.L;return t}function Eo(t,e,n,r){var i=[null,null],o=Zo.push(i)-1;return i.left=t,i.right=e,n&&No(i,t,e,n),r&&No(i,e,t,r),Ko[t.index].halfedges.push(o),Ko[e.index].halfedges.push(o),i}function $o(t,e,n){var r=[e,n];return r.left=t,r}function No(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Do(t,e,n,r,i){var o,a=t[0],s=t[1],l=a[0],u=a[1],c=0,f=1,h=s[0]-l,p=s[1]-u;if(o=e-l,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>c&&(c=o)}if(o=r-l,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<f&&(f=o)}if(o=n-u,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>c&&(c=o)}if(o=i-u,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<f&&(f=o)}return!(c>0||f<1)||(c>0&&(t[0]=[l+c*h,u+c*p]),f<1&&(t[1]=[l+f*h,u+f*p]),!0)}}}}}function jo(t,e,n,r,i){var o=t[1];if(o)return!0;var a,s,l=t[0],u=t.left,c=t.right,f=u[0],h=u[1],p=c[0],d=c[1],g=(f+p)/2,v=(h+d)/2;if(d===h){if(g<e||g>=r)return;if(f>p){if(l){if(l[1]>=i)return}else l=[g,n];o=[g,i]}else{if(l){if(l[1]<n)return}else l=[g,i];o=[g,n]}}else if(s=v-(a=(f-p)/(d-h))*g,a<-1||a>1)if(f>p){if(l){if(l[1]>=i)return}else l=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(l){if(l[1]<n)return}else l=[(i-s)/a,i];o=[(n-s)/a,n]}else if(h<d){if(l){if(l[0]>=r)return}else l=[e,a*e+s];o=[r,a*r+s]}else{if(l){if(l[0]<e)return}else l=[r,a*r+s];o=[e,a*e+s]}return t[0]=l,t[1]=o,!0}function Oo(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Lo(t,e){return e[+(e.left!==t.site)]}function Po(t,e){return e[+(e.left===t.site)]}To.prototype={constructor:To,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Co(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Ao(this,n),n=(t=n).U),n.C=!1,r.C=!0,So(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(So(this,n),n=(t=n).U),n.C=!1,r.C=!0,Ao(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Co(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Ao(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,So(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Ao(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,So(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Ao(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,So(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var qo,Ro=[];function Ho(){Mo(this),this.x=this.y=this.arc=this.site=this.cy=null}function Io(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],s=i[1],l=r[0]-a,u=r[1]-s,c=o[0]-a,f=o[1]-s,h=2*(l*f-u*c);if(!(h>=-ea)){var p=l*l+u*u,d=c*c+f*f,g=(f*p-u*d)/h,v=(l*d-c*p)/h,y=Ro.pop()||new Ho;y.arc=t,y.site=i,y.x=g+a,y.y=(y.cy=v+s)+Math.sqrt(g*g+v*v),t.circle=y;for(var m=null,b=Qo._;b;)if(y.y<b.y||y.y===b.y&&y.x<=b.x){if(!b.L){m=b.P;break}b=b.L}else{if(!b.R){m=b;break}b=b.R}Qo.insert(m,y),m||(qo=y)}}}}function zo(t){var e=t.circle;e&&(e.P||(qo=e.N),Qo.remove(e),Ro.push(e),Mo(e),t.circle=null)}var Go=[];function Bo(){Mo(this),this.edge=this.site=this.circle=null}function Vo(t){var e=Go.pop()||new Bo;return e.site=t,e}function Fo(t){zo(t),Jo.remove(t),Go.push(t),Mo(t)}function Wo(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,s=[t];Fo(t);for(var l=o;l.circle&&Math.abs(n-l.circle.x)<ta&&Math.abs(r-l.circle.cy)<ta;)o=l.P,s.unshift(l),Fo(l),l=o;s.unshift(l),zo(l);for(var u=a;u.circle&&Math.abs(n-u.circle.x)<ta&&Math.abs(r-u.circle.cy)<ta;)a=u.N,s.push(u),Fo(u),u=a;s.push(u),zo(u);var c,f=s.length;for(c=1;c<f;++c)u=s[c],l=s[c-1],No(u.edge,l.site,u.site,i);l=s[0],(u=s[f-1]).edge=Eo(l.site,u.site,null,i),Io(l),Io(u)}function Xo(t){for(var e,n,r,i,o=t[0],a=t[1],s=Jo._;s;)if((r=Uo(s,a)-o)>ta)s=s.L;else{if(!((i=o-Yo(s,a))>ta)){r>-ta?(e=s.P,n=s):i>-ta?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){Ko[t.index]={site:t,halfedges:[]}}(t);var l=Vo(t);if(Jo.insert(e,l),e||n){if(e===n)return zo(e),n=Vo(e.site),Jo.insert(l,n),l.edge=n.edge=Eo(e.site,l.site),Io(e),void Io(n);if(n){zo(e),zo(n);var u=e.site,c=u[0],f=u[1],h=t[0]-c,p=t[1]-f,d=n.site,g=d[0]-c,v=d[1]-f,y=2*(h*v-p*g),m=h*h+p*p,b=g*g+v*v,x=[(v*m-p*b)/y+c,(h*b-g*m)/y+f];No(n.edge,u,d,x),l.edge=Eo(u,t,null,x),n.edge=Eo(t,d,null,x),Io(e),Io(n)}else l.edge=Eo(e.site,l.site)}}function Uo(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(n=a.site)[0],l=n[1],u=l-e;if(!u)return s;var c=s-r,f=1/o-1/u,h=c/u;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*u)-l+u/2+i-o/2)))/f+r:(r+s)/2}function Yo(t,e){var n=t.N;if(n)return Uo(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var Jo,Ko,Qo,Zo,ta=1e-6,ea=1e-12;function na(t,e){return e[1]-t[1]||e[0]-t[0]}function ra(t,e){var n,r,i,o=t.sort(na).pop();for(Zo=[],Ko=new Array(t.length),Jo=new To,Qo=new To;;)if(i=qo,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(Xo(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;Wo(i.arc)}if(function(){for(var t,e,n,r,i=0,o=Ko.length;i<o;++i)if((t=Ko[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=Oo(t,Zo[e[n]]);for(a.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[a[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var a=+e[0][0],s=+e[0][1],l=+e[1][0],u=+e[1][1];!function(t,e,n,r){for(var i,o=Zo.length;o--;)jo(i=Zo[o],t,e,n,r)&&Do(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>ta||Math.abs(i[0][1]-i[1][1])>ta)||delete Zo[o]}(a,s,l,u),function(t,e,n,r){var i,o,a,s,l,u,c,f,h,p,d,g,v=Ko.length,y=!0;for(i=0;i<v;++i)if(o=Ko[i]){for(a=o.site,s=(l=o.halfedges).length;s--;)Zo[l[s]]||l.splice(s,1);for(s=0,u=l.length;s<u;)d=(p=Po(o,Zo[l[s]]))[0],g=p[1],f=(c=Lo(o,Zo[l[++s%u]]))[0],h=c[1],(Math.abs(d-f)>ta||Math.abs(g-h)>ta)&&(l.splice(s,0,Zo.push($o(a,p,Math.abs(d-t)<ta&&r-g>ta?[t,Math.abs(f-t)<ta?h:r]:Math.abs(g-r)<ta&&n-d>ta?[Math.abs(h-r)<ta?f:n,r]:Math.abs(d-n)<ta&&g-e>ta?[n,Math.abs(f-n)<ta?h:e]:Math.abs(g-e)<ta&&d-t>ta?[Math.abs(h-e)<ta?f:t,e]:null))-1),++u);u&&(y=!1)}if(y){var m,b,x,w=1/0;for(i=0,y=null;i<v;++i)(o=Ko[i])&&(x=(m=(a=o.site)[0]-t)*m+(b=a[1]-e)*b)<w&&(w=x,y=o);if(y){var _=[t,e],k=[t,r],T=[n,r],M=[n,e];y.halfedges.push(Zo.push($o(a=y.site,_,k))-1,Zo.push($o(a,k,T))-1,Zo.push($o(a,T,M))-1,Zo.push($o(a,M,_))-1)}}for(i=0;i<v;++i)(o=Ko[i])&&(o.halfedges.length||delete Ko[i])}(a,s,l,u)}this.edges=Zo,this.cells=Ko,Jo=Qo=Zo=Ko=null}function ia(t,e,n){this.k=t,this.x=e,this.y=n}ra.prototype={constructor:ra,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return Lo(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,l,u,c=n.site,f=-1,h=e[i[o-1]],p=h.left===c?h.right:h.left;++f<o;)a=p,p=(h=e[i[f]]).left===c?h.right:h.left,a&&p&&r<a.index&&r<p.index&&(l=a,u=p,((s=c)[0]-u[0])*(l[1]-s[1])-(s[0]-l[0])*(u[1]-s[1])<0)&&t.push([c.data,a.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var l=t-i.site[0],u=e-i.site[1],c=l*l+u*u;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var l=t-s[0],u=e-s[1],f=l*l+u*u;f<c&&(c=f,a=s.index)}}))}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}},ia.prototype={constructor:ia,scale:function(t){return 1===t?this:new ia(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new ia(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},ia.prototype;const oa=function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)},aa=function(t){let e=(g(t,.75)-g(t,.25))/1.34;return 1.06*Math.min(l(t),e)*Math.pow(t.length,-.2)};class sa{constructor(t,e=!1,n=30,r=-40,i=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),Et("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){Et("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=mt.pageX,e=mt.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY,Et("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){Et("#"+this.id).html(t)}}class la{constructor(t,e=void 0,n=!1){qt(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=qt("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,i="fa-download"){this.createButton(t,i),Et(`#${t}`).on("click",(()=>{this.downloadSvg(e,n,r)})).on("mouseover",(()=>{this.tooltip.show("Download the plot")})).on("mouseout",(()=>{this.tooltip.hide()}))}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n),Et(`#${t}`).on("click",e).on("mouseover",(()=>{this.tooltip.show("Reset the scales")})).on("mouseout",(()=>{this.tooltip.hide()}))}createButton(t,e="fa-download",n="need to define",r=void 0){const i=qt("<a/>").attr("id",t).addClass("btn btn-default btn-light btn-sm").appendTo(this.bar);return e.startsWith("fa-")?qt("<i/>").addClass(`fa ${e}`).appendTo(i):i.text(e),this.buttons[t]=i,"foo"!=t&&Et(`#${t}`).on("click",(()=>{void 0===r?alert("need to define the click event"):r()})).on("mouseover",(()=>{this.tooltip.show(n)})).on("mouseout",(()=>{this.tooltip.hide()})),i}attachTooltip(t){this.tooltip=t}downloadSvg(t,n,r){console.log(t,n,r);let i=qt(qt(qt(""+("#"+t)))[0]),o=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),a=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var i=n[r].cssRules,o=0;o<i.length;o++){var a=i[o];if(void 0!==a.style){var s,l=void 0===a.selectorText?a.selectorText:a.selectorText.replace(`#${t[0].id} `,"");try{s=qt(t).find(l)}catch(t){s=[]}s.length>0&&(e+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var u=document.createElement("style");return u.setAttribute("type","text/css"),u.innerHTML="<![CDATA[\n"+e+"\n]]>",u}(i.get());o.prepend(a),qt("#"+r).html("").hide();let s=qt(`#${r}`).append(o).html(),l=new Blob([s],{type:"image/svg+xml"});e.saveAs(l,n),qt(`#${r}`).html("").hide()}}class ua{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0,this.groups=Vt().key((t=>{if(void 0===t.group)throw"required attribute does not exist";return t.group})).entries(this.data)}setYDomain(t){if(void 0===t||0==t.length){let e=[];this.data.forEach((t=>e=e.concat(t.values))),t=u(e)}return t}render(t,e=500,n=357,r=void 0,i=void 0,o={show:!0,angle:30,paddingInner:.01,paddingOuter:.01,textAnchor:"start",adjustHeight:0,showLabels:!0,showTicks:!0},a={show:!0,angle:0,paddingInner:0,paddingOuter:0,sort:!1,adjustHeight:5},s={label:"Y label"},l={show:!1,angle:0,adjustHeight:void 0},u=!1,c=!1,f=!1,h=!1,p=0,d=void 0,g="kdeScott"){this.dom=t,this.width=e,this.height=n,this.config={x:o,subx:a,y:s,size:l},this.scale={x:ie().range([0,this.width]).domain(r||this.groups.map((t=>t.key))).paddingOuter(this.config.x.paddingOuter).paddingInner(this.config.x.paddingInner),subx:ie(),y:On().rangeRound([this.height,0]).domain(this.setYDomain(i)),z:On()},this.show={whisker:u,outliers:h,divider:c,legend:f,points:p},this.kdeOption=g,this.vColor=d,this.reset()}update(){this.groups.forEach((t=>{t.index=this.scale.x.domain().indexOf(t.key);let e=this.groupInfo[t.key];void 0!==e&&this._renderGroupInfoText(e,t.key);this.scale.subx.domain((()=>(this.config.subx.sort&&t.values.sort(((t,e)=>t.label<e.label?-1:t.label>e.label?1:0)),t.values.map((t=>t.label))))()).range([this.scale.x(t.key),this.scale.x(t.key)+this.scale.x.bandwidth()]),t.values.forEach((e=>{0!=e.values.length&&(e.values=e.values.sort(n),void 0!==this.vColor&&(e.color=this.vColor),t.dom=this._drawViolin(e,t.index))})),this.config.size.show&&this._renderSizeAxis(t),this.config.subx.show&&this._renderSubXAxis(t)})),this._renderXAxis(),this._renderYAxis(),this.dom.on("mouseout",(()=>{void 0!==this.tooltip&&this.tooltip.hide()})),this.show.divider&&this._addGroupDivider(),this.show.legend&&this._addLegend()}addPlotTitle(t,e){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${r})`).text(e)}createTooltip(t){return 0==qt(`#${t}`).length&&qt("<div/>").attr("id",t).appendTo(qt("body")),this.tooltip=new sa(t),Et(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return void 0===e&&(e=this.createTooltip(t)),this.toolbar=new la(t,e),this.toolbar}addBrush(t){const e=vo();e.on("end",(()=>{this.zoom(t,e)})),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,r=mt.selection;if(void 0===e)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter(((t,e)=>{const n=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return e>=n&&e<=i})));const n=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([n,i]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout((function(){n=null}),350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((e=>{let n=e.key,r=e.values;this.scale.subx.range([this.scale.x(n),this.scale.x(n)+this.scale.x.bandwidth()]),r.forEach((r=>{if(0==r.values.length)return;this.scale.x.domain().indexOf(n),this.scale.z.range([this.scale.subx(r.label),this.scale.subx(r.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${e.index}-${r.label}`);o.select(".violin").transition(i).attr("d",mr().x0((t=>this.scale.z(t[1]))).x1((t=>this.scale.z(-t[1]))).y((t=>this.scale.y(t[0]))));const a=g(r.values,.25),s=g(r.values,.75),l=.1;o.select(".violin-ir").transition(i).attr("x",this.scale.z(-l)).attr("y",this.scale.y(s)).attr("width",Math.abs(this.scale.z(-l)-this.scale.z(l))).attr("height",Math.abs(this.scale.y(s)-this.scale.y(a)));const u=m(r.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-l)).attr("x2",this.scale.z(l)).attr("y1",this.scale.y(u)).attr("y2",this.scale.y(u))}))}))}reset(){this.dom.selectAll("*").remove(),this.update()}updateData(t,e=!1,n=!0){this.data=t,this.groups=Vt().key((t=>{if(void 0===t.group)throw"required attribute does not exist";return t.group})).entries(this.data),this.updateYScale(),this.updateXScale(),this.show.outliers=n,e&&this.reset()}updateYScale(t=void 0,e=void 0,n=!1){void 0!==t&&(this.config.y.label=t),this.scale.y=On().rangeRound([this.height,0]).domain(this.setYDomain(e)),n&&this.reset()}updateXScale(t=void 0,e=!1){this.scale.x=ie().range([0,this.width]).domain(t||this.groups.map((t=>t.key))).paddingOuter(this.config.x.paddingOuter).paddingInner(this.config.x.paddingInner),e&&this.reset()}_drawViolin(t,e){const n=e=>{this.scale.z.domain([-e,e]).range([this.scale.subx(t.label),this.scale.subx(t.label)+this.scale.subx.bandwidth()])},r=this._generateVertices(t.values,this.kdeOption),i=this.dom.append("g").attr("id",`violin${e}-${t.label}`).attr("class","violin-g").datum(t);if(t.values.length>this.show.points&&r.length&&this._validVertices(r)){n(v(r,(t=>Math.abs(t[1]))));const o=g(t.values,.25),a=g(t.values,.75),s=Math.abs(a-o),l=u(t.values.filter((t=>t<=a+1.5*s))),c=l[1],f=l[0],h=m(t.values);if(this._renderViolinShape(i,t,r,h,e%2==0),(void 0===t.showBoxplot||t.showBoxplot)&&this._renderBoxPlot(i,t,f,c,o,a,h),this.show.outliers){const e=t.values.filter((t=>t<f||t>c));this._renderDataDots(i,{values:e,color:t.color},1)}t.showPoints&&this._renderDataDots(i,t,1)}else if(this.show.points>0){n(v(t.values,(t=>Math.abs(t)))),this._renderDataDots(i,t,1)}return i}_renderViolinShape(t,e,n,r,i,o="#94a8b8",a="#90c1c1"){let s=mr().x0((t=>this.scale.z("left"==e.showHalfViolin?0:t[1]))).x1((t=>this.scale.z("right"==e.showHalfViolin?0:-t[1]))).y((t=>this.scale.y(t[0])));const l=()=>void 0!==e.color?e.color:i?a:o,u=t.append("path").datum(n).attr("d",s).classed("violin",!0).style("fill",e.fill?e.fill:l).style("stroke",e.stroke?e.stroke:l);t.on("mouseover",(()=>{u.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+r.toPrecision(4)+"<br/>")})),t.on("mouseout",(()=>{u.classed("highlighted",!1)}))}_renderBoxPlot(t,e,n,r,i,o,a){const s=this.scale.z.domain()[1]/3;this.show.whisker&&t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(n)).style("stroke","#fff"),t.append("rect").attr("x","right"==e.showHalfViolin?this.scale.z(0):this.scale.z(-s)).attr("y",this.scale.y(o)).attr("width",void 0===e.showHalfViolin?Math.abs(this.scale.z(-s)-this.scale.z(s)):Math.abs(this.scale.z(0)-this.scale.z(s))).attr("height",Math.abs(this.scale.y(o)-this.scale.y(i))).style("fill",e.altColor||"#555f66").style("stroke-width",.2),t.append("line").attr("x1","right"==e.showHalfViolin?this.scale.z(0):this.scale.z(-s)).attr("x2","left"==e.showHalfViolin?this.scale.z(0):this.scale.z(s)).attr("y1",this.scale.y(a)).attr("y2",this.scale.y(a)).attr("class","violin-median")}_renderDataDots(t,e,n=2){const r=this.scale.z.domain()[1],i=mo(0,r/4);t.append("g").attr("class","violin-points").selectAll("circle").data(e.values).enter().append("circle").attr("cx",(()=>this.scale.z("left"==e.showHalfViolin?-Math.abs(i()):Math.abs(i())))).attr("cy",(t=>this.scale.y(t))).attr("fill",e.color).attr("r",n)}_sanityCheck(t){const e=["group","label","values"];t.forEach((t=>{e.forEach((e=>{if(void 0===t[e])throw"GroupedViolin: input data error."}))}))}_addGroupDivider(){const t=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),n=(n,r)=>r!==t.length-1?this.scale.x(n)+ +this.scale.x.bandwidth()+e/2:0;this.dom.selectAll(".vline").data(t).enter().append("line").classed("vline",!0).attr("x1",n).attr("x2",n).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",((e,n)=>n!=t.length-1?1:0)).style("stroke","rgb(86,98,107)").style("opacity",.5)}_addLegend(){const t=this.dom.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");t.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const e=t.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0);e.append("rect").attr("x",((t,e)=>5+60*e+this.scale.x.range()[0])).attr("y",-28).attr("width",10).attr("height",10).style("fill",(t=>t.color)),e.append("text").attr("class","violin-legend-text").text((t=>t.label)).attr("x",((t,e)=>17+60*e+this.scale.x.range()[0])).attr("y",-20)}_renderGroupInfoText(t,e){this.dom.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","middle").attr("fill",(e=>"pvalue"==e&&parseFloat(t[e])<=parseFloat(t.pvalueThreshold)?"orangered":"SlateGray")).attr("transform",(()=>`translate(${this.scale.x(e)+this.scale.x.bandwidth()/2}, ${this.scale.y(this.scale.y.domain()[0])+50})`)).text((e=>`${e}: ${parseFloat(parseFloat(t[e]).toPrecision(3)).toExponential()}`))}_renderXAxis(){let t=this.config.subx.show?55:0;const e=this.config.x;e.show&&(this.xAxis="top"==e.direction?Or(this.scale.x):Lr(this.scale.x),e.hideLabels&&(this.Axis=this.xAxis.tickFormat("")),e.hideTicks&&(this.Axis=this.xAxis.tickSize(0)),this.dom.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${void 0!==e.adjustHeight?e.adjustHeight:this.height+t})`).call(this.xAxis).selectAll("text").attr("text-anchor",e.textAnchor?e.textAnchor:"start").attr("transform",`rotate(${e.angle}, 0, 10)`))}_renderYAxis(t=!1){var e;this.yAxis=(e=this.scale.y,jr(Ar,e)).tickValues(this.scale.y.ticks(5)),t&&this.dom.select(".violin-y-axis").empty().remove(),this.dom.append("g").attr("class","violin-y-axis axis--y").attr("transform","translate(-5, 0)").call(this.yAxis),this.dom.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${10+Et(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(this.config.y.label)}_renderSizeAxis(t){let e={};t.values.forEach((t=>e[t.label]=`(${t.size||t.values.length})`));let n=Lr(ie().domain(t.values.map((t=>t.label))).rangeRound([this.scale.x(t.key),this.scale.x(t.key)+this.scale.x.bandwidth()])).tickFormat((t=>e[t]));const r=this.height+18,i=this.config.size,o=t.dom.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${i.adjustHeight||r})`).call(n);i.angle>0&&o.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${i.angle}, 2, 10)`)}_renderSubXAxis(t){const e=this.config.subx,n=e.adjustHeight?e.adjustHeight:5;let r=Lr(this.scale.subx);e.hideTicks&&(r=r.tickSize(0));const i=t.dom.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${this.height+n})`).call(r);e.angle>0&&i.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${e.angle}, 2, 10)`)}_generateVertices(t,e){let n=function(t,e,n){return function(r){return e.map((e=>[e,y(r,(r=>t((e-r)/n)))/n]))}}(oa,this.scale.y.ticks(100),aa(t));const r=u(t);let i="default"==e?n(t):function(t,e){void 0===e&&(e=On().domain(u(t)).nice().ticks(100));const n=Math.pow(t.length,-.2),r=1/l(t)/n,i=Math.pow(2*Math.PI,-.5)*r/t.length;return e.map((e=>{let n=0;return t.forEach((t=>{n+=Math.exp(-Math.pow((t-e)*r,2)/2)})),[e,n*i]}))}(t);return i=i.filter((t=>t[0]>=r[0]&&t[0]<=r[1])),i}_validVertices(t){return!t.reduce(((t,e)=>t.concat(e)),[]).filter((t=>isNaN(t))).length}}function ca(t,e,n,r="Gene Expression Violin Plot",i=Rt(),o=fa(50,75,250,60),a={w:.8*window.innerWidth,h:250}){const s=[i.tissue,i.geneExp+n,i.geneExp+n+"&attributeSubset=sex"],l=function(t,e){const n={root:t,spinner:"spinner",svg:`${t}-svg`,tooltip:e,toolbar:`${t}-toolbar`,clone:`${t}-svg-clone`,buttons:{download:`${t}-download`,plotOptions:`${t}-option-modal`,filter:`${t}-filter`,ascAlphaSort:`${t}-asc-alphasort`,descAlphaSort:`${t}-desc-alphasort`,ascSort:`${t}-asc-sort`,descSort:`${t}-desc-sort`,logScale:`${t}-log-scale`,linearScale:`${t}-linear-scale`,noDiff:`${t}-no-diff`,sexDiff:`${t}-sex-diff`,outliersOn:`${t}-outliers-on`,outliersOff:`${t}-outliers-off`},plotOptionGroups:{scale:`${t}-option-scale`,sort:`${t}-option-sort`,differentiation:`${t}-option-differentiation`,outliers:`${t}-option-outlier`},plotSorts:{ascAlphaSort:"asc-alphasort",descAlphaSort:"desc-alphasort",ascSort:"asc-sort",descSort:"desc-sort"},tissueFilter:`${t}-filter-modal`};if(0==qt(`#${n.root}`).length)throw"Violin Plot Error: rootId does not exist.";return 0==qt(`#${n.tooltip}`).length&&qt("<div/>").attr("id",n.tooltip).appendTo(qt("body")),0==qt(`#${n.toolbar}`).length&&qt("<div/>").attr("id",n.toolbar).appendTo(qt(`#${n.root}`)),0==qt(`#${n.root} #${n.spinner}`).length?qt('<span><i id="spinner" class="fas fa-sync fa-spin"></i></span>').appendTo(qt(`#${n.root}`)):qt(`#${n.root} #${n.spinner}`).show(),0==qt(`#${n.clone}`).length&&qt("<div/>").attr("id",n.clone).appendTo(qt(`#${n.root}`)),n}(t,e);Promise.all([Ht(s[0]),Ht(s[1])]).then((function(t){const e=(i=t[0],["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach((t=>{if(!i[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t})),i);var i;const u={},f={},h={female:"#e67f7b",male:"#70bcd2"};e.forEach((t=>{f[t.tissueSiteDetailId]=t.tissueSiteDetail,u[t.tissueSiteDetail]=t,h[t.tissueSiteDetailId]=`#${t.colorHex}`}));const p=pa(t[1],f,h,!1);if(p.length){let e=new ua(p),i=e.createTooltip(l.tooltip);e.sortData=e.data,e.allData=e.data,e.gencodeId=n,e.tIdNameMap=f,e.groupColorDict=h,e.tissueDict=u,e.geneJson={allData:t[1],subsetData:void 0},e.promises=s,e.unit=` ${p[0].unit}`,e.gpConfig={subset:!1,scale:"linear",sort:l.plotSorts.ascAlphaSort,showOutliers:!0,title:r},function(t,e,n,r){const i=e,o=function(t=1200,e=250,n=fa()){return{width:t,height:e,outerWidth:t+(n.left+n.right),outerHeight:e+(n.top+n.bottom)}}(n.w,n.h,i),a=Et(`#${r.root}`).append("svg").attr("id",r.svg).attr("width",o.outerWidth).attr("height",o.outerHeight).append("g").attr("transform",`translate(${i.left}, ${i.top})`),s=o.width,l=o.height,u={show:!0,angle:35,paddingInner:.2,paddingOuter:0},c={show:!1,angle:0,paddingInner:0,paddingOuter:0,sort:!0},f={label:"TPM"},h={show:!1},p=ya(t.gpConfig.sort,t.sortData,r),d=[],g=!1,v=!1,y=!0,m=!0;t.render(a,s,l,p,d,u,c,f,h,g,v,y,m,0,void 0,"kdeScott"),ga(t,r)}(e,o,a,l),function(t,e,n){let r=t.createToolbar(n.toolbar,e);r.createDownloadSvgButton(n.buttons.download,n.svg,"gene-exp-plot.svg",n.clone),qt(`#${n.toolbar}`).addClass("row"),qt(`#${n.toolbar} .btn-group`).addClass("col-xs-12 col-lg-1 text-nowrap").css("display","flex"),qt("<div></div>").appendTo(`#${n.toolbar}`).attr("id",`${n.toolbar}-plot-options`).attr("class","col-lg-11 text-nowrap");let i=qt(`#${n.toolbar}-plot-options`);qt("<div/>").appendTo(i).attr("id",n.plotOptionGroups.differentiation).attr("class","col-lg-2 col-xl-2"),qt("<span/>").appendTo(`#${n.plotOptionGroups.differentiation}`).attr("class",`${n.root}-option-label`).html("Subset"),qt("<div/>").appendTo(`#${n.plotOptionGroups.differentiation}`).attr("class","btn-group btn-group-sm");let o=qt(`#${n.plotOptionGroups.differentiation} .btn-group`);qt(`<button class="btn btn-default" id="${n.buttons.noDiff}">None</button>`).appendTo(o),qt(`<button class="btn btn-default" id="${n.buttons.sexDiff}">Sex</button>`).appendTo(o),qt("<div/>").appendTo(i).attr("id",n.plotOptionGroups.scale).attr("class","col-lg-2 col-xl-2"),qt("<span/>").appendTo(`#${n.plotOptionGroups.scale}`).attr("class",`${n.root}-option-label`).html("Scale"),qt("<div/>").appendTo(`#${n.plotOptionGroups.scale}`).attr("class","btn-group btn-group-sm");let a=qt(`#${n.plotOptionGroups.scale} .btn-group`);qt(`<button class="btn btn-default" id="${n.buttons.logScale}">Log</button>`).appendTo(a),qt(`<button class="btn btn-default" id="${n.buttons.linearScale}">Linear</button>`).appendTo(a),qt("<div/>").appendTo(i).attr("class",`${n.plotOptionGroups.sort} col-lg-2 col-xl-2`).attr("id","vplot-alpha-sorts"),qt("<span/>").appendTo(`.${n.plotOptionGroups.sort}#vplot-alpha-sorts`).attr("class",`${n.root}-option-label`).html("Tissue Sort"),qt("<div/>").appendTo(`.${n.plotOptionGroups.sort}#vplot-alpha-sorts`).attr("class","btn-group btn-group-sm").attr("id",`${n.plotOptionGroups.sort}-alpha`);let s=qt(`#${n.plotOptionGroups.sort}-alpha.btn-group`);qt(`<button class="btn btn-default fa fa-caret-up" id="${n.buttons.ascAlphaSort}"></button>`).appendTo(s),qt(`<button class="btn btn-default fa fa-caret-down" id="${n.buttons.descAlphaSort}"></button>`).appendTo(s),qt("<div/>").appendTo(i).attr("class",`${n.plotOptionGroups.sort} col-lg-2 col-xl-2`).attr("id","vplot-num-sorts"),qt("<span/>").appendTo(`.${n.plotOptionGroups.sort}#vplot-num-sorts`).attr("class",`${n.root}-option-label`).html("Median Sort"),qt("<div/>").appendTo(`.${n.plotOptionGroups.sort}#vplot-num-sorts`).attr("class","btn-group btn-group-sm").attr("id",`${n.plotOptionGroups.sort}-num`);let l=qt(`#${n.plotOptionGroups.sort}-num.btn-group`);qt(`<button class="btn btn-default fa fa-caret-up" id="${n.buttons.ascSort}"></button>`).appendTo(l),qt(`<button class="btn btn-default fa fa-caret-down" id="${n.buttons.descSort}"></button>`).appendTo(l),qt("<div/>").appendTo(i).attr("id",n.plotOptionGroups.outliers).attr("class","col-lg-2 col-xl-2"),qt("<span/>").appendTo(`#${n.plotOptionGroups.outliers}`).attr("class",`${n.root}-option-label`).html("Outliers"),qt("<div/>").appendTo(`#${n.plotOptionGroups.outliers}`).attr("class","btn-group btn-group-sm");let u=qt(`#${n.plotOptionGroups.outliers} .btn-group`);qt(`<button class="btn btn-default" id="${n.buttons.outliersOn}">On</button>`).appendTo(u),qt(`<button class="btn btn-default" id="${n.buttons.outliersOff}">Off</button>`).appendTo(u),jt(`#${n.plotOptionsModal} .modal-body button`).classed("active",!1),jt(`#${n.buttons.ascAlphaSort},\n               #${n.buttons.linearScale},\n               #${n.buttons.noDiff},\n               #${n.buttons.outliersOn}`).classed("active",!0);const c="Filter Tissues",f=()=>{};r.createButton(n.buttons.filter,"fa-filter",c,f),qt(`#${n.buttons.filter}`).attr("data-toggle","modal").attr("data-target","#gene-expr-vplot-filter-modal"),qt(`.${n.plotOptionGroups.sort} button`).on("click",(function(e){let r=Et(this);r.classed("active")||(jt(`.${n.plotOptionGroups.sort} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.sort=e.target.id.replace(`${n.root}-`,""),ma(t,n))})),qt(`#${n.plotOptionGroups.scale} button`).on("click",(function(e){let r=Et(this);r.classed("active")||(jt(`#${n.plotOptionGroups.scale} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.scale=e.target.id==n.buttons.logScale?"log":"linear",ma(t,n))})),qt(`#${n.plotOptionGroups.outliers} button`).on("click",(function(e){let r=Et(this);r.classed("active")||(jt(`#${n.plotOptionGroups.outliers} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.showOutliers=e.target.id==n.buttons.outliersOn,va(t,n))})),qt(`#${n.plotOptionGroups.differentiation} button`).on("click",(function(e){let r=Et(this);r.classed("active")||(jt(`#${n.plotOptionGroups.differentiation} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.subset=e.target.id==n.buttons.sexDiff,ma(t,n))}))}(e,i,l),function(t,e,n,r){const i=function(t,e=!1){let n=t;const r=n.filter((t=>t.rnaSeqAndGenotypeSampleCount<=70)).map((t=>t.tissueSiteDetailId));["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach((t=>{if(!n[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`})),n=0==e?n:n.filter((t=>!r.includes(t.tissueSiteDetailId)));let i=n.reduce(((t,e)=>{let n=e.tissueSite,r={id:e.tissueSiteDetailId,name:e.tissueSiteDetail};return t.hasOwnProperty(n)||(t[n]=[]),t[n].push(r),t}),{});return Object.keys(i).forEach((t=>{if(1==i[t].length){let e=i[t][0];delete i[t],i[e.name]=[e]}})),i}(r);(function(t,e,n=!1,r=!1,i=4){const o="tissue-group-main-level";Et(`#${e}`).selectAll("*").remove();const a=$("<div/>").attr("class","col-xs-12 col-md-12").appendTo($(`#${e}`));n?$(`<label class=${o}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(a):$(`<label class=${o}><input type="radio" name="allTissues" value="all"> All </label> <label class=${o}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(a),$('input[name="allTissues"]').change((function(){switch($(this).val()){case"all":$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0);break;case"reset":$(".tissueGroup").prop("checked",!1),$(".tissueSubGroup").prop("checked",!1)}}));let s=Object.keys(t).sort(((t,e)=>"Brain"==t?-1:"Brain"==e?1:t<e?-1:t>e?1:void 0)),l=Object.keys(t).reduce(((e,n)=>t[n].length>1?e+1+t[n].length:e+t[n].length),0),u=Math.ceil(l/i),f=l%i,h=Math.floor(12/i);const p=c(0,i).map((t=>$(`<div id="section${t}" class="col-xs-12 col-md-${h}">`).appendTo($(`#${e}`))));let d=0,g=0;s.forEach((e=>{let n=t[e];const r=e.replace(/ /g,"_");let i=n.length;i=1==i?i:i+1,0!=d&&i+d>u+f&&(d=0,p.length!=g+1&&(g+=1)),d+=i;let a=p[g];void 0===a&&console.error(`${e} has no defined session`),$(`<label class=${o}><input type="checkbox" id="${r}" class="tissueGroup"> <span>${e}</span></label><br/>`).appendTo(a),n.length>1&&n.sort(((t,e)=>t.id>e.id?1:t.id<e.id?-1:0)).forEach((function(t,e){let r=$(`<label class=tissue-group-sub-level><input type="checkbox" id="${t.id}" class="tissueSubGroup"> <span>${t.name}</span></label><br/>`).appendTo(a);e==n.length-1&&r.addClass("last-site"),r.click((function(){$('input[name="allTissues"]').prop("checked",!1)}))})),$("#"+r).click((function(){$('input[name="allTissues"]').prop("checked",!1),$("#"+r).is(":checked")?n.forEach((function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!0)})):n.forEach((function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!1)}))}))})),r&&($('input[name="allTissues"][value="all"]').prop("checked",!0),$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0))})(i,`${e}-body`,!1,!0,3),function(t,e,n,r){const i=()=>{let i=function(t,e,n=!1){let r=[];return $(`#${e}`).find(":input").each((function(){if($(this).is(":checked")){const e=$(this).attr("id");if($(this).hasClass("tissueGroup")){let i=e.replace(/_/g," ");1==t[i].length&&(n?r.push(t[i][0].name):r.push(t[i][0].id))}else n?r.push($($(this).siblings()[0]).text()):r.push(e)}})),r.filter((t=>void 0!==t))}(r,`${e}-body`,!0);!function(t,e,n){let r=t.allData.filter((t=>n.includes(t.group)));t.data=r,ma(t,e)}(t,n,i)};Et(`#${e}-button`).on("click",i),Et(`#${e}-close`).on("click",i)}(t,e,n,i)}(e,l.tissueFilter,l,t[0]),qt(`#${l.root} #${l.spinner}`).hide()}else!function(t,e){qt(`#${t.toolbar}`).remove(),qt(`<div id="gene-exp-vplot">No gene expression data found for ${e}</div>`).appendTo(`#${t.root}`),qt(`#${t.root} #${t.spinner}`).hide()}(l,n)}))}function fa(t=50,e=50,n=50,r=50){return{top:t,right:e,bottom:n,left:r}}function ha(t,e=!0){t.forEach((t=>{t.values=e?t.data.map((t=>Math.log10(+t+1))):t.data,t.values.sort(n),t.median=m(t.values)}))}function pa(t,e=void 0,n=void 0,r=!0){return t.forEach((t=>{["data","tissueSiteDetailId","geneSymbol","gencodeId"].forEach((e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parse Error: required json attribute is missing: "+e})),t.group=void 0===e?t.tissueSiteDetailId:e[t.tissueSiteDetailId],t.label=void 0===t.subsetGroup?t.geneSymbol:t.subsetGroup,t.color=void 0===n?"#90c1c1":null===t.subsetGroup?n[t.tissueSiteDetailId]:n[t.subsetGroup]})),ha(t,r),t}function da(t){const e=t.select(".violin-x-axis");e.attr("transform",`${e.attr("transform")} translate(0, 3)`)}function ga(t,e){let n=Et(`#${e.svg} g`);void 0!==t.gpConfig.title&&t.addPlotTitle(n,t.gpConfig.title),va(t,e),t.gpConfig.subset?function(t,e,n,r="top"){da(e);const i=e.selectAll(".violin-x-axis text");i.attr("transform",`translate(0, 8) ${i.attr("transform")}`),e.append("g").selectAll(".tcolor").data(t.scale.x.domain()).enter().append("rect").classed("tcolor",!0).attr("x",(e=>t.scale.x(e))).attr("y","top"==r?t.scale.y.range()[1]:t.scale.y.range()[0]).attr("transform","translate(0, 14)").attr("width",t.scale.x.bandwidth()).attr("height",5).style("stroke-width",0).style("fill",(t=>`#${n[t].colorHex}`)).style("opacity",.9)}(t,n,t.tissueDict,"bottom"):(Et(`#${e.svg} #violinLegend`).remove(),da(n)),function(t){t.dom.selectAll(".violin-g").on("mouseover",((e,n,r)=>{let i,o="log"==t.gpConfig.scale?Math.pow(10,e.median)-1:e.median;Et(r[n]).select("path").classed("highlighted",!0),i=t.gpConfig.subset?[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${e.group}</span>`,`<span class="tooltip-key">Group</span>: <span class="tooltip-value">${e.label}</span>`,`<span class="tooltip-key">Sample size</span>: <span class="tooltip-value">${e.values.length}</span>`,`<span class="tooltip-key">Median${t.unit}</span>: <span class="tooltip-value">${o.toPrecision(4)}</span>`]:[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${e.group}</span>`,`<span class="tooltip-key">Sample size</span>: <span class="tooltip-value">${e.values.length}</span>`,`<span class="tooltip-key">Median${t.unit}</span>: <span class="tooltip-value">${o.toPrecision(4)}</span>`],t.tooltip.show(i.join("<br/>"))}))}(t)}function va(t,e){jt(`#${e.svg} path.violin`).classed("outlined",!t.gpConfig.showOutliers),qt(`#${e.svg} .violin-points`).toggle(t.gpConfig.showOutliers)}function ya(t,e,n){switch(t){case n.plotSorts.ascAlphaSort:e.sort(((t,e)=>t.group<e.group?-1:t.group>e.group?1:0));break;case n.plotSorts.descAlphaSort:e.sort(((t,e)=>t.group<e.group?1:t.group>e.group?-1:0));break;case n.plotSorts.ascSort:e.sort(((t,e)=>t.median-e.median));break;case n.plotSorts.descSort:e.sort(((t,e)=>e.median-t.median))}return e.map((t=>t.group))}function ma(t,e){const n=()=>{const n=pa(t.gpConfig.subset?t.geneJson.subsetData:t.geneJson.allData,t.tIdNameMap,t.groupColorDict,"log"==t.gpConfig.scale);let r=t.data.map((t=>t.group));t.allData=n.map((t=>t));let i=n.filter((t=>-1!=r.indexOf(t.group))),o=t.sortData.filter((t=>r.includes(t.group))),a=ya(t.gpConfig.sort,o,e);ha(i,"log"==t.gpConfig.scale),ha(t.allData,"log"==t.gpConfig.scale);let s="log"==t.gpConfig.scale?"log10(TPM+1)":"TPM";t.updateData(i),t.updateXScale(a),t.updateYScale(s),t.reset(),ga(t,e)};t.gpConfig.subset&&void 0===t.geneJson.subsetData?Ht(t.promises[2]).then((e=>{t.geneJson.subsetData=e,n()})):n()}function ba(t,e,r,i={w:.7*window.innerWidth,h:250},o={top:50,right:50,bottom:150,left:100},a=Rt()){let s={showAll:!0,splitViolin:!1,byTissue:!1},l=a.singleCellExpression+r+"&excludeDataArray=False";Promise.all([Ht(l),Ht(a.tissue)]).then((r=>{let a=function(t){const e={};return t.forEach((t=>{e[t.tissueSiteDetailId]=t.tissueSiteDetail})),e}(r[1]),l=r[0],u=_a(l,a,!0,!0,!1,!0),c=_a(l,a,!1,!0,!1,!0),f=_a(l,a,!0,!1),h=_a(l,a,!1,!1);if(0==u.length)throw console.error("This gene has no data"),"This gene has no expression data";let p=s.splitViolin?s.byTissue?u.concat(f):c.concat(h):s.byTissue?u:c,d=new ua(p);const g=function(t,e){let n={root:t,tooltip:e,svg:`${t}-svg`,clone:`${t}-svg-clone`,toolbar:`${t}-toolbar`,buttons:{save:`${t}-btn-save`,all:`${t}-btn-all`,nonzero:`${t}-btn-nonzero`,byTissue:`${t}-btn-by-tissue`,byCell:`${t}-btn-by-cell`,splitViolin:`${t}-btn-split-violin`}};return n}(t,e);d.createTooltip(g.tooltip),function(t,e){0==qt(`#${e.toolbar}`).length&&qt("<div/>").attr("id",e.toolbar).appendTo(qt(`#${e.root}`));0==qt(`#${e.clone}`).length&&qt("<div/>").attr("id",e.clone).appendTo(qt(`#${e.root}`));t.createToolbar(e.toolbar,t.tooltip)}(d,g),function(t,e,r,i,o,a,s=!0){r.outerWidth=r.width+e.left+e.right,r.outerHeight=r.height+e.top+e.bottom;let l=function(t,e,n){return Et(`#${t.root}`).append("svg").attr("id",t.svg).attr("width",n.outerWidth).attr("height",n.outerHeight).append("g").attr("transform",`translate(${e.left}, ${e.top})`)}(i,e,r),u=t.data.map((t=>t.group)).sort(n);const c=xa(u),f=[],h={show:!a,angle:-90,paddingOuter:0,paddingInner:.2,textAnchor:"start",adjustHeight:0,hideLabels:!1,hideTicks:!0,direction:"top",addGroupGap:!0},p={show:!1},d={label:"ln(counts per 10k + 1)"},g={show:!1,angle:0,adjustHeight:0},v=!1,y=!1,m=!1,b=25;t.render(l,r.width,r.height,c,f,h,p,d,g,v,y,m,s,b,void 0,"kdeScott")}(d,o,i,g),wa(d,s);!function(t,e,n,r){let i=()=>{e.showAll=!0,e.splitViolin=!1,r(),ka(e,n)},o=()=>{e.showAll=!1,e.splitViolin=!1,r(),ka(e,n)},a=()=>{e.byTissue=!0,r(),ka(e,n)},s=()=>{e.byTissue=!1,r(),ka(e,n)},l=()=>{e.showAll=!1,e.splitViolin=!e.splitViolin,r(),ka(e,n)};t.toolbar.createButton(n.buttons.all,"All","All cells",i),t.toolbar.createButton(n.buttons.nonzero,"Nonzero","Expressing cells only",o),t.toolbar.createButton(n.buttons.splitViolin,"Split","All vs expressing cells",l),t.toolbar.createButton(n.buttons.byCell,"C","Group violins by cell type",s),t.toolbar.createButton(n.buttons.byTissue,"T","Group violins by tissue",a),t.toolbar.createDownloadSvgButton(n.buttons.save,n.svg,`${n.root}-save.svg`,n.clone),ka(e,n)}(d,s,g,(()=>{!function(t,e,r,i,o,a){let s=[];e.splitViolin?e.byTissue?(r.forEach((t=>{t.showHalfViolin="left",t.showBoxplot=!1})),o.forEach((t=>t.showHalfViolin="right")),s=r.concat(o)):(i.forEach((t=>{t.showHalfViolin="left",t.showBoxplot=!1})),a.forEach((t=>t.showHalfViolin="right")),s=i.concat(a)):(s=e.showAll&&e.byTissue?r:!e.showAll&&e.byTissue?o:e.showAll&&!e.byTissue?i:a,s.forEach((t=>{t.showHalfViolin=void 0,t.showBoxplot=!0})));t.updateData(s,!1,!e.splitViolin);const l=xa(t.data.map((t=>t.group)).sort(n));t.updateXScale(l,!0),wa(t,e)}(d,s,u,c,f,h)}))}))}function xa(t){let e=[],n="start";return t.forEach((t=>{let r=t.split(":")[0];n===r||(e.push(r+"-extra"),e.push(r)),e.push(t),n=r})),e}function wa(t,e){!function(t,e=60,n=-45,r="bottom"){let i=Vt().key((t=>t.superGroup)).rollup((e=>{e.sort(((t,e)=>t.group<e.group?-1:t.group>e.group?1:0));let n=(t.scale.x(e[e.length-1].group)-t.scale.x(e[0].group)+1)/2,r=e[0].group,i=e[e.length-1].group;return{superGroup:e[0].superGroup,midX:n,firstElement:r,lastElement:i}})).entries(t.data),o=i.map((t=>t.value)),a=o.map((t=>t.firstElement));o.map((t=>t.lastElement));let s=Or(t.scale.x).tickSize(0),l="#bacad6";const u=t.dom.append("g").attr("transform","bottom"==r?`translate(0, ${t.height})`:"translate(0, 0)").call(s);u.select("path").style("stroke",l).style("stroke-width",.5),u.append("line").attr("x1",0).attr("x2",t.width).attr("y1",t.height).attr("y2",t.height).style("stroke-width",.5).style("stroke",l);const c=u.selectAll(".tick");c.select("line").attr("class","grid").attr("x1",-t.scale.x.step()).attr("x2",-t.scale.x.step()).attr("y1",0).attr("y2",-(t.height+e)).attr("stroke",l).attr("stroke-width",(t=>a.indexOf(t)>=0?1:0)),c.select("text").remove()}(t,(e.byTissue,30),e.byTissue?0:45),function(t,e,n=2){if(0==n||2==n){let e=In().domain([0,2e4]).range([1,t.scale.x.step()/2>8?8:t.scale.x.step()/2]);t.dom.append("text").attr("x",0).attr("y",-25).style("text-anchor","end").style("font-size","10px").text("Total cells"),t.dom.selectAll(".bubble").data([1e3,2e3,5e3,1e4]).enter().append("circle").attr("cx",-10).attr("cy",((t,e)=>-50-10*e)).attr("r",(t=>e(t))).style("fill","rgba(148, 119, 91, 0.8)").style("stroke-width",0).classed("bubble",!0),t.dom.selectAll(".bLabel").data(["1e3","","","1e4"]).enter().append("text").attr("x",-20).attr("y",((t,e)=>-48-10*e)).style("text-anchor","end").style("font-size","10px").text((t=>t)),t.dom.select(".violin-x-axis").selectAll(".tick").append("circle").attr("cx",0).attr("cy",-25).attr("r",(t=>{let n=t.split(":")[3];return e(n)})).style("fill","rgba(148, 119, 91, 0.8)").style("stroke-width",0)}if(1==n||2==n){const n=function(){var t=xr,e=br,n=null,r=Un(0),i=Un(or),o=Un(0);function a(a){var s,l,u,c,f,h=a.length,p=0,d=new Array(h),g=new Array(h),v=+r.apply(this,arguments),y=Math.min(or,Math.max(-or,i.apply(this,arguments)-v)),m=Math.min(Math.abs(y)/h,o.apply(this,arguments)),b=m*(y<0?-1:1);for(s=0;s<h;++s)(f=g[d[s]=s]=+t(a[s],s,a))>0&&(p+=f);for(null!=e?d.sort((function(t,n){return e(g[t],g[n])})):null!=n&&d.sort((function(t,e){return n(a[t],a[e])})),s=0,u=p?(y-h*b)/p:0;s<h;++s,v=c)l=d[s],c=v+((f=g[l])>0?f*u:0)+b,g[l]={data:a[l],index:s,value:f,startAngle:v,endAngle:c,padAngle:m};return g}return a.value=function(e){return arguments.length?(t="function"==typeof e?e:Un(+e),a):t},a.sortValues=function(t){return arguments.length?(e=t,n=null,a):e},a.sort=function(t){return arguments.length?(n=t,e=null,a):n},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Un(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Un(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Un(+t),a):o},a}().padAngle(.005).sort(null).value((t=>t)),r=()=>{const e=t.scale.x.step()/2>8?8:t.scale.x.step()/2;return pr().innerRadius(0*e).outerRadius(e-1)};t.dom.append("text").attr("x",0).attr("y",-10).style("text-anchor","end").style("font-size","10px").text("Cell fraction");const i="rgba(0, 152, 199, 0.6)";t.dom.select(".violin-x-axis").selectAll(".tick").each((function(t){let e=+t.split(":")[3],o=+t.split(":")[2];if(isNaN(o))return;let a=n([o,e-o]);Et(this).selectAll("path").data(a).join("path").attr("d",r()).style("stroke-width",.5).style("stroke",i).style("fill",(t=>t.value==o?i:"white")).attr("transform","translate(0, -10)")})).style("cursor","default").on("mouseover",(function(n){let r=n.split(":");if(void 0===r[1])return;Et(this).select("text").style("font-size","10px");let i=[`<span class="tooltip-key">${e.byTissue?"Cell type":"Tissue"}</span>: <span class="tooltip-value">${r[1]}</span>`,`<span class="tooltip-key">${e.byTissue?"Tissue":"Cell type"}</span>: <span class="tooltip-value">${r[0]}</span>`,`<span class="tooltip-key">Sample size</span>: <span class="tooltip-value">${r[3]} cells</span>`,`<span class="tooltip-key">Detected in cells</span>: <span class="tooltip-value">${r[2]} (${(100*r[2]/r[3]).toFixed(2)}%)</span>`];t.tooltip.show(i.join("<br/>"))})).on("mouseout",(function(t){void 0!==t.split(":")[1]&&Et(this).select("text").style("font-size","8px")}))}t.dom.select(".violin-x-axis").selectAll("text").style("font-size",(t=>void 0===t.split(":")[1]?"7px":"8px")).style("fill",(t=>void 0===t.split(":")[1]?"#666666":"#222222")).style("font-weight",(t=>void 0===t.split(":")[1]?"bold":"normal")).attr("transform",`rotate(${t.config.x.angle}, -15, -20)`).text((t=>{let e=t.split(":"),n=void 0===e[1]?e[0].toUpperCase():e[1];return n.endsWith("-EXTRA")?"":n}))}(t,e),function(t,e){t.dom.selectAll(".violin-g").on("mouseover",((n,r,i)=>{Et(i[r]).select("path").classed("highlighted",!0);let o=n.values.filter((t=>t>0)).length,a=[`<span class="tooltip-key">${e.byTissue?"Tissue":"Cell type"}</span>: <span class="tooltip-value">${n.group.split(":")[0]}</span>`,`<span class="tooltip-key">${e.byTissue?"Cell type":"Tissue"}</span>: <span class="tooltip-value">${n.group.split(":")[1]}</span>`,`<span class="tooltip-key">Total cells</span>: <span class="tooltip-value">${n.total}</span>`,`<span class="tooltip-key">Detected in cells</span>: <span class="tooltip-value">${o} (${n.nonzero}%)</span>`,`<span class="tooltip-key">Median (${n.unit})</span>: <span class="tooltip-value">${n.median.toPrecision(4)}</span>`];t.tooltip.show(a.join("<br/>"))}))}(t,e)}function _a(t,e,n=!0,r=!0,i=!1,o=!0){let a=[];return t.forEach((t=>{t.cellTypes.forEach((s=>{let l=r?s.data.concat(new Array(s.numZeros).fill(0)):s.data,u=r?l.length:+s.numZeros+l.length,c=(s.count/u*100).toFixed(2),f=e[t.tissueSiteDetailId],h=r?5e3:2500,p=zn(r?ko:_o).domain([100,h]),d=n?[f,s.cellType,s.count,u].join(":"):[s.cellType,f,s.count,u].join(":");a.push({color:i?p(l.length):r?"rgb(148, 119, 91)":"rgb(0, 152, 199)",label:"",group:d,superGroup:n?f:s.cellType,gencodeId:t.gencodeId,values:l,nonzero:c,unit:t.unit,datasetId:t.datasetId,median:m(l),total:u,showHalfViolin:void 0,showBoxplot:o,showPoints:!1,nonzeroMedian:0==s.data.length?null:m(s.data)})}))})),a}function ka(t,e){Et(`#${e.buttons.all}`).classed("highlight active",t.showAll&&!t.splitViolin),Et(`#${e.buttons.nonzero}`).classed("highlight active",!t.showAll&&!t.splitViolin),Et(`#${e.buttons.byTissue}`).classed("highlight active",t.byTissue),Et(`#${e.buttons.byCell}`).classed("highlight active",!t.byTissue),Et(`#${e.buttons.splitViolin}`).classed("highlight active",t.splitViolin)}function Ta(t,e,n,r="Bulk Tissue Gene Expression Violin Plot",i=Rt(),o={top:50,right:50,bottom:150,left:100},a={w:.8*window.innerWidth,h:250}){ca(t,e,n,r,i,o,a)}function Ma(t,e,n,r={width:.9*window.innerWidth,height:150},i={top:180,right:0,bottom:20,left:80},o=Rt()){ba(t,e,n,r,i,o)}var Aa={launchBulkTissueViolinPlot:Ta,launchSingleCellViolinPlot:Ma};t.GeneExpressionViolinPlot=Aa,t.launchBulkTissueViolinPlot=Ta,t.launchSingleCellViolinPlot=Ma}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
