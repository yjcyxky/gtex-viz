!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("file-saver")):"function"==typeof define&&define.amd?define(["exports","file-saver"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).ExpressionMap={},t.saveAs)}(this,(function(t,e){"use strict";var n="http://www.w3.org/1999/xhtml",r={svg:"http://www.w3.org/2000/svg",xhtml:n,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function i(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),r.hasOwnProperty(e)?{space:r[e],local:t}:t}function o(t){return function(){var e=this.ownerDocument,r=this.namespaceURI;return r===n&&e.documentElement.namespaceURI===n?e.createElement(t):e.createElementNS(r,t)}}function a(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function s(t){var e=i(t);return(e.local?a:o)(e)}function l(){}function u(t){return null==t?l:function(){return this.querySelector(t)}}function c(){return[]}function f(t){return null==t?c:function(){return this.querySelectorAll(t)}}function h(t){return function(){return this.matches(t)}}function d(t){return new Array(t.length)}function p(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}p.prototype={constructor:p,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var g="$";function v(t,e,n,r,i,o){for(var a,s=0,l=e.length,u=o.length;s<u;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new p(t,o[s]);for(;s<l;++s)(a=e[s])&&(i[s]=a)}function y(t,e,n,r,i,o,a){var s,l,u,c={},f=e.length,h=o.length,d=new Array(f);for(s=0;s<f;++s)(l=e[s])&&(d[s]=u=g+a.call(l,l.__data__,s,e),u in c?i[s]=l:c[u]=l);for(s=0;s<h;++s)(l=c[u=g+a.call(t,o[s],s,o)])?(r[s]=l,l.__data__=o[s],c[u]=null):n[s]=new p(t,o[s]);for(s=0;s<f;++s)(l=e[s])&&c[d[s]]===l&&(i[s]=l)}function m(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function b(t){return function(){this.removeAttribute(t)}}function x(t){return function(){this.removeAttributeNS(t.space,t.local)}}function w(t,e){return function(){this.setAttribute(t,e)}}function _(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function k(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function S(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function T(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function M(t){return function(){this.style.removeProperty(t)}}function A(t,e,n){return function(){this.style.setProperty(t,e,n)}}function C(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function E(t,e){return t.style.getPropertyValue(e)||T(t).getComputedStyle(t,null).getPropertyValue(e)}function N(t){return function(){delete this[t]}}function D(t,e){return function(){this[t]=e}}function j(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function L(t){return t.trim().split(/^|\s+/)}function P(t){return t.classList||new I(t)}function I(t){this._node=t,this._names=L(t.getAttribute("class")||"")}function q(t,e){for(var n=P(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function R(t,e){for(var n=P(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function O(t){return function(){q(this,t)}}function H(t){return function(){R(this,t)}}function B(t,e){return function(){(e.apply(this,arguments)?q:R)(this,t)}}function z(){this.textContent=""}function F(t){return function(){this.textContent=t}}function W(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function G(){this.innerHTML=""}function V(t){return function(){this.innerHTML=t}}function X(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function U(){this.nextSibling&&this.parentNode.appendChild(this)}function Y(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function K(){return null}function Q(){var t=this.parentNode;t&&t.removeChild(this)}function J(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Z(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}I.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var tt={},et=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(tt={mouseenter:"mouseover",mouseleave:"mouseout"}));function nt(t,e,n){return t=rt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function rt(t,e,n){return function(r){var i=et;et=r;try{t.call(this,this.__data__,e,n)}finally{et=i}}}function it(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function ot(t,e,n){var r=tt.hasOwnProperty(t.type)?nt:rt;return function(i,o,a){var s,l=this.__on,u=r(e,o,a);if(l)for(var c=0,f=l.length;c<f;++c)if((s=l[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=u,s.capture=n),void(s.value=e);this.addEventListener(t.type,u,n),s={type:t.type,name:t.name,value:e,listener:u,capture:n},l?l.push(s):this.__on=[s]}}function at(t,e,n){var r=T(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function st(t,e){return function(){return at(this,t,e)}}function lt(t,e){return function(){return at(this,t,e.apply(this,arguments))}}var ut=[null];function ct(t,e){this._groups=t,this._parents=e}function ft(){return new ct([[document.documentElement]],ut)}function ht(t){return"string"==typeof t?new ct([[document.querySelector(t)]],[document.documentElement]):new ct([[t]],ut)}function dt(){for(var t,e=et;t=e.sourceEvent;)e=t;return e}function pt(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]}function gt(t){var e=dt();return e.changedTouches&&(e=e.changedTouches[0]),pt(t,e)}function vt(t){return"string"==typeof t?new ct([document.querySelectorAll(t)],[document.documentElement]):new ct([null==t?[]:t],ut)}ct.prototype=ft.prototype={constructor:ct,select:function(t){"function"!=typeof t&&(t=u(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],l=s.length,c=r[i]=new Array(l),f=0;f<l;++f)(o=s[f])&&(a=t.call(o,o.__data__,f,s))&&("__data__"in o&&(a.__data__=o.__data__),c[f]=a);return new ct(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=f(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],l=s.length,u=0;u<l;++u)(a=s[u])&&(r.push(t.call(a,a.__data__,u,s)),i.push(a));return new ct(r,i)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new ct(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),u=-1,this.each((function(t){d[++u]=t})),d;var n=e?y:v,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var o=i.length,a=new Array(o),s=new Array(o),l=new Array(o),u=0;u<o;++u){var c=r[u],f=i[u],h=f.length,d=t.call(c,c&&c.__data__,u,r),p=d.length,g=s[u]=new Array(p),m=a[u]=new Array(p);n(c,f,g,m,l[u]=new Array(h),d,e);for(var b,x,w=0,_=0;w<p;++w)if(b=g[w]){for(w>=_&&(_=w+1);!(x=m[_])&&++_<p;);b._next=x||null}}return(a=new ct(a,r))._enter=s,a._exit=l,a},enter:function(){return new ct(this._enter||this._groups.map(d),this._parents)},exit:function(){return new ct(this._exit||this._groups.map(d),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),d=0;d<f;++d)(l=u[d]||c[d])&&(h[d]=l);for(;s<r;++s)a[s]=e[s];return new ct(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=m);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],l=s.length,u=i[o]=new Array(l),c=0;c<l;++c)(a=s[c])&&(u[c]=a);u.sort(e)}return new ct(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=i(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?x:b:"function"==typeof e?n.local?S:k:n.local?_:w)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?M:"function"==typeof e?C:A)(t,e,null==n?"":n)):E(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?N:"function"==typeof e?j:D)(t,e)):this.node()[t]},classed:function(t,e){var n=L(t+"");if(arguments.length<2){for(var r=P(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?B:e?O:H)(n,e))},text:function(t){return arguments.length?this.each(null==t?z:("function"==typeof t?W:F)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?G:("function"==typeof t?X:V)(t)):this.node().innerHTML},raise:function(){return this.each(U)},lower:function(){return this.each(Y)},append:function(t){var e="function"==typeof t?t:s(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:s(t),r=null==e?K:"function"==typeof e?e:u(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Q)},clone:function(t){return this.select(t?Z:J)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?ot:it,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var l,u=0,c=s.length;u<c;++u)for(r=0,l=s[u];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?lt:st)(t,e))}};var yt="$";function mt(){}function bt(t,e){var n=new mt;if(t instanceof mt)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}function xt(){var t,e,n,r=[],i=[];function o(n,i,a,s){if(i>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var l,u,c,f=-1,h=n.length,d=r[i++],p=bt(),g=a();++f<h;)(c=p.get(l=d(u=n[f])+""))?c.push(u):p.set(l,[u]);return p.each((function(t,e){s(g,e,o(t,i,a,s))})),g}function a(t,n){if(++n>r.length)return t;var o,s=i[n-1];return null!=e&&n>=r.length?o=t.entries():(o=[],t.each((function(t,e){o.push({key:e,values:a(t,n)})}))),null!=s?o.sort((function(t,e){return s(t.key,e.key)})):o}return n={object:function(t){return o(t,0,wt,_t)},map:function(t){return o(t,0,kt,St)},entries:function(t){return a(o(t,0,kt,St),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return i[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function wt(){return{}}function _t(t,e,n){t[e]=n}function kt(){return bt()}function St(t,e,n){t.set(e,n)}function Tt(){}mt.prototype=bt.prototype={constructor:mt,has:function(t){return yt+t in this},get:function(t){return this[yt+t]},set:function(t,e){return this[yt+t]=e,this},remove:function(t){var e=yt+t;return e in this&&delete this[e]},clear:function(){for(var t in this)t[0]===yt&&delete this[t]},keys:function(){var t=[];for(var e in this)e[0]===yt&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)e[0]===yt&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)e[0]===yt&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)e[0]===yt&&++t;return t},empty:function(){for(var t in this)if(t[0]===yt)return!1;return!0},each:function(t){for(var e in this)e[0]===yt&&t(this[e],e.slice(1),this)}};var Mt=bt.prototype;function At(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}Tt.prototype={constructor:Tt,has:Mt.has,add:function(t){return this[yt+(t+="")]=t,this},remove:Mt.remove,clear:Mt.clear,values:Mt.keys,size:Mt.size,empty:Mt.empty,each:Mt.each};var Ct,Et,Nt=(1===(Ct=At).length&&(Et=Ct,Ct=function(t,e){return At(Et(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;Ct(t[i],e)<0?n=i+1:r=i}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;Ct(t[i],e)>0?r=i:n=i+1}return n}}),Dt=Nt.right;function jt(t){return null===t?NaN:+t}function $t(t,e){var n=function(t,e){var n,r,i=t.length,o=0,a=-1,s=0,l=0;if(null==e)for(;++a<i;)isNaN(n=jt(t[a]))||(l+=(r=n-s)*(n-(s+=r/++o)));else for(;++a<i;)isNaN(n=jt(e(t[a],a,t)))||(l+=(r=n-s)*(n-(s+=r/++o)));if(o>1)return l/(o-1)}(t,e);return n?Math.sqrt(n):n}function Lt(t,e){var n,r,i,o=t.length,a=-1;if(null==e){for(;++a<o;)if(null!=(n=t[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=t[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=i=n;++a<o;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]}function Pt(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o}var It=Math.sqrt(50),qt=Math.sqrt(10),Rt=Math.sqrt(2);function Ot(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=It?10:o>=qt?5:o>=Rt?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=It?10:o>=qt?5:o>=Rt?2:1)}function Ht(t,e,n){if(null==n&&(n=jt),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),a=+n(t[o],o,t);return a+(+n(t[o+1],o+1,t)-a)*(i-o)}}function Bt(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r}function zt(t,e){var n,r=t.length,i=r,o=-1,a=0;if(null==e)for(;++o<r;)isNaN(n=jt(t[o]))?--i:a+=n;else for(;++o<r;)isNaN(n=jt(e(t[o],o,t)))?--i:a+=n;if(i)return a/i}function Ft(t,e){var n,r=t.length,i=-1,o=[];if(null==e)for(;++i<r;)isNaN(n=jt(t[i]))||o.push(n);else for(;++i<r;)isNaN(n=jt(e(t[i],i,t)))||o.push(n);return Ht(o.sort(At),.5)}var Wt="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function Gt(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var Vt={exports:{}};
/*!
   * jQuery JavaScript Library v3.7.1
   * https://jquery.com/
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2023-08-28T13:37Z
   */!function(t){!function(e,n){t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}}("undefined"!=typeof window?window:Wt,(function(t,e){var n=[],r=Object.getPrototypeOf,i=n.slice,o=n.flat?function(t){return n.flat.call(t)}:function(t){return n.concat.apply([],t)},a=n.push,s=n.indexOf,l={},u=l.toString,c=l.hasOwnProperty,f=c.toString,h=f.call(Object),d={},p=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},g=function(t){return null!=t&&t===t.window},v=t.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function m(t,e,n){var r,i,o=(n=n||v).createElement("script");if(o.text=t,e)for(r in y)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function b(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?l[u.call(t)]||"object":typeof t}var x="3.7.1",w=/HTML$/i,_=function(t,e){return new _.fn.init(t,e)};function k(t){var e=!!t&&"length"in t&&t.length,n=b(t);return!p(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function S(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}_.fn=_.prototype={jquery:x,constructor:_,length:0,toArray:function(){return i.call(this)},get:function(t){return null==t?i.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=_.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return _.each(this,t)},map:function(t){return this.pushStack(_.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(i.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(_.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(_.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:n.sort,splice:n.splice},_.extend=_.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||p(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(u&&r&&(_.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||_.isPlainObject(n)?n:{},i=!1,a[e]=_.extend(u,o,r)):void 0!==r&&(a[e]=r));return a},_.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==u.call(t))&&(!(e=r(t))||"function"==typeof(n=c.call(e,"constructor")&&e.constructor)&&f.call(n)===h)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){m(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,r=0;if(k(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},text:function(t){var e,n="",r=0,i=t.nodeType;if(!i)for(;e=t[r++];)n+=_.text(e);return 1===i||11===i?t.textContent:9===i?t.documentElement.textContent:3===i||4===i?t.nodeValue:n},makeArray:function(t,e){var n=e||[];return null!=t&&(k(Object(t))?_.merge(n,"string"==typeof t?[t]:t):a.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:s.call(e,t,n)},isXMLDoc:function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!w.test(e||n&&n.nodeName||"HTML")},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,a=0,s=[];if(k(t))for(r=t.length;a<r;a++)null!=(i=e(t[a],a,n))&&s.push(i);else for(a in t)null!=(i=e(t[a],a,n))&&s.push(i);return o(s)},guid:1,support:d}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=n[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){l["[object "+e+"]"]=e.toLowerCase()}));var T=n.pop,M=n.sort,A=n.splice,C="[\\x20\\t\\r\\n\\f]",E=new RegExp("^"+C+"+|((?:^|[^\\\\])(?:\\\\.)*)"+C+"+$","g");_.contains=function(t,e){var n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(t.contains?t.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))};var N=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function D(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}_.escapeSelector=function(t){return(t+"").replace(N,D)};var j=v,$=a;!function(){var e,r,o,a,l,u,f,h,p,g,v=$,y=_.expando,m=0,b=0,x=tt(),w=tt(),k=tt(),N=tt(),D=function(t,e){return t===e&&(l=!0),0},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="(?:\\\\[\\da-fA-F]{1,6}"+C+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",I="\\["+C+"*("+P+")(?:"+C+"*([*^$|!~]?=)"+C+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+C+"*\\]",q=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",R=new RegExp(C+"+","g"),O=new RegExp("^"+C+"*,"+C+"*"),H=new RegExp("^"+C+"*([>+~]|"+C+")"+C+"*"),B=new RegExp(C+"|>"),z=new RegExp(q),F=new RegExp("^"+P+"$"),W={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+C+"*(even|odd|(([+-]|)(\\d*)n|)"+C+"*(?:([+-]|)"+C+"*(\\d+)|))"+C+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+C+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+C+"*((?:-\\d)?\\d*)"+C+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,V=/^h\d$/i,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,U=/[+~]/,Y=new RegExp("\\\\[\\da-fA-F]{1,6}"+C+"?|\\\\([^\\r\\n\\f])","g"),K=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},Q=function(){lt()},J=ht((function(t){return!0===t.disabled&&S(t,"fieldset")}),{dir:"parentNode",next:"legend"});try{v.apply(n=i.call(j.childNodes),j.childNodes),n[j.childNodes.length].nodeType}catch(t){v={apply:function(t,e){$.apply(t,i.call(e))},call:function(t){$.apply(t,i.call(arguments,1))}}}function Z(t,e,n,r){var i,o,a,s,l,c,f,g=e&&e.ownerDocument,m=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==m&&9!==m&&11!==m)return n;if(!r&&(lt(e),e=e||u,h)){if(11!==m&&(l=X.exec(t)))if(i=l[1]){if(9===m){if(!(a=e.getElementById(i)))return n;if(a.id===i)return v.call(n,a),n}else if(g&&(a=g.getElementById(i))&&Z.contains(e,a)&&a.id===i)return v.call(n,a),n}else{if(l[2])return v.apply(n,e.getElementsByTagName(t)),n;if((i=l[3])&&e.getElementsByClassName)return v.apply(n,e.getElementsByClassName(i)),n}if(!(N[t+" "]||p&&p.test(t))){if(f=t,g=e,1===m&&(B.test(t)||H.test(t))){for((g=U.test(t)&&st(e.parentNode)||e)==e&&d.scope||((s=e.getAttribute("id"))?s=_.escapeSelector(s):e.setAttribute("id",s=y)),o=(c=ct(t)).length;o--;)c[o]=(s?"#"+s:":scope")+" "+ft(c[o]);f=c.join(",")}try{return v.apply(n,g.querySelectorAll(f)),n}catch(e){N(t,!0)}finally{s===y&&e.removeAttribute("id")}}}return mt(t.replace(E,"$1"),e,n,r)}function tt(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function et(t){return t[y]=!0,t}function nt(t){var e=u.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function rt(t){return function(e){return S(e,"input")&&e.type===t}}function it(t){return function(e){return(S(e,"input")||S(e,"button"))&&e.type===t}}function ot(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&J(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function at(t){return et((function(e){return e=+e,et((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function st(t){return t&&void 0!==t.getElementsByTagName&&t}function lt(t){var e,n=t?t.ownerDocument||t:j;return n!=u&&9===n.nodeType&&n.documentElement?(f=(u=n).documentElement,h=!_.isXMLDoc(u),g=f.matches||f.webkitMatchesSelector||f.msMatchesSelector,f.msMatchesSelector&&j!=u&&(e=u.defaultView)&&e.top!==e&&e.addEventListener("unload",Q),d.getById=nt((function(t){return f.appendChild(t).id=_.expando,!u.getElementsByName||!u.getElementsByName(_.expando).length})),d.disconnectedMatch=nt((function(t){return g.call(t,"*")})),d.scope=nt((function(){return u.querySelectorAll(":scope")})),d.cssHas=nt((function(){try{return u.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),d.getById?(r.filter.ID=function(t){var e=t.replace(Y,K);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(Y,K);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):e.querySelectorAll(t)},r.find.CLASS=function(t,e){if(void 0!==e.getElementsByClassName&&h)return e.getElementsByClassName(t)},p=[],nt((function(t){var e;f.appendChild(t).innerHTML="<a id='"+y+"' href='' disabled='disabled'></a><select id='"+y+"-\r\\' disabled='disabled'><option selected=''></option></select>",t.querySelectorAll("[selected]").length||p.push("\\["+C+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+y+"-]").length||p.push("~="),t.querySelectorAll("a#"+y+"+*").length||p.push(".#.+[+~]"),t.querySelectorAll(":checked").length||p.push(":checked"),(e=u.createElement("input")).setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),(e=u.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||p.push("\\["+C+"*name"+C+"*="+C+"*(?:''|\"\")")})),d.cssHas||p.push(":has"),p=p.length&&new RegExp(p.join("|")),D=function(t,e){if(t===e)return l=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!d.sortDetached&&e.compareDocumentPosition(t)===n?t===u||t.ownerDocument==j&&Z.contains(j,t)?-1:e===u||e.ownerDocument==j&&Z.contains(j,e)?1:a?s.call(a,t)-s.call(a,e):0:4&n?-1:1)},u):u}for(e in Z.matches=function(t,e){return Z(t,null,null,e)},Z.matchesSelector=function(t,e){if(lt(t),h&&!N[e+" "]&&(!p||!p.test(e)))try{var n=g.call(t,e);if(n||d.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){N(e,!0)}return Z(e,u,null,[t]).length>0},Z.contains=function(t,e){return(t.ownerDocument||t)!=u&&lt(t),_.contains(t,e)},Z.attr=function(t,e){(t.ownerDocument||t)!=u&&lt(t);var n=r.attrHandle[e.toLowerCase()],i=n&&c.call(r.attrHandle,e.toLowerCase())?n(t,e,!h):void 0;return void 0!==i?i:t.getAttribute(e)},Z.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},_.uniqueSort=function(t){var e,n=[],r=0,o=0;if(l=!d.sortStable,a=!d.sortStable&&i.call(t,0),M.call(t,D),l){for(;e=t[o++];)e===t[o]&&(r=n.push(o));for(;r--;)A.call(t,n[r],1)}return a=null,t},_.fn.uniqueSort=function(){return this.pushStack(_.uniqueSort(i.apply(this)))},r=_.expr={cacheLength:50,createPseudo:et,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Y,K),t[3]=(t[3]||t[4]||t[5]||"").replace(Y,K),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||Z.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&Z.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return W.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&z.test(n)&&(e=ct(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(Y,K).toLowerCase();return"*"===t?function(){return!0}:function(t){return S(t,e)}},CLASS:function(t){var e=x[t+" "];return e||(e=new RegExp("(^|"+C+")"+t+"("+C+"|$)"))&&x(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=Z.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(R," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,l){var u,c,f,h,d,p=o!==a?"nextSibling":"previousSibling",g=e.parentNode,v=s&&e.nodeName.toLowerCase(),b=!l&&!s,x=!1;if(g){if(o){for(;p;){for(f=e;f=f[p];)if(s?S(f,v):1===f.nodeType)return!1;d=p="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?g.firstChild:g.lastChild],a&&b){for(x=(h=(u=(c=g[y]||(g[y]={}))[t]||[])[0]===m&&u[1])&&u[2],f=h&&g.childNodes[h];f=++h&&f&&f[p]||(x=h=0)||d.pop();)if(1===f.nodeType&&++x&&f===e){c[t]=[m,h,x];break}}else if(b&&(x=h=(u=(c=e[y]||(e[y]={}))[t]||[])[0]===m&&u[1]),!1===x)for(;(f=++h&&f&&f[p]||(x=h=0)||d.pop())&&(!(s?S(f,v):1===f.nodeType)||!++x||(b&&((c=f[y]||(f[y]={}))[t]=[m,x]),f!==e)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||Z.error("unsupported pseudo: "+t);return i[y]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?et((function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=s.call(t,o[a])]=!(n[r]=o[a])})):function(t){return i(t,0,n)}):i}},pseudos:{not:et((function(t){var e=[],n=[],r=yt(t.replace(E,"$1"));return r[y]?et((function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:et((function(t){return function(e){return Z(t,e).length>0}})),contains:et((function(t){return t=t.replace(Y,K),function(e){return(e.textContent||_.text(e)).indexOf(t)>-1}})),lang:et((function(t){return F.test(t||"")||Z.error("unsupported lang: "+t),t=t.replace(Y,K).toLowerCase(),function(e){var n;do{if(n=h?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===function(){try{return u.activeElement}catch(t){}}()&&u.hasFocus()&&!!(t.type||t.href||~t.tabIndex)},enabled:ot(!1),disabled:ot(!0),checked:function(t){return S(t,"input")&&!!t.checked||S(t,"option")&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return V.test(t.nodeName)},input:function(t){return G.test(t.nodeName)},button:function(t){return S(t,"input")&&"button"===t.type||S(t,"button")},text:function(t){var e;return S(t,"input")&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:at((function(){return[0]})),last:at((function(t,e){return[e-1]})),eq:at((function(t,e,n){return[n<0?n+e:n]})),even:at((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:at((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:at((function(t,e,n){var r;for(r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:at((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=rt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=it(e);function ut(){}function ct(t,e){var n,i,o,a,s,l,u,c=w[t+" "];if(c)return e?0:c.slice(0);for(s=t,l=[],u=r.preFilter;s;){for(a in n&&!(i=O.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),n=!1,(i=H.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(E," ")}),s=s.slice(n.length)),r.filter)!(i=W[a].exec(s))||u[a]&&!(i=u[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?Z.error(t):w(t,l).slice(0)}function ft(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function ht(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=b++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,l){var u,c,f=[m,s];if(l){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,l))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(c=e[y]||(e[y]={}),i&&S(e,i))e=e[r]||e;else{if((u=c[o])&&u[0]===m&&u[1]===s)return f[2]=u[2];if(c[o]=f,f[2]=t(e,n,l))return!0}return!1}}function dt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function pt(t,e,n,r,i){for(var o,a=[],s=0,l=t.length,u=null!=e;s<l;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),u&&e.push(s)));return a}function gt(t,e,n,r,i,o){return r&&!r[y]&&(r=gt(r)),i&&!i[y]&&(i=gt(i,o)),et((function(o,a,l,u){var c,f,h,d,p=[],g=[],y=a.length,m=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)Z(t,e[r],n);return n}(e||"*",l.nodeType?[l]:l,[]),b=!t||!o&&e?m:pt(m,p,t,l,u);if(n?n(b,d=i||(o?t:y||r)?[]:a,l,u):d=b,r)for(c=pt(d,g),r(c,[],l,u),f=c.length;f--;)(h=c[f])&&(d[g[f]]=!(b[g[f]]=h));if(o){if(i||t){if(i){for(c=[],f=d.length;f--;)(h=d[f])&&c.push(b[f]=h);i(null,d=[],c,u)}for(f=d.length;f--;)(h=d[f])&&(c=i?s.call(o,h):p[f])>-1&&(o[c]=!(a[c]=h))}}else d=pt(d===a?d.splice(y,d.length):d),i?i(null,a,d,u):v.apply(a,d)}))}function vt(t){for(var e,n,i,a=t.length,l=r.relative[t[0].type],u=l||r.relative[" "],c=l?1:0,f=ht((function(t){return t===e}),u,!0),h=ht((function(t){return s.call(e,t)>-1}),u,!0),d=[function(t,n,r){var i=!l&&(r||n!=o)||((e=n).nodeType?f(t,n,r):h(t,n,r));return e=null,i}];c<a;c++)if(n=r.relative[t[c].type])d=[ht(dt(d),n)];else{if((n=r.filter[t[c].type].apply(null,t[c].matches))[y]){for(i=++c;i<a&&!r.relative[t[i].type];i++);return gt(c>1&&dt(d),c>1&&ft(t.slice(0,c-1).concat({value:" "===t[c-2].type?"*":""})).replace(E,"$1"),n,c<i&&vt(t.slice(c,i)),i<a&&vt(t=t.slice(i)),i<a&&ft(t))}d.push(n)}return dt(d)}function yt(t,e){var n,i=[],a=[],s=k[t+" "];if(!s){for(e||(e=ct(t)),n=e.length;n--;)(s=vt(e[n]))[y]?i.push(s):a.push(s);s=k(t,function(t,e){var n=e.length>0,i=t.length>0,a=function(a,s,l,c,f){var d,p,g,y=0,b="0",x=a&&[],w=[],k=o,S=a||i&&r.find.TAG("*",f),M=m+=null==k?1:Math.random()||.1,A=S.length;for(f&&(o=s==u||s||f);b!==A&&null!=(d=S[b]);b++){if(i&&d){for(p=0,s||d.ownerDocument==u||(lt(d),l=!h);g=t[p++];)if(g(d,s||u,l)){v.call(c,d);break}f&&(m=M)}n&&((d=!g&&d)&&y--,a&&x.push(d))}if(y+=b,n&&b!==y){for(p=0;g=e[p++];)g(x,w,s,l);if(a){if(y>0)for(;b--;)x[b]||w[b]||(w[b]=T.call(c));w=pt(w)}v.apply(c,w),f&&!a&&w.length>0&&y+e.length>1&&_.uniqueSort(c)}return f&&(m=M,o=k),x};return n?et(a):a}(a,i)),s.selector=t}return s}function mt(t,e,n,i){var o,a,s,l,u,c="function"==typeof t&&t,f=!i&&ct(t=c.selector||t);if(n=n||[],1===f.length){if((a=f[0]=f[0].slice(0)).length>2&&"ID"===(s=a[0]).type&&9===e.nodeType&&h&&r.relative[a[1].type]){if(!(e=(r.find.ID(s.matches[0].replace(Y,K),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(a.shift().value.length)}for(o=W.needsContext.test(t)?0:a.length;o--&&(s=a[o],!r.relative[l=s.type]);)if((u=r.find[l])&&(i=u(s.matches[0].replace(Y,K),U.test(a[0].type)&&st(e.parentNode)||e))){if(a.splice(o,1),!(t=i.length&&ft(a)))return v.apply(n,i),n;break}}return(c||yt(t,f))(i,e,!h,n,!e||U.test(t)&&st(e.parentNode)||e),n}ut.prototype=r.filters=r.pseudos,r.setFilters=new ut,d.sortStable=y.split("").sort(D).join("")===y,lt(),d.sortDetached=nt((function(t){return 1&t.compareDocumentPosition(u.createElement("fieldset"))})),_.find=Z,_.expr[":"]=_.expr.pseudos,_.unique=_.uniqueSort,Z.compile=yt,Z.select=mt,Z.setDocument=lt,Z.tokenize=ct,Z.escape=_.escapeSelector,Z.getText=_.text,Z.isXML=_.isXMLDoc,Z.selectors=_.expr,Z.support=_.support,Z.uniqueSort=_.uniqueSort}();var L=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&_(t).is(n))break;r.push(t)}return r},P=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},I=_.expr.match.needsContext,q=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function R(t,e,n){return p(e)?_.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?_.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?_.grep(t,(function(t){return s.call(e,t)>-1!==n})):_.filter(e,t,n)}_.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?_.find.matchesSelector(r,t)?[r]:[]:_.find.matches(t,_.grep(e,(function(t){return 1===t.nodeType})))},_.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(_(t).filter((function(){for(e=0;e<r;e++)if(_.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)_.find(t,i[e],n);return r>1?_.uniqueSort(n):n},filter:function(t){return this.pushStack(R(this,t||[],!1))},not:function(t){return this.pushStack(R(this,t||[],!0))},is:function(t){return!!R(this,"string"==typeof t&&I.test(t)?_(t):t||[],!1).length}});var O,H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,B=_.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||O,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:H.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof _?e[0]:e,_.merge(this,_.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:v,!0)),q.test(r[1])&&_.isPlainObject(e))for(r in e)p(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=v.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):p(t)?void 0!==n.ready?n.ready(t):t(_):_.makeArray(t,this)};B.prototype=_.fn,O=_(v);var z=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function W(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}_.fn.extend({has:function(t){var e=_(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(_.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&_(t);if(!I.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&_.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?_.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?s.call(_(t),this[0]):s.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),_.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return L(t,"parentNode")},parentsUntil:function(t,e,n){return L(t,"parentNode",n)},next:function(t){return W(t,"nextSibling")},prev:function(t){return W(t,"previousSibling")},nextAll:function(t){return L(t,"nextSibling")},prevAll:function(t){return L(t,"previousSibling")},nextUntil:function(t,e,n){return L(t,"nextSibling",n)},prevUntil:function(t,e,n){return L(t,"previousSibling",n)},siblings:function(t){return P((t.parentNode||{}).firstChild,t)},children:function(t){return P(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(S(t,"template")&&(t=t.content||t),_.merge([],t.childNodes))}},(function(t,e){_.fn[t]=function(n,r){var i=_.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=_.filter(r,i)),this.length>1&&(F[t]||_.uniqueSort(i),z.test(t)&&i.reverse()),this.pushStack(i)}}));var G=/[^\x20\t\r\n\f]+/g;function V(t){return t}function X(t){throw t}function U(t,e,n,r){var i;try{t&&p(i=t.promise)?i.call(t).done(e).fail(n):t&&p(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}_.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return _.each(t.match(G)||[],(function(t,n){e[n]=!0})),e}(t):_.extend({},t);var e,n,r,i,o=[],a=[],s=-1,l=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){_.each(n,(function(n,r){p(r)?t.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==b(r)&&e(r)}))}(arguments),n&&!e&&l()),this},remove:function(){return _.each(arguments,(function(t,e){for(var n;(n=_.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?_.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},_.extend({Deferred:function(e){var n=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return _.Deferred((function(e){_.each(n,(function(n,r){var i=p(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&p(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(e,r,i){var o=0;function a(e,n,r,i){return function(){var s=this,l=arguments,u=function(){var t,u;if(!(e<o)){if((t=r.apply(s,l))===n.promise())throw new TypeError("Thenable self-resolution");u=t&&("object"==typeof t||"function"==typeof t)&&t.then,p(u)?i?u.call(t,a(o,n,V,i),a(o,n,X,i)):(o++,u.call(t,a(o,n,V,i),a(o,n,X,i),a(o,n,V,n.notifyWith))):(r!==V&&(s=void 0,l=[t]),(i||n.resolveWith)(s,l))}},c=i?u:function(){try{u()}catch(t){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(t,c.error),e+1>=o&&(r!==X&&(s=void 0,l=[t]),n.rejectWith(s,l))}};e?c():(_.Deferred.getErrorHook?c.error=_.Deferred.getErrorHook():_.Deferred.getStackHook&&(c.error=_.Deferred.getStackHook()),t.setTimeout(c))}}return _.Deferred((function(t){n[0][3].add(a(0,t,p(i)?i:V,t.notifyWith)),n[1][3].add(a(0,t,p(e)?e:V)),n[2][3].add(a(0,t,p(r)?r:X))})).promise()},promise:function(t){return null!=t?_.extend(t,i):i}},o={};return _.each(n,(function(t,e){var a=e[2],s=e[5];i[e[1]]=a.add,s&&a.add((function(){r=s}),n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),a.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),o=i.call(arguments),a=_.Deferred(),s=function(t){return function(n){r[t]=this,o[t]=arguments.length>1?i.call(arguments):n,--e||a.resolveWith(r,o)}};if(e<=1&&(U(t,a.done(s(n)).resolve,a.reject,!e),"pending"===a.state()||p(o[n]&&o[n].then)))return a.then();for(;n--;)U(o[n],s(n),a.reject);return a.promise()}});var Y=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&Y.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},_.readyException=function(e){t.setTimeout((function(){throw e}))};var K=_.Deferred();function Q(){v.removeEventListener("DOMContentLoaded",Q),t.removeEventListener("load",Q),_.ready()}_.fn.ready=function(t){return K.then(t).catch((function(t){_.readyException(t)})),this},_.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--_.readyWait:_.isReady)||(_.isReady=!0,!0!==t&&--_.readyWait>0||K.resolveWith(v,[_]))}}),_.ready.then=K.then,"complete"===v.readyState||"loading"!==v.readyState&&!v.documentElement.doScroll?t.setTimeout(_.ready):(v.addEventListener("DOMContentLoaded",Q),t.addEventListener("load",Q));var J=function(t,e,n,r,i,o,a){var s=0,l=t.length,u=null==n;if("object"===b(n))for(s in i=!0,n)J(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,p(r)||(a=!0),u&&(a?(e.call(t,r),e=null):(u=e,e=function(t,e,n){return u.call(_(t),n)})),e))for(;s<l;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:u?e.call(t):l?e(t[0],n):o},Z=/^-ms-/,tt=/-([a-z])/g;function et(t,e){return e.toUpperCase()}function nt(t){return t.replace(Z,"ms-").replace(tt,et)}var rt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function it(){this.expando=_.expando+it.uid++}it.uid=1,it.prototype={cache:function(t){var e=t[this.expando];return e||(e={},rt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[nt(e)]=n;else for(r in e)i[nt(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][nt(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(nt):(e=nt(e))in r?[e]:e.match(G)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||_.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!_.isEmptyObject(e)}};var ot=new it,at=new it,st=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,lt=/[A-Z]/g;function ut(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(lt,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:st.test(t)?JSON.parse(t):t)}(n)}catch(t){}at.set(t,e,n)}else n=void 0;return n}_.extend({hasData:function(t){return at.hasData(t)||ot.hasData(t)},data:function(t,e,n){return at.access(t,e,n)},removeData:function(t,e){at.remove(t,e)},_data:function(t,e,n){return ot.access(t,e,n)},_removeData:function(t,e){ot.remove(t,e)}}),_.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=at.get(o),1===o.nodeType&&!ot.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=nt(r.slice(5)),ut(o,r,i[r]));ot.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){at.set(this,t)})):J(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=at.get(o,t))||void 0!==(n=ut(o,t))?n:void 0;this.each((function(){at.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){at.remove(this,t)}))}}),_.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=ot.get(t,e),n&&(!r||Array.isArray(n)?r=ot.access(t,e,_.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=_.queue(t,e),r=n.length,i=n.shift(),o=_._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){_.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return ot.get(t,n)||ot.access(t,n,{empty:_.Callbacks("once memory").add((function(){ot.remove(t,[e+"queue",n])}))})}}),_.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?_.queue(this[0],t):void 0===e?this:this.each((function(){var n=_.queue(this,t,e);_._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&_.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){_.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=_.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=ot.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var ct=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ft=new RegExp("^(?:([+-])=|)("+ct+")([a-z%]*)$","i"),ht=["Top","Right","Bottom","Left"],dt=v.documentElement,pt=function(t){return _.contains(t.ownerDocument,t)},gt={composed:!0};dt.getRootNode&&(pt=function(t){return _.contains(t.ownerDocument,t)||t.getRootNode(gt)===t.ownerDocument});var vt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&pt(t)&&"none"===_.css(t,"display")};function yt(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return _.css(t,e,"")},l=s(),u=n&&n[3]||(_.cssNumber[e]?"":"px"),c=t.nodeType&&(_.cssNumber[e]||"px"!==u&&+l)&&ft.exec(_.css(t,e));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)_.style(t,e,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,_.style(t,e,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var mt={};function bt(t){var e,n=t.ownerDocument,r=t.nodeName,i=mt[r];return i||(e=n.body.appendChild(n.createElement(r)),i=_.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),mt[r]=i,i)}function xt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=ot.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&vt(r)&&(i[o]=bt(r))):"none"!==n&&(i[o]="none",ot.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}_.fn.extend({show:function(){return xt(this,!0)},hide:function(){return xt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){vt(this)?_(this).show():_(this).hide()}))}});var wt,_t,kt=/^(?:checkbox|radio)$/i,St=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Tt=/^$|^module$|\/(?:java|ecma)script/i;wt=v.createDocumentFragment().appendChild(v.createElement("div")),(_t=v.createElement("input")).setAttribute("type","radio"),_t.setAttribute("checked","checked"),_t.setAttribute("name","t"),wt.appendChild(_t),d.checkClone=wt.cloneNode(!0).cloneNode(!0).lastChild.checked,wt.innerHTML="<textarea>x</textarea>",d.noCloneChecked=!!wt.cloneNode(!0).lastChild.defaultValue,wt.innerHTML="<option></option>",d.option=!!wt.lastChild;var Mt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function At(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&S(t,e)?_.merge([t],n):n}function Ct(t,e){for(var n=0,r=t.length;n<r;n++)ot.set(t[n],"globalEval",!e||ot.get(e[n],"globalEval"))}Mt.tbody=Mt.tfoot=Mt.colgroup=Mt.caption=Mt.thead,Mt.th=Mt.td,d.option||(Mt.optgroup=Mt.option=[1,"<select multiple='multiple'>","</select>"]);var Et=/<|&#?\w+;/;function Nt(t,e,n,r,i){for(var o,a,s,l,u,c,f=e.createDocumentFragment(),h=[],d=0,p=t.length;d<p;d++)if((o=t[d])||0===o)if("object"===b(o))_.merge(h,o.nodeType?[o]:o);else if(Et.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(St.exec(o)||["",""])[1].toLowerCase(),l=Mt[s]||Mt._default,a.innerHTML=l[1]+_.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;_.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",d=0;o=h[d++];)if(r&&_.inArray(o,r)>-1)i&&i.push(o);else if(u=pt(o),a=At(f.appendChild(o),"script"),u&&Ct(a),n)for(c=0;o=a[c++];)Tt.test(o.type||"")&&n.push(o);return f}var Dt=/^([^.]*)(?:\.(.+)|)/;function jt(){return!0}function $t(){return!1}function Lt(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)Lt(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=$t;else if(!i)return t;return 1===o&&(a=i,i=function(t){return _().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=_.guid++)),t.each((function(){_.event.add(this,e,i,r,n)}))}function Pt(t,e,n){n?(ot.set(t,e,!1),_.event.add(t,e,{namespace:!1,handler:function(t){var n,r=ot.get(this,e);if(1&t.isTrigger&&this[e]){if(r)(_.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=i.call(arguments),ot.set(this,e,r),this[e](),n=ot.get(this,e),ot.set(this,e,!1),r!==n)return t.stopImmediatePropagation(),t.preventDefault(),n}else r&&(ot.set(this,e,_.event.trigger(r[0],r.slice(1),this)),t.stopPropagation(),t.isImmediatePropagationStopped=jt)}})):void 0===ot.get(t,e)&&_.event.add(t,e,jt)}_.event={global:{},add:function(t,e,n,r,i){var o,a,s,l,u,c,f,h,d,p,g,v=ot.get(t);if(rt(t))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&_.find.matchesSelector(dt,i),n.guid||(n.guid=_.guid++),(l=v.events)||(l=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return void 0!==_&&_.event.triggered!==e.type?_.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(G)||[""]).length;u--;)d=g=(s=Dt.exec(e[u])||[])[1],p=(s[2]||"").split(".").sort(),d&&(f=_.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=_.event.special[d]||{},c=_.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&_.expr.match.needsContext.test(i),namespace:p.join(".")},o),(h=l[d])||((h=l[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,p,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,c):h.push(c),_.event.global[d]=!0)},remove:function(t,e,n,r,i){var o,a,s,l,u,c,f,h,d,p,g,v=ot.hasData(t)&&ot.get(t);if(v&&(l=v.events)){for(u=(e=(e||"").match(G)||[""]).length;u--;)if(d=g=(s=Dt.exec(e[u])||[])[1],p=(s[2]||"").split(".").sort(),d){for(f=_.event.special[d]||{},h=l[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(t,c));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,p,v.handle)||_.removeEvent(t,d,v.handle),delete l[d])}else for(d in l)_.event.remove(t,d+e[u],n,r,!0);_.isEmptyObject(l)&&ot.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=new Array(arguments.length),l=_.event.fix(t),u=(ot.get(this,"events")||Object.create(null))[l.type]||[],c=_.event.special[l.type]||{};for(s[0]=l,e=1;e<arguments.length;e++)s[e]=arguments[e];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=_.event.handlers.call(this,l,u),e=0;(i=a[e++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(r=((_.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,r,i,o,a,s=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?_(i,this).index(u)>-1:_.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<e.length&&s.push({elem:u,handlers:e.slice(l)}),s},addProp:function(t,e){Object.defineProperty(_.Event.prototype,t,{enumerable:!0,configurable:!0,get:p(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[_.expando]?t:new _.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return kt.test(e.type)&&e.click&&S(e,"input")&&Pt(e,"click",!0),!1},trigger:function(t){var e=this||t;return kt.test(e.type)&&e.click&&S(e,"input")&&Pt(e,"click"),!0},_default:function(t){var e=t.target;return kt.test(e.type)&&e.click&&S(e,"input")&&ot.get(e,"click")||S(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},_.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},_.Event=function(t,e){if(!(this instanceof _.Event))return new _.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?jt:$t,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&_.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:$t,isPropagationStopped:$t,isImmediatePropagationStopped:$t,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=jt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=jt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=jt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},_.event.addProp),_.each({focus:"focusin",blur:"focusout"},(function(t,e){function n(t){if(v.documentMode){var n=ot.get(this,"handle"),r=_.event.fix(t);r.type="focusin"===t.type?"focus":"blur",r.isSimulated=!0,n(t),r.target===r.currentTarget&&n(r)}else _.event.simulate(e,t.target,_.event.fix(t))}_.event.special[t]={setup:function(){var r;if(Pt(this,t,!0),!v.documentMode)return!1;(r=ot.get(this,e))||this.addEventListener(e,n),ot.set(this,e,(r||0)+1)},trigger:function(){return Pt(this,t),!0},teardown:function(){var t;if(!v.documentMode)return!1;(t=ot.get(this,e)-1)?ot.set(this,e,t):(this.removeEventListener(e,n),ot.remove(this,e))},_default:function(e){return ot.get(e.target,t)},delegateType:e},_.event.special[e]={setup:function(){var r=this.ownerDocument||this.document||this,i=v.documentMode?this:r,o=ot.get(i,e);o||(v.documentMode?this.addEventListener(e,n):r.addEventListener(t,n,!0)),ot.set(i,e,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=v.documentMode?this:r,o=ot.get(i,e)-1;o?ot.set(i,e,o):(v.documentMode?this.removeEventListener(e,n):r.removeEventListener(t,n,!0),ot.remove(i,e))}}})),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){_.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||_.contains(this,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}})),_.fn.extend({on:function(t,e,n,r){return Lt(this,t,e,n,r)},one:function(t,e,n,r){return Lt(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,_(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=$t),this.each((function(){_.event.remove(this,t,n,e)}))}});var It=/<script|<style|<link/i,qt=/checked\s*(?:[^=]|=\s*.checked.)/i,Rt=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Ot(t,e){return S(t,"table")&&S(11!==e.nodeType?e:e.firstChild,"tr")&&_(t).children("tbody")[0]||t}function Ht(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Bt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function zt(t,e){var n,r,i,o,a,s;if(1===e.nodeType){if(ot.hasData(t)&&(s=ot.get(t).events))for(i in ot.remove(e,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)_.event.add(e,i,s[i][n]);at.hasData(t)&&(o=at.access(t),a=_.extend({},o),at.set(e,a))}}function Ft(t,e){var n=e.nodeName.toLowerCase();"input"===n&&kt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Wt(t,e,n,r){e=o(e);var i,a,s,l,u,c,f=0,h=t.length,g=h-1,v=e[0],y=p(v);if(y||h>1&&"string"==typeof v&&!d.checkClone&&qt.test(v))return t.each((function(i){var o=t.eq(i);y&&(e[0]=v.call(this,i,o.html())),Wt(o,e,n,r)}));if(h&&(a=(i=Nt(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=a),a||r)){for(l=(s=_.map(At(i,"script"),Ht)).length;f<h;f++)u=i,f!==g&&(u=_.clone(u,!0,!0),l&&_.merge(s,At(u,"script"))),n.call(t[f],u,f);if(l)for(c=s[s.length-1].ownerDocument,_.map(s,Bt),f=0;f<l;f++)u=s[f],Tt.test(u.type||"")&&!ot.access(u,"globalEval")&&_.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?_._evalUrl&&!u.noModule&&_._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):m(u.textContent.replace(Rt,""),u,c))}return t}function Gt(t,e,n){for(var r,i=e?_.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||_.cleanData(At(r)),r.parentNode&&(n&&pt(r)&&Ct(At(r,"script")),r.parentNode.removeChild(r));return t}_.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),l=pt(t);if(!(d.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||_.isXMLDoc(t)))for(a=At(s),r=0,i=(o=At(t)).length;r<i;r++)Ft(o[r],a[r]);if(e)if(n)for(o=o||At(t),a=a||At(s),r=0,i=o.length;r<i;r++)zt(o[r],a[r]);else zt(t,s);return(a=At(s,"script")).length>0&&Ct(a,!l&&At(t,"script")),s},cleanData:function(t){for(var e,n,r,i=_.event.special,o=0;void 0!==(n=t[o]);o++)if(rt(n)){if(e=n[ot.expando]){if(e.events)for(r in e.events)i[r]?_.event.remove(n,r):_.removeEvent(n,r,e.handle);n[ot.expando]=void 0}n[at.expando]&&(n[at.expando]=void 0)}}}),_.fn.extend({detach:function(t){return Gt(this,t,!0)},remove:function(t){return Gt(this,t)},text:function(t){return J(this,(function(t){return void 0===t?_.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Wt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ot(this,t).appendChild(t)}))},prepend:function(){return Wt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ot(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Wt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Wt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(_.cleanData(At(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return _.clone(this,t,e)}))},html:function(t){return J(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!It.test(t)&&!Mt[(St.exec(t)||["",""])[1].toLowerCase()]){t=_.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(_.cleanData(At(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Wt(this,arguments,(function(e){var n=this.parentNode;_.inArray(this,t)<0&&(_.cleanData(At(this)),n&&n.replaceChild(e,this))}),t)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){_.fn[t]=function(t){for(var n,r=[],i=_(t),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),_(i[s])[e](n),a.apply(r,n.get());return this.pushStack(r)}}));var Vt=new RegExp("^("+ct+")(?!px)[a-z%]+$","i"),Xt=/^--/,Ut=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Yt=function(t,e,n){var r,i,o={};for(i in e)o[i]=t.style[i],t.style[i]=e[i];for(i in r=n.call(t),e)t.style[i]=o[i];return r},Kt=new RegExp(ht.join("|"),"i");function Qt(t,e,n){var r,i,o,a,s=Xt.test(e),l=t.style;return(n=n||Ut(t))&&(a=n.getPropertyValue(e)||n[e],s&&a&&(a=a.replace(E,"$1")||void 0),""!==a||pt(t)||(a=_.style(t,e)),!d.pixelBoxStyles()&&Vt.test(a)&&Kt.test(e)&&(r=l.width,i=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=i,l.maxWidth=o)),void 0!==a?a+"":a}function Jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",dt.appendChild(u).appendChild(c);var e=t.getComputedStyle(c);r="1%"!==e.top,l=12===n(e.marginLeft),c.style.right="60%",a=36===n(e.right),i=36===n(e.width),c.style.position="absolute",o=12===n(c.offsetWidth/3),dt.removeChild(u),c=null}}function n(t){return Math.round(parseFloat(t))}var r,i,o,a,s,l,u=v.createElement("div"),c=v.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",d.clearCloneStyle="content-box"===c.style.backgroundClip,_.extend(d,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,n,r,i;return null==s&&(e=v.createElement("table"),n=v.createElement("tr"),r=v.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",n.style.cssText="box-sizing:content-box;border:1px solid",n.style.height="1px",r.style.height="9px",r.style.display="block",dt.appendChild(e).appendChild(n).appendChild(r),i=t.getComputedStyle(n),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===n.offsetHeight,dt.removeChild(e)),s}}))}();var Zt=["Webkit","Moz","ms"],te=v.createElement("div").style,ee={};function ne(t){var e=_.cssProps[t]||ee[t];return e||(t in te?t:ee[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Zt.length;n--;)if((t=Zt[n]+e)in te)return t}(t)||t)}var re=/^(none|table(?!-c[ea]).+)/,ie={position:"absolute",visibility:"hidden",display:"block"},oe={letterSpacing:"0",fontWeight:"400"};function ae(t,e,n){var r=ft.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function se(t,e,n,r,i,o){var a="width"===e?1:0,s=0,l=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=_.css(t,n+ht[a],!0,i)),r?("content"===n&&(l-=_.css(t,"padding"+ht[a],!0,i)),"margin"!==n&&(l-=_.css(t,"border"+ht[a]+"Width",!0,i))):(l+=_.css(t,"padding"+ht[a],!0,i),"padding"!==n?l+=_.css(t,"border"+ht[a]+"Width",!0,i):s+=_.css(t,"border"+ht[a]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-s-.5))||0),l+u}function le(t,e,n){var r=Ut(t),i=(!d.boxSizingReliable()||n)&&"border-box"===_.css(t,"boxSizing",!1,r),o=i,a=Qt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(Vt.test(a)){if(!n)return a;a="auto"}return(!d.boxSizingReliable()&&i||!d.reliableTrDimensions()&&S(t,"tr")||"auto"===a||!parseFloat(a)&&"inline"===_.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===_.css(t,"boxSizing",!1,r),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+se(t,e,n||(i?"border":"content"),o,r,a)+"px"}function ue(t,e,n,r,i){return new ue.prototype.init(t,e,n,r,i)}_.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Qt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=nt(e),l=Xt.test(e),u=t.style;if(l||(e=ne(s)),a=_.cssHooks[e]||_.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:u[e];"string"===(o=typeof n)&&(i=ft.exec(n))&&i[1]&&(n=yt(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(_.cssNumber[s]?"":"px")),d.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(l?u.setProperty(e,n):u[e]=n))}},css:function(t,e,n,r){var i,o,a,s=nt(e);return Xt.test(e)||(e=ne(s)),(a=_.cssHooks[e]||_.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=Qt(t,e,r)),"normal"===i&&e in oe&&(i=oe[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),_.each(["height","width"],(function(t,e){_.cssHooks[e]={get:function(t,n,r){if(n)return!re.test(_.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?le(t,e,r):Yt(t,ie,(function(){return le(t,e,r)}))},set:function(t,n,r){var i,o=Ut(t),a=!d.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===_.css(t,"boxSizing",!1,o),l=r?se(t,e,r,s,o):0;return s&&a&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-se(t,e,"border",!1,o)-.5)),l&&(i=ft.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=_.css(t,e)),ae(0,n,l)}}})),_.cssHooks.marginLeft=Jt(d.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Qt(t,"marginLeft"))||t.getBoundingClientRect().left-Yt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),_.each({margin:"",padding:"",border:"Width"},(function(t,e){_.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ht[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(_.cssHooks[t+e].set=ae)})),_.fn.extend({css:function(t,e){return J(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Ut(t),i=e.length;a<i;a++)o[e[a]]=_.css(t,e[a],!1,r);return o}return void 0!==n?_.style(t,e,n):_.css(t,e)}),t,e,arguments.length>1)}}),_.Tween=ue,ue.prototype={constructor:ue,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||_.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(_.cssNumber[n]?"":"px")},cur:function(){var t=ue.propHooks[this.prop];return t&&t.get?t.get(this):ue.propHooks._default.get(this)},run:function(t){var e,n=ue.propHooks[this.prop];return this.options.duration?this.pos=e=_.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ue.propHooks._default.set(this),this}},ue.prototype.init.prototype=ue.prototype,ue.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=_.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){_.fx.step[t.prop]?_.fx.step[t.prop](t):1!==t.elem.nodeType||!_.cssHooks[t.prop]&&null==t.elem.style[ne(t.prop)]?t.elem[t.prop]=t.now:_.style(t.elem,t.prop,t.now+t.unit)}}},ue.propHooks.scrollTop=ue.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},_.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},_.fx=ue.prototype.init,_.fx.step={};var ce,fe,he=/^(?:toggle|show|hide)$/,de=/queueHooks$/;function pe(){fe&&(!1===v.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(pe):t.setTimeout(pe,_.fx.interval),_.fx.tick())}function ge(){return t.setTimeout((function(){ce=void 0})),ce=Date.now()}function ve(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ht[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function ye(t,e,n){for(var r,i=(me.tweeners[e]||[]).concat(me.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function me(t,e,n){var r,i,o=0,a=me.prefilters.length,s=_.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var e=ce||ge(),n=Math.max(0,u.startTime+u.duration-e),r=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(r);return s.notifyWith(t,[u,r,n]),r<1&&a?n:(a||s.notifyWith(t,[u,1,0]),s.resolveWith(t,[u]),!1)},u=s.promise({elem:t,props:_.extend({},e),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},n),originalProperties:e,originalOptions:n,startTime:ce||ge(),duration:n.duration,tweens:[],createTween:function(e,n){var r=_.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(r),r},stop:function(e){var n=0,r=e?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return e?(s.notifyWith(t,[u,1,0]),s.resolveWith(t,[u,e])):s.rejectWith(t,[u,e]),this}}),c=u.props;for(!function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=nt(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=_.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(c,u.opts.specialEasing);o<a;o++)if(r=me.prefilters[o].call(u,t,c,u.opts))return p(r.stop)&&(_._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return _.map(c,ye,u),p(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),_.fx.timer(_.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u}_.Animation=_.extend(me,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return yt(n.elem,t,ft.exec(e),n),n}]},tweener:function(t,e){p(t)?(e=t,t=["*"]):t=t.match(G);for(var n,r=0,i=t.length;r<i;r++)n=t[r],me.tweeners[n]=me.tweeners[n]||[],me.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,l,u,c,f="width"in e||"height"in e,h=this,d={},p=t.style,g=t.nodeType&&vt(t),v=ot.get(t,"fxshow");for(r in n.queue||(null==(a=_._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,_.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],he.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||_.style(t,r)}if((l=!_.isEmptyObject(e))||!_.isEmptyObject(d))for(r in f&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=v&&v.display)&&(u=ot.get(t,"display")),"none"===(c=_.css(t,"display"))&&(u?c=u:(xt([t],!0),u=t.style.display||u,c=_.css(t,"display"),xt([t]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===_.css(t,"float")&&(l||(h.done((function(){p.display=u})),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,d)l||(v?"hidden"in v&&(g=v.hidden):v=ot.access(t,"fxshow",{display:u}),o&&(v.hidden=!g),g&&xt([t],!0),h.done((function(){for(r in g||xt([t]),ot.remove(t,"fxshow"),d)_.style(t,r,d[r])}))),l=ye(g?v[r]:0,r,h),r in v||(v[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?me.prefilters.unshift(t):me.prefilters.push(t)}}),_.speed=function(t,e,n){var r=t&&"object"==typeof t?_.extend({},t):{complete:n||!n&&e||p(t)&&t,duration:t,easing:n&&e||e&&!p(e)&&e};return _.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in _.fx.speeds?r.duration=_.fx.speeds[r.duration]:r.duration=_.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){p(r.old)&&r.old.call(this),r.queue&&_.dequeue(this,r.queue)},r},_.fn.extend({fadeTo:function(t,e,n,r){return this.filter(vt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=_.isEmptyObject(t),o=_.speed(e,n,r),a=function(){var e=me(this,_.extend({},t),o);(i||ot.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=_.timers,a=ot.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&de.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||_.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=ot.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=_.timers,a=r?r.length:0;for(n.finish=!0,_.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),_.each(["toggle","show","hide"],(function(t,e){var n=_.fn[e];_.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(ve(e,!0),t,r,i)}})),_.each({slideDown:ve("show"),slideUp:ve("hide"),slideToggle:ve("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){_.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),_.timers=[],_.fx.tick=function(){var t,e=0,n=_.timers;for(ce=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||_.fx.stop(),ce=void 0},_.fx.timer=function(t){_.timers.push(t),_.fx.start()},_.fx.interval=13,_.fx.start=function(){fe||(fe=!0,pe())},_.fx.stop=function(){fe=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(e,n){return e=_.fx&&_.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,r){var i=t.setTimeout(n,e);r.stop=function(){t.clearTimeout(i)}}))},function(){var t=v.createElement("input"),e=v.createElement("select").appendChild(v.createElement("option"));t.type="checkbox",d.checkOn=""!==t.value,d.optSelected=e.selected,(t=v.createElement("input")).value="t",t.type="radio",d.radioValue="t"===t.value}();var be,xe=_.expr.attrHandle;_.fn.extend({attr:function(t,e){return J(this,_.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){_.removeAttr(this,t)}))}}),_.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?_.prop(t,e,n):(1===o&&_.isXMLDoc(t)||(i=_.attrHooks[e.toLowerCase()]||(_.expr.match.bool.test(e)?be:void 0)),void 0!==n?null===n?void _.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=_.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!d.radioValue&&"radio"===e&&S(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(G);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),be={set:function(t,e,n){return!1===e?_.removeAttr(t,n):t.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=xe[e]||_.find.attr;xe[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=xe[a],xe[a]=i,i=null!=n(t,e,r)?a:null,xe[a]=o),i}}));var we=/^(?:input|select|textarea|button)$/i,_e=/^(?:a|area)$/i;function ke(t){return(t.match(G)||[]).join(" ")}function Se(t){return t.getAttribute&&t.getAttribute("class")||""}function Te(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(G)||[]}_.fn.extend({prop:function(t,e){return J(this,_.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[_.propFix[t]||t]}))}}),_.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&_.isXMLDoc(t)||(e=_.propFix[e]||e,i=_.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=_.find.attr(t,"tabindex");return e?parseInt(e,10):we.test(t.nodeName)||_e.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),d.optSelected||(_.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){_.propFix[this.toLowerCase()]=this})),_.fn.extend({addClass:function(t){var e,n,r,i,o,a;return p(t)?this.each((function(e){_(this).addClass(t.call(this,e,Se(this)))})):(e=Te(t)).length?this.each((function(){if(r=Se(this),n=1===this.nodeType&&" "+ke(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=ke(n),r!==a&&this.setAttribute("class",a)}})):this},removeClass:function(t){var e,n,r,i,o,a;return p(t)?this.each((function(e){_(this).removeClass(t.call(this,e,Se(this)))})):arguments.length?(e=Te(t)).length?this.each((function(){if(r=Se(this),n=1===this.nodeType&&" "+ke(r)+" "){for(o=0;o<e.length;o++)for(i=e[o];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");a=ke(n),r!==a&&this.setAttribute("class",a)}})):this:this.attr("class","")},toggleClass:function(t,e){var n,r,i,o,a=typeof t,s="string"===a||Array.isArray(t);return p(t)?this.each((function(n){_(this).toggleClass(t.call(this,n,Se(this),e),e)})):"boolean"==typeof e&&s?e?this.addClass(t):this.removeClass(t):(n=Te(t),this.each((function(){if(s)for(o=_(this),i=0;i<n.length;i++)r=n[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==a||((r=Se(this))&&ot.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":ot.get(this,"__className__")||""))})))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+ke(Se(n))+" ").indexOf(e)>-1)return!0;return!1}});var Me=/\r/g;_.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=p(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,_(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=_.map(i,(function(t){return null==t?"":t+""}))),(e=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=_.valHooks[i.type]||_.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Me,""):null==n?"":n:void 0}}),_.extend({valHooks:{option:{get:function(t){var e=_.find.attr(t,"value");return null!=e?e:ke(_.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(e=_(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=_.makeArray(e),a=i.length;a--;)((r=i[a]).selected=_.inArray(_.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),_.each(["radio","checkbox"],(function(){_.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=_.inArray(_(t).val(),e)>-1}},d.checkOn||(_.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}));var Ae=t.location,Ce={guid:Date.now()},Ee=/\?/;_.parseXML=function(e){var n,r;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){}return r=n&&n.getElementsByTagName("parsererror")[0],n&&!r||_.error("Invalid XML: "+(r?_.map(r.childNodes,(function(t){return t.textContent})).join("\n"):e)),n};var Ne=/^(?:focusinfocus|focusoutblur)$/,De=function(t){t.stopPropagation()};_.extend(_.event,{trigger:function(e,n,r,i){var o,a,s,l,u,f,h,d,y=[r||v],m=c.call(e,"type")?e.type:e,b=c.call(e,"namespace")?e.namespace.split("."):[];if(a=d=s=r=r||v,3!==r.nodeType&&8!==r.nodeType&&!Ne.test(m+_.event.triggered)&&(m.indexOf(".")>-1&&(b=m.split("."),m=b.shift(),b.sort()),u=m.indexOf(":")<0&&"on"+m,(e=e[_.expando]?e:new _.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=b.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),n=null==n?[e]:_.makeArray(n,[e]),h=_.event.special[m]||{},i||!h.trigger||!1!==h.trigger.apply(r,n))){if(!i&&!h.noBubble&&!g(r)){for(l=h.delegateType||m,Ne.test(l+m)||(a=a.parentNode);a;a=a.parentNode)y.push(a),s=a;s===(r.ownerDocument||v)&&y.push(s.defaultView||s.parentWindow||t)}for(o=0;(a=y[o++])&&!e.isPropagationStopped();)d=a,e.type=o>1?l:h.bindType||m,(f=(ot.get(a,"events")||Object.create(null))[e.type]&&ot.get(a,"handle"))&&f.apply(a,n),(f=u&&a[u])&&f.apply&&rt(a)&&(e.result=f.apply(a,n),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(y.pop(),n)||!rt(r)||u&&p(r[m])&&!g(r)&&((s=r[u])&&(r[u]=null),_.event.triggered=m,e.isPropagationStopped()&&d.addEventListener(m,De),r[m](),e.isPropagationStopped()&&d.removeEventListener(m,De),_.event.triggered=void 0,s&&(r[u]=s)),e.result}},simulate:function(t,e,n){var r=_.extend(new _.Event,n,{type:t,isSimulated:!0});_.event.trigger(r,null,e)}}),_.fn.extend({trigger:function(t,e){return this.each((function(){_.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return _.event.trigger(t,e,n,!0)}});var je=/\[\]$/,$e=/\r?\n/g,Le=/^(?:submit|button|image|reset|file)$/i,Pe=/^(?:input|select|textarea|keygen)/i;function Ie(t,e,n,r){var i;if(Array.isArray(e))_.each(e,(function(e,i){n||je.test(t)?r(t,i):Ie(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==b(e))r(t,e);else for(i in e)Ie(t+"["+i+"]",e[i],n,r)}_.param=function(t,e){var n,r=[],i=function(t,e){var n=p(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!_.isPlainObject(t))_.each(t,(function(){i(this.name,this.value)}));else for(n in t)Ie(n,t[n],e,i);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=_.prop(this,"elements");return t?_.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!_(this).is(":disabled")&&Pe.test(this.nodeName)&&!Le.test(t)&&(this.checked||!kt.test(t))})).map((function(t,e){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,(function(t){return{name:e.name,value:t.replace($e,"\r\n")}})):{name:e.name,value:n.replace($e,"\r\n")}})).get()}});var qe=/%20/g,Re=/#.*$/,Oe=/([?&])_=[^&]*/,He=/^(.*?):[ \t]*([^\r\n]*)$/gm,Be=/^(?:GET|HEAD)$/,ze=/^\/\//,Fe={},We={},Ge="*/".concat("*"),Ve=v.createElement("a");function Xe(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(G)||[];if(p(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Ue(t,e,n,r){var i={},o=t===We;function a(s){var l;return i[s]=!0,_.each(t[s]||[],(function(t,s){var u=s(e,n,r);return"string"!=typeof u||o||i[u]?o?!(l=u):void 0:(e.dataTypes.unshift(u),a(u),!1)})),l}return a(e.dataTypes[0])||!i["*"]&&a("*")}function Ye(t,e){var n,r,i=_.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&_.extend(!0,t,r),t}Ve.href=Ae.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ae.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ae.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ge,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ye(Ye(t,_.ajaxSettings),e):Ye(_.ajaxSettings,t)},ajaxPrefilter:Xe(Fe),ajaxTransport:Xe(We),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var r,i,o,a,s,l,u,c,f,h,d=_.ajaxSetup({},n),p=d.context||d,g=d.context&&(p.nodeType||p.jquery)?_(p):_.event,y=_.Deferred(),m=_.Callbacks("once memory"),b=d.statusCode||{},x={},w={},k="canceled",S={readyState:0,getResponseHeader:function(t){var e;if(u){if(!a)for(a={};e=He.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(t,e){return null==u&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==u&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(u)S.always(t[S.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||k;return r&&r.abort(e),T(0,e),this}};if(y.promise(S),d.url=((e||d.url||Ae.href)+"").replace(ze,Ae.protocol+"//"),d.type=n.method||n.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(G)||[""],null==d.crossDomain){l=v.createElement("a");try{l.href=d.url,l.href=l.href,d.crossDomain=Ve.protocol+"//"+Ve.host!=l.protocol+"//"+l.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=_.param(d.data,d.traditional)),Ue(Fe,d,n,S),u)return S;for(f in(c=_.event&&d.global)&&0==_.active++&&_.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Be.test(d.type),i=d.url.replace(Re,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(qe,"+")):(h=d.url.slice(i.length),d.data&&(d.processData||"string"==typeof d.data)&&(i+=(Ee.test(i)?"&":"?")+d.data,delete d.data),!1===d.cache&&(i=i.replace(Oe,"$1"),h=(Ee.test(i)?"&":"?")+"_="+Ce.guid+++h),d.url=i+h),d.ifModified&&(_.lastModified[i]&&S.setRequestHeader("If-Modified-Since",_.lastModified[i]),_.etag[i]&&S.setRequestHeader("If-None-Match",_.etag[i])),(d.data&&d.hasContent&&!1!==d.contentType||n.contentType)&&S.setRequestHeader("Content-Type",d.contentType),S.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Ge+"; q=0.01":""):d.accepts["*"]),d.headers)S.setRequestHeader(f,d.headers[f]);if(d.beforeSend&&(!1===d.beforeSend.call(p,S,d)||u))return S.abort();if(k="abort",m.add(d.complete),S.done(d.success),S.fail(d.error),r=Ue(We,d,n,S)){if(S.readyState=1,c&&g.trigger("ajaxSend",[S,d]),u)return S;d.async&&d.timeout>0&&(s=t.setTimeout((function(){S.abort("timeout")}),d.timeout));try{u=!1,r.send(x,T)}catch(t){if(u)throw t;T(-1,t)}}else T(-1,"No Transport");function T(e,n,a,l){var f,h,v,x,w,k=n;u||(u=!0,s&&t.clearTimeout(s),r=void 0,o=l||"",S.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(x=function(t,e,n){for(var r,i,o,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||t.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(d,S,a)),!f&&_.inArray("script",d.dataTypes)>-1&&_.inArray("json",d.dataTypes)<0&&(d.converters["text script"]=function(){}),x=function(t,e,n,r){var i,o,a,s,l,u={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)u[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if((s=i.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(d,x,S,f),f?(d.ifModified&&((w=S.getResponseHeader("Last-Modified"))&&(_.lastModified[i]=w),(w=S.getResponseHeader("etag"))&&(_.etag[i]=w)),204===e||"HEAD"===d.type?k="nocontent":304===e?k="notmodified":(k=x.state,h=x.data,f=!(v=x.error))):(v=k,!e&&k||(k="error",e<0&&(e=0))),S.status=e,S.statusText=(n||k)+"",f?y.resolveWith(p,[h,k,S]):y.rejectWith(p,[S,k,v]),S.statusCode(b),b=void 0,c&&g.trigger(f?"ajaxSuccess":"ajaxError",[S,d,f?h:v]),m.fireWith(p,[S,k]),c&&(g.trigger("ajaxComplete",[S,d]),--_.active||_.event.trigger("ajaxStop")))}return S},getJSON:function(t,e,n){return _.get(t,e,n,"json")},getScript:function(t,e){return _.get(t,void 0,e,"script")}}),_.each(["get","post"],(function(t,e){_[e]=function(t,n,r,i){return p(n)&&(i=i||r,r=n,n=void 0),_.ajax(_.extend({url:t,type:e,dataType:i,data:n,success:r},_.isPlainObject(t)&&t))}})),_.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),_._evalUrl=function(t,e,n){return _.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){_.globalEval(t,e,n)}})},_.fn.extend({wrapAll:function(t){var e;return this[0]&&(p(t)&&(t=t.call(this[0])),e=_(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return p(t)?this.each((function(e){_(this).wrapInner(t.call(this,e))})):this.each((function(){var e=_(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=p(t);return this.each((function(n){_(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){_(this).replaceWith(this.childNodes)})),this}}),_.expr.pseudos.hidden=function(t){return!_.expr.pseudos.visible(t)},_.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var Ke={0:200,1223:204},Qe=_.ajaxSettings.xhr();d.cors=!!Qe&&"withCredentials"in Qe,d.ajax=Qe=!!Qe,_.ajaxTransport((function(e){var n,r;if(d.cors||Qe&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);n=function(t){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ke[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&t.setTimeout((function(){n&&r()}))},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}})),_.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return _.globalEval(t),t}}}),_.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),_.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=_("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),v.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Je,Ze=[],tn=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ze.pop()||_.expando+"_"+Ce.guid++;return this[t]=!0,t}}),_.ajaxPrefilter("json jsonp",(function(e,n,r){var i,o,a,s=!1!==e.jsonp&&(tn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&tn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=p(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(tn,"$1"+i):!1!==e.jsonp&&(e.url+=(Ee.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||_.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=t[i],t[i]=function(){a=arguments},r.always((function(){void 0===o?_(t).removeProp(i):t[i]=o,e[i]&&(e.jsonpCallback=n.jsonpCallback,Ze.push(i)),a&&p(o)&&o(a[0]),a=o=void 0})),"script"})),d.createHTMLDocument=((Je=v.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Je.childNodes.length),_.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(d.createHTMLDocument?((r=(e=v.implementation.createHTMLDocument("")).createElement("base")).href=v.location.href,e.head.appendChild(r)):e=v),o=!n&&[],(i=q.exec(t))?[e.createElement(i[1])]:(i=Nt([t],e,o),o&&o.length&&_(o).remove(),_.merge([],i.childNodes)));var r,i,o},_.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=ke(t.slice(s)),t=t.slice(0,s)),p(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&_.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?_("<div>").append(_.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},_.expr.pseudos.animated=function(t){return _.grep(_.timers,(function(e){return t===e.elem})).length},_.offset={setOffset:function(t,e,n){var r,i,o,a,s,l,u=_.css(t,"position"),c=_(t),f={};"static"===u&&(t.style.position="relative"),s=c.offset(),o=_.css(t,"top"),l=_.css(t,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),p(e)&&(e=e.call(t,n,_.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+i),"using"in e?e.using.call(t,f):c.css(f)}},_.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){_.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===_.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===_.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=_(t).offset()).top+=_.css(t,"borderTopWidth",!0),i.left+=_.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-_.css(r,"marginTop",!0),left:e.left-i.left-_.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===_.css(t,"position");)t=t.offsetParent;return t||dt}))}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;_.fn[t]=function(r){return J(this,(function(t,r,i){var o;if(g(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),_.each(["top","left"],(function(t,e){_.cssHooks[e]=Jt(d.pixelPosition,(function(t,n){if(n)return n=Qt(t,e),Vt.test(n)?_(t).position()[e]+"px":n}))})),_.each({Height:"height",Width:"width"},(function(t,e){_.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){_.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return J(this,(function(e,n,i){var o;return g(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?_.css(e,n,s):_.style(e,n,i,s)}),e,a?i:void 0,a)}}))})),_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){_.fn[e]=function(t){return this.on(e,t)}})),_.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.on("mouseenter",t).on("mouseleave",e||t)}}),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){_.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var en=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;_.proxy=function(t,e){var n,r,o;if("string"==typeof e&&(n=t[e],e=t,t=n),p(t))return r=i.call(arguments,2),o=function(){return t.apply(e||this,r.concat(i.call(arguments)))},o.guid=t.guid=t.guid||_.guid++,o},_.holdReady=function(t){t?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=S,_.isFunction=p,_.isWindow=g,_.camelCase=nt,_.type=b,_.now=Date.now,_.isNumeric=function(t){var e=_.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},_.trim=function(t){return null==t?"":(t+"").replace(en,"$1")};var nn=t.jQuery,rn=t.$;return _.noConflict=function(e){return t.$===_&&(t.$=rn),e&&t.jQuery===_&&(t.jQuery=nn),_},void 0===e&&(t.jQuery=t.$=_),_}))}(Vt);var Xt=Gt(Vt.exports);function Ut(){const t="http://gtexportal.org/api/v2/",e="gtex_v8";return{singleCellExpression:t+"expression/singleNucleusGeneExpression?datasetId=gtex_snrnaseq_pilot&gencodeId=",singleCellExpressionSummary:t+"expression/singleNucleusGeneExpressionSummary",dyneqtl:t+"association/dyneqtl",snp:t+"dataset/variant?snpId=",variantId:t+"dataset/variant?variantId=",exonExp:t+"expression/clusteredMedianExonExpression?gencodeId=",transcriptExp:t+"expression/clusteredMedianTranscriptExpression?gencodeId=",junctionExp:t+"expression/clusteredMedianJunctionExpression?gencodeId=",transcript:t+`reference/transcript?datasetId=${e}&gencodeId=`,exon:t+`reference/exon?datasetId=${e}&gencodeId=`,geneModel:t+"dataset/collapsedGeneModelExon?gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?gencodeId=",geneExp:t+"expression/geneExpression?gencodeId=",medGeneExp:t+"expression/clusteredMedianGeneExpression",topInTissueFiltered:t+"expression/topExpressedGene?filterMtGene=true&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?&filterMtGene=false&tissueSiteDetailId=",geneId:t+"reference/gene?geneId=",tissue:t+"dataset/tissueSiteDetail",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",dynsqtl:t+"association/dynsqtl",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}function Yt(t){return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach((e=>{if(!t[0].hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e})),t}async function Kt(t,e=250){let n,r=[],i=0;do{const o=Qt(t,i,e);n=await fetch(o).then((t=>t.json())),r=r.concat(n.data),i+=1}while(i<n.paging_info.numberOfPages);return r}function Qt(t,e,n=250){let r;const i="page="+e;r=t.includes("?")?t+"&"+i:t+"?"+i;return r=r+"&"+("itemsPerPage="+n),r}function Jt(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Zt(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}var te=Array.prototype,ee=te.map,ne=te.slice,re={name:"implicit"};function ie(){var t=bt(),e=[],n=[],r=re;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==re)return r;t.set(o,a=e.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=bt();for(var r,o,a=-1,s=n.length;++a<s;)t.has(o=(r=n[a])+"")||t.set(o,e.push(r));return i},i.range=function(t){return arguments.length?(n=ne.call(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return ie(e,n).unknown(r)},Jt.apply(i,arguments),i}function oe(){var t,e,n=ie().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,s=0,l=0,u=.5;function c(){var n=r().length,c=o[1]<o[0],f=o[c-0],h=o[1-c];t=(h-f)/Math.max(1,n-s+2*l),a&&(t=Math.floor(t)),f+=(h-f-t*(n-s))*u,e=t*(1-s),a&&(f=Math.round(f),e=Math.round(e));var d=Pt(n).map((function(e){return f+t*e}));return i(c?d.reverse():d)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),c()):r()},n.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},n.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,c()):a},n.padding=function(t){return arguments.length?(s=Math.min(1,l=+t),c()):s},n.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),c()):s},n.paddingOuter=function(t){return arguments.length?(l=+t,c()):l},n.align=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),c()):u},n.copy=function(){return oe(r(),o).round(a).paddingInner(s).paddingOuter(l).align(u)},Jt.apply(c(),arguments)}function ae(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function se(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function le(){}var ue=.7,ce=1/ue,fe="\\s*([+-]?\\d+)\\s*",he="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",de="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",pe=/^#([0-9a-f]{3,8})$/,ge=new RegExp("^rgb\\("+[fe,fe,fe]+"\\)$"),ve=new RegExp("^rgb\\("+[de,de,de]+"\\)$"),ye=new RegExp("^rgba\\("+[fe,fe,fe,he]+"\\)$"),me=new RegExp("^rgba\\("+[de,de,de,he]+"\\)$"),be=new RegExp("^hsl\\("+[he,de,de]+"\\)$"),xe=new RegExp("^hsla\\("+[he,de,de,he]+"\\)$"),we={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function _e(){return this.rgb().formatHex()}function ke(){return this.rgb().formatRgb()}function Se(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=pe.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Te(e):3===n?new Ce(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Me(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Me(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ge.exec(t))?new Ce(e[1],e[2],e[3],1):(e=ve.exec(t))?new Ce(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ye.exec(t))?Me(e[1],e[2],e[3],e[4]):(e=me.exec(t))?Me(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=be.exec(t))?je(e[1],e[2]/100,e[3]/100,1):(e=xe.exec(t))?je(e[1],e[2]/100,e[3]/100,e[4]):we.hasOwnProperty(t)?Te(we[t]):"transparent"===t?new Ce(NaN,NaN,NaN,0):null}function Te(t){return new Ce(t>>16&255,t>>8&255,255&t,1)}function Me(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ce(t,e,n,r)}function Ae(t,e,n,r){return 1===arguments.length?((i=t)instanceof le||(i=Se(i)),i?new Ce((i=i.rgb()).r,i.g,i.b,i.opacity):new Ce):new Ce(t,e,n,null==r?1:r);var i}function Ce(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Ee(){return"#"+De(this.r)+De(this.g)+De(this.b)}function Ne(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function De(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function je(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Le(t,e,n,r)}function $e(t){if(t instanceof Le)return new Le(t.h,t.s,t.l,t.opacity);if(t instanceof le||(t=Se(t)),!t)return new Le;if(t instanceof Le)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,l=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=l<.5?o+i:2-o-i,a*=60):s=l>0&&l<1?0:a,new Le(a,s,l,t.opacity)}function Le(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Pe(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Ie(t){return function(){return t}}function qe(t){return 1==(t=+t)?Re:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Ie(isNaN(e)?n:e)}}function Re(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Ie(isNaN(t)?e:t)}ae(le,Se,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:_e,formatHex:_e,formatHsl:function(){return $e(this).formatHsl()},formatRgb:ke,toString:ke}),ae(Ce,Ae,se(le,{brighter:function(t){return t=null==t?ce:Math.pow(ce,t),new Ce(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?ue:Math.pow(ue,t),new Ce(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Ee,formatHex:Ee,formatRgb:Ne,toString:Ne})),ae(Le,(function(t,e,n,r){return 1===arguments.length?$e(t):new Le(t,e,n,null==r?1:r)}),se(le,{brighter:function(t){return t=null==t?ce:Math.pow(ce,t),new Le(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?ue:Math.pow(ue,t),new Le(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Ce(Pe(t>=240?t-240:t+120,i,r),Pe(t,i,r),Pe(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Oe=function t(e){var n=qe(e);function r(t,e){var r=n((t=Ae(t)).r,(e=Ae(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Re(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);var He,Be=(He=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return function(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}((n-r/e)*e,a,i,o,s)}},function(t){var e,n,r=t.length,i=new Array(r),o=new Array(r),a=new Array(r);for(e=0;e<r;++e)n=Ae(t[e]),i[e]=n.r||0,o[e]=n.g||0,a[e]=n.b||0;return i=He(i),o=He(o),a=He(a),n.opacity=1,function(t){return n.r=i(t),n.g=o(t),n.b=a(t),n+""}});function ze(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}}function Fe(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Ke(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}function We(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Ge(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Ve(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ke(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}var Xe=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ue=new RegExp(Xe.source,"g");function Ye(t,e){var n,r,i,o=Xe.lastIndex=Ue.lastIndex=0,a=-1,s=[],l=[];for(t+="",e+="";(n=Xe.exec(t))&&(r=Ue.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,l.push({i:a,x:Ge(n,r)})),o=Ue.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)s[(n=l[r]).i]=n.x(t);return s.join("")})}function Ke(t,e){var n,r=typeof e;return null==e||"boolean"===r?Ie(e):("number"===r?Ge:"string"===r?(n=Se(e))?(e=n,Oe):Ye:e instanceof Se?Oe:e instanceof Date?We:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?ze:Array.isArray(e)?Fe:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Ve:Ge)(t,e)}function Qe(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var Je,Ze,tn,en,nn=180/Math.PI,rn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function on(t,e,n,r,i,o){var a,s,l;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),t*r<e*n&&(t=-t,e=-e,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*nn,skewX:Math.atan(l)*nn,scaleX:a,scaleY:s}}function an(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],l=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var l=a.push("translate(",null,e,null,n);s.push({i:l-4,x:Ge(t,i)},{i:l-2,x:Ge(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ge(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,l),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ge(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,l),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Ge(t,n)},{i:s-2,x:Ge(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,l),o=a=null,function(t){for(var e,n=-1,r=l.length;++n<r;)s[(e=l[n]).i]=e.x(t);return s.join("")}}}var sn=an((function(t){return"none"===t?rn:(Je||(Je=document.createElement("DIV"),Ze=document.documentElement,tn=document.defaultView),Je.style.transform=t,t=tn.getComputedStyle(Ze.appendChild(Je),null).getPropertyValue("transform"),Ze.removeChild(Je),on(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),ln=an((function(t){return null==t?rn:(en||(en=document.createElementNS("http://www.w3.org/2000/svg","g")),en.setAttribute("transform",t),(t=en.transform.baseVal.consolidate())?on((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):rn)}),", ",")",")");function un(t){return+t}var cn=[0,1];function fn(t){return t}function hn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function dn(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function pn(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=hn(i,r),o=n(a,o)):(r=hn(r,i),o=n(o,a)),function(t){return o(r(t))}}function gn(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=hn(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=Dt(t,e,1,r)-1;return o[n](i[n](e))}}function vn(t,e){return function(){var t,e,n,r,i,o,a=cn,s=cn,l=Ke,u=fn;function c(){return r=Math.min(a.length,s.length)>2?gn:pn,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,l)))(t(u(e)))}return f.invert=function(n){return u(e((o||(o=r(s,a.map(t),Ge)))(n)))},f.domain=function(t){return arguments.length?(a=ee.call(t,un),u===fn||(u=dn(a)),c()):a.slice()},f.range=function(t){return arguments.length?(s=ne.call(t),c()):s.slice()},f.rangeRound=function(t){return s=ne.call(t),l=Qe,c()},f.clamp=function(t){return arguments.length?(u=t?dn(a):fn,f):u!==fn},f.interpolate=function(t){return arguments.length?(l=t,c()):l},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}()(t,e)}function yn(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function mn(t){return(t=yn(Math.abs(t)))?t[1]:NaN}var bn,xn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function wn(t){if(!(e=xn.exec(t)))throw new Error("invalid format: "+t);var e;return new _n({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function _n(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function kn(t,e){var n=yn(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}wn.prototype=_n.prototype,_n.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Sn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return kn(100*t,e)},r:kn,s:function(t,e){var n=yn(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(bn=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+yn(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Tn(t){return t}var Mn,An,Cn,En=Array.prototype.map,Nn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Dn(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Tn:(e=En.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],l=0;i>0&&s>0&&(l+s+1>r&&(s=Math.max(1,r-l)),o.push(t.substring(i-=s,i+s)),!((l+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Tn:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(En.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",u=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=wn(t)).fill,n=t.align,f=t.sign,h=t.symbol,d=t.zero,p=t.width,g=t.comma,v=t.precision,y=t.trim,m=t.type;"n"===m?(g=!0,m="g"):Sn[m]||(void 0===v&&(v=12),y=!0,m="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",x="$"===h?o:/[%p]/.test(m)?l:"",w=Sn[m],_=/[defgprs%]/.test(m);function k(t){var i,o,l,h=b,k=x;if("c"===m)k=w(t)+k,t="";else{var S=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:w(Math.abs(t),v),y&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),S&&0==+t&&"+"!==f&&(S=!1),h=(S?"("===f?f:u:"-"===f||"("===f?"":f)+h,k=("s"===m?Nn[8+bn/3]:"")+k+(S&&"("===f?")":""),_)for(i=-1,o=t.length;++i<o;)if(48>(l=t.charCodeAt(i))||l>57){k=(46===l?a+t.slice(i+1):t.slice(i))+k,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var T=h.length+t.length+k.length,M=T<p?new Array(p-T+1).join(e):"";switch(g&&d&&(t=r(M+t,M.length?p-k.length:1/0),M=""),n){case"<":t=h+t+k+M;break;case"=":t=h+M+t+k;break;case"^":t=M.slice(0,T=M.length>>1)+h+t+k+M.slice(T);break;default:t=M+h+t+k}return s(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),k.toString=function(){return t+""},k}return{format:f,formatPrefix:function(t,e){var n=f(((t=wn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(mn(e)/3))),i=Math.pow(10,-r),o=Nn[8+r/3];return function(t){return n(i*t)+o}}}}function jn(t,e,n,r){var i,o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=It?i*=10:o>=qt?i*=5:o>=Rt&&(i*=2),e<t?-i:i}(t,e,n);switch((r=wn(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(mn(e)/3)))-mn(Math.abs(t)))}(o,a))||(r.precision=i),Cn(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,mn(e)-mn(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-mn(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return An(r)}function $n(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=Ot(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return jn(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],l=i[a];return l<s&&(r=s,s=l,l=r,r=o,o=a,a=r),(r=Ot(s,l,n))>0?r=Ot(s=Math.floor(s/r)*r,l=Math.ceil(l/r)*r,n):r<0&&(r=Ot(s=Math.ceil(s*r)/r,l=Math.floor(l*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(l/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(l*r)/r,e(i)),t},t}function Ln(){var t=vn(fn,fn);return t.copy=function(){return e=t,Ln().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown());var e},Jt.apply(t,arguments),$n(t)}function Pn(){var t=$n(function(){var t,e,n,r,i,o=0,a=1,s=fn,l=!1;function u(e){return isNaN(e=+e)?i:s(0===n?.5:(e=(r(e)-t)*n,l?Math.max(0,Math.min(1,e)):e))}return u.domain=function(i){return arguments.length?(t=r(o=+i[0]),e=r(a=+i[1]),n=t===e?0:1/(e-t),u):[o,a]},u.clamp=function(t){return arguments.length?(l=!!t,u):l},u.interpolator=function(t){return arguments.length?(s=t,u):s},u.unknown=function(t){return arguments.length?(i=t,u):i},function(i){return r=i,t=i(o),e=i(a),n=t===e?0:1/(e-t),u}}()(fn));return t.copy=function(){return e=t,Pn().domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown());var e},Zt.apply(t,arguments)}function In(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}function qn(t){return Be(t[t.length-1])}Mn=Dn({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),An=Mn.format,Cn=Mn.formatPrefix;var Rn=qn(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(In)),On=qn(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(In)),Hn=qn(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(In)),Bn=qn(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(In)),zn=qn(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(In)),Fn=qn(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(In)),Wn=qn(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(In)),Gn=qn(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(In)),Vn=qn(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(In)),Xn=qn(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(In)),Un=qn(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(In)),Yn=qn(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(In)),Kn=qn(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(In)),Qn=qn(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(In)),Jn=qn(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(In));function Zn(t=!0){const e=["rgb(100,118,120)","rgb(101,141,145)","rgb(103,126,82)","rgb(103,184,222)","rgb(108,110,88)","rgb(108,147,128)","rgb(119,144,182)","rgb(126,130,122)","rgb(133,173,186)","rgb(137,114,91)","rgb(145,170,157)","rgb(145,201,232)","rgb(147,105,66)","rgb(159,114,116)","rgb(159,188,191)","rgb(159,229,194)","rgb(163,163,171)","rgb(164,207,190)","rgb(172,108,130)","rgb(173,84,114)","rgb(174,195,222)","rgb(176,204,153)","rgb(179,180,150)","rgb(180,220,237)","rgb(183,202,121)","rgb(192,202,85)","rgb(193,191,193)","rgb(195,97,136)","rgb(199,121,102)","rgb(207,202,76)","rgb(209,219,189)","rgb(213,251,255)","rgb(215,94,56)","rgb(218,114,126)","rgb(223,90,73)","rgb(224,247,217)","rgb(227,205,164)","rgb(228,168,185)","rgb(230,176,152)","rgb(232,212,175)","rgb(239,201,76)","rgb(240,124,108)","rgb(246,232,177)","rgb(249,228,173)","rgb(252,245,191)","rgb(255,188,103)","rgb(45,94,110)","rgb(51,153,204)","rgb(60,124,145)","rgb(62,87,145)","rgb(65,115,120)","rgb(89,216,229)","rgb(94,178,153)","rgb(95,124,134)"];return t?function(t){let e=t.length;for(;e>0;){let n=Math.floor(Math.random()*e);e--;let r=t[e];t[e]=t[n],t[n]=r}return t}(e):e}function tr(t,e="YlGnBu",n=void 0,r=void 0,i=!1){t=t.filter((t=>isFinite(t))),r=void 0===r?Bt(t):r,n=void 0===n?function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&r>n&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&r>n&&(r=n);return r}(t):n;const o=Pn(function(t){const e={BuGn:Fn,OrRd:Wn,PuBu:Gn,YlGnBu:Vn,Blues:Xn,Oranges:Jn,Greens:Un,Purples:Kn,Reds:Qn,Greys:Yn,Grays:Yn,RdBu:Hn,RdGy:Bn,PiYG:Rn,PuOr:On,RdYlBu:zn};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return i?o.domain([r,n]):o.domain([n,r]),o}class er{constructor(t=window.innerWidth,e=100,n=100,r={top:50,right:250,bottom:170,left:10},i=12,o=10){this.margin=r,this.rootW=t,this.leftTreePanel={x:r.left,y:r.top+n,h:void 0,w:e-o,id:"leftTree"},this.cell={w:void 0,h:i},this.topTreePanel={x:r.left+e,y:r.top,h:n-o,w:this.rootW-(r.left+e+r.right),id:"topTree"},this.heatmapPanel={x:r.left+e,y:r.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:r.left+e,y:0,h:r.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function nr(t,e,n,r,i=void 0){return function(t){if(ht(`#${t}`).empty()){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}(t),void 0===i&&(i=`${t}-svg`),void 0===r&&(r={top:0,left:0}),ht("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",i).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}function rr(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function ir(t,e){var n,r,i,o,a,s=new lr(t),l=+t.value&&(s.value=t.value),u=[s];for(null==e&&(e=or);n=u.pop();)if(l&&(n.value=+n.data.value),(i=e(n.data))&&(a=i.length))for(n.children=new Array(a),o=a-1;o>=0;--o)u.push(r=n.children[o]=new lr(i[o])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(sr)}function or(t){return t.children}function ar(t){t.data=t.data.data}function sr(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function lr(t){this.data=t,this.depth=this.height=0,this.parent=null}lr.prototype=ir.prototype={constructor:lr,count:function(){return this.eachAfter(rr)},each:function(t){var e,n,r,i,o=this,a=[o];do{for(e=a.reverse(),a=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(t){for(var e,n,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return ir(this).eachBefore(ar)}};var ur=Array.prototype.slice;function cr(t){return t}var fr=1,hr=2,dr=3,pr=4,gr=1e-6;function vr(t){return"translate("+(t+.5)+",0)"}function yr(t){return"translate(0,"+(t+.5)+")"}function mr(t){return function(e){return+t(e)}}function br(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function xr(){return!this.__axis}function wr(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,l=t===fr||t===pr?-1:1,u=t===pr||t===hr?"x":"y",c=t===fr||t===dr?vr:yr;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,d=null==i?e.tickFormat?e.tickFormat.apply(e,n):cr:i,p=Math.max(o,0)+s,g=e.range(),v=+g[0]+.5,y=+g[g.length-1]+.5,m=(e.bandwidth?br:mr)(e.copy()),b=f.selection?f.selection():f,x=b.selectAll(".domain").data([null]),w=b.selectAll(".tick").data(h,e).order(),_=w.exit(),k=w.enter().append("g").attr("class","tick"),S=w.select("line"),T=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(k),S=S.merge(k.append("line").attr("stroke","currentColor").attr(u+"2",l*o)),T=T.merge(k.append("text").attr("fill","currentColor").attr(u,l*p).attr("dy",t===fr?"0em":t===dr?"0.71em":"0.32em")),f!==b&&(x=x.transition(f),w=w.transition(f),S=S.transition(f),T=T.transition(f),_=_.transition(f).attr("opacity",gr).attr("transform",(function(t){return isFinite(t=m(t))?c(t):this.getAttribute("transform")})),k.attr("opacity",gr).attr("transform",(function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:m(t))}))),_.remove(),x.attr("d",t===pr||t==hr?a?"M"+l*a+","+v+"H0.5V"+y+"H"+l*a:"M0.5,"+v+"V"+y:a?"M"+v+","+l*a+"V0.5H"+y+"V"+l*a:"M"+v+",0.5H"+y),w.attr("opacity",1).attr("transform",(function(t){return c(m(t))})),S.attr(u+"2",l*o),T.attr(u,l*p).text(d),b.filter(xr).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===hr?"start":t===pr?"end":"middle"),b.each((function(){this.__axis=m}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=ur.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:ur.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:ur.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f}function _r(t){return wr(dr,t)}function kr(t){return wr(pr,t)}class Sr{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=ir(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),i=0;i<r.length;i++){var o=r[i],a={};switch(o){case"(":n.branchset=[a],e.push(n),n=a;break;case",":e[e.length-1].branchset.push(a),n=a;break;case")":n=e.pop();break;case":":break;default:var s=r[i-1];")"==s||"("==s||","==s?n.name=o:":"==s&&(n.length=parseFloat(o))}}return n}(t),(t=>t.branchset)).sum((t=>t.branchset?0:1)).sort(((t,e)=>t.value-e.value||t.data.length-e.data.length)),this.leaves=this.root.leaves().sort(((t,e)=>t.value-e.value||At(t.data.length,e.data.length))),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce(((t,e)=>t+e.y),0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach((t=>{n(t),e(t)})),t.selectAll(".branch").data(r).enter().append("line").attr("x1",(t=>t.x)).attr("x2",(t=>t.data.length?t.x-this.xScale(t.data.length):t.x)).attr("y1",(t=>t.y+this.yScale.bandwidth()/2)).attr("y2",(t=>t.y+this.yScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1);const i=this.root.descendants().filter((t=>t.height)).sort(((t,e)=>e.height-t.height));t.selectAll(".arm").data(i).enter().append("line").attr("x1",(t=>t.x)).attr("x2",(t=>t.x)).attr("y1",(t=>t.children[0].y+this.yScale.bandwidth()/2)).attr("y2",(t=>t.children[1].y+this.yScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(i).enter().append("circle").attr("cx",(t=>t.x)).attr("cy",(t=>t.y+this.yScale.bandwidth()/2)).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(){ht(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call(_r(this.xScale).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort(((t,e)=>t.height-e.height||At(t.data.length,e.data.length)))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce(((t,e)=>t+e.x),0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach((t=>{e(t),n(t)})),t.selectAll(".branch").data(r).enter().append("line").attr("y1",(t=>t.y)).attr("y2",(t=>t.data.length?t.y-this.yScale(t.data.length):t.y)).attr("x1",(t=>t.x+this.xScale.bandwidth()/2)).attr("x2",(t=>t.x+this.xScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1);const i=this.root.descendants().filter((t=>t.height)).sort(((t,e)=>e.height-t.height));t.selectAll(".arm").data(i).enter().append("line").attr("y1",(t=>t.y)).attr("y2",(t=>t.y)).attr("x1",(t=>t.children[0].x+this.xScale.bandwidth()/2)).attr("x2",(t=>t.children[1].x+this.xScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(i).enter().append("circle").attr("cx",(t=>t.x+this.xScale.bandwidth()/2)).attr("cy",(t=>t.y)).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(){ht(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").call(kr(this.yScale).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce(((t,e)=>e.data.length?t+e.data.length:t),0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=Ln().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),this.xScale=oe().domain(this.postorder.map((t=>t.data.name))).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),this.yScale=oe().domain(this.postorder.map((t=>t.data.name))).range([0,this.height]).padding(.05)):this.yScale=Ln().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}class Tr{constructor(t,e=void 0,n=!1){Xt(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=Xt("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,i="fa-download"){this.createButton(t,i),ht(`#${t}`).on("click",(()=>{this.downloadSvg(e,n,r)})).on("mouseover",(()=>{this.tooltip.show("Download the plot")})).on("mouseout",(()=>{this.tooltip.hide()}))}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n),ht(`#${t}`).on("click",e).on("mouseover",(()=>{this.tooltip.show("Reset the scales")})).on("mouseout",(()=>{this.tooltip.hide()}))}createButton(t,e="fa-download",n="need to define",r=void 0){const i=Xt("<a/>").attr("id",t).addClass("btn btn-default btn-light btn-sm").appendTo(this.bar);return e.startsWith("fa-")?Xt("<i/>").addClass(`fa ${e}`).appendTo(i):i.text(e),this.buttons[t]=i,"foo"!=t&&ht(`#${t}`).on("click",(()=>{void 0===r?alert("need to define the click event"):r()})).on("mouseover",(()=>{this.tooltip.show(n)})).on("mouseout",(()=>{this.tooltip.hide()})),i}attachTooltip(t){this.tooltip=t}downloadSvg(t,n,r){console.log(t,n,r);let i=Xt(Xt(Xt(""+("#"+t)))[0]),o=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),a=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var i=n[r].cssRules,o=0;o<i.length;o++){var a=i[o];if(void 0!==a.style){var s,l=void 0===a.selectorText?a.selectorText:a.selectorText.replace(`#${t[0].id} `,"");try{s=Xt(t).find(l)}catch(t){s=[]}s.length>0&&(e+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var u=document.createElement("style");return u.setAttribute("type","text/css"),u.innerHTML="<![CDATA[\n"+e+"\n]]>",u}(i.get());o.prepend(a),Xt("#"+r).html("").hide();let s=Xt(`#${r}`).append(o).html(),l=new Blob([s],{type:"image/svg+xml"});e.saveAs(l,n),Xt(`#${r}`).html("").hide()}}var Mr={value:function(){}};function Ar(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Cr(r)}function Cr(t){this._=t}function Er(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function Nr(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Mr,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}function Dr(){et.preventDefault(),et.stopImmediatePropagation()}Cr.prototype=Ar.prototype={constructor:Cr,on:function(t,e){var n,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<s;)if(n=(t=o[a]).type)i[n]=Nr(i[n],t.name,e);else if(null==e)for(n in i)i[n]=Nr(i[n],t.name,null);return this}for(;++a<s;)if((n=(t=o[a]).type)&&(n=Er(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Cr(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var jr,$r,Lr=0,Pr=0,Ir=0,qr=1e3,Rr=0,Or=0,Hr=0,Br="object"==typeof performance&&performance.now?performance:Date,zr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Fr(){return Or||(zr(Wr),Or=Br.now()+Hr)}function Wr(){Or=0}function Gr(){this._call=this._time=this._next=null}function Vr(t,e,n){var r=new Gr;return r.restart(t,e,n),r}function Xr(){Or=(Rr=Br.now())+Hr,Lr=Pr=0;try{!function(){Fr(),++Lr;for(var t,e=jr;e;)(t=Or-e._time)>=0&&e._call.call(null,t),e=e._next;--Lr}()}finally{Lr=0,function(){var t,e,n=jr,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:jr=e);$r=t,Yr(r)}(),Or=0}}function Ur(){var t=Br.now(),e=t-Rr;e>qr&&(Hr-=e,Rr=t)}function Yr(t){Lr||(Pr&&(Pr=clearTimeout(Pr)),t-Or>24?(t<1/0&&(Pr=setTimeout(Xr,t-Br.now()-Hr)),Ir&&(Ir=clearInterval(Ir))):(Ir||(Rr=Br.now(),Ir=setInterval(Ur,qr)),Lr=1,zr(Xr)))}function Kr(t,e,n){var r=new Gr;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r}Gr.prototype=Vr.prototype={constructor:Gr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Fr():+n)+(null==e?0:+e),this._next||$r===this||($r?$r._next=this:jr=this,$r=this),this._call=t,this._time=n,Yr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Yr())}};var Qr=Ar("start","end","cancel","interrupt"),Jr=[],Zr=0,ti=1,ei=2,ni=3,ri=4,ii=5,oi=6;function ai(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(t){n.state=ti,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)}function a(o){var u,c,f,h;if(n.state!==ti)return l();for(u in i)if((h=i[u]).name===n.name){if(h.state===ni)return Kr(a);h.state===ri?(h.state=oi,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[u]):+u<e&&(h.state=oi,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[u])}if(Kr((function(){n.state===ni&&(n.state=ri,n.timer.restart(s,n.delay,n.time),s(o))})),n.state=ei,n.on.call("start",t,t.__data__,n.index,n.group),n.state===ei){for(n.state=ni,r=new Array(f=n.tween.length),u=0,c=-1;u<f;++u)(h=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function s(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=ii,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===ii&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var r in n.state=oi,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Vr(o,0,n.time)}(t,n,{name:e,index:r,group:i,on:Qr,tween:Jr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Zr})}function si(t,e){var n=ui(t,e);if(n.state>Zr)throw new Error("too late; already scheduled");return n}function li(t,e){var n=ui(t,e);if(n.state>ni)throw new Error("too late; already running");return n}function ui(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function ci(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>ei&&n.state<ii,n.state=oi,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}function fi(t,e){var n,r;return function(){var i=li(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function hi(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=li(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},l=0,u=i.length;l<u;++l)if(i[l].name===e){i[l]=s;break}l===u&&i.push(s)}o.tween=i}}function di(t,e,n){var r=t._id;return t.each((function(){var t=li(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return ui(t,r).value[e]}}function pi(t,e){var n;return("number"==typeof e?Ge:e instanceof Se?Oe:(n=Se(e))?(e=n,Oe):Ye)(t,e)}function gi(t){return function(){this.removeAttribute(t)}}function vi(t){return function(){this.removeAttributeNS(t.space,t.local)}}function yi(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function mi(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function bi(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttribute(t))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttribute(t)}}function xi(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttributeNS(t.space,t.local)}}function wi(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,i)),n}return i._value=e,i}function _i(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,i)),n}return i._value=e,i}function ki(t,e){return function(){si(this,t).delay=+e.apply(this,arguments)}}function Si(t,e){return e=+e,function(){si(this,t).delay=e}}function Ti(t,e){return function(){li(this,t).duration=+e.apply(this,arguments)}}function Mi(t,e){return e=+e,function(){li(this,t).duration=e}}var Ai=ft.prototype.constructor;function Ci(t){return function(){this.style.removeProperty(t)}}var Ei=0;function Ni(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Di(){return++Ei}var ji=ft.prototype;Ni.prototype={constructor:Ni,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=u(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,l,c=r[a],f=c.length,h=o[a]=new Array(f),d=0;d<f;++d)(s=c[d])&&(l=t.call(s,s.__data__,d,c))&&("__data__"in s&&(l.__data__=s.__data__),h[d]=l,ai(h[d],e,n,d,h,ui(s,n)));return new Ni(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=f(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var l,u=r[s],c=u.length,h=0;h<c;++h)if(l=u[h]){for(var d,p=t.call(l,l.__data__,h,u),g=ui(l,n),v=0,y=p.length;v<y;++v)(d=p[v])&&ai(d,e,n,v,p,g);o.push(p),a.push(l)}return new Ni(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new Ni(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),d=0;d<f;++d)(l=u[d]||c[d])&&(h[d]=l);for(;s<r;++s)a[s]=e[s];return new Ni(a,this._parents,this._name,this._id)},selection:function(){return new Ai(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Di(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)if(a=s[u]){var c=ui(a,e);ai(a,t,n,u,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Ni(r,this._parents,t,n)},call:ji.call,nodes:ji.nodes,node:ji.node,size:ji.size,empty:ji.empty,each:ji.each,on:function(t,e){var n=this._id;return arguments.length<2?ui(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?si:li;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}(n,t,e))},attr:function(t,e){var n=i(t),r="transform"===n?ln:pi;return this.attrTween(t,"function"==typeof e?(n.local?xi:bi)(n,r,di(this,"attr."+t,e)):null==e?(n.local?vi:gi)(n):(n.local?mi:yi)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=i(t);return this.tween(n,(r.local?wi:_i)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?sn:pi;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=E(this,t),a=(this.style.removeProperty(t),E(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,Ci(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=E(this,t),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(t),l=s=E(this,t)),a===l?null:a===r&&l===i?o:(i=l,o=e(r=a,s))}}(t,r,di(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var l=li(this,t),u=l.on,c=null==l.value[a]?o||(o=Ci(e)):void 0;u===n&&i===c||(r=(n=u).copy()).on(s,i=c),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=E(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,o,n)),r}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(di(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=ui(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?fi:hi)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?ki:Si)(e,t)):ui(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Ti:Mi)(e,t)):ui(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){li(this,t).ease=e}}(e,t)):ui(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},l={value:function(){0==--i&&o()}};n.each((function(){var n=li(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(l)),n.on=e}))}))}};var $i={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Li(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return $i.time=Fr(),$i;return n}function Pi(t){return function(){return t}}function Ii(t,e,n){this.target=t,this.type=e,this.selection=n}function qi(){et.stopImmediatePropagation()}function Ri(){et.preventDefault(),et.stopImmediatePropagation()}ft.prototype.interrupt=function(t){return this.each((function(){ci(this,t)}))},ft.prototype.transition=function(t){var e,n;t instanceof Ni?(e=t._id,t=t._name):(e=Di(),(n=$i).time=Fr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)(a=s[u])&&ai(a,t,e,u,s,n||Li(a,e));return new Ni(r,this._parents,t,e)};var Oi={name:"drag"},Hi={name:"space"},Bi={name:"handle"},zi={name:"center"};function Fi(t){return[+t[0],+t[1]]}function Wi(t){return[Fi(t[0]),Fi(t[1])]}function Gi(t){return function(e){return function(t,e,n){arguments.length<3&&(n=e,e=dt().changedTouches);for(var r,i=0,o=e?e.length:0;i<o;++i)if((r=e[i]).identifier===n)return pt(t,r);return null}(e,et.touches,t)}}var Vi={name:"x",handles:["w","e"].map(to),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Xi={name:"y",handles:["n","s"].map(to),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Ui={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(to),input:function(t){return null==t?null:Wi(t)},output:function(t){return t}},Yi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ki={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Qi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Ji={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Zi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function to(t){return{type:t}}function eo(){return!et.ctrlKey&&!et.button}function no(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function ro(){return navigator.maxTouchPoints||"ontouchstart"in this}function io(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function oo(){return function(t){var e,n=no,r=eo,i=ro,o=!0,a=Ar("start","brush","end"),s=6;function l(e){var n=e.property("__brush",g).selectAll(".overlay").data([to("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Yi.overlay).merge(n).each((function(){var t=io(this).extent;ht(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([to("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Yi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Yi[t.type]})),e.each(u).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",d).on("touchend.brush touchcancel.brush",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function u(){var t=ht(this),e=io(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-s/2:e[0][0]-s/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-s/2:e[0][1]-s/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+s:s})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+s:s}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,e,n){var r=t.__brush.emitter;return!r||n&&r.clean?new f(t,e,n):r}function f(t,e,n){this.that=t,this.args=e,this.state=t.__brush,this.active=0,this.clean=n}function h(){if((!e||et.touches)&&r.apply(this,arguments)){var n,i,a,s,l,f,h,d,p,g,v,y=this,m=et.target.__data__.type,b="selection"===(o&&et.metaKey?m="overlay":m)?Oi:o&&et.altKey?zi:Bi,x=t===Xi?null:Ji[m],w=t===Vi?null:Zi[m],_=io(y),k=_.extent,S=_.selection,T=k[0][0],M=k[0][1],A=k[1][0],C=k[1][1],E=0,N=0,D=x&&w&&o&&et.shiftKey,j=et.touches?Gi(et.changedTouches[0].identifier):gt,$=j(y),L=$,P=c(y,arguments,!0).beforestart();"overlay"===m?(S&&(p=!0),_.selection=S=[[n=t===Xi?T:$[0],a=t===Vi?M:$[1]],[l=t===Xi?A:n,h=t===Vi?C:a]]):(n=S[0][0],a=S[0][1],l=S[1][0],h=S[1][1]),i=n,s=a,f=l,d=h;var I=ht(y).attr("pointer-events","none"),q=I.selectAll(".overlay").attr("cursor",Yi[m]);if(et.touches)P.moved=O,P.ended=B;else{var R=ht(et.view).on("mousemove.brush",O,!0).on("mouseup.brush",B,!0);o&&R.on("keydown.brush",z,!0).on("keyup.brush",F,!0),function(t){var e=t.document.documentElement,n=ht(t).on("dragstart.drag",Dr,!0);"onselectstart"in e?n.on("selectstart.drag",Dr,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(et.view)}qi(),ci(y),u.call(y),P.start()}function O(){var t=j(y);!D||g||v||(Math.abs(t[0]-L[0])>Math.abs(t[1]-L[1])?v=!0:g=!0),L=t,p=!0,Ri(),H()}function H(){var t;switch(E=L[0]-$[0],N=L[1]-$[1],b){case Hi:case Oi:x&&(E=Math.max(T-n,Math.min(A-l,E)),i=n+E,f=l+E),w&&(N=Math.max(M-a,Math.min(C-h,N)),s=a+N,d=h+N);break;case Bi:x<0?(E=Math.max(T-n,Math.min(A-n,E)),i=n+E,f=l):x>0&&(E=Math.max(T-l,Math.min(A-l,E)),i=n,f=l+E),w<0?(N=Math.max(M-a,Math.min(C-a,N)),s=a+N,d=h):w>0&&(N=Math.max(M-h,Math.min(C-h,N)),s=a,d=h+N);break;case zi:x&&(i=Math.max(T,Math.min(A,n-E*x)),f=Math.max(T,Math.min(A,l+E*x))),w&&(s=Math.max(M,Math.min(C,a-N*w)),d=Math.max(M,Math.min(C,h+N*w)))}f<i&&(x*=-1,t=n,n=l,l=t,t=i,i=f,f=t,m in Ki&&q.attr("cursor",Yi[m=Ki[m]])),d<s&&(w*=-1,t=a,a=h,h=t,t=s,s=d,d=t,m in Qi&&q.attr("cursor",Yi[m=Qi[m]])),_.selection&&(S=_.selection),g&&(i=S[0][0],f=S[1][0]),v&&(s=S[0][1],d=S[1][1]),S[0][0]===i&&S[0][1]===s&&S[1][0]===f&&S[1][1]===d||(_.selection=[[i,s],[f,d]],u.call(y),P.brush())}function B(){if(qi(),et.touches){if(et.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else!function(t,e){var n=t.document.documentElement,r=ht(t).on("dragstart.drag",null);e&&(r.on("click.drag",Dr,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(et.view,p),R.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);I.attr("pointer-events","all"),q.attr("cursor",Yi.overlay),_.selection&&(S=_.selection),function(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}(S)&&(_.selection=null,u.call(y)),P.end()}function z(){switch(et.keyCode){case 16:D=x&&w;break;case 18:b===Bi&&(x&&(l=f-E*x,n=i+E*x),w&&(h=d-N*w,a=s+N*w),b=zi,H());break;case 32:b!==Bi&&b!==zi||(x<0?l=f-E:x>0&&(n=i-E),w<0?h=d-N:w>0&&(a=s-N),b=Hi,q.attr("cursor",Yi.selection),H());break;default:return}Ri()}function F(){switch(et.keyCode){case 16:D&&(g=v=D=!1,H());break;case 18:b===zi&&(x<0?l=f:x>0&&(n=i),w<0?h=d:w>0&&(a=s),b=Bi,H());break;case 32:b===Hi&&(et.altKey?(x&&(l=f-E*x,n=i+E*x),w&&(h=d-N*w,a=s+N*w),b=zi):(x<0?l=f:x>0&&(n=i),w<0?h=d:w>0&&(a=s),b=Bi),q.attr("cursor",Yi[m]),H());break;default:return}Ri()}}function d(){c(this,arguments).moved()}function p(){c(this,arguments).ended()}function g(){var e=this.__brush||{selection:null};return e.extent=Wi(n.apply(this,arguments)),e.dim=t,e}return l.move=function(e,n){e.selection?e.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var e=this,r=e.__brush,i=c(e,arguments),o=r.selection,a=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),s=Ke(o,a);function l(t){r.selection=1===t&&null===a?null:s(t),u.call(e),i.brush()}return null!==o&&null!==a?l:l(1)})):e.each((function(){var e=this,r=arguments,i=e.__brush,o=t.input("function"==typeof n?n.apply(e,r):n,i.extent),a=c(e,r).beforestart();ci(e),i.selection=null===o?null:o,u.call(e),a.start().brush().end()}))},l.clear=function(t){l.move(t,null)},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,r){var i=et;t.sourceEvent=et,et=t;try{return e.apply(n,r)}finally{et=i}}(new Ii(l,e,t.output(this.state.selection)),a.apply,a,[e,this.that,this.args])}},l.extent=function(t){return arguments.length?(n="function"==typeof t?t:Pi(Wi(t)),l):n},l.filter=function(t){return arguments.length?(r="function"==typeof t?t:Pi(!!t),l):r},l.touchable=function(t){return arguments.length?(i="function"==typeof t?t:Pi(!!t),l):i},l.handleSize=function(t){return arguments.length?(s=+t,l):s},l.keyModifiers=function(t){return arguments.length?(o=!!t,l):o},l.on=function(){var t=a.on.apply(a,arguments);return t===a?l:t},l}(Ui)}var ao=Math.PI,so=2*ao,lo=1e-6,uo=so-lo;function co(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function fo(){return new co}function ho(){return Math.random()}co.prototype=fo.prototype={constructor:co,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,l=r-e,u=o-t,c=a-e,f=u*u+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>lo)if(Math.abs(c*s-l*u)>lo&&i){var h=n-o,d=r-a,p=s*s+l*l,g=h*h+d*d,v=Math.sqrt(p),y=Math.sqrt(f),m=i*Math.tan((ao-Math.acos((p+f-g)/(2*v*y)))/2),b=m/y,x=m/v;Math.abs(b-1)>lo&&(this._+="L"+(t+b*u)+","+(e+b*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>u*d)+","+(this._x1=t+x*s)+","+(this._y1=e+x*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),l=t+a,u=e+s,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+u:(Math.abs(this._x1-l)>lo||Math.abs(this._y1-u)>lo)&&(this._+="L"+l+","+u),n&&(f<0&&(f=f%so+so),f>uo?this._+="A"+n+","+n+",0,1,"+c+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=l)+","+(this._y1=u):f>lo&&(this._+="A"+n+","+n+",0,"+ +(f>=ao)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}},function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(ho);var po=function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(ho);!function t(e){function n(){var t=po.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(ho);var go=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(ho);function vo(t){return function(){return t}}function yo(t){this._context=t}function mo(t){return new yo(t)}function bo(t){return t[0]}function xo(t){return t[1]}function wo(){var t=bo,e=null,n=vo(0),r=xo,i=vo(!0),o=null,a=mo,s=null;function l(l){var u,c,f,h,d,p=l.length,g=!1,v=new Array(p),y=new Array(p);for(null==o&&(s=a(d=fo())),u=0;u<=p;++u){if(!(u<p&&i(h=l[u],u,l))===g)if(g=!g)c=u,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),f=u-1;f>=c;--f)s.point(v[f],y[f]);s.lineEnd(),s.areaEnd()}g&&(v[u]=+t(h,u,l),y[u]=+n(h,u,l),s.point(e?+e(h,u,l):v[u],r?+r(h,u,l):y[u]))}if(d)return s=null,d+""||null}function u(){return function(){var t=bo,e=xo,n=vo(!0),r=null,i=mo,o=null;function a(a){var s,l,u,c=a.length,f=!1;for(null==r&&(o=i(u=fo())),s=0;s<=c;++s)!(s<c&&n(l=a[s],s,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(l,s,a),+e(l,s,a));if(u)return o=null,u+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:vo(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:vo(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:vo(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:vo(+n),e=null,l):t},l.x0=function(e){return arguments.length?(t="function"==typeof e?e:vo(+e),l):t},l.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:vo(+t),l):e},l.y=function(t){return arguments.length?(n="function"==typeof t?t:vo(+t),r=null,l):n},l.y0=function(t){return arguments.length?(n="function"==typeof t?t:vo(+t),l):n},l.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:vo(+t),l):r},l.lineX0=l.lineY0=function(){return u().x(t).y(n)},l.lineY1=function(){return u().x(t).y(r)},l.lineX1=function(){return u().x(e).y(n)},l.defined=function(t){return arguments.length?(i="function"==typeof t?t:vo(!!t),l):i},l.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),l):a},l.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),l):o},l}function _o(){this._=null}function ko(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function So(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function To(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Mo(t){for(;t.L;)t=t.L;return t}function Ao(t,e,n,r){var i=[null,null],o=Qo.push(i)-1;return i.left=t,i.right=e,n&&Eo(i,t,e,n),r&&Eo(i,e,t,r),Yo[t.index].halfedges.push(o),Yo[e.index].halfedges.push(o),i}function Co(t,e,n){var r=[e,n];return r.left=t,r}function Eo(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function No(t,e,n,r,i){var o,a=t[0],s=t[1],l=a[0],u=a[1],c=0,f=1,h=s[0]-l,d=s[1]-u;if(o=e-l,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>c&&(c=o)}if(o=r-l,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<f&&(f=o)}if(o=n-u,d||!(o>0)){if(o/=d,d<0){if(o<c)return;o<f&&(f=o)}else if(d>0){if(o>f)return;o>c&&(c=o)}if(o=i-u,d||!(o<0)){if(o/=d,d<0){if(o>f)return;o>c&&(c=o)}else if(d>0){if(o<c)return;o<f&&(f=o)}return!(c>0||f<1)||(c>0&&(t[0]=[l+c*h,u+c*d]),f<1&&(t[1]=[l+f*h,u+f*d]),!0)}}}}}function Do(t,e,n,r,i){var o=t[1];if(o)return!0;var a,s,l=t[0],u=t.left,c=t.right,f=u[0],h=u[1],d=c[0],p=c[1],g=(f+d)/2,v=(h+p)/2;if(p===h){if(g<e||g>=r)return;if(f>d){if(l){if(l[1]>=i)return}else l=[g,n];o=[g,i]}else{if(l){if(l[1]<n)return}else l=[g,i];o=[g,n]}}else if(s=v-(a=(f-d)/(p-h))*g,a<-1||a>1)if(f>d){if(l){if(l[1]>=i)return}else l=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(l){if(l[1]<n)return}else l=[(i-s)/a,i];o=[(n-s)/a,n]}else if(h<p){if(l){if(l[0]>=r)return}else l=[e,a*e+s];o=[r,a*r+s]}else{if(l){if(l[0]<e)return}else l=[r,a*r+s];o=[e,a*e+s]}return t[0]=l,t[1]=o,!0}function jo(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function $o(t,e){return e[+(e.left!==t.site)]}function Lo(t,e){return e[+(e.left===t.site)]}!function t(e){function n(t){var n=go.source(e)(t);return function(){return n()/t}}return n.source=t,n}(ho),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(ho),yo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},_o.prototype={constructor:_o,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Mo(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(So(this,n),n=(t=n).U),n.C=!1,r.C=!0,To(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(To(this,n),n=(t=n).U),n.C=!1,r.C=!0,So(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Mo(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,So(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,To(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,So(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,To(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,So(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,To(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Po,Io=[];function qo(){ko(this),this.x=this.y=this.arc=this.site=this.cy=null}function Ro(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],s=i[1],l=r[0]-a,u=r[1]-s,c=o[0]-a,f=o[1]-s,h=2*(l*f-u*c);if(!(h>=-Zo)){var d=l*l+u*u,p=c*c+f*f,g=(f*d-u*p)/h,v=(l*p-c*d)/h,y=Io.pop()||new qo;y.arc=t,y.site=i,y.x=g+a,y.y=(y.cy=v+s)+Math.sqrt(g*g+v*v),t.circle=y;for(var m=null,b=Ko._;b;)if(y.y<b.y||y.y===b.y&&y.x<=b.x){if(!b.L){m=b.P;break}b=b.L}else{if(!b.R){m=b;break}b=b.R}Ko.insert(m,y),m||(Po=y)}}}}function Oo(t){var e=t.circle;e&&(e.P||(Po=e.N),Ko.remove(e),Io.push(e),ko(e),t.circle=null)}var Ho=[];function Bo(){ko(this),this.edge=this.site=this.circle=null}function zo(t){var e=Ho.pop()||new Bo;return e.site=t,e}function Fo(t){Oo(t),Uo.remove(t),Ho.push(t),ko(t)}function Wo(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,s=[t];Fo(t);for(var l=o;l.circle&&Math.abs(n-l.circle.x)<Jo&&Math.abs(r-l.circle.cy)<Jo;)o=l.P,s.unshift(l),Fo(l),l=o;s.unshift(l),Oo(l);for(var u=a;u.circle&&Math.abs(n-u.circle.x)<Jo&&Math.abs(r-u.circle.cy)<Jo;)a=u.N,s.push(u),Fo(u),u=a;s.push(u),Oo(u);var c,f=s.length;for(c=1;c<f;++c)u=s[c],l=s[c-1],Eo(u.edge,l.site,u.site,i);l=s[0],(u=s[f-1]).edge=Ao(l.site,u.site,null,i),Ro(l),Ro(u)}function Go(t){for(var e,n,r,i,o=t[0],a=t[1],s=Uo._;s;)if((r=Vo(s,a)-o)>Jo)s=s.L;else{if(!((i=o-Xo(s,a))>Jo)){r>-Jo?(e=s.P,n=s):i>-Jo?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){Yo[t.index]={site:t,halfedges:[]}}(t);var l=zo(t);if(Uo.insert(e,l),e||n){if(e===n)return Oo(e),n=zo(e.site),Uo.insert(l,n),l.edge=n.edge=Ao(e.site,l.site),Ro(e),void Ro(n);if(n){Oo(e),Oo(n);var u=e.site,c=u[0],f=u[1],h=t[0]-c,d=t[1]-f,p=n.site,g=p[0]-c,v=p[1]-f,y=2*(h*v-d*g),m=h*h+d*d,b=g*g+v*v,x=[(v*m-d*b)/y+c,(h*b-g*m)/y+f];Eo(n.edge,u,p,x),l.edge=Ao(u,t,null,x),n.edge=Ao(t,p,null,x),Ro(e),Ro(n)}else l.edge=Ao(e.site,l.site)}}function Vo(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(n=a.site)[0],l=n[1],u=l-e;if(!u)return s;var c=s-r,f=1/o-1/u,h=c/u;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*u)-l+u/2+i-o/2)))/f+r:(r+s)/2}function Xo(t,e){var n=t.N;if(n)return Vo(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var Uo,Yo,Ko,Qo,Jo=1e-6,Zo=1e-12;function ta(t,e){return e[1]-t[1]||e[0]-t[0]}function ea(t,e){var n,r,i,o=t.sort(ta).pop();for(Qo=[],Yo=new Array(t.length),Uo=new _o,Ko=new _o;;)if(i=Po,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(Go(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;Wo(i.arc)}if(function(){for(var t,e,n,r,i=0,o=Yo.length;i<o;++i)if((t=Yo[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=jo(t,Qo[e[n]]);for(a.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[a[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var a=+e[0][0],s=+e[0][1],l=+e[1][0],u=+e[1][1];!function(t,e,n,r){for(var i,o=Qo.length;o--;)Do(i=Qo[o],t,e,n,r)&&No(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>Jo||Math.abs(i[0][1]-i[1][1])>Jo)||delete Qo[o]}(a,s,l,u),function(t,e,n,r){var i,o,a,s,l,u,c,f,h,d,p,g,v=Yo.length,y=!0;for(i=0;i<v;++i)if(o=Yo[i]){for(a=o.site,s=(l=o.halfedges).length;s--;)Qo[l[s]]||l.splice(s,1);for(s=0,u=l.length;s<u;)p=(d=Lo(o,Qo[l[s]]))[0],g=d[1],f=(c=$o(o,Qo[l[++s%u]]))[0],h=c[1],(Math.abs(p-f)>Jo||Math.abs(g-h)>Jo)&&(l.splice(s,0,Qo.push(Co(a,d,Math.abs(p-t)<Jo&&r-g>Jo?[t,Math.abs(f-t)<Jo?h:r]:Math.abs(g-r)<Jo&&n-p>Jo?[Math.abs(h-r)<Jo?f:n,r]:Math.abs(p-n)<Jo&&g-e>Jo?[n,Math.abs(f-n)<Jo?h:e]:Math.abs(g-e)<Jo&&p-t>Jo?[Math.abs(h-e)<Jo?f:t,e]:null))-1),++u);u&&(y=!1)}if(y){var m,b,x,w=1/0;for(i=0,y=null;i<v;++i)(o=Yo[i])&&(x=(m=(a=o.site)[0]-t)*m+(b=a[1]-e)*b)<w&&(w=x,y=o);if(y){var _=[t,e],k=[t,r],S=[n,r],T=[n,e];y.halfedges.push(Qo.push(Co(a=y.site,_,k))-1,Qo.push(Co(a,k,S))-1,Qo.push(Co(a,S,T))-1,Qo.push(Co(a,T,_))-1)}}for(i=0;i<v;++i)(o=Yo[i])&&(o.halfedges.length||delete Yo[i])}(a,s,l,u)}this.edges=Qo,this.cells=Yo,Uo=Ko=Qo=Yo=null}function na(t,e,n){this.k=t,this.x=e,this.y=n}ea.prototype={constructor:ea,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return $o(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,l,u,c=n.site,f=-1,h=e[i[o-1]],d=h.left===c?h.right:h.left;++f<o;)a=d,d=(h=e[i[f]]).left===c?h.right:h.left,a&&d&&r<a.index&&r<d.index&&(l=a,u=d,((s=c)[0]-u[0])*(l[1]-s[1])-(s[0]-l[0])*(u[1]-s[1])<0)&&t.push([c.data,a.data,d.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var l=t-i.site[0],u=e-i.site[1],c=l*l+u*u;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var l=t-s[0],u=e-s[1],f=l*l+u*u;f<c&&(c=f,a=s.index)}}))}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}},na.prototype={constructor:na,scale:function(t){return 1===t?this:new na(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new na(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},na.prototype;class ra{constructor(t,e=!1,n=30,r=-40,i=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),ht("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){ht("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=et.pageX,e=et.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY,ht("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){ht("#"+this.id).html(t)}}class ia{constructor(t,e=!0,n=10,r="YlGnBu",i=2,o="heatmapTooltip",a="heatmap-tooltip"){this.data=t,this.useLog=e,this.logBase=n,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=i,this.colorScheme=r,ht(`#${o}`).empty()&&ht("body").append("div").attr("id",o),this.tooltip=new ra(o),ht(`#${o}`).classed(a,!0),this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new Tr(t,e),this.toolbar}drawColorLegend(t,e={x:0,y:0},n=5){!function(t,e,n,r,i,o=10,a=10,s={h:10,w:40},l="h",u=!1){let c=[];if(u){let t=[...Array(o+1).keys()],e=n.domain()[1]/o;c=t.map((t=>t*e)),c=c.concat(t.filter((t=>0!=t)).map((t=>0-t*e))).sort(((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN))}else{let t=[...Array(o+1).keys()],e=n.domain()[1]/o;c=t.map((t=>t*e))}const f=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(c).enter().append("g").classed("legend",!0);"h"==l?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",s.h).attr("transform",`translate(${r.x}, ${r.y})`),f.append("rect").attr("x",((t,e)=>s.w*e)).attr("y",5).attr("width",s.w).attr("height",s.h).style("fill",n),f.append("text").attr("class","color-legend").text((t=>i?(Math.pow(a,t)-1).toPrecision(2):t.toPrecision(2))).attr("x",((t,e)=>s.w*e)).attr("y",0).style("font-size",10)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+s.h*c.length})rotate(90)`),f.append("rect").attr("x",0).attr("y",((t,e)=>s.h*e)).attr("width",s.w).attr("height",s.h).style("fill",n),f.append("text").attr("class","color-legend").text((t=>i?(Math.pow(a,t)-1).toPrecision(2):t.toPrecision(2))).attr("x",15).attr("y",((t,e)=>s.h*e+s.h/2)))}(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.logBase)}redraw(t,e,n,r={w:1e3,h:1e3},i=30){this._setXScale(r.w,e),this._setYScale(r.h,n),this.draw(t,r,i)}draw(t,e={w:1e3,h:600},n=30,r=!1,i=null,o=0,a="right"){void 0===this.xList&&this._setXScale(e.w),void 0===this.yList&&this._setYScale(e.h),void 0===this.colorScale&&this._setColorScale(o);const s=t.selectAll(".exp-map-xlabel").data(this.xList),l=null==i?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+i;s.attr("transform",(t=>`translate(${this.xScale(t)+5}, ${l}) rotate(${n})`)),s.enter().append("text").attr("class",((t,e)=>`exp-map-xlabel x${e}`)).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").style("font-size",this.xScale.bandwidth()>12?12:this.xScale.bandwidth()).attr("transform",(t=>`translate(${this.xScale(t)+5}, ${l}) rotate(${n})`)).merge(s).text((t=>t)),s.exit().remove(),t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text((t=>t)).attr("x","left"==a?this.xScale.range()[0]-5:this.xScale.range()[1]+5).attr("y",(t=>this.yScale(t)+this.yScale.bandwidth()/2)).style("font-size",this.yScale.bandwidth()).attr("class",((t,e)=>`exp-map-ylabel y${e}`)).attr("text-anchor","left"==a?"end":"start").style("cursor","default").on("click",(t=>{alert(`${t} is clicked. To be implemented`)})).on("mouseover",(function(){ht(this).classed("normal",!1).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).classed("normal",!0).classed("highlighted",!1)}));const u=t.selectAll(".exp-map-cell").data(this.data,(t=>t.value));u.attr("x",(t=>this.xScale(t.x))).attr("y",(t=>this.yScale(t.y))).attr("row",(t=>`x${this.xList.indexOf(t.x)}`)).attr("col",(t=>`y${this.yList.indexOf(t.y)}`));const c=this;u.enter().append("rect").attr("row",(t=>`x${this.xList.indexOf(t.x)}`)).attr("col",(t=>`y${this.yList.indexOf(t.y)}`)).attr("x",(t=>this.xScale(t.x))).attr("y",(t=>this.yScale(t.y))).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",(function(e){const n=ht(this);c.cellMouseover(e,t,n)})).on("mouseout",(function(){c.cellMouseout(t)})).merge(u).style("fill",(t=>t.color?t.color:(r&&0==t.value&&console.info(t),!r||0!=t.value&&null!==t.value&&void 0!==t.value?this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value):"#ffffff"))).style("stroke",(t=>r&&0==t.value?"lightgrey":t.stroke?t.stroke:"none")).style("stroke",(t=>r&&0==t.value||t.stroke?1:0)),u.exit().remove()}cellMouseout(t){t.selectAll("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(t,e,n){const r=n.attr("row"),i=n.attr("col");e.selectAll(".exp-map-xlabel").filter(`.${r}`).classed("highlighted",!0),e.selectAll(".exp-map-ylabel").filter(`.${i}`).classed("highlighted",!0),n.classed("highlighted",!0);const o=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue;this.tooltip.show(`Column: ${t.x} <br/> Row: ${t.y}<br/> Value: ${o}`)}_setXScale(t,e=void 0){this.xList=void 0!==e?e:xt().key((t=>t.x)).entries(this.data).map((t=>t.key)),this.xScale=oe().domain(this.xList).range([0,t]).padding(.05)}_setYScale(t,e){this.yList=void 0!==e?e:xt().key((t=>t.y)).entries(this.data).map((t=>t.key)),this.yScale=oe().domain(this.yList).range([0,t]).padding(.05)}_setColorScale(t=0){let e=this.useLog,n=this.data.map((t=>e?this._log(t.value):t.value));this.colorScale=tr(n,this.colorScheme,t)}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class oa{constructor(t,e,n,r="YlGnBu",i=2,o=new er,a="dmapTooltip",s=!0,l=10,u=""){this.config=o.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new Sr(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new Sr(this.data.rowTree,"h"),heatmap:new ia(this.data.heatmap,s,l,r,i,a)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.title=u,this.toolbar=void 0,this.tooltip=this.objects.heatmap.tooltip}createToolbar(t,e){return this.toolbar=new Tr(t,e),this.toolbar}render(t,e,n=!0,r=!0,i="top",o=5){let a,s;this._updateConfig(i),this.visualComponents.svg=nr(t,this.config.w,this.config.h,this.config.margin,e),n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),a=this.objects.columnTree.xScale.domain()),r&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),s=this.objects.rowTree.yScale.domain()),""!=this.title&&ht(`#${t}-svg`).append("text").attr("x",0).attr("y",20).text(this.title),this._renderHeatmap(this.objects.heatmap,a,s,o)}_renderTree(t,e,n){let r=this.visualComponents.svg;const i="row"==t?".exp-map-ylabel":".exp-map-xlabel",o=r.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`);e.draw(o,n.w,n.h);return o.selectAll(".dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",6).attr("fill","red");let e=t.leaves().map((t=>t.data.name));r.selectAll(i).filter((t=>e.includes(t))).classed("highlighted",!0),r.selectAll(".leaf-color").filter((t=>e.includes(t))).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).attr("r",2).attr("fill","#333"),r.selectAll(i).classed("highlighted",!1),r.selectAll(".leaf-color").classed("highlighted",!1)})),o}_renderHeatmap(t,e,n,r=5){let i=this.visualComponents.svg;const o=this.config.panels.main,a=i.append("g").attr("id",o.id).attr("transform",`translate(${o.x}, ${o.y})`);t.redraw(a,e,n,{w:o.w,h:o.h}),t.drawColorLegend(i,this.config.panels.legend,r)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}const aa=function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)},sa=function(t){let e=(Ht(t,.75)-Ht(t,.25))/1.34;return 1.06*Math.min($t(t),e)*Math.pow(t.length,-.2)};class la{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0,this.groups=xt().key((t=>{if(void 0===t.group)throw"required attribute does not exist";return t.group})).entries(this.data)}setYDomain(t){if(void 0===t||0==t.length){let e=[];this.data.forEach((t=>e=e.concat(t.values))),t=Lt(e)}return t}render(t,e=500,n=357,r=void 0,i=void 0,o={show:!0,angle:30,paddingInner:.01,paddingOuter:.01,textAnchor:"start",adjustHeight:0,showLabels:!0,showTicks:!0},a={show:!0,angle:0,paddingInner:0,paddingOuter:0,sort:!1,adjustHeight:5},s={label:"Y label"},l={show:!1,angle:0,adjustHeight:void 0},u=!1,c=!1,f=!1,h=!1,d=0,p=void 0,g="kdeScott"){this.dom=t,this.width=e,this.height=n,this.config={x:o,subx:a,y:s,size:l},this.scale={x:oe().range([0,this.width]).domain(r||this.groups.map((t=>t.key))).paddingOuter(this.config.x.paddingOuter).paddingInner(this.config.x.paddingInner),subx:oe(),y:Ln().rangeRound([this.height,0]).domain(this.setYDomain(i)),z:Ln()},this.show={whisker:u,outliers:h,divider:c,legend:f,points:d},this.kdeOption=g,this.vColor=p,this.reset()}update(){this.groups.forEach((t=>{t.index=this.scale.x.domain().indexOf(t.key);let e=this.groupInfo[t.key];void 0!==e&&this._renderGroupInfoText(e,t.key);this.scale.subx.domain((()=>(this.config.subx.sort&&t.values.sort(((t,e)=>t.label<e.label?-1:t.label>e.label?1:0)),t.values.map((t=>t.label))))()).range([this.scale.x(t.key),this.scale.x(t.key)+this.scale.x.bandwidth()]),t.values.forEach((e=>{0!=e.values.length&&(e.values=e.values.sort(At),void 0!==this.vColor&&(e.color=this.vColor),t.dom=this._drawViolin(e,t.index))})),this.config.size.show&&this._renderSizeAxis(t),this.config.subx.show&&this._renderSubXAxis(t)})),this._renderXAxis(),this._renderYAxis(),this.dom.on("mouseout",(()=>{void 0!==this.tooltip&&this.tooltip.hide()})),this.show.divider&&this._addGroupDivider(),this.show.legend&&this._addLegend()}addPlotTitle(t,e){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${r})`).text(e)}createTooltip(t){return 0==Xt(`#${t}`).length&&Xt("<div/>").attr("id",t).appendTo(Xt("body")),this.tooltip=new ra(t),ht(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return void 0===e&&(e=this.createTooltip(t)),this.toolbar=new Tr(t,e),this.toolbar}addBrush(t){const e=oo();e.on("end",(()=>{this.zoom(t,e)})),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,r=et.selection;if(void 0===e)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter(((t,e)=>{const n=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return e>=n&&e<=i})));const n=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([n,i]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout((function(){n=null}),350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((e=>{let n=e.key,r=e.values;this.scale.subx.range([this.scale.x(n),this.scale.x(n)+this.scale.x.bandwidth()]),r.forEach((r=>{if(0==r.values.length)return;this.scale.x.domain().indexOf(n),this.scale.z.range([this.scale.subx(r.label),this.scale.subx(r.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${e.index}-${r.label}`);o.select(".violin").transition(i).attr("d",wo().x0((t=>this.scale.z(t[1]))).x1((t=>this.scale.z(-t[1]))).y((t=>this.scale.y(t[0]))));const a=Ht(r.values,.25),s=Ht(r.values,.75),l=.1;o.select(".violin-ir").transition(i).attr("x",this.scale.z(-l)).attr("y",this.scale.y(s)).attr("width",Math.abs(this.scale.z(-l)-this.scale.z(l))).attr("height",Math.abs(this.scale.y(s)-this.scale.y(a)));const u=Ft(r.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-l)).attr("x2",this.scale.z(l)).attr("y1",this.scale.y(u)).attr("y2",this.scale.y(u))}))}))}reset(){this.dom.selectAll("*").remove(),this.update()}updateData(t,e=!1,n=!0){this.data=t,this.groups=xt().key((t=>{if(void 0===t.group)throw"required attribute does not exist";return t.group})).entries(this.data),this.updateYScale(),this.updateXScale(),this.show.outliers=n,e&&this.reset()}updateYScale(t=void 0,e=void 0,n=!1){void 0!==t&&(this.config.y.label=t),this.scale.y=Ln().rangeRound([this.height,0]).domain(this.setYDomain(e)),n&&this.reset()}updateXScale(t=void 0,e=!1){this.scale.x=oe().range([0,this.width]).domain(t||this.groups.map((t=>t.key))).paddingOuter(this.config.x.paddingOuter).paddingInner(this.config.x.paddingInner),e&&this.reset()}_drawViolin(t,e){const n=e=>{this.scale.z.domain([-e,e]).range([this.scale.subx(t.label),this.scale.subx(t.label)+this.scale.subx.bandwidth()])},r=this._generateVertices(t.values,this.kdeOption),i=this.dom.append("g").attr("id",`violin${e}-${t.label}`).attr("class","violin-g").datum(t);if(t.values.length>this.show.points&&r.length&&this._validVertices(r)){n(Bt(r,(t=>Math.abs(t[1]))));const o=Ht(t.values,.25),a=Ht(t.values,.75),s=Math.abs(a-o),l=Lt(t.values.filter((t=>t<=a+1.5*s))),u=l[1],c=l[0],f=Ft(t.values);if(this._renderViolinShape(i,t,r,f,e%2==0),(void 0===t.showBoxplot||t.showBoxplot)&&this._renderBoxPlot(i,t,c,u,o,a,f),this.show.outliers){const e=t.values.filter((t=>t<c||t>u));this._renderDataDots(i,{values:e,color:t.color},1)}t.showPoints&&this._renderDataDots(i,t,1)}else if(this.show.points>0){n(Bt(t.values,(t=>Math.abs(t)))),this._renderDataDots(i,t,1)}return i}_renderViolinShape(t,e,n,r,i,o="#94a8b8",a="#90c1c1"){let s=wo().x0((t=>this.scale.z("left"==e.showHalfViolin?0:t[1]))).x1((t=>this.scale.z("right"==e.showHalfViolin?0:-t[1]))).y((t=>this.scale.y(t[0])));const l=()=>void 0!==e.color?e.color:i?a:o,u=t.append("path").datum(n).attr("d",s).classed("violin",!0).style("fill",e.fill?e.fill:l).style("stroke",e.stroke?e.stroke:l);t.on("mouseover",(()=>{u.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+r.toPrecision(4)+"<br/>")})),t.on("mouseout",(()=>{u.classed("highlighted",!1)}))}_renderBoxPlot(t,e,n,r,i,o,a){const s=this.scale.z.domain()[1]/3;this.show.whisker&&t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(n)).style("stroke","#fff"),t.append("rect").attr("x","right"==e.showHalfViolin?this.scale.z(0):this.scale.z(-s)).attr("y",this.scale.y(o)).attr("width",void 0===e.showHalfViolin?Math.abs(this.scale.z(-s)-this.scale.z(s)):Math.abs(this.scale.z(0)-this.scale.z(s))).attr("height",Math.abs(this.scale.y(o)-this.scale.y(i))).style("fill",e.altColor||"#555f66").style("stroke-width",.2),t.append("line").attr("x1","right"==e.showHalfViolin?this.scale.z(0):this.scale.z(-s)).attr("x2","left"==e.showHalfViolin?this.scale.z(0):this.scale.z(s)).attr("y1",this.scale.y(a)).attr("y2",this.scale.y(a)).attr("class","violin-median")}_renderDataDots(t,e,n=2){const r=this.scale.z.domain()[1],i=po(0,r/4);t.append("g").attr("class","violin-points").selectAll("circle").data(e.values).enter().append("circle").attr("cx",(()=>this.scale.z("left"==e.showHalfViolin?-Math.abs(i()):Math.abs(i())))).attr("cy",(t=>this.scale.y(t))).attr("fill",e.color).attr("r",n)}_sanityCheck(t){const e=["group","label","values"];t.forEach((t=>{e.forEach((e=>{if(void 0===t[e])throw"GroupedViolin: input data error."}))}))}_addGroupDivider(){const t=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),n=(n,r)=>r!==t.length-1?this.scale.x(n)+ +this.scale.x.bandwidth()+e/2:0;this.dom.selectAll(".vline").data(t).enter().append("line").classed("vline",!0).attr("x1",n).attr("x2",n).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",((e,n)=>n!=t.length-1?1:0)).style("stroke","rgb(86,98,107)").style("opacity",.5)}_addLegend(){const t=this.dom.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");t.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const e=t.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0);e.append("rect").attr("x",((t,e)=>5+60*e+this.scale.x.range()[0])).attr("y",-28).attr("width",10).attr("height",10).style("fill",(t=>t.color)),e.append("text").attr("class","violin-legend-text").text((t=>t.label)).attr("x",((t,e)=>17+60*e+this.scale.x.range()[0])).attr("y",-20)}_renderGroupInfoText(t,e){this.dom.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","middle").attr("fill",(e=>"pvalue"==e&&parseFloat(t[e])<=parseFloat(t.pvalueThreshold)?"orangered":"SlateGray")).attr("transform",(()=>`translate(${this.scale.x(e)+this.scale.x.bandwidth()/2}, ${this.scale.y(this.scale.y.domain()[0])+50})`)).text((e=>`${e}: ${parseFloat(parseFloat(t[e]).toPrecision(3)).toExponential()}`))}_renderXAxis(){let t=this.config.subx.show?55:0;const e=this.config.x;var n;e.show&&(this.xAxis="top"==e.direction?(n=this.scale.x,wr(fr,n)):_r(this.scale.x),e.hideLabels&&(this.Axis=this.xAxis.tickFormat("")),e.hideTicks&&(this.Axis=this.xAxis.tickSize(0)),this.dom.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${void 0!==e.adjustHeight?e.adjustHeight:this.height+t})`).call(this.xAxis).selectAll("text").attr("text-anchor",e.textAnchor?e.textAnchor:"start").attr("transform",`rotate(${e.angle}, 0, 10)`))}_renderYAxis(t=!1){this.yAxis=kr(this.scale.y).tickValues(this.scale.y.ticks(5)),t&&this.dom.select(".violin-y-axis").empty().remove(),this.dom.append("g").attr("class","violin-y-axis axis--y").attr("transform","translate(-5, 0)").call(this.yAxis),this.dom.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${10+ht(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(this.config.y.label)}_renderSizeAxis(t){let e={};t.values.forEach((t=>e[t.label]=`(${t.size||t.values.length})`));let n=_r(oe().domain(t.values.map((t=>t.label))).rangeRound([this.scale.x(t.key),this.scale.x(t.key)+this.scale.x.bandwidth()])).tickFormat((t=>e[t]));const r=this.height+18,i=this.config.size,o=t.dom.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${i.adjustHeight||r})`).call(n);i.angle>0&&o.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${i.angle}, 2, 10)`)}_renderSubXAxis(t){const e=this.config.subx,n=e.adjustHeight?e.adjustHeight:5;let r=_r(this.scale.subx);e.hideTicks&&(r=r.tickSize(0));const i=t.dom.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${this.height+n})`).call(r);e.angle>0&&i.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${e.angle}, 2, 10)`)}_generateVertices(t,e){let n=function(t,e,n){return function(r){return e.map((e=>[e,zt(r,(r=>t((e-r)/n)))/n]))}}(aa,this.scale.y.ticks(100),sa(t));const r=Lt(t);let i="default"==e?n(t):function(t,e){void 0===e&&(e=Ln().domain(Lt(t)).nice().ticks(100));const n=Math.pow(t.length,-.2),r=1/$t(t)/n,i=Math.pow(2*Math.PI,-.5)*r/t.length;return e.map((e=>{let n=0;return t.forEach((t=>{n+=Math.exp(-Math.pow((t-e)*r,2)/2)})),[e,n*i]}))}(t);return i=i.filter((t=>t[0]>=r[0]&&t[0]<=r[1])),i}_validVertices(t){return!t.reduce(((t,e)=>t.concat(e)),[]).filter((t=>isNaN(t))).length}}function ua(t,e=Ut().tissue){!function(t,e=Ut().tissue){Kt(e).then((function(e){let n=Yt(e);n.forEach((t=>{t.id=t.tissueSiteDetailId,t.text=t.tissueSiteDetail})),n.sort(((t,e)=>t.tissueSiteDetail<e.tissueSiteDetail?-1:t.tissueSiteDetail>e.tissueSiteDetail?1:0)),$(`#${t}`).select2({placeholder:"Select a data set",data:n})})).catch((function(t){console.error(t)}))}(t,e)}function ca(t,e,n,r=Ut(),i=!0){const o=i?r.topInTissueFiltered:r.topInTissue,a=0==Xt("#filterInfo").length?Xt("<div/>").attr("id","filterInfo").appendTo("#messageBox"):Xt("#filterInfo");i?a.html("Mitochondrial genes are excluded.<br/>"):a.html("Mitochondrial genes are included.<br/>"),async function(t,e,n){let r,i=[];const o=Qt(t,n,e);return r=await fetch(o).then((t=>t.json())),i=i.concat(r.data),i}(o+t,50,0).then((function(o){const a=o.map((t=>{if(!t.hasOwnProperty("gencodeId"))throw console.error(t),"Parse Error: required json attribute is missing: gencodeId";return t.gencodeId}));ha(e,n,a,void 0,r,i,(function(){da(t)}),t)})).catch((function(t){console.error(t)}))}function fa(t,e,n,r,i,o=Ut(),a=void 0){Kt(o.tissue).then((function(s){let l=function(t,e=!1){let n=t;const r=n.filter((t=>t.rnaSeqAndGenotypeSampleCount<=70)).map((t=>t.tissueSiteDetailId));["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach((t=>{if(!n[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`})),n=0==e?n:n.filter((t=>!r.includes(t.tissueSiteDetailId)));let i=n.reduce(((t,e)=>{let n=e.tissueSite,r={id:e.tissueSiteDetailId,name:e.tissueSiteDetail};return t.hasOwnProperty(n)||(t[n]=[]),t[n].push(r),t}),{});return Object.keys(i).forEach((t=>{if(1==i[t].length){let e=i[t][0];delete i[t],i[e.name]=[e]}})),i}(s,!1);!function(t,e,n=!1,r=!1,i=4){const o="tissue-group-main-level";ht(`#${e}`).selectAll("*").remove();const a=$("<div/>").attr("class","col-xs-12 col-md-12").appendTo($(`#${e}`));n?$(`<label class=${o}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(a):$(`<label class=${o}><input type="radio" name="allTissues" value="all"> All </label> <label class=${o}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(a),$('input[name="allTissues"]').change((function(){switch($(this).val()){case"all":$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0);break;case"reset":$(".tissueGroup").prop("checked",!1),$(".tissueSubGroup").prop("checked",!1)}}));let s=Object.keys(t).sort(((t,e)=>"Brain"==t?-1:"Brain"==e?1:t<e?-1:t>e?1:void 0)),l=Object.keys(t).reduce(((e,n)=>t[n].length>1?e+1+t[n].length:e+t[n].length),0),u=Math.ceil(l/i),c=l%i,f=Math.floor(12/i);const h=Pt(0,i).map((t=>$(`<div id="section${t}" class="col-xs-12 col-md-${f}">`).appendTo($(`#${e}`))));let d=0,p=0;s.forEach((e=>{let n=t[e];const r=e.replace(/ /g,"_");let i=n.length;i=1==i?i:i+1,0!=d&&i+d>u+c&&(d=0,h.length!=p+1&&(p+=1)),d+=i;let a=h[p];void 0===a&&console.error(`${e} has no defined session`),$(`<label class=${o}><input type="checkbox" id="${r}" class="tissueGroup"> <span>${e}</span></label><br/>`).appendTo(a),n.length>1&&n.sort(((t,e)=>t.id>e.id?1:t.id<e.id?-1:0)).forEach((function(t,e){let r=$(`<label class=tissue-group-sub-level><input type="checkbox" id="${t.id}" class="tissueSubGroup"> <span>${t.name}</span></label><br/>`).appendTo(a);e==n.length-1&&r.addClass("last-site"),r.click((function(){$('input[name="allTissues"]').prop("checked",!1)}))})),$("#"+r).click((function(){$('input[name="allTissues"]').prop("checked",!1),$("#"+r).is(":checked")?n.forEach((function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!0)})):n.forEach((function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!1)}))}))})),r&&($('input[name="allTissues"][value="all"]').prop("checked",!0),$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0))}(l,e),Xt(`#${n}`).click((function(){void 0!==a&&a(),Xt(`#${t}`).removeClass("show"),Xt(`#${t}`).removeClass("in");let n=Xt("#genes").val().replace(/ /g,"").replace(/\n/g,"").toUpperCase().split(",").filter((t=>""!=t));if(0==n.length)throw alert("Input Error: At least one gene must be provided."),"Gene input error";let s=function(t,e,n=!1){let r=[];return $(`#${e}`).find(":input").each((function(){if($(this).is(":checked")){const e=$(this).attr("id");if($(this).hasClass("tissueGroup")){let i=e.replace(/_/g," ");1==t[i].length&&(n?r.push(t[i][0].name):r.push(t[i][0].id))}else n?r.push($($(this).siblings()[0]).text()):r.push(e)}})),r.filter((t=>void 0!==t))}(l,e);if(0==s.length)throw alert("Input Error: At least one tissue must be selected."),"Tissue input error";ha(r,i,n,s,o)}))})).catch((function(t){console.error(t)}))}function ha(t,e,n,r=void 0,i=Ut(),o=void 0,a=void 0,s=void 0){Xt("#spinner").show(),Xt(`#${t}`).empty(),Xt(`#${e}`).empty();const l=Xt("<div/><br/>").attr("class","col-xs-12 col-md-12").css("color","firebrick").appendTo(`#${t}`);let u="";n.length>100&&(u="Warning: Too many genes. Input list truncated to the first 100. <br/>",n=n.slice(0,100));const c=[Kt(i.tissue),Kt(i.geneId+n.join("&geneId="))];Promise.all(c).then((function(c){const f=Yt(c[0]),h=function(t,e=!1,n=null){if(0==t.length)throw alert("No gene is found"),"Fatal Error: gene(s) not found";if(e){if(null===n)throw"Please provide a gene ID for search results validation";if(t.length>1){let e=t.filter((t=>t.geneSymbolUpper==n.toUpperCase()||t.gencodeId==n.toUpperCase()));if(e.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";if(0==e.length)throw alert("No gene is found with "+n),"Fatal Error: gene not found";t=e}return t[0]}return t}(c[1]);u+=function(t,e,n){let r="";if(0==e.length)r="Fatal Error: the gene list is empty.<br/>";else if(e.length<n.length){let t=[];e.forEach((e=>{t.push(e.gencodeId),t.push(e.geneSymbolUpper)}));let i=n.filter((e=>!t.includes(e.toLowerCase())&&!t.includes(e.toUpperCase())));i.length>0&&(r=`Warning: Not all genes are found: ${i.join(",")}<br/>`)}return r}(0,h,n);const d=h.map((t=>t.gencodeId)).join("&gencodeId="),p=void 0===r?void 0:r.join("&tissueSiteDetailId=");(async function(t){return await fetch(t).then((t=>t.json()))})(void 0===p?i.medGeneExp+"?gencodeId="+d:i.medGeneExp+"?gencodeId="+d+"&tissueSiteDetailId="+p).then((function(n){Xt("#spinner").hide();const c=function(t){const e="medianGeneExpression";if(!t.hasOwnProperty(e))throw"expression data json format error.";return 0==t.length?"No expression data found.":void 0}(n);if(void 0!==c)l.html(u+c);else{l.html(u);const c=function(t){const e="medianGeneExpression";if(0==t[e].length)throw"parseMedianExpression finds no data.";["median","tissueSiteDetailId","gencodeId"].forEach((n=>{if(!t[e][0].hasOwnProperty(n))throw console.error(t[e][0]),`Parsing Error: required json attribute is missing: ${n}`}));let n=t[e];return n.forEach((function(t){t.value=Number(t.median),t.x=t.tissueSiteDetailId,t.y=t.gencodeId,t.displayValue=Number(t.median),t.id=t.gencodeId})),n}(n),d={root:t,violin:e,svg:`${t}-svg`,tooltip:"heatmapTooltip",toolbar:"heatmapToolbar",clone:"heatmapClone",buttons:{save:"heatmapSave",filter:"heatmapFilter",sort:"heatmapSortTissue",cluster:"heatmapClusterTissue"}};["toolbar","clone"].forEach((t=>{Xt("<div/>").attr("id",d[t]).appendTo(Xt(`#${d.root}`))}));const p=25,g=25;let v=void 0===r?Math.ceil(window.innerWidth/f.length):Math.ceil(window.innerWidth/r.length);v=v>p?p:v<g?g:v;let y={top:50,right:250,bottom:170,left:10},m=100,b=void 0===r?v*f.length+m+y.right+y.left:v*r.length+m+y.right+y.left;const x=new er(b,m,100,y,12,10),w=new oa(n.clusters.tissue,n.clusters.gene,c,"YlGnBu",2,x,d.tooltip);h.length<3?w.render(d.root,d.svg,!0,!1):w.render(d.root,d.svg);const _=f.reduce(((t,e)=>{if(!e.hasOwnProperty("tissueSiteDetailId"))throw"tissue has not attr tissueSiteDetailId";return t[e.tissueSiteDetailId]=e,t}),{}),k=w.data.heatmap.reduce(((t,e)=>{if(!e.hasOwnProperty("gencodeId"))throw"gene has no attr gencodeId";return t[e.gencodeId]={geneSymbol:e.geneSymbol,color:void 0},t}),{});ht("#"+w.config.panels.main.id).selectAll(".exp-map-xlabel").text((t=>void 0===_[t]?t:_[t].tissueSiteDetail)),ht("#"+w.config.panels.main.id).selectAll(".exp-map-ylabel").text((t=>void 0===k[t]?t:k[t].geneSymbol)),pa(w,_),function(t,e,n,r=Ut(),i,o){let a=t.createToolbar(e.toolbar,t.tooltip);a.createDownloadSvgButton(e.buttons.save,e.svg,`${e.root}-save.svg`,e.clone);const s=()=>{const t=e.buttons.filter;a.createButton(t,"fa-filter"),ht(`#${t}`).on("click",(function(){ca(o,e.root,e.violin,r,!i)})).on("mouseover",(function(){i?a.tooltip.show("Include Mitochondrial Genes"):a.tooltip.show("Exclude Mitochondrial Genes")})).on("mouseout",(function(){a.tooltip.hide()}))},l=()=>{const r=e.buttons.sort;a.createButton(r,"fa-sort-alpha-down"),ht(`#${r}`).on("click",(function(){ht("#"+t.config.panels.top.id).style("display","None"),va(t.objects.heatmap.xList.sort(),t,n)})).on("mouseover",(function(){a.tooltip.show("Sort Tissues Alphabetically")})).on("mouseout",(function(){a.tooltip.hide()}))},u=()=>{const r=e.buttons.cluster;a.createButton(r,"fa-code-branch"),ht(`#${r}`).on("click",(function(){ht("#"+t.config.panels.top.id).style("display","Block"),va(t.objects.columnTree.xScale.domain(),t,n)})).on("mouseover",(function(){a.tooltip.show("Cluster Tissues")})).on("mouseout",(function(){a.tooltip.hide()}))};void 0!==i&&s();l(),u()}(w,d,_,i,o,s),function(t,e,n,r=Ut()){const i=t.visualComponents.svg,o=t.tooltip;t.data.external=[];const a=function(r){const a=ht(this);t.objects.heatmap.cellMouseover(r,i,a);const s=[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${void 0===e[r.x]?r.x:e[r.x].tissueSiteDetail}</span>`,`<span class="tooltip-key">Gene</span>: <span class="tooltip-value">${void 0===n[r.y]?r.y:n[r.y].geneSymbol}</span>`,`<span class="tooltip-key">Median TPM</span>: <span class="tooltip-value">${parseFloat(r.displayValue.toExponential()).toPrecision(4)}</span>`];o.show(s.join("<br/>"))},s=function(){i.selectAll("*").classed("highlighted",!1),o.hide()},l=Zn();(function(t){var e=[];for(var n in t)e.push(n);return e})(n).forEach(((t,e)=>{n[t].color=l[e]}));const u=function(i){let o=ht(this),a="";o.classed("clicked")?(o.classed("clicked",!1),a="delete"):(o.classed("clicked",!0),a="add"),function(t,e,n,r,i,o=Ut()){switch(t){case"delete":i.data.external=i.data.external.filter((t=>t.gencodeId!=e)),ga(i.data.external,i,r);break;case"add":{const t=o.geneExp+e,a={};a[e]=n[e].color;const s=i.objects.heatmap.xScale.domain();Kt(t).then((function(t){void 0===i.data.external&&(i.data.external=[]),i.data.external=i.data.external.concat(function(t,e=!0,n){return t.forEach((t=>{["data","tissueSiteDetailId","geneSymbol","gencodeId"].forEach((e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: required json attribute is missing: "+e})),t.values=e?t.data.map((t=>Math.log10(+t+1))):t.data,t.group=t.tissueSiteDetailId,t.label=t.geneSymbol,t.color=void 0===n?"#90c1c1":n[t.gencodeId]})),t}(t,!0,a)).filter((t=>s.indexOf(t.group)>-1)),ga(i.data.external,i,r)})).catch((function(t){console.error(t)}));break}default:console.warn("action not understood.")}}(a,i,n,e,t,r)};i.selectAll(".exp-map-cell").on("mouseover",a).on("mouseout",s),i.selectAll(".exp-map-ylabel").style("cursor","pointer").on("click",u)}(w,_,k,i),null!=a&&a()}})).catch((function(t){console.error(t)}))})).catch((function(t){console.error(t)}))}function da(t){vt(".exp-map-xlabel").filter((e=>e==t)).classed("query",!0)}function pa(t,e){const n=t.config.panels.main.id,r=t.objects.heatmap;let i=ht(`#${n}`).selectAll(".exp-map-xcolor").data(r.xList),o=ht(`#${n}`).selectAll(".leaf-color").data(r.xList);i.attr("x",(t=>r.xScale(t))).attr("y",r.yScale.range()[1]+5),o.attr("x",(t=>r.xScale(t))).attr("y",r.yScale.range()[0]-10),i.enter().append("rect").attr("x",(t=>r.xScale(t))).attr("y",r.yScale.range()[1]+5).attr("width",r.xScale.bandwidth()).attr("height",.5*r.yScale.bandwidth()).classed("exp-map-xcolor",!0).merge(i).style("fill",(t=>void 0===e[t]?"#000000":`#${e[t].colorHex}`)),i.exit().remove(),t.objects.heatmap.yScale.domain().length>15&&(o.enter().append("rect").attr("x",(t=>r.xScale(t))).attr("y",r.yScale.range()[0]-10).attr("width",r.xScale.bandwidth()).attr("height",.5*r.yScale.bandwidth()).classed("leaf-color",!0).merge(o).style("fill",(t=>void 0===e[t]?"#000000":`#${e[t].colorHex}`)),o.exit().remove())}function ga(t,e,n){const r={root:"violinRoot",tooltip:"violinTooltip",toolbar:"violinToolbar",clone:"violinClone",chart:"violinPlot",svg:"violinSvg",buttons:{save:"violinSave"}},i=`#${r.root}`,o=`#${r.tooltip}`;if(0==Xt(i).length)throw"Violin Plot Error: rootId does not exist.";0==Xt(o).length&&Xt("<div/>").attr("id",r.tooltip).appendTo(Xt("body")),ht(i).selectAll("*").remove(),["toolbar","chart","clone"].forEach((t=>{Xt("<div/>").attr("id",r[t]).appendTo(Xt(i))}));const a=()=>{ht(i).style("opacity",0)};0==t.length&&a();let s=e.objects.heatmap.xScale.domain().map((t=>({id:t,name:n[t].tissueSiteDetail})));const l=t.reduce(((t,e)=>(t[e.label]=1,t)),{}),u=Object.keys(l).length;0==u&&a();const c=new la(t),f=c.createTooltip(r.tooltip);c.createToolbar(r.toolbar,f).createDownloadSvgButton(r.buttons.save,r.svg,`${r.root}-save.svg`,r.clone),ht(i).style("opacity",1);const h=function(t=50,e=50,n=50,r=50){return{top:t,right:e,bottom:n,left:r}}(50,50,150,e.config.panels.main.x);let d=20*Object.keys(l).length*s.length;d=d<e.config.panels.main.w?e.config.panels.main.w:d;const p=function(t=1200,e=250,n){return{width:t,height:e,outerWidth:t+(n.left+n.right),outerHeight:e+(n.top+n.bottom)}}(d,150,h),g=ht(`#${r.chart}`).append("svg").attr("width",p.outerWidth).attr("height",p.outerHeight).attr("id",r.svg).append("g").attr("transform",`translate(${h.left}, ${h.top})`),v=1!=u,y={show:!0,angle:30,paddingOuter:.01,paddingInner:.3,textAnchor:"start",adjustHeight:p.height,hideLabels:!1,hideTicks:!1};c.render(g,p.width,p.height,s.map((t=>t.id)),[],y,{show:!1},{label:"log10(TPM+1)"},void 0,!0,v,!0,!0,0,void 0,"kdeScott");const m=Number(g.select("#violinLegend").select("rect").attr("width"));let b=Number(ht(`#${r.chart}`).select("svg").attr("width"));b=b<m+150?m+150:b,ht(`#${r.chart}`).select("svg").attr("width",b),function(t,e,n,r="top"){!function(t){const e=t.select(".violin-x-axis");e.attr("transform",`${e.attr("transform")} translate(0, 3)`)}(e);const i=e.selectAll(".violin-x-axis text");i.attr("transform",`translate(0, 8) ${i.attr("transform")}`);const o=e.append("g");o.selectAll(".tcolor").data(t.scale.x.domain()).enter().append("rect").classed("tcolor",!0).attr("x",(e=>t.scale.x(e))).attr("y","top"==r?t.scale.y.range()[1]:t.scale.y.range()[0]).attr("transform","translate(0, 14)").attr("width",t.scale.x.bandwidth()).attr("height",5).style("stroke-width",0).style("fill",(t=>`#${n[t].colorHex}`)).style("opacity",.7)}(c,g,n,"bottom"),function(t,e){t.select(".violin-x-axis").selectAll("text").text((t=>void 0===e[t]?t:e[t].tissueSiteDetail))}(g,n),function(t,e){t.dom.selectAll(".violin-g").on("mouseover",(n=>{const r=[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${e[n.tissueSiteDetailId].tissueSiteDetail}</span>`,`<span class="tooltip-key">Gene</span>: <span class="tooltip-value">${n.geneSymbol}</span>`,`<span class="tooltip-key">Median TPM</span>: <span class="tooltip-value">${Ft(n.data).toPrecision(4)}</span>`];t.tooltip.show(r.join("<br/>"))}))}(c,n)}function va(t,e,n){let r;const i=ht(".exp-map-xlabel.query");i.empty()||(r=i.datum());const o=ht("#"+e.config.panels.main.id),a=e.config.panels.main;e.objects.heatmap.redraw(o,t,e.objects.heatmap.yList,a),vt(".exp-map-xlabel").text((t=>void 0===n[t]?t:n[t].tissueSiteDetail)).classed("query",!1),pa(e,n),void 0!==r&&da(r),ht("#violinRoot").style("opacity",0),vt(".exp-map-ylabel").classed("clicked",!1),e.data.external=void 0}var ya={createDatasetMenu:ua,launchTopExpressed:ca,launch:fa,searchById:ha};t.ExpressionMap=ya,t.createDatasetMenu=ua,t.launch=fa,t.launchTopExpressed=ca,t.searchById=ha}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
