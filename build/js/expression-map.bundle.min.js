!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("file-saver")):"function"==typeof define&&define.amd?define(["exports","file-saver"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).ExpressionMap={},t.saveAs)}(this,(function(t,e){"use strict";var n="http://www.w3.org/1999/xhtml",r={svg:"http://www.w3.org/2000/svg",xhtml:n,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function i(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),r.hasOwnProperty(e)?{space:r[e],local:t}:t}function o(t){return function(){var e=this.ownerDocument,r=this.namespaceURI;return r===n&&e.documentElement.namespaceURI===n?e.createElement(t):e.createElementNS(r,t)}}function a(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function s(t){var e=i(t);return(e.local?a:o)(e)}function l(){}function u(t){return null==t?l:function(){return this.querySelector(t)}}function c(){return[]}function f(t){return null==t?c:function(){return this.querySelectorAll(t)}}function h(t){return function(){return this.matches(t)}}function d(t){return new Array(t.length)}function p(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}p.prototype={constructor:p,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var g="$";function v(t,e,n,r,i,o){for(var a,s=0,l=e.length,u=o.length;s<u;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new p(t,o[s]);for(;s<l;++s)(a=e[s])&&(i[s]=a)}function y(t,e,n,r,i,o,a){var s,l,u,c={},f=e.length,h=o.length,d=new Array(f);for(s=0;s<f;++s)(l=e[s])&&(d[s]=u=g+a.call(l,l.__data__,s,e),u in c?i[s]=l:c[u]=l);for(s=0;s<h;++s)(l=c[u=g+a.call(t,o[s],s,o)])?(r[s]=l,l.__data__=o[s],c[u]=null):n[s]=new p(t,o[s]);for(s=0;s<f;++s)(l=e[s])&&c[d[s]]===l&&(i[s]=l)}function m(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function b(t){return function(){this.removeAttribute(t)}}function x(t){return function(){this.removeAttributeNS(t.space,t.local)}}function w(t,e){return function(){this.setAttribute(t,e)}}function _(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function k(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function S(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function T(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function M(t){return function(){this.style.removeProperty(t)}}function A(t,e,n){return function(){this.style.setProperty(t,e,n)}}function C(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function E(t,e){return t.style.getPropertyValue(e)||T(t).getComputedStyle(t,null).getPropertyValue(e)}function N(t){return function(){delete this[t]}}function D(t,e){return function(){this[t]=e}}function j(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function L(t){return t.trim().split(/^|\s+/)}function P(t){return t.classList||new I(t)}function I(t){this._node=t,this._names=L(t.getAttribute("class")||"")}function q(t,e){for(var n=P(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function R(t,e){for(var n=P(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function O(t){return function(){q(this,t)}}function H(t){return function(){R(this,t)}}function B(t,e){return function(){(e.apply(this,arguments)?q:R)(this,t)}}function z(){this.textContent=""}function F(t){return function(){this.textContent=t}}function W(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function G(){this.innerHTML=""}function V(t){return function(){this.innerHTML=t}}function X(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function U(){this.nextSibling&&this.parentNode.appendChild(this)}function Y(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function K(){return null}function Q(){var t=this.parentNode;t&&t.removeChild(this)}function J(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Z(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}I.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var tt={},et=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(tt={mouseenter:"mouseover",mouseleave:"mouseout"}));function nt(t,e,n){return t=rt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function rt(t,e,n){return function(r){var i=et;et=r;try{t.call(this,this.__data__,e,n)}finally{et=i}}}function it(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function ot(t,e,n){var r=tt.hasOwnProperty(t.type)?nt:rt;return function(i,o,a){var s,l=this.__on,u=r(e,o,a);if(l)for(var c=0,f=l.length;c<f;++c)if((s=l[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=u,s.capture=n),void(s.value=e);this.addEventListener(t.type,u,n),s={type:t.type,name:t.name,value:e,listener:u,capture:n},l?l.push(s):this.__on=[s]}}function at(t,e,n){var r=T(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function st(t,e){return function(){return at(this,t,e)}}function lt(t,e){return function(){return at(this,t,e.apply(this,arguments))}}var ut=[null];function ct(t,e){this._groups=t,this._parents=e}function ft(){return new ct([[document.documentElement]],ut)}function ht(t){return"string"==typeof t?new ct([[document.querySelector(t)]],[document.documentElement]):new ct([[t]],ut)}function dt(){for(var t,e=et;t=e.sourceEvent;)e=t;return e}function pt(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]}function gt(t){var e=dt();return e.changedTouches&&(e=e.changedTouches[0]),pt(t,e)}function vt(t){return"string"==typeof t?new ct([document.querySelectorAll(t)],[document.documentElement]):new ct([null==t?[]:t],ut)}ct.prototype=ft.prototype={constructor:ct,select:function(t){"function"!=typeof t&&(t=u(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],l=s.length,c=r[i]=new Array(l),f=0;f<l;++f)(o=s[f])&&(a=t.call(o,o.__data__,f,s))&&("__data__"in o&&(a.__data__=o.__data__),c[f]=a);return new ct(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=f(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],l=s.length,u=0;u<l;++u)(a=s[u])&&(r.push(t.call(a,a.__data__,u,s)),i.push(a));return new ct(r,i)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new ct(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),u=-1,this.each((function(t){d[++u]=t})),d;var n=e?y:v,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var o=i.length,a=new Array(o),s=new Array(o),l=new Array(o),u=0;u<o;++u){var c=r[u],f=i[u],h=f.length,d=t.call(c,c&&c.__data__,u,r),p=d.length,g=s[u]=new Array(p),m=a[u]=new Array(p);n(c,f,g,m,l[u]=new Array(h),d,e);for(var b,x,w=0,_=0;w<p;++w)if(b=g[w]){for(w>=_&&(_=w+1);!(x=m[_])&&++_<p;);b._next=x||null}}return(a=new ct(a,r))._enter=s,a._exit=l,a},enter:function(){return new ct(this._enter||this._groups.map(d),this._parents)},exit:function(){return new ct(this._exit||this._groups.map(d),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),d=0;d<f;++d)(l=u[d]||c[d])&&(h[d]=l);for(;s<r;++s)a[s]=e[s];return new ct(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=m);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],l=s.length,u=i[o]=new Array(l),c=0;c<l;++c)(a=s[c])&&(u[c]=a);u.sort(e)}return new ct(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=i(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?x:b:"function"==typeof e?n.local?S:k:n.local?_:w)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?M:"function"==typeof e?C:A)(t,e,null==n?"":n)):E(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?N:"function"==typeof e?j:D)(t,e)):this.node()[t]},classed:function(t,e){var n=L(t+"");if(arguments.length<2){for(var r=P(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?B:e?O:H)(n,e))},text:function(t){return arguments.length?this.each(null==t?z:("function"==typeof t?W:F)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?G:("function"==typeof t?X:V)(t)):this.node().innerHTML},raise:function(){return this.each(U)},lower:function(){return this.each(Y)},append:function(t){var e="function"==typeof t?t:s(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:s(t),r=null==e?K:"function"==typeof e?e:u(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Q)},clone:function(t){return this.select(t?Z:J)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?ot:it,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var l,u=0,c=s.length;u<c;++u)for(r=0,l=s[u];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?lt:st)(t,e))}};var yt="$";function mt(){}function bt(t,e){var n=new mt;if(t instanceof mt)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}function xt(){var t,e,n,r=[],i=[];function o(n,i,a,s){if(i>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var l,u,c,f=-1,h=n.length,d=r[i++],p=bt(),g=a();++f<h;)(c=p.get(l=d(u=n[f])+""))?c.push(u):p.set(l,[u]);return p.each((function(t,e){s(g,e,o(t,i,a,s))})),g}function a(t,n){if(++n>r.length)return t;var o,s=i[n-1];return null!=e&&n>=r.length?o=t.entries():(o=[],t.each((function(t,e){o.push({key:e,values:a(t,n)})}))),null!=s?o.sort((function(t,e){return s(t.key,e.key)})):o}return n={object:function(t){return o(t,0,wt,_t)},map:function(t){return o(t,0,kt,St)},entries:function(t){return a(o(t,0,kt,St),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return i[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function wt(){return{}}function _t(t,e,n){t[e]=n}function kt(){return bt()}function St(t,e,n){t.set(e,n)}function Tt(){}mt.prototype=bt.prototype={constructor:mt,has:function(t){return yt+t in this},get:function(t){return this[yt+t]},set:function(t,e){return this[yt+t]=e,this},remove:function(t){var e=yt+t;return e in this&&delete this[e]},clear:function(){for(var t in this)t[0]===yt&&delete this[t]},keys:function(){var t=[];for(var e in this)e[0]===yt&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)e[0]===yt&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)e[0]===yt&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)e[0]===yt&&++t;return t},empty:function(){for(var t in this)if(t[0]===yt)return!1;return!0},each:function(t){for(var e in this)e[0]===yt&&t(this[e],e.slice(1),this)}};var Mt=bt.prototype;function At(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}Tt.prototype={constructor:Tt,has:Mt.has,add:function(t){return this[yt+(t+="")]=t,this},remove:Mt.remove,clear:Mt.clear,values:Mt.keys,size:Mt.size,empty:Mt.empty,each:Mt.each};var Ct,Et,Nt=(1===(Ct=At).length&&(Et=Ct,Ct=function(t,e){return At(Et(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;Ct(t[i],e)<0?n=i+1:r=i}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;Ct(t[i],e)>0?r=i:n=i+1}return n}}),Dt=Nt.right;function jt(t){return null===t?NaN:+t}function $t(t,e){var n=function(t,e){var n,r,i=t.length,o=0,a=-1,s=0,l=0;if(null==e)for(;++a<i;)isNaN(n=jt(t[a]))||(l+=(r=n-s)*(n-(s+=r/++o)));else for(;++a<i;)isNaN(n=jt(e(t[a],a,t)))||(l+=(r=n-s)*(n-(s+=r/++o)));if(o>1)return l/(o-1)}(t,e);return n?Math.sqrt(n):n}function Lt(t,e){var n,r,i,o=t.length,a=-1;if(null==e){for(;++a<o;)if(null!=(n=t[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=t[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=i=n;++a<o;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]}function Pt(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o}var It=Math.sqrt(50),qt=Math.sqrt(10),Rt=Math.sqrt(2);function Ot(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=It?10:o>=qt?5:o>=Rt?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=It?10:o>=qt?5:o>=Rt?2:1)}function Ht(t,e,n){if(null==n&&(n=jt),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),a=+n(t[o],o,t);return a+(+n(t[o+1],o+1,t)-a)*(i-o)}}function Bt(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r}function zt(t,e){var n,r=t.length,i=r,o=-1,a=0;if(null==e)for(;++o<r;)isNaN(n=jt(t[o]))?--i:a+=n;else for(;++o<r;)isNaN(n=jt(e(t[o],o,t)))?--i:a+=n;if(i)return a/i}function Ft(t,e){var n,r=t.length,i=-1,o=[];if(null==e)for(;++i<r;)isNaN(n=jt(t[i]))||o.push(n);else for(;++i<r;)isNaN(n=jt(e(t[i],i,t)))||o.push(n);return Ht(o.sort(At),.5)}var Wt="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function Gt(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var Vt={exports:{}};
/*!
   * jQuery JavaScript Library v3.7.1
   * https://jquery.com/
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2023-08-28T13:37Z
   */!function(t){!function(e,n){t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}}("undefined"!=typeof window?window:Wt,(function(t,e){var n=[],r=Object.getPrototypeOf,i=n.slice,o=n.flat?function(t){return n.flat.call(t)}:function(t){return n.concat.apply([],t)},a=n.push,s=n.indexOf,l={},u=l.toString,c=l.hasOwnProperty,f=c.toString,h=f.call(Object),d={},p=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},g=function(t){return null!=t&&t===t.window},v=t.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function m(t,e,n){var r,i,o=(n=n||v).createElement("script");if(o.text=t,e)for(r in y)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function b(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?l[u.call(t)]||"object":typeof t}var x="3.7.1",w=/HTML$/i,_=function(t,e){return new _.fn.init(t,e)};function k(t){var e=!!t&&"length"in t&&t.length,n=b(t);return!p(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function S(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}_.fn=_.prototype={jquery:x,constructor:_,length:0,toArray:function(){return i.call(this)},get:function(t){return null==t?i.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=_.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return _.each(this,t)},map:function(t){return this.pushStack(_.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(i.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(_.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(_.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:n.sort,splice:n.splice},_.extend=_.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||p(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(u&&r&&(_.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||_.isPlainObject(n)?n:{},i=!1,a[e]=_.extend(u,o,r)):void 0!==r&&(a[e]=r));return a},_.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==u.call(t))&&(!(e=r(t))||"function"==typeof(n=c.call(e,"constructor")&&e.constructor)&&f.call(n)===h)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){m(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,r=0;if(k(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},text:function(t){var e,n="",r=0,i=t.nodeType;if(!i)for(;e=t[r++];)n+=_.text(e);return 1===i||11===i?t.textContent:9===i?t.documentElement.textContent:3===i||4===i?t.nodeValue:n},makeArray:function(t,e){var n=e||[];return null!=t&&(k(Object(t))?_.merge(n,"string"==typeof t?[t]:t):a.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:s.call(e,t,n)},isXMLDoc:function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!w.test(e||n&&n.nodeName||"HTML")},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,a=0,s=[];if(k(t))for(r=t.length;a<r;a++)null!=(i=e(t[a],a,n))&&s.push(i);else for(a in t)null!=(i=e(t[a],a,n))&&s.push(i);return o(s)},guid:1,support:d}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=n[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){l["[object "+e+"]"]=e.toLowerCase()}));var T=n.pop,M=n.sort,A=n.splice,C="[\\x20\\t\\r\\n\\f]",E=new RegExp("^"+C+"+|((?:^|[^\\\\])(?:\\\\.)*)"+C+"+$","g");_.contains=function(t,e){var n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(t.contains?t.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))};var N=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function D(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}_.escapeSelector=function(t){return(t+"").replace(N,D)};var j=v,$=a;!function(){var e,r,o,a,l,u,f,h,p,g,v=$,y=_.expando,m=0,b=0,x=tt(),w=tt(),k=tt(),N=tt(),D=function(t,e){return t===e&&(l=!0),0},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="(?:\\\\[\\da-fA-F]{1,6}"+C+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",I="\\["+C+"*("+P+")(?:"+C+"*([*^$|!~]?=)"+C+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+C+"*\\]",q=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",R=new RegExp(C+"+","g"),O=new RegExp("^"+C+"*,"+C+"*"),H=new RegExp("^"+C+"*([>+~]|"+C+")"+C+"*"),B=new RegExp(C+"|>"),z=new RegExp(q),F=new RegExp("^"+P+"$"),W={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+C+"*(even|odd|(([+-]|)(\\d*)n|)"+C+"*(?:([+-]|)"+C+"*(\\d+)|))"+C+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+C+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+C+"*((?:-\\d)?\\d*)"+C+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,V=/^h\d$/i,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,U=/[+~]/,Y=new RegExp("\\\\[\\da-fA-F]{1,6}"+C+"?|\\\\([^\\r\\n\\f])","g"),K=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},Q=function(){lt()},J=ht((function(t){return!0===t.disabled&&S(t,"fieldset")}),{dir:"parentNode",next:"legend"});try{v.apply(n=i.call(j.childNodes),j.childNodes),n[j.childNodes.length].nodeType}catch(t){v={apply:function(t,e){$.apply(t,i.call(e))},call:function(t){$.apply(t,i.call(arguments,1))}}}function Z(t,e,n,r){var i,o,a,s,l,c,f,g=e&&e.ownerDocument,m=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==m&&9!==m&&11!==m)return n;if(!r&&(lt(e),e=e||u,h)){if(11!==m&&(l=X.exec(t)))if(i=l[1]){if(9===m){if(!(a=e.getElementById(i)))return n;if(a.id===i)return v.call(n,a),n}else if(g&&(a=g.getElementById(i))&&Z.contains(e,a)&&a.id===i)return v.call(n,a),n}else{if(l[2])return v.apply(n,e.getElementsByTagName(t)),n;if((i=l[3])&&e.getElementsByClassName)return v.apply(n,e.getElementsByClassName(i)),n}if(!(N[t+" "]||p&&p.test(t))){if(f=t,g=e,1===m&&(B.test(t)||H.test(t))){for((g=U.test(t)&&st(e.parentNode)||e)==e&&d.scope||((s=e.getAttribute("id"))?s=_.escapeSelector(s):e.setAttribute("id",s=y)),o=(c=ct(t)).length;o--;)c[o]=(s?"#"+s:":scope")+" "+ft(c[o]);f=c.join(",")}try{return v.apply(n,g.querySelectorAll(f)),n}catch(e){N(t,!0)}finally{s===y&&e.removeAttribute("id")}}}return mt(t.replace(E,"$1"),e,n,r)}function tt(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function et(t){return t[y]=!0,t}function nt(t){var e=u.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function rt(t){return function(e){return S(e,"input")&&e.type===t}}function it(t){return function(e){return(S(e,"input")||S(e,"button"))&&e.type===t}}function ot(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&J(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function at(t){return et((function(e){return e=+e,et((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function st(t){return t&&void 0!==t.getElementsByTagName&&t}function lt(t){var e,n=t?t.ownerDocument||t:j;return n!=u&&9===n.nodeType&&n.documentElement?(f=(u=n).documentElement,h=!_.isXMLDoc(u),g=f.matches||f.webkitMatchesSelector||f.msMatchesSelector,f.msMatchesSelector&&j!=u&&(e=u.defaultView)&&e.top!==e&&e.addEventListener("unload",Q),d.getById=nt((function(t){return f.appendChild(t).id=_.expando,!u.getElementsByName||!u.getElementsByName(_.expando).length})),d.disconnectedMatch=nt((function(t){return g.call(t,"*")})),d.scope=nt((function(){return u.querySelectorAll(":scope")})),d.cssHas=nt((function(){try{return u.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),d.getById?(r.filter.ID=function(t){var e=t.replace(Y,K);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(Y,K);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):e.querySelectorAll(t)},r.find.CLASS=function(t,e){if(void 0!==e.getElementsByClassName&&h)return e.getElementsByClassName(t)},p=[],nt((function(t){var e;f.appendChild(t).innerHTML="<a id='"+y+"' href='' disabled='disabled'></a><select id='"+y+"-\r\\' disabled='disabled'><option selected=''></option></select>",t.querySelectorAll("[selected]").length||p.push("\\["+C+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+y+"-]").length||p.push("~="),t.querySelectorAll("a#"+y+"+*").length||p.push(".#.+[+~]"),t.querySelectorAll(":checked").length||p.push(":checked"),(e=u.createElement("input")).setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),(e=u.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||p.push("\\["+C+"*name"+C+"*="+C+"*(?:''|\"\")")})),d.cssHas||p.push(":has"),p=p.length&&new RegExp(p.join("|")),D=function(t,e){if(t===e)return l=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!d.sortDetached&&e.compareDocumentPosition(t)===n?t===u||t.ownerDocument==j&&Z.contains(j,t)?-1:e===u||e.ownerDocument==j&&Z.contains(j,e)?1:a?s.call(a,t)-s.call(a,e):0:4&n?-1:1)},u):u}for(e in Z.matches=function(t,e){return Z(t,null,null,e)},Z.matchesSelector=function(t,e){if(lt(t),h&&!N[e+" "]&&(!p||!p.test(e)))try{var n=g.call(t,e);if(n||d.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){N(e,!0)}return Z(e,u,null,[t]).length>0},Z.contains=function(t,e){return(t.ownerDocument||t)!=u&&lt(t),_.contains(t,e)},Z.attr=function(t,e){(t.ownerDocument||t)!=u&&lt(t);var n=r.attrHandle[e.toLowerCase()],i=n&&c.call(r.attrHandle,e.toLowerCase())?n(t,e,!h):void 0;return void 0!==i?i:t.getAttribute(e)},Z.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},_.uniqueSort=function(t){var e,n=[],r=0,o=0;if(l=!d.sortStable,a=!d.sortStable&&i.call(t,0),M.call(t,D),l){for(;e=t[o++];)e===t[o]&&(r=n.push(o));for(;r--;)A.call(t,n[r],1)}return a=null,t},_.fn.uniqueSort=function(){return this.pushStack(_.uniqueSort(i.apply(this)))},r=_.expr={cacheLength:50,createPseudo:et,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Y,K),t[3]=(t[3]||t[4]||t[5]||"").replace(Y,K),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||Z.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&Z.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return W.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&z.test(n)&&(e=ct(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(Y,K).toLowerCase();return"*"===t?function(){return!0}:function(t){return S(t,e)}},CLASS:function(t){var e=x[t+" "];return e||(e=new RegExp("(^|"+C+")"+t+"("+C+"|$)"))&&x(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=Z.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(R," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,l){var u,c,f,h,d,p=o!==a?"nextSibling":"previousSibling",g=e.parentNode,v=s&&e.nodeName.toLowerCase(),b=!l&&!s,x=!1;if(g){if(o){for(;p;){for(f=e;f=f[p];)if(s?S(f,v):1===f.nodeType)return!1;d=p="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?g.firstChild:g.lastChild],a&&b){for(x=(h=(u=(c=g[y]||(g[y]={}))[t]||[])[0]===m&&u[1])&&u[2],f=h&&g.childNodes[h];f=++h&&f&&f[p]||(x=h=0)||d.pop();)if(1===f.nodeType&&++x&&f===e){c[t]=[m,h,x];break}}else if(b&&(x=h=(u=(c=e[y]||(e[y]={}))[t]||[])[0]===m&&u[1]),!1===x)for(;(f=++h&&f&&f[p]||(x=h=0)||d.pop())&&(!(s?S(f,v):1===f.nodeType)||!++x||(b&&((c=f[y]||(f[y]={}))[t]=[m,x]),f!==e)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||Z.error("unsupported pseudo: "+t);return i[y]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?et((function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=s.call(t,o[a])]=!(n[r]=o[a])})):function(t){return i(t,0,n)}):i}},pseudos:{not:et((function(t){var e=[],n=[],r=yt(t.replace(E,"$1"));return r[y]?et((function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:et((function(t){return function(e){return Z(t,e).length>0}})),contains:et((function(t){return t=t.replace(Y,K),function(e){return(e.textContent||_.text(e)).indexOf(t)>-1}})),lang:et((function(t){return F.test(t||"")||Z.error("unsupported lang: "+t),t=t.replace(Y,K).toLowerCase(),function(e){var n;do{if(n=h?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===function(){try{return u.activeElement}catch(t){}}()&&u.hasFocus()&&!!(t.type||t.href||~t.tabIndex)},enabled:ot(!1),disabled:ot(!0),checked:function(t){return S(t,"input")&&!!t.checked||S(t,"option")&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return V.test(t.nodeName)},input:function(t){return G.test(t.nodeName)},button:function(t){return S(t,"input")&&"button"===t.type||S(t,"button")},text:function(t){var e;return S(t,"input")&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:at((function(){return[0]})),last:at((function(t,e){return[e-1]})),eq:at((function(t,e,n){return[n<0?n+e:n]})),even:at((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:at((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:at((function(t,e,n){var r;for(r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:at((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=rt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=it(e);function ut(){}function ct(t,e){var n,i,o,a,s,l,u,c=w[t+" "];if(c)return e?0:c.slice(0);for(s=t,l=[],u=r.preFilter;s;){for(a in n&&!(i=O.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),n=!1,(i=H.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(E," ")}),s=s.slice(n.length)),r.filter)!(i=W[a].exec(s))||u[a]&&!(i=u[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?Z.error(t):w(t,l).slice(0)}function ft(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function ht(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=b++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,l){var u,c,f=[m,s];if(l){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,l))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(c=e[y]||(e[y]={}),i&&S(e,i))e=e[r]||e;else{if((u=c[o])&&u[0]===m&&u[1]===s)return f[2]=u[2];if(c[o]=f,f[2]=t(e,n,l))return!0}return!1}}function dt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function pt(t,e,n,r,i){for(var o,a=[],s=0,l=t.length,u=null!=e;s<l;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),u&&e.push(s)));return a}function gt(t,e,n,r,i,o){return r&&!r[y]&&(r=gt(r)),i&&!i[y]&&(i=gt(i,o)),et((function(o,a,l,u){var c,f,h,d,p=[],g=[],y=a.length,m=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)Z(t,e[r],n);return n}(e||"*",l.nodeType?[l]:l,[]),b=!t||!o&&e?m:pt(m,p,t,l,u);if(n?n(b,d=i||(o?t:y||r)?[]:a,l,u):d=b,r)for(c=pt(d,g),r(c,[],l,u),f=c.length;f--;)(h=c[f])&&(d[g[f]]=!(b[g[f]]=h));if(o){if(i||t){if(i){for(c=[],f=d.length;f--;)(h=d[f])&&c.push(b[f]=h);i(null,d=[],c,u)}for(f=d.length;f--;)(h=d[f])&&(c=i?s.call(o,h):p[f])>-1&&(o[c]=!(a[c]=h))}}else d=pt(d===a?d.splice(y,d.length):d),i?i(null,a,d,u):v.apply(a,d)}))}function vt(t){for(var e,n,i,a=t.length,l=r.relative[t[0].type],u=l||r.relative[" "],c=l?1:0,f=ht((function(t){return t===e}),u,!0),h=ht((function(t){return s.call(e,t)>-1}),u,!0),d=[function(t,n,r){var i=!l&&(r||n!=o)||((e=n).nodeType?f(t,n,r):h(t,n,r));return e=null,i}];c<a;c++)if(n=r.relative[t[c].type])d=[ht(dt(d),n)];else{if((n=r.filter[t[c].type].apply(null,t[c].matches))[y]){for(i=++c;i<a&&!r.relative[t[i].type];i++);return gt(c>1&&dt(d),c>1&&ft(t.slice(0,c-1).concat({value:" "===t[c-2].type?"*":""})).replace(E,"$1"),n,c<i&&vt(t.slice(c,i)),i<a&&vt(t=t.slice(i)),i<a&&ft(t))}d.push(n)}return dt(d)}function yt(t,e){var n,i=[],a=[],s=k[t+" "];if(!s){for(e||(e=ct(t)),n=e.length;n--;)(s=vt(e[n]))[y]?i.push(s):a.push(s);s=k(t,function(t,e){var n=e.length>0,i=t.length>0,a=function(a,s,l,c,f){var d,p,g,y=0,b="0",x=a&&[],w=[],k=o,S=a||i&&r.find.TAG("*",f),M=m+=null==k?1:Math.random()||.1,A=S.length;for(f&&(o=s==u||s||f);b!==A&&null!=(d=S[b]);b++){if(i&&d){for(p=0,s||d.ownerDocument==u||(lt(d),l=!h);g=t[p++];)if(g(d,s||u,l)){v.call(c,d);break}f&&(m=M)}n&&((d=!g&&d)&&y--,a&&x.push(d))}if(y+=b,n&&b!==y){for(p=0;g=e[p++];)g(x,w,s,l);if(a){if(y>0)for(;b--;)x[b]||w[b]||(w[b]=T.call(c));w=pt(w)}v.apply(c,w),f&&!a&&w.length>0&&y+e.length>1&&_.uniqueSort(c)}return f&&(m=M,o=k),x};return n?et(a):a}(a,i)),s.selector=t}return s}function mt(t,e,n,i){var o,a,s,l,u,c="function"==typeof t&&t,f=!i&&ct(t=c.selector||t);if(n=n||[],1===f.length){if((a=f[0]=f[0].slice(0)).length>2&&"ID"===(s=a[0]).type&&9===e.nodeType&&h&&r.relative[a[1].type]){if(!(e=(r.find.ID(s.matches[0].replace(Y,K),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(a.shift().value.length)}for(o=W.needsContext.test(t)?0:a.length;o--&&(s=a[o],!r.relative[l=s.type]);)if((u=r.find[l])&&(i=u(s.matches[0].replace(Y,K),U.test(a[0].type)&&st(e.parentNode)||e))){if(a.splice(o,1),!(t=i.length&&ft(a)))return v.apply(n,i),n;break}}return(c||yt(t,f))(i,e,!h,n,!e||U.test(t)&&st(e.parentNode)||e),n}ut.prototype=r.filters=r.pseudos,r.setFilters=new ut,d.sortStable=y.split("").sort(D).join("")===y,lt(),d.sortDetached=nt((function(t){return 1&t.compareDocumentPosition(u.createElement("fieldset"))})),_.find=Z,_.expr[":"]=_.expr.pseudos,_.unique=_.uniqueSort,Z.compile=yt,Z.select=mt,Z.setDocument=lt,Z.tokenize=ct,Z.escape=_.escapeSelector,Z.getText=_.text,Z.isXML=_.isXMLDoc,Z.selectors=_.expr,Z.support=_.support,Z.uniqueSort=_.uniqueSort}();var L=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&_(t).is(n))break;r.push(t)}return r},P=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},I=_.expr.match.needsContext,q=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function R(t,e,n){return p(e)?_.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?_.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?_.grep(t,(function(t){return s.call(e,t)>-1!==n})):_.filter(e,t,n)}_.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?_.find.matchesSelector(r,t)?[r]:[]:_.find.matches(t,_.grep(e,(function(t){return 1===t.nodeType})))},_.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(_(t).filter((function(){for(e=0;e<r;e++)if(_.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)_.find(t,i[e],n);return r>1?_.uniqueSort(n):n},filter:function(t){return this.pushStack(R(this,t||[],!1))},not:function(t){return this.pushStack(R(this,t||[],!0))},is:function(t){return!!R(this,"string"==typeof t&&I.test(t)?_(t):t||[],!1).length}});var O,H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,B=_.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||O,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:H.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof _?e[0]:e,_.merge(this,_.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:v,!0)),q.test(r[1])&&_.isPlainObject(e))for(r in e)p(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=v.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):p(t)?void 0!==n.ready?n.ready(t):t(_):_.makeArray(t,this)};B.prototype=_.fn,O=_(v);var z=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function W(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}_.fn.extend({has:function(t){var e=_(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(_.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&_(t);if(!I.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&_.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?_.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?s.call(_(t),this[0]):s.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),_.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return L(t,"parentNode")},parentsUntil:function(t,e,n){return L(t,"parentNode",n)},next:function(t){return W(t,"nextSibling")},prev:function(t){return W(t,"previousSibling")},nextAll:function(t){return L(t,"nextSibling")},prevAll:function(t){return L(t,"previousSibling")},nextUntil:function(t,e,n){return L(t,"nextSibling",n)},prevUntil:function(t,e,n){return L(t,"previousSibling",n)},siblings:function(t){return P((t.parentNode||{}).firstChild,t)},children:function(t){return P(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(S(t,"template")&&(t=t.content||t),_.merge([],t.childNodes))}},(function(t,e){_.fn[t]=function(n,r){var i=_.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=_.filter(r,i)),this.length>1&&(F[t]||_.uniqueSort(i),z.test(t)&&i.reverse()),this.pushStack(i)}}));var G=/[^\x20\t\r\n\f]+/g;function V(t){return t}function X(t){throw t}function U(t,e,n,r){var i;try{t&&p(i=t.promise)?i.call(t).done(e).fail(n):t&&p(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}_.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return _.each(t.match(G)||[],(function(t,n){e[n]=!0})),e}(t):_.extend({},t);var e,n,r,i,o=[],a=[],s=-1,l=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){_.each(n,(function(n,r){p(r)?t.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==b(r)&&e(r)}))}(arguments),n&&!e&&l()),this},remove:function(){return _.each(arguments,(function(t,e){for(var n;(n=_.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?_.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},_.extend({Deferred:function(e){var n=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return _.Deferred((function(e){_.each(n,(function(n,r){var i=p(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&p(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(e,r,i){var o=0;function a(e,n,r,i){return function(){var s=this,l=arguments,u=function(){var t,u;if(!(e<o)){if((t=r.apply(s,l))===n.promise())throw new TypeError("Thenable self-resolution");u=t&&("object"==typeof t||"function"==typeof t)&&t.then,p(u)?i?u.call(t,a(o,n,V,i),a(o,n,X,i)):(o++,u.call(t,a(o,n,V,i),a(o,n,X,i),a(o,n,V,n.notifyWith))):(r!==V&&(s=void 0,l=[t]),(i||n.resolveWith)(s,l))}},c=i?u:function(){try{u()}catch(t){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(t,c.error),e+1>=o&&(r!==X&&(s=void 0,l=[t]),n.rejectWith(s,l))}};e?c():(_.Deferred.getErrorHook?c.error=_.Deferred.getErrorHook():_.Deferred.getStackHook&&(c.error=_.Deferred.getStackHook()),t.setTimeout(c))}}return _.Deferred((function(t){n[0][3].add(a(0,t,p(i)?i:V,t.notifyWith)),n[1][3].add(a(0,t,p(e)?e:V)),n[2][3].add(a(0,t,p(r)?r:X))})).promise()},promise:function(t){return null!=t?_.extend(t,i):i}},o={};return _.each(n,(function(t,e){var a=e[2],s=e[5];i[e[1]]=a.add,s&&a.add((function(){r=s}),n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),a.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),o=i.call(arguments),a=_.Deferred(),s=function(t){return function(n){r[t]=this,o[t]=arguments.length>1?i.call(arguments):n,--e||a.resolveWith(r,o)}};if(e<=1&&(U(t,a.done(s(n)).resolve,a.reject,!e),"pending"===a.state()||p(o[n]&&o[n].then)))return a.then();for(;n--;)U(o[n],s(n),a.reject);return a.promise()}});var Y=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&Y.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},_.readyException=function(e){t.setTimeout((function(){throw e}))};var K=_.Deferred();function Q(){v.removeEventListener("DOMContentLoaded",Q),t.removeEventListener("load",Q),_.ready()}_.fn.ready=function(t){return K.then(t).catch((function(t){_.readyException(t)})),this},_.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--_.readyWait:_.isReady)||(_.isReady=!0,!0!==t&&--_.readyWait>0||K.resolveWith(v,[_]))}}),_.ready.then=K.then,"complete"===v.readyState||"loading"!==v.readyState&&!v.documentElement.doScroll?t.setTimeout(_.ready):(v.addEventListener("DOMContentLoaded",Q),t.addEventListener("load",Q));var J=function(t,e,n,r,i,o,a){var s=0,l=t.length,u=null==n;if("object"===b(n))for(s in i=!0,n)J(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,p(r)||(a=!0),u&&(a?(e.call(t,r),e=null):(u=e,e=function(t,e,n){return u.call(_(t),n)})),e))for(;s<l;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:u?e.call(t):l?e(t[0],n):o},Z=/^-ms-/,tt=/-([a-z])/g;function et(t,e){return e.toUpperCase()}function nt(t){return t.replace(Z,"ms-").replace(tt,et)}var rt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function it(){this.expando=_.expando+it.uid++}it.uid=1,it.prototype={cache:function(t){var e=t[this.expando];return e||(e={},rt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[nt(e)]=n;else for(r in e)i[nt(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][nt(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(nt):(e=nt(e))in r?[e]:e.match(G)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||_.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!_.isEmptyObject(e)}};var ot=new it,at=new it,st=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,lt=/[A-Z]/g;function ut(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(lt,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:st.test(t)?JSON.parse(t):t)}(n)}catch(t){}at.set(t,e,n)}else n=void 0;return n}_.extend({hasData:function(t){return at.hasData(t)||ot.hasData(t)},data:function(t,e,n){return at.access(t,e,n)},removeData:function(t,e){at.remove(t,e)},_data:function(t,e,n){return ot.access(t,e,n)},_removeData:function(t,e){ot.remove(t,e)}}),_.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=at.get(o),1===o.nodeType&&!ot.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=nt(r.slice(5)),ut(o,r,i[r]));ot.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){at.set(this,t)})):J(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=at.get(o,t))||void 0!==(n=ut(o,t))?n:void 0;this.each((function(){at.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){at.remove(this,t)}))}}),_.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=ot.get(t,e),n&&(!r||Array.isArray(n)?r=ot.access(t,e,_.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=_.queue(t,e),r=n.length,i=n.shift(),o=_._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){_.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return ot.get(t,n)||ot.access(t,n,{empty:_.Callbacks("once memory").add((function(){ot.remove(t,[e+"queue",n])}))})}}),_.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?_.queue(this[0],t):void 0===e?this:this.each((function(){var n=_.queue(this,t,e);_._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&_.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){_.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=_.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=ot.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var ct=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ft=new RegExp("^(?:([+-])=|)("+ct+")([a-z%]*)$","i"),ht=["Top","Right","Bottom","Left"],dt=v.documentElement,pt=function(t){return _.contains(t.ownerDocument,t)},gt={composed:!0};dt.getRootNode&&(pt=function(t){return _.contains(t.ownerDocument,t)||t.getRootNode(gt)===t.ownerDocument});var vt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&pt(t)&&"none"===_.css(t,"display")};function yt(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return _.css(t,e,"")},l=s(),u=n&&n[3]||(_.cssNumber[e]?"":"px"),c=t.nodeType&&(_.cssNumber[e]||"px"!==u&&+l)&&ft.exec(_.css(t,e));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)_.style(t,e,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,_.style(t,e,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var mt={};function bt(t){var e,n=t.ownerDocument,r=t.nodeName,i=mt[r];return i||(e=n.body.appendChild(n.createElement(r)),i=_.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),mt[r]=i,i)}function xt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=ot.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&vt(r)&&(i[o]=bt(r))):"none"!==n&&(i[o]="none",ot.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}_.fn.extend({show:function(){return xt(this,!0)},hide:function(){return xt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){vt(this)?_(this).show():_(this).hide()}))}});var wt,_t,kt=/^(?:checkbox|radio)$/i,St=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Tt=/^$|^module$|\/(?:java|ecma)script/i;wt=v.createDocumentFragment().appendChild(v.createElement("div")),(_t=v.createElement("input")).setAttribute("type","radio"),_t.setAttribute("checked","checked"),_t.setAttribute("name","t"),wt.appendChild(_t),d.checkClone=wt.cloneNode(!0).cloneNode(!0).lastChild.checked,wt.innerHTML="<textarea>x</textarea>",d.noCloneChecked=!!wt.cloneNode(!0).lastChild.defaultValue,wt.innerHTML="<option></option>",d.option=!!wt.lastChild;var Mt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function At(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&S(t,e)?_.merge([t],n):n}function Ct(t,e){for(var n=0,r=t.length;n<r;n++)ot.set(t[n],"globalEval",!e||ot.get(e[n],"globalEval"))}Mt.tbody=Mt.tfoot=Mt.colgroup=Mt.caption=Mt.thead,Mt.th=Mt.td,d.option||(Mt.optgroup=Mt.option=[1,"<select multiple='multiple'>","</select>"]);var Et=/<|&#?\w+;/;function Nt(t,e,n,r,i){for(var o,a,s,l,u,c,f=e.createDocumentFragment(),h=[],d=0,p=t.length;d<p;d++)if((o=t[d])||0===o)if("object"===b(o))_.merge(h,o.nodeType?[o]:o);else if(Et.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(St.exec(o)||["",""])[1].toLowerCase(),l=Mt[s]||Mt._default,a.innerHTML=l[1]+_.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;_.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",d=0;o=h[d++];)if(r&&_.inArray(o,r)>-1)i&&i.push(o);else if(u=pt(o),a=At(f.appendChild(o),"script"),u&&Ct(a),n)for(c=0;o=a[c++];)Tt.test(o.type||"")&&n.push(o);return f}var Dt=/^([^.]*)(?:\.(.+)|)/;function jt(){return!0}function $t(){return!1}function Lt(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)Lt(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=$t;else if(!i)return t;return 1===o&&(a=i,i=function(t){return _().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=_.guid++)),t.each((function(){_.event.add(this,e,i,r,n)}))}function Pt(t,e,n){n?(ot.set(t,e,!1),_.event.add(t,e,{namespace:!1,handler:function(t){var n,r=ot.get(this,e);if(1&t.isTrigger&&this[e]){if(r)(_.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=i.call(arguments),ot.set(this,e,r),this[e](),n=ot.get(this,e),ot.set(this,e,!1),r!==n)return t.stopImmediatePropagation(),t.preventDefault(),n}else r&&(ot.set(this,e,_.event.trigger(r[0],r.slice(1),this)),t.stopPropagation(),t.isImmediatePropagationStopped=jt)}})):void 0===ot.get(t,e)&&_.event.add(t,e,jt)}_.event={global:{},add:function(t,e,n,r,i){var o,a,s,l,u,c,f,h,d,p,g,v=ot.get(t);if(rt(t))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&_.find.matchesSelector(dt,i),n.guid||(n.guid=_.guid++),(l=v.events)||(l=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return void 0!==_&&_.event.triggered!==e.type?_.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(G)||[""]).length;u--;)d=g=(s=Dt.exec(e[u])||[])[1],p=(s[2]||"").split(".").sort(),d&&(f=_.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=_.event.special[d]||{},c=_.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&_.expr.match.needsContext.test(i),namespace:p.join(".")},o),(h=l[d])||((h=l[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,p,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,c):h.push(c),_.event.global[d]=!0)},remove:function(t,e,n,r,i){var o,a,s,l,u,c,f,h,d,p,g,v=ot.hasData(t)&&ot.get(t);if(v&&(l=v.events)){for(u=(e=(e||"").match(G)||[""]).length;u--;)if(d=g=(s=Dt.exec(e[u])||[])[1],p=(s[2]||"").split(".").sort(),d){for(f=_.event.special[d]||{},h=l[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(t,c));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,p,v.handle)||_.removeEvent(t,d,v.handle),delete l[d])}else for(d in l)_.event.remove(t,d+e[u],n,r,!0);_.isEmptyObject(l)&&ot.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=new Array(arguments.length),l=_.event.fix(t),u=(ot.get(this,"events")||Object.create(null))[l.type]||[],c=_.event.special[l.type]||{};for(s[0]=l,e=1;e<arguments.length;e++)s[e]=arguments[e];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=_.event.handlers.call(this,l,u),e=0;(i=a[e++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(r=((_.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,r,i,o,a,s=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?_(i,this).index(u)>-1:_.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<e.length&&s.push({elem:u,handlers:e.slice(l)}),s},addProp:function(t,e){Object.defineProperty(_.Event.prototype,t,{enumerable:!0,configurable:!0,get:p(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[_.expando]?t:new _.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return kt.test(e.type)&&e.click&&S(e,"input")&&Pt(e,"click",!0),!1},trigger:function(t){var e=this||t;return kt.test(e.type)&&e.click&&S(e,"input")&&Pt(e,"click"),!0},_default:function(t){var e=t.target;return kt.test(e.type)&&e.click&&S(e,"input")&&ot.get(e,"click")||S(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},_.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},_.Event=function(t,e){if(!(this instanceof _.Event))return new _.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?jt:$t,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&_.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:$t,isPropagationStopped:$t,isImmediatePropagationStopped:$t,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=jt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=jt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=jt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},_.event.addProp),_.each({focus:"focusin",blur:"focusout"},(function(t,e){function n(t){if(v.documentMode){var n=ot.get(this,"handle"),r=_.event.fix(t);r.type="focusin"===t.type?"focus":"blur",r.isSimulated=!0,n(t),r.target===r.currentTarget&&n(r)}else _.event.simulate(e,t.target,_.event.fix(t))}_.event.special[t]={setup:function(){var r;if(Pt(this,t,!0),!v.documentMode)return!1;(r=ot.get(this,e))||this.addEventListener(e,n),ot.set(this,e,(r||0)+1)},trigger:function(){return Pt(this,t),!0},teardown:function(){var t;if(!v.documentMode)return!1;(t=ot.get(this,e)-1)?ot.set(this,e,t):(this.removeEventListener(e,n),ot.remove(this,e))},_default:function(e){return ot.get(e.target,t)},delegateType:e},_.event.special[e]={setup:function(){var r=this.ownerDocument||this.document||this,i=v.documentMode?this:r,o=ot.get(i,e);o||(v.documentMode?this.addEventListener(e,n):r.addEventListener(t,n,!0)),ot.set(i,e,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=v.documentMode?this:r,o=ot.get(i,e)-1;o?ot.set(i,e,o):(v.documentMode?this.removeEventListener(e,n):r.removeEventListener(t,n,!0),ot.remove(i,e))}}})),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){_.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||_.contains(this,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}})),_.fn.extend({on:function(t,e,n,r){return Lt(this,t,e,n,r)},one:function(t,e,n,r){return Lt(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,_(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=$t),this.each((function(){_.event.remove(this,t,n,e)}))}});var It=/<script|<style|<link/i,qt=/checked\s*(?:[^=]|=\s*.checked.)/i,Rt=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Ot(t,e){return S(t,"table")&&S(11!==e.nodeType?e:e.firstChild,"tr")&&_(t).children("tbody")[0]||t}function Ht(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Bt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function zt(t,e){var n,r,i,o,a,s;if(1===e.nodeType){if(ot.hasData(t)&&(s=ot.get(t).events))for(i in ot.remove(e,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)_.event.add(e,i,s[i][n]);at.hasData(t)&&(o=at.access(t),a=_.extend({},o),at.set(e,a))}}function Ft(t,e){var n=e.nodeName.toLowerCase();"input"===n&&kt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Wt(t,e,n,r){e=o(e);var i,a,s,l,u,c,f=0,h=t.length,g=h-1,v=e[0],y=p(v);if(y||h>1&&"string"==typeof v&&!d.checkClone&&qt.test(v))return t.each((function(i){var o=t.eq(i);y&&(e[0]=v.call(this,i,o.html())),Wt(o,e,n,r)}));if(h&&(a=(i=Nt(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=a),a||r)){for(l=(s=_.map(At(i,"script"),Ht)).length;f<h;f++)u=i,f!==g&&(u=_.clone(u,!0,!0),l&&_.merge(s,At(u,"script"))),n.call(t[f],u,f);if(l)for(c=s[s.length-1].ownerDocument,_.map(s,Bt),f=0;f<l;f++)u=s[f],Tt.test(u.type||"")&&!ot.access(u,"globalEval")&&_.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?_._evalUrl&&!u.noModule&&_._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):m(u.textContent.replace(Rt,""),u,c))}return t}function Gt(t,e,n){for(var r,i=e?_.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||_.cleanData(At(r)),r.parentNode&&(n&&pt(r)&&Ct(At(r,"script")),r.parentNode.removeChild(r));return t}_.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),l=pt(t);if(!(d.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||_.isXMLDoc(t)))for(a=At(s),r=0,i=(o=At(t)).length;r<i;r++)Ft(o[r],a[r]);if(e)if(n)for(o=o||At(t),a=a||At(s),r=0,i=o.length;r<i;r++)zt(o[r],a[r]);else zt(t,s);return(a=At(s,"script")).length>0&&Ct(a,!l&&At(t,"script")),s},cleanData:function(t){for(var e,n,r,i=_.event.special,o=0;void 0!==(n=t[o]);o++)if(rt(n)){if(e=n[ot.expando]){if(e.events)for(r in e.events)i[r]?_.event.remove(n,r):_.removeEvent(n,r,e.handle);n[ot.expando]=void 0}n[at.expando]&&(n[at.expando]=void 0)}}}),_.fn.extend({detach:function(t){return Gt(this,t,!0)},remove:function(t){return Gt(this,t)},text:function(t){return J(this,(function(t){return void 0===t?_.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Wt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ot(this,t).appendChild(t)}))},prepend:function(){return Wt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ot(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Wt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Wt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(_.cleanData(At(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return _.clone(this,t,e)}))},html:function(t){return J(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!It.test(t)&&!Mt[(St.exec(t)||["",""])[1].toLowerCase()]){t=_.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(_.cleanData(At(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Wt(this,arguments,(function(e){var n=this.parentNode;_.inArray(this,t)<0&&(_.cleanData(At(this)),n&&n.replaceChild(e,this))}),t)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){_.fn[t]=function(t){for(var n,r=[],i=_(t),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),_(i[s])[e](n),a.apply(r,n.get());return this.pushStack(r)}}));var Vt=new RegExp("^("+ct+")(?!px)[a-z%]+$","i"),Xt=/^--/,Ut=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Yt=function(t,e,n){var r,i,o={};for(i in e)o[i]=t.style[i],t.style[i]=e[i];for(i in r=n.call(t),e)t.style[i]=o[i];return r},Kt=new RegExp(ht.join("|"),"i");function Qt(t,e,n){var r,i,o,a,s=Xt.test(e),l=t.style;return(n=n||Ut(t))&&(a=n.getPropertyValue(e)||n[e],s&&a&&(a=a.replace(E,"$1")||void 0),""!==a||pt(t)||(a=_.style(t,e)),!d.pixelBoxStyles()&&Vt.test(a)&&Kt.test(e)&&(r=l.width,i=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=i,l.maxWidth=o)),void 0!==a?a+"":a}function Jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",dt.appendChild(u).appendChild(c);var e=t.getComputedStyle(c);r="1%"!==e.top,l=12===n(e.marginLeft),c.style.right="60%",a=36===n(e.right),i=36===n(e.width),c.style.position="absolute",o=12===n(c.offsetWidth/3),dt.removeChild(u),c=null}}function n(t){return Math.round(parseFloat(t))}var r,i,o,a,s,l,u=v.createElement("div"),c=v.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",d.clearCloneStyle="content-box"===c.style.backgroundClip,_.extend(d,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,n,r,i;return null==s&&(e=v.createElement("table"),n=v.createElement("tr"),r=v.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",n.style.cssText="box-sizing:content-box;border:1px solid",n.style.height="1px",r.style.height="9px",r.style.display="block",dt.appendChild(e).appendChild(n).appendChild(r),i=t.getComputedStyle(n),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===n.offsetHeight,dt.removeChild(e)),s}}))}();var Zt=["Webkit","Moz","ms"],te=v.createElement("div").style,ee={};function ne(t){var e=_.cssProps[t]||ee[t];return e||(t in te?t:ee[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Zt.length;n--;)if((t=Zt[n]+e)in te)return t}(t)||t)}var re=/^(none|table(?!-c[ea]).+)/,ie={position:"absolute",visibility:"hidden",display:"block"},oe={letterSpacing:"0",fontWeight:"400"};function ae(t,e,n){var r=ft.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function se(t,e,n,r,i,o){var a="width"===e?1:0,s=0,l=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=_.css(t,n+ht[a],!0,i)),r?("content"===n&&(l-=_.css(t,"padding"+ht[a],!0,i)),"margin"!==n&&(l-=_.css(t,"border"+ht[a]+"Width",!0,i))):(l+=_.css(t,"padding"+ht[a],!0,i),"padding"!==n?l+=_.css(t,"border"+ht[a]+"Width",!0,i):s+=_.css(t,"border"+ht[a]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-s-.5))||0),l+u}function le(t,e,n){var r=Ut(t),i=(!d.boxSizingReliable()||n)&&"border-box"===_.css(t,"boxSizing",!1,r),o=i,a=Qt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(Vt.test(a)){if(!n)return a;a="auto"}return(!d.boxSizingReliable()&&i||!d.reliableTrDimensions()&&S(t,"tr")||"auto"===a||!parseFloat(a)&&"inline"===_.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===_.css(t,"boxSizing",!1,r),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+se(t,e,n||(i?"border":"content"),o,r,a)+"px"}function ue(t,e,n,r,i){return new ue.prototype.init(t,e,n,r,i)}_.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Qt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=nt(e),l=Xt.test(e),u=t.style;if(l||(e=ne(s)),a=_.cssHooks[e]||_.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:u[e];"string"===(o=typeof n)&&(i=ft.exec(n))&&i[1]&&(n=yt(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(_.cssNumber[s]?"":"px")),d.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(l?u.setProperty(e,n):u[e]=n))}},css:function(t,e,n,r){var i,o,a,s=nt(e);return Xt.test(e)||(e=ne(s)),(a=_.cssHooks[e]||_.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=Qt(t,e,r)),"normal"===i&&e in oe&&(i=oe[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),_.each(["height","width"],(function(t,e){_.cssHooks[e]={get:function(t,n,r){if(n)return!re.test(_.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?le(t,e,r):Yt(t,ie,(function(){return le(t,e,r)}))},set:function(t,n,r){var i,o=Ut(t),a=!d.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===_.css(t,"boxSizing",!1,o),l=r?se(t,e,r,s,o):0;return s&&a&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-se(t,e,"border",!1,o)-.5)),l&&(i=ft.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=_.css(t,e)),ae(0,n,l)}}})),_.cssHooks.marginLeft=Jt(d.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Qt(t,"marginLeft"))||t.getBoundingClientRect().left-Yt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),_.each({margin:"",padding:"",border:"Width"},(function(t,e){_.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ht[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(_.cssHooks[t+e].set=ae)})),_.fn.extend({css:function(t,e){return J(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Ut(t),i=e.length;a<i;a++)o[e[a]]=_.css(t,e[a],!1,r);return o}return void 0!==n?_.style(t,e,n):_.css(t,e)}),t,e,arguments.length>1)}}),_.Tween=ue,ue.prototype={constructor:ue,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||_.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(_.cssNumber[n]?"":"px")},cur:function(){var t=ue.propHooks[this.prop];return t&&t.get?t.get(this):ue.propHooks._default.get(this)},run:function(t){var e,n=ue.propHooks[this.prop];return this.options.duration?this.pos=e=_.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ue.propHooks._default.set(this),this}},ue.prototype.init.prototype=ue.prototype,ue.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=_.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){_.fx.step[t.prop]?_.fx.step[t.prop](t):1!==t.elem.nodeType||!_.cssHooks[t.prop]&&null==t.elem.style[ne(t.prop)]?t.elem[t.prop]=t.now:_.style(t.elem,t.prop,t.now+t.unit)}}},ue.propHooks.scrollTop=ue.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},_.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},_.fx=ue.prototype.init,_.fx.step={};var ce,fe,he=/^(?:toggle|show|hide)$/,de=/queueHooks$/;function pe(){fe&&(!1===v.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(pe):t.setTimeout(pe,_.fx.interval),_.fx.tick())}function ge(){return t.setTimeout((function(){ce=void 0})),ce=Date.now()}function ve(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ht[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function ye(t,e,n){for(var r,i=(me.tweeners[e]||[]).concat(me.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function me(t,e,n){var r,i,o=0,a=me.prefilters.length,s=_.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var e=ce||ge(),n=Math.max(0,u.startTime+u.duration-e),r=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(r);return s.notifyWith(t,[u,r,n]),r<1&&a?n:(a||s.notifyWith(t,[u,1,0]),s.resolveWith(t,[u]),!1)},u=s.promise({elem:t,props:_.extend({},e),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},n),originalProperties:e,originalOptions:n,startTime:ce||ge(),duration:n.duration,tweens:[],createTween:function(e,n){var r=_.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(r),r},stop:function(e){var n=0,r=e?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return e?(s.notifyWith(t,[u,1,0]),s.resolveWith(t,[u,e])):s.rejectWith(t,[u,e]),this}}),c=u.props;for(!function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=nt(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=_.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(c,u.opts.specialEasing);o<a;o++)if(r=me.prefilters[o].call(u,t,c,u.opts))return p(r.stop)&&(_._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return _.map(c,ye,u),p(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),_.fx.timer(_.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u}_.Animation=_.extend(me,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return yt(n.elem,t,ft.exec(e),n),n}]},tweener:function(t,e){p(t)?(e=t,t=["*"]):t=t.match(G);for(var n,r=0,i=t.length;r<i;r++)n=t[r],me.tweeners[n]=me.tweeners[n]||[],me.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,l,u,c,f="width"in e||"height"in e,h=this,d={},p=t.style,g=t.nodeType&&vt(t),v=ot.get(t,"fxshow");for(r in n.queue||(null==(a=_._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,_.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],he.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||_.style(t,r)}if((l=!_.isEmptyObject(e))||!_.isEmptyObject(d))for(r in f&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=v&&v.display)&&(u=ot.get(t,"display")),"none"===(c=_.css(t,"display"))&&(u?c=u:(xt([t],!0),u=t.style.display||u,c=_.css(t,"display"),xt([t]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===_.css(t,"float")&&(l||(h.done((function(){p.display=u})),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,d)l||(v?"hidden"in v&&(g=v.hidden):v=ot.access(t,"fxshow",{display:u}),o&&(v.hidden=!g),g&&xt([t],!0),h.done((function(){for(r in g||xt([t]),ot.remove(t,"fxshow"),d)_.style(t,r,d[r])}))),l=ye(g?v[r]:0,r,h),r in v||(v[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?me.prefilters.unshift(t):me.prefilters.push(t)}}),_.speed=function(t,e,n){var r=t&&"object"==typeof t?_.extend({},t):{complete:n||!n&&e||p(t)&&t,duration:t,easing:n&&e||e&&!p(e)&&e};return _.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in _.fx.speeds?r.duration=_.fx.speeds[r.duration]:r.duration=_.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){p(r.old)&&r.old.call(this),r.queue&&_.dequeue(this,r.queue)},r},_.fn.extend({fadeTo:function(t,e,n,r){return this.filter(vt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=_.isEmptyObject(t),o=_.speed(e,n,r),a=function(){var e=me(this,_.extend({},t),o);(i||ot.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=_.timers,a=ot.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&de.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||_.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=ot.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=_.timers,a=r?r.length:0;for(n.finish=!0,_.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),_.each(["toggle","show","hide"],(function(t,e){var n=_.fn[e];_.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(ve(e,!0),t,r,i)}})),_.each({slideDown:ve("show"),slideUp:ve("hide"),slideToggle:ve("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){_.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),_.timers=[],_.fx.tick=function(){var t,e=0,n=_.timers;for(ce=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||_.fx.stop(),ce=void 0},_.fx.timer=function(t){_.timers.push(t),_.fx.start()},_.fx.interval=13,_.fx.start=function(){fe||(fe=!0,pe())},_.fx.stop=function(){fe=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(e,n){return e=_.fx&&_.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,r){var i=t.setTimeout(n,e);r.stop=function(){t.clearTimeout(i)}}))},function(){var t=v.createElement("input"),e=v.createElement("select").appendChild(v.createElement("option"));t.type="checkbox",d.checkOn=""!==t.value,d.optSelected=e.selected,(t=v.createElement("input")).value="t",t.type="radio",d.radioValue="t"===t.value}();var be,xe=_.expr.attrHandle;_.fn.extend({attr:function(t,e){return J(this,_.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){_.removeAttr(this,t)}))}}),_.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?_.prop(t,e,n):(1===o&&_.isXMLDoc(t)||(i=_.attrHooks[e.toLowerCase()]||(_.expr.match.bool.test(e)?be:void 0)),void 0!==n?null===n?void _.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=_.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!d.radioValue&&"radio"===e&&S(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(G);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),be={set:function(t,e,n){return!1===e?_.removeAttr(t,n):t.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=xe[e]||_.find.attr;xe[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=xe[a],xe[a]=i,i=null!=n(t,e,r)?a:null,xe[a]=o),i}}));var we=/^(?:input|select|textarea|button)$/i,_e=/^(?:a|area)$/i;function ke(t){return(t.match(G)||[]).join(" ")}function Se(t){return t.getAttribute&&t.getAttribute("class")||""}function Te(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(G)||[]}_.fn.extend({prop:function(t,e){return J(this,_.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[_.propFix[t]||t]}))}}),_.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&_.isXMLDoc(t)||(e=_.propFix[e]||e,i=_.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=_.find.attr(t,"tabindex");return e?parseInt(e,10):we.test(t.nodeName)||_e.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),d.optSelected||(_.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){_.propFix[this.toLowerCase()]=this})),_.fn.extend({addClass:function(t){var e,n,r,i,o,a;return p(t)?this.each((function(e){_(this).addClass(t.call(this,e,Se(this)))})):(e=Te(t)).length?this.each((function(){if(r=Se(this),n=1===this.nodeType&&" "+ke(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=ke(n),r!==a&&this.setAttribute("class",a)}})):this},removeClass:function(t){var e,n,r,i,o,a;return p(t)?this.each((function(e){_(this).removeClass(t.call(this,e,Se(this)))})):arguments.length?(e=Te(t)).length?this.each((function(){if(r=Se(this),n=1===this.nodeType&&" "+ke(r)+" "){for(o=0;o<e.length;o++)for(i=e[o];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");a=ke(n),r!==a&&this.setAttribute("class",a)}})):this:this.attr("class","")},toggleClass:function(t,e){var n,r,i,o,a=typeof t,s="string"===a||Array.isArray(t);return p(t)?this.each((function(n){_(this).toggleClass(t.call(this,n,Se(this),e),e)})):"boolean"==typeof e&&s?e?this.addClass(t):this.removeClass(t):(n=Te(t),this.each((function(){if(s)for(o=_(this),i=0;i<n.length;i++)r=n[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==a||((r=Se(this))&&ot.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":ot.get(this,"__className__")||""))})))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+ke(Se(n))+" ").indexOf(e)>-1)return!0;return!1}});var Me=/\r/g;_.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=p(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,_(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=_.map(i,(function(t){return null==t?"":t+""}))),(e=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=_.valHooks[i.type]||_.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Me,""):null==n?"":n:void 0}}),_.extend({valHooks:{option:{get:function(t){var e=_.find.attr(t,"value");return null!=e?e:ke(_.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(e=_(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=_.makeArray(e),a=i.length;a--;)((r=i[a]).selected=_.inArray(_.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),_.each(["radio","checkbox"],(function(){_.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=_.inArray(_(t).val(),e)>-1}},d.checkOn||(_.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}));var Ae=t.location,Ce={guid:Date.now()},Ee=/\?/;_.parseXML=function(e){var n,r;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){}return r=n&&n.getElementsByTagName("parsererror")[0],n&&!r||_.error("Invalid XML: "+(r?_.map(r.childNodes,(function(t){return t.textContent})).join("\n"):e)),n};var Ne=/^(?:focusinfocus|focusoutblur)$/,De=function(t){t.stopPropagation()};_.extend(_.event,{trigger:function(e,n,r,i){var o,a,s,l,u,f,h,d,y=[r||v],m=c.call(e,"type")?e.type:e,b=c.call(e,"namespace")?e.namespace.split("."):[];if(a=d=s=r=r||v,3!==r.nodeType&&8!==r.nodeType&&!Ne.test(m+_.event.triggered)&&(m.indexOf(".")>-1&&(b=m.split("."),m=b.shift(),b.sort()),u=m.indexOf(":")<0&&"on"+m,(e=e[_.expando]?e:new _.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=b.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),n=null==n?[e]:_.makeArray(n,[e]),h=_.event.special[m]||{},i||!h.trigger||!1!==h.trigger.apply(r,n))){if(!i&&!h.noBubble&&!g(r)){for(l=h.delegateType||m,Ne.test(l+m)||(a=a.parentNode);a;a=a.parentNode)y.push(a),s=a;s===(r.ownerDocument||v)&&y.push(s.defaultView||s.parentWindow||t)}for(o=0;(a=y[o++])&&!e.isPropagationStopped();)d=a,e.type=o>1?l:h.bindType||m,(f=(ot.get(a,"events")||Object.create(null))[e.type]&&ot.get(a,"handle"))&&f.apply(a,n),(f=u&&a[u])&&f.apply&&rt(a)&&(e.result=f.apply(a,n),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(y.pop(),n)||!rt(r)||u&&p(r[m])&&!g(r)&&((s=r[u])&&(r[u]=null),_.event.triggered=m,e.isPropagationStopped()&&d.addEventListener(m,De),r[m](),e.isPropagationStopped()&&d.removeEventListener(m,De),_.event.triggered=void 0,s&&(r[u]=s)),e.result}},simulate:function(t,e,n){var r=_.extend(new _.Event,n,{type:t,isSimulated:!0});_.event.trigger(r,null,e)}}),_.fn.extend({trigger:function(t,e){return this.each((function(){_.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return _.event.trigger(t,e,n,!0)}});var je=/\[\]$/,$e=/\r?\n/g,Le=/^(?:submit|button|image|reset|file)$/i,Pe=/^(?:input|select|textarea|keygen)/i;function Ie(t,e,n,r){var i;if(Array.isArray(e))_.each(e,(function(e,i){n||je.test(t)?r(t,i):Ie(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==b(e))r(t,e);else for(i in e)Ie(t+"["+i+"]",e[i],n,r)}_.param=function(t,e){var n,r=[],i=function(t,e){var n=p(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!_.isPlainObject(t))_.each(t,(function(){i(this.name,this.value)}));else for(n in t)Ie(n,t[n],e,i);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=_.prop(this,"elements");return t?_.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!_(this).is(":disabled")&&Pe.test(this.nodeName)&&!Le.test(t)&&(this.checked||!kt.test(t))})).map((function(t,e){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,(function(t){return{name:e.name,value:t.replace($e,"\r\n")}})):{name:e.name,value:n.replace($e,"\r\n")}})).get()}});var qe=/%20/g,Re=/#.*$/,Oe=/([?&])_=[^&]*/,He=/^(.*?):[ \t]*([^\r\n]*)$/gm,Be=/^(?:GET|HEAD)$/,ze=/^\/\//,Fe={},We={},Ge="*/".concat("*"),Ve=v.createElement("a");function Xe(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(G)||[];if(p(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Ue(t,e,n,r){var i={},o=t===We;function a(s){var l;return i[s]=!0,_.each(t[s]||[],(function(t,s){var u=s(e,n,r);return"string"!=typeof u||o||i[u]?o?!(l=u):void 0:(e.dataTypes.unshift(u),a(u),!1)})),l}return a(e.dataTypes[0])||!i["*"]&&a("*")}function Ye(t,e){var n,r,i=_.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&_.extend(!0,t,r),t}Ve.href=Ae.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ae.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ae.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ge,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ye(Ye(t,_.ajaxSettings),e):Ye(_.ajaxSettings,t)},ajaxPrefilter:Xe(Fe),ajaxTransport:Xe(We),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var r,i,o,a,s,l,u,c,f,h,d=_.ajaxSetup({},n),p=d.context||d,g=d.context&&(p.nodeType||p.jquery)?_(p):_.event,y=_.Deferred(),m=_.Callbacks("once memory"),b=d.statusCode||{},x={},w={},k="canceled",S={readyState:0,getResponseHeader:function(t){var e;if(u){if(!a)for(a={};e=He.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(t,e){return null==u&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==u&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(u)S.always(t[S.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||k;return r&&r.abort(e),T(0,e),this}};if(y.promise(S),d.url=((e||d.url||Ae.href)+"").replace(ze,Ae.protocol+"//"),d.type=n.method||n.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(G)||[""],null==d.crossDomain){l=v.createElement("a");try{l.href=d.url,l.href=l.href,d.crossDomain=Ve.protocol+"//"+Ve.host!=l.protocol+"//"+l.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=_.param(d.data,d.traditional)),Ue(Fe,d,n,S),u)return S;for(f in(c=_.event&&d.global)&&0==_.active++&&_.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Be.test(d.type),i=d.url.replace(Re,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(qe,"+")):(h=d.url.slice(i.length),d.data&&(d.processData||"string"==typeof d.data)&&(i+=(Ee.test(i)?"&":"?")+d.data,delete d.data),!1===d.cache&&(i=i.replace(Oe,"$1"),h=(Ee.test(i)?"&":"?")+"_="+Ce.guid+++h),d.url=i+h),d.ifModified&&(_.lastModified[i]&&S.setRequestHeader("If-Modified-Since",_.lastModified[i]),_.etag[i]&&S.setRequestHeader("If-None-Match",_.etag[i])),(d.data&&d.hasContent&&!1!==d.contentType||n.contentType)&&S.setRequestHeader("Content-Type",d.contentType),S.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Ge+"; q=0.01":""):d.accepts["*"]),d.headers)S.setRequestHeader(f,d.headers[f]);if(d.beforeSend&&(!1===d.beforeSend.call(p,S,d)||u))return S.abort();if(k="abort",m.add(d.complete),S.done(d.success),S.fail(d.error),r=Ue(We,d,n,S)){if(S.readyState=1,c&&g.trigger("ajaxSend",[S,d]),u)return S;d.async&&d.timeout>0&&(s=t.setTimeout((function(){S.abort("timeout")}),d.timeout));try{u=!1,r.send(x,T)}catch(t){if(u)throw t;T(-1,t)}}else T(-1,"No Transport");function T(e,n,a,l){var f,h,v,x,w,k=n;u||(u=!0,s&&t.clearTimeout(s),r=void 0,o=l||"",S.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(x=function(t,e,n){for(var r,i,o,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||t.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(d,S,a)),!f&&_.inArray("script",d.dataTypes)>-1&&_.inArray("json",d.dataTypes)<0&&(d.converters["text script"]=function(){}),x=function(t,e,n,r){var i,o,a,s,l,u={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)u[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if((s=i.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(d,x,S,f),f?(d.ifModified&&((w=S.getResponseHeader("Last-Modified"))&&(_.lastModified[i]=w),(w=S.getResponseHeader("etag"))&&(_.etag[i]=w)),204===e||"HEAD"===d.type?k="nocontent":304===e?k="notmodified":(k=x.state,h=x.data,f=!(v=x.error))):(v=k,!e&&k||(k="error",e<0&&(e=0))),S.status=e,S.statusText=(n||k)+"",f?y.resolveWith(p,[h,k,S]):y.rejectWith(p,[S,k,v]),S.statusCode(b),b=void 0,c&&g.trigger(f?"ajaxSuccess":"ajaxError",[S,d,f?h:v]),m.fireWith(p,[S,k]),c&&(g.trigger("ajaxComplete",[S,d]),--_.active||_.event.trigger("ajaxStop")))}return S},getJSON:function(t,e,n){return _.get(t,e,n,"json")},getScript:function(t,e){return _.get(t,void 0,e,"script")}}),_.each(["get","post"],(function(t,e){_[e]=function(t,n,r,i){return p(n)&&(i=i||r,r=n,n=void 0),_.ajax(_.extend({url:t,type:e,dataType:i,data:n,success:r},_.isPlainObject(t)&&t))}})),_.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),_._evalUrl=function(t,e,n){return _.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){_.globalEval(t,e,n)}})},_.fn.extend({wrapAll:function(t){var e;return this[0]&&(p(t)&&(t=t.call(this[0])),e=_(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return p(t)?this.each((function(e){_(this).wrapInner(t.call(this,e))})):this.each((function(){var e=_(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=p(t);return this.each((function(n){_(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){_(this).replaceWith(this.childNodes)})),this}}),_.expr.pseudos.hidden=function(t){return!_.expr.pseudos.visible(t)},_.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var Ke={0:200,1223:204},Qe=_.ajaxSettings.xhr();d.cors=!!Qe&&"withCredentials"in Qe,d.ajax=Qe=!!Qe,_.ajaxTransport((function(e){var n,r;if(d.cors||Qe&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);n=function(t){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ke[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&t.setTimeout((function(){n&&r()}))},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}})),_.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return _.globalEval(t),t}}}),_.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),_.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=_("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),v.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Je,Ze=[],tn=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ze.pop()||_.expando+"_"+Ce.guid++;return this[t]=!0,t}}),_.ajaxPrefilter("json jsonp",(function(e,n,r){var i,o,a,s=!1!==e.jsonp&&(tn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&tn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=p(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(tn,"$1"+i):!1!==e.jsonp&&(e.url+=(Ee.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||_.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=t[i],t[i]=function(){a=arguments},r.always((function(){void 0===o?_(t).removeProp(i):t[i]=o,e[i]&&(e.jsonpCallback=n.jsonpCallback,Ze.push(i)),a&&p(o)&&o(a[0]),a=o=void 0})),"script"})),d.createHTMLDocument=((Je=v.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Je.childNodes.length),_.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(d.createHTMLDocument?((r=(e=v.implementation.createHTMLDocument("")).createElement("base")).href=v.location.href,e.head.appendChild(r)):e=v),o=!n&&[],(i=q.exec(t))?[e.createElement(i[1])]:(i=Nt([t],e,o),o&&o.length&&_(o).remove(),_.merge([],i.childNodes)));var r,i,o},_.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=ke(t.slice(s)),t=t.slice(0,s)),p(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&_.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?_("<div>").append(_.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},_.expr.pseudos.animated=function(t){return _.grep(_.timers,(function(e){return t===e.elem})).length},_.offset={setOffset:function(t,e,n){var r,i,o,a,s,l,u=_.css(t,"position"),c=_(t),f={};"static"===u&&(t.style.position="relative"),s=c.offset(),o=_.css(t,"top"),l=_.css(t,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),p(e)&&(e=e.call(t,n,_.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+i),"using"in e?e.using.call(t,f):c.css(f)}},_.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){_.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===_.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===_.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=_(t).offset()).top+=_.css(t,"borderTopWidth",!0),i.left+=_.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-_.css(r,"marginTop",!0),left:e.left-i.left-_.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===_.css(t,"position");)t=t.offsetParent;return t||dt}))}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;_.fn[t]=function(r){return J(this,(function(t,r,i){var o;if(g(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),_.each(["top","left"],(function(t,e){_.cssHooks[e]=Jt(d.pixelPosition,(function(t,n){if(n)return n=Qt(t,e),Vt.test(n)?_(t).position()[e]+"px":n}))})),_.each({Height:"height",Width:"width"},(function(t,e){_.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){_.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return J(this,(function(e,n,i){var o;return g(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?_.css(e,n,s):_.style(e,n,i,s)}),e,a?i:void 0,a)}}))})),_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){_.fn[e]=function(t){return this.on(e,t)}})),_.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.on("mouseenter",t).on("mouseleave",e||t)}}),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){_.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var en=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;_.proxy=function(t,e){var n,r,o;if("string"==typeof e&&(n=t[e],e=t,t=n),p(t))return r=i.call(arguments,2),o=function(){return t.apply(e||this,r.concat(i.call(arguments)))},o.guid=t.guid=t.guid||_.guid++,o},_.holdReady=function(t){t?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=S,_.isFunction=p,_.isWindow=g,_.camelCase=nt,_.type=b,_.now=Date.now,_.isNumeric=function(t){var e=_.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},_.trim=function(t){return null==t?"":(t+"").replace(en,"$1")};var nn=t.jQuery,rn=t.$;return _.noConflict=function(e){return t.$===_&&(t.$=rn),e&&t.jQuery===_&&(t.jQuery=nn),_},void 0===e&&(t.jQuery=t.$=_),_}))}(Vt);var Xt=Gt(Vt.exports);function Ut(){const t="https://gtexportal.org/api/v2/",e="gtex_v8";return{singleCellExpression:t+"expression/singleNucleusGeneExpression?datasetId=gtex_snrnaseq_pilot&gencodeId=",singleCellExpressionSummary:t+"expression/singleNucleusGeneExpressionSummary",dyneqtl:t+"association/dyneqtl",snp:t+"dataset/variant?snpId=",variantId:t+"dataset/variant?variantId=",exonExp:t+"expression/clusteredMedianExonExpression?gencodeId=",transcriptExp:t+"expression/clusteredMedianTranscriptExpression?gencodeId=",junctionExp:t+"expression/clusteredMedianJunctionExpression?gencodeId=",transcript:t+`reference/transcript?datasetId=${e}&gencodeId=`,exon:t+`reference/exon?datasetId=${e}&gencodeId=`,geneModel:t+"dataset/collapsedGeneModelExon?gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?gencodeId=",geneExp:t+"expression/geneExpression?gencodeId=",medGeneExp:t+"expression/clusteredMedianGeneExpression",topInTissueFiltered:t+"expression/topExpressedGene?filterMtGene=true&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?&filterMtGene=false&tissueSiteDetailId=",geneId:t+"reference/gene?geneId=",tissue:t+"dataset/tissueSiteDetail",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",dynsqtl:t+"association/dynsqtl",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}function Yt(t){return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach((e=>{if(!t[0].hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e})),t}async function Kt(t,e=250){let n,r=[],i=0;do{const o=Qt(t,i,e);n=await fetch(o).then((t=>t.json())),r=r.concat(n.data),i+=1}while(i<n.paging_info.numberOfPages);return r}function Qt(t,e,n=250){let r;const i="page="+e;r=t.includes("?")?t+"&"+i:t+"?"+i;return r=r+"&"+("itemsPerPage="+n),r}function Jt(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Zt(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}var te=Array.prototype,ee=te.map,ne=te.slice,re={name:"implicit"};function ie(){var t=bt(),e=[],n=[],r=re;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==re)return r;t.set(o,a=e.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=bt();for(var r,o,a=-1,s=n.length;++a<s;)t.has(o=(r=n[a])+"")||t.set(o,e.push(r));return i},i.range=function(t){return arguments.length?(n=ne.call(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return ie(e,n).unknown(r)},Jt.apply(i,arguments),i}function oe(){var t,e,n=ie().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,s=0,l=0,u=.5;function c(){var n=r().length,c=o[1]<o[0],f=o[c-0],h=o[1-c];t=(h-f)/Math.max(1,n-s+2*l),a&&(t=Math.floor(t)),f+=(h-f-t*(n-s))*u,e=t*(1-s),a&&(f=Math.round(f),e=Math.round(e));var d=Pt(n).map((function(e){return f+t*e}));return i(c?d.reverse():d)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),c()):r()},n.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},n.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,c()):a},n.padding=function(t){return arguments.length?(s=Math.min(1,l=+t),c()):s},n.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),c()):s},n.paddingOuter=function(t){return arguments.length?(l=+t,c()):l},n.align=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),c()):u},n.copy=function(){return oe(r(),o).round(a).paddingInner(s).paddingOuter(l).align(u)},Jt.apply(c(),arguments)}function ae(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function se(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function le(){}var ue=.7,ce=1/ue,fe="\\s*([+-]?\\d+)\\s*",he="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",de="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",pe=/^#([0-9a-f]{3,8})$/,ge=new RegExp("^rgb\\("+[fe,fe,fe]+"\\)$"),ve=new RegExp("^rgb\\("+[de,de,de]+"\\)$"),ye=new RegExp("^rgba\\("+[fe,fe,fe,he]+"\\)$"),me=new RegExp("^rgba\\("+[de,de,de,he]+"\\)$"),be=new RegExp("^hsl\\("+[he,de,de]+"\\)$"),xe=new RegExp("^hsla\\("+[he,de,de,he]+"\\)$"),we={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function _e(){return this.rgb().formatHex()}function ke(){return this.rgb().formatRgb()}function Se(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=pe.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Te(e):3===n?new Ce(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Me(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Me(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ge.exec(t))?new Ce(e[1],e[2],e[3],1):(e=ve.exec(t))?new Ce(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ye.exec(t))?Me(e[1],e[2],e[3],e[4]):(e=me.exec(t))?Me(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=be.exec(t))?je(e[1],e[2]/100,e[3]/100,1):(e=xe.exec(t))?je(e[1],e[2]/100,e[3]/100,e[4]):we.hasOwnProperty(t)?Te(we[t]):"transparent"===t?new Ce(NaN,NaN,NaN,0):null}function Te(t){return new Ce(t>>16&255,t>>8&255,255&t,1)}function Me(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ce(t,e,n,r)}function Ae(t,e,n,r){return 1===arguments.length?((i=t)instanceof le||(i=Se(i)),i?new Ce((i=i.rgb()).r,i.g,i.b,i.opacity):new Ce):new Ce(t,e,n,null==r?1:r);var i}function Ce(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Ee(){return"#"+De(this.r)+De(this.g)+De(this.b)}function Ne(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function De(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function je(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Le(t,e,n,r)}function $e(t){if(t instanceof Le)return new Le(t.h,t.s,t.l,t.opacity);if(t instanceof le||(t=Se(t)),!t)return new Le;if(t instanceof Le)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,l=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=l<.5?o+i:2-o-i,a*=60):s=l>0&&l<1?0:a,new Le(a,s,l,t.opacity)}function Le(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Pe(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Ie(t){return function(){return t}}function qe(t){return 1==(t=+t)?Re:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Ie(isNaN(e)?n:e)}}function Re(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Ie(isNaN(t)?e:t)}ae(le,Se,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:_e,formatHex:_e,formatHsl:function(){return $e(this).formatHsl()},formatRgb:ke,toString:ke}),ae(Ce,Ae,se(le,{brighter:function(t){return t=null==t?ce:Math.pow(ce,t),new Ce(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?ue:Math.pow(ue,t),new Ce(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Ee,formatHex:Ee,formatRgb:Ne,toString:Ne})),ae(Le,(function(t,e,n,r){return 1===arguments.length?$e(t):new Le(t,e,n,null==r?1:r)}),se(le,{brighter:function(t){return t=null==t?ce:Math.pow(ce,t),new Le(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?ue:Math.pow(ue,t),new Le(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Ce(Pe(t>=240?t-240:t+120,i,r),Pe(t,i,r),Pe(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Oe=function t(e){var n=qe(e);function r(t,e){var r=n((t=Ae(t)).r,(e=Ae(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Re(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);var He,Be=(He=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return function(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}((n-r/e)*e,a,i,o,s)}},function(t){var e,n,r=t.length,i=new Array(r),o=new Array(r),a=new Array(r);for(e=0;e<r;++e)n=Ae(t[e]),i[e]=n.r||0,o[e]=n.g||0,a[e]=n.b||0;return i=He(i),o=He(o),a=He(a),n.opacity=1,function(t){return n.r=i(t),n.g=o(t),n.b=a(t),n+""}});function ze(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}}function Fe(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Ke(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}function We(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Ge(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Ve(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ke(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}var Xe=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ue=new RegExp(Xe.source,"g");function Ye(t,e){var n,r,i,o=Xe.lastIndex=Ue.lastIndex=0,a=-1,s=[],l=[];for(t+="",e+="";(n=Xe.exec(t))&&(r=Ue.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,l.push({i:a,x:Ge(n,r)})),o=Ue.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)s[(n=l[r]).i]=n.x(t);return s.join("")})}function Ke(t,e){var n,r=typeof e;return null==e||"boolean"===r?Ie(e):("number"===r?Ge:"string"===r?(n=Se(e))?(e=n,Oe):Ye:e instanceof Se?Oe:e instanceof Date?We:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?ze:Array.isArray(e)?Fe:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Ve:Ge)(t,e)}function Qe(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var Je,Ze,tn,en,nn=180/Math.PI,rn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function on(t,e,n,r,i,o){var a,s,l;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),t*r<e*n&&(t=-t,e=-e,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*nn,skewX:Math.atan(l)*nn,scaleX:a,scaleY:s}}function an(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],l=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var l=a.push("translate(",null,e,null,n);s.push({i:l-4,x:Ge(t,i)},{i:l-2,x:Ge(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ge(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,l),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ge(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,l),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Ge(t,n)},{i:s-2,x:Ge(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,l),o=a=null,function(t){for(var e,n=-1,r=l.length;++n<r;)s[(e=l[n]).i]=e.x(t);return s.join("")}}}var sn=an((function(t){return"none"===t?rn:(Je||(Je=document.createElement("DIV"),Ze=document.documentElement,tn=document.defaultView),Je.style.transform=t,t=tn.getComputedStyle(Ze.appendChild(Je),null).getPropertyValue("transform"),Ze.removeChild(Je),on(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),ln=an((function(t){return null==t?rn:(en||(en=document.createElementNS("http://www.w3.org/2000/svg","g")),en.setAttribute("transform",t),(t=en.transform.baseVal.consolidate())?on((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):rn)}),", ",")",")");function un(t){return+t}var cn=[0,1];function fn(t){return t}function hn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function dn(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function pn(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=hn(i,r),o=n(a,o)):(r=hn(r,i),o=n(o,a)),function(t){return o(r(t))}}function gn(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=hn(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=Dt(t,e,1,r)-1;return o[n](i[n](e))}}function vn(t,e){return function(){var t,e,n,r,i,o,a=cn,s=cn,l=Ke,u=fn;function c(){return r=Math.min(a.length,s.length)>2?gn:pn,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,l)))(t(u(e)))}return f.invert=function(n){return u(e((o||(o=r(s,a.map(t),Ge)))(n)))},f.domain=function(t){return arguments.length?(a=ee.call(t,un),u===fn||(u=dn(a)),c()):a.slice()},f.range=function(t){return arguments.length?(s=ne.call(t),c()):s.slice()},f.rangeRound=function(t){return s=ne.call(t),l=Qe,c()},f.clamp=function(t){return arguments.length?(u=t?dn(a):fn,f):u!==fn},f.interpolate=function(t){return arguments.length?(l=t,c()):l},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}()(t,e)}function yn(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function mn(t){return(t=yn(Math.abs(t)))?t[1]:NaN}var bn,xn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function wn(t){if(!(e=xn.exec(t)))throw new Error("invalid format: "+t);var e;return new _n({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function _n(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function kn(t,e){var n=yn(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}wn.prototype=_n.prototype,_n.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Sn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return kn(100*t,e)},r:kn,s:function(t,e){var n=yn(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(bn=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+yn(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Tn(t){return t}var Mn,An,Cn,En=Array.prototype.map,Nn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Dn(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Tn:(e=En.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],l=0;i>0&&s>0&&(l+s+1>r&&(s=Math.max(1,r-l)),o.push(t.substring(i-=s,i+s)),!((l+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Tn:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(En.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",u=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=wn(t)).fill,n=t.align,f=t.sign,h=t.symbol,d=t.zero,p=t.width,g=t.comma,v=t.precision,y=t.trim,m=t.type;"n"===m?(g=!0,m="g"):Sn[m]||(void 0===v&&(v=12),y=!0,m="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",x="$"===h?o:/[%p]/.test(m)?l:"",w=Sn[m],_=/[defgprs%]/.test(m);function k(t){var i,o,l,h=b,k=x;if("c"===m)k=w(t)+k,t="";else{var S=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:w(Math.abs(t),v),y&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),S&&0==+t&&"+"!==f&&(S=!1),h=(S?"("===f?f:u:"-"===f||"("===f?"":f)+h,k=("s"===m?Nn[8+bn/3]:"")+k+(S&&"("===f?")":""),_)for(i=-1,o=t.length;++i<o;)if(48>(l=t.charCodeAt(i))||l>57){k=(46===l?a+t.slice(i+1):t.slice(i))+k,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var T=h.length+t.length+k.length,M=T<p?new Array(p-T+1).join(e):"";switch(g&&d&&(t=r(M+t,M.length?p-k.length:1/0),M=""),n){case"<":t=h+t+k+M;break;case"=":t=h+M+t+k;break;case"^":t=M.slice(0,T=M.length>>1)+h+t+k+M.slice(T);break;default:t=M+h+t+k}return s(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),k.toString=function(){return t+""},k}return{format:f,formatPrefix:function(t,e){var n=f(((t=wn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(mn(e)/3))),i=Math.pow(10,-r),o=Nn[8+r/3];return function(t){return n(i*t)+o}}}}function jn(t,e,n,r){var i,o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=It?i*=10:o>=qt?i*=5:o>=Rt&&(i*=2),e<t?-i:i}(t,e,n);switch((r=wn(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(mn(e)/3)))-mn(Math.abs(t)))}(o,a))||(r.precision=i),Cn(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,mn(e)-mn(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-mn(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return An(r)}function $n(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=Ot(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return jn(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],l=i[a];return l<s&&(r=s,s=l,l=r,r=o,o=a,a=r),(r=Ot(s,l,n))>0?r=Ot(s=Math.floor(s/r)*r,l=Math.ceil(l/r)*r,n):r<0&&(r=Ot(s=Math.ceil(s*r)/r,l=Math.floor(l*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(l/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(l*r)/r,e(i)),t},t}function Ln(){var t=vn(fn,fn);return t.copy=function(){return e=t,Ln().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown());var e},Jt.apply(t,arguments),$n(t)}function Pn(){var t=$n(function(){var t,e,n,r,i,o=0,a=1,s=fn,l=!1;function u(e){return isNaN(e=+e)?i:s(0===n?.5:(e=(r(e)-t)*n,l?Math.max(0,Math.min(1,e)):e))}return u.domain=function(i){return arguments.length?(t=r(o=+i[0]),e=r(a=+i[1]),n=t===e?0:1/(e-t),u):[o,a]},u.clamp=function(t){return arguments.length?(l=!!t,u):l},u.interpolator=function(t){return arguments.length?(s=t,u):s},u.unknown=function(t){return arguments.length?(i=t,u):i},function(i){return r=i,t=i(o),e=i(a),n=t===e?0:1/(e-t),u}}()(fn));return t.copy=function(){return e=t,Pn().domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown());var e},Zt.apply(t,arguments)}function In(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}function qn(t){return Be(t[t.length-1])}Mn=Dn({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),An=Mn.format,Cn=Mn.formatPrefix;var Rn=qn(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(In)),On=qn(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(In)),Hn=qn(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(In)),Bn=qn(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(In)),zn=qn(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(In)),Fn=qn(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(In)),Wn=qn(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(In)),Gn=qn(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(In)),Vn=qn(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(In)),Xn=qn(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(In)),Un=qn(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(In)),Yn=qn(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(In)),Kn=qn(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(In)),Qn=qn(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(In)),Jn=qn(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(In));function Zn(t=!0){const e=["rgb(100,118,120)","rgb(101,141,145)","rgb(103,126,82)","rgb(103,184,222)","rgb(108,110,88)","rgb(108,147,128)","rgb(119,144,182)","rgb(126,130,122)","rgb(133,173,186)","rgb(137,114,91)","rgb(145,170,157)","rgb(145,201,232)","rgb(147,105,66)","rgb(159,114,116)","rgb(159,188,191)","rgb(159,229,194)","rgb(163,163,171)","rgb(164,207,190)","rgb(172,108,130)","rgb(173,84,114)","rgb(174,195,222)","rgb(176,204,153)","rgb(179,180,150)","rgb(180,220,237)","rgb(183,202,121)","rgb(192,202,85)","rgb(193,191,193)","rgb(195,97,136)","rgb(199,121,102)","rgb(207,202,76)","rgb(209,219,189)","rgb(213,251,255)","rgb(215,94,56)","rgb(218,114,126)","rgb(223,90,73)","rgb(224,247,217)","rgb(227,205,164)","rgb(228,168,185)","rgb(230,176,152)","rgb(232,212,175)","rgb(239,201,76)","rgb(240,124,108)","rgb(246,232,177)","rgb(249,228,173)","rgb(252,245,191)","rgb(255,188,103)","rgb(45,94,110)","rgb(51,153,204)","rgb(60,124,145)","rgb(62,87,145)","rgb(65,115,120)","rgb(89,216,229)","rgb(94,178,153)","rgb(95,124,134)"];return t?function(t){let e=t.length;for(;e>0;){let n=Math.floor(Math.random()*e);e--;let r=t[e];t[e]=t[n],t[n]=r}return t}(e):e}function tr(t,e="YlGnBu",n=void 0,r=void 0,i=!1){t=t.filter((t=>isFinite(t))),r=void 0===r?Bt(t):r,n=void 0===n?function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&r>n&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&r>n&&(r=n);return r}(t):n;const o=Pn(function(t){const e={BuGn:Fn,OrRd:Wn,PuBu:Gn,YlGnBu:Vn,Blues:Xn,Oranges:Jn,Greens:Un,Purples:Kn,Reds:Qn,Greys:Yn,Grays:Yn,RdBu:Hn,RdGy:Bn,PiYG:Rn,PuOr:On,RdYlBu:zn};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return i?o.domain([r,n]):o.domain([n,r]),o}class er{constructor(t=window.innerWidth,e=100,n=100,r={top:50,right:250,bottom:170,left:10},i=12,o=10){this.margin=r,this.rootW=t,this.leftTreePanel={x:r.left,y:r.top+n,h:void 0,w:e-o,id:"leftTree"},this.cell={w:void 0,h:i},this.topTreePanel={x:r.left+e,y:r.top,h:n-o,w:this.rootW-(r.left+e+r.right),id:"topTree"},this.heatmapPanel={x:r.left+e,y:r.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:r.left+e,y:0,h:r.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function nr(t,e,n,r,i=void 0){return function(t){if(ht(`#${t}`).empty()){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}(t),void 0===i&&(i=`${t}-svg`),void 0===r&&(r={top:0,left:0}),ht("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",i).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}function rr(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function ir(t,e){var n,r,i,o,a,s=new lr(t),l=+t.value&&(s.value=t.value),u=[s];for(null==e&&(e=or);n=u.pop();)if(l&&(n.value=+n.data.value),(i=e(n.data))&&(a=i.length))for(n.children=new Array(a),o=a-1;o>=0;--o)u.push(r=n.children[o]=new lr(i[o])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(sr)}function or(t){return t.children}function ar(t){t.data=t.data.data}function sr(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function lr(t){this.data=t,this.depth=this.height=0,this.parent=null}lr.prototype=ir.prototype={constructor:lr,count:function(){return this.eachAfter(rr)},each:function(t){var e,n,r,i,o=this,a=[o];do{for(e=a.reverse(),a=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(t){for(var e,n,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return ir(this).eachBefore(ar)}};var ur=Array.prototype.slice;function cr(t){return t}var fr=1,hr=2,dr=3,pr=4,gr=1e-6;function vr(t){return"translate("+(t+.5)+",0)"}function yr(t){return"translate(0,"+(t+.5)+")"}function mr(t){return function(e){return+t(e)}}function br(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function xr(){return!this.__axis}function wr(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,l=t===fr||t===pr?-1:1,u=t===pr||t===hr?"x":"y",c=t===fr||t===dr?vr:yr;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,d=null==i?e.tickFormat?e.tickFormat.apply(e,n):cr:i,p=Math.max(o,0)+s,g=e.range(),v=+g[0]+.5,y=+g[g.length-1]+.5,m=(e.bandwidth?br:mr)(e.copy()),b=f.selection?f.selection():f,x=b.selectAll(".domain").data([null]),w=b.selectAll(".tick").data(h,e).order(),_=w.exit(),k=w.enter().append("g").attr("class","tick"),S=w.select("line"),T=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(k),S=S.merge(k.append("line").attr("stroke","currentColor").attr(u+"2",l*o)),T=T.merge(k.append("text").attr("fill","currentColor").attr(u,l*p).attr("dy",t===fr?"0em":t===dr?"0.71em":"0.32em")),f!==b&&(x=x.transition(f),w=w.transition(f),S=S.transition(f),T=T.transition(f),_=_.transition(f).attr("opacity",gr).attr("transform",(function(t){return isFinite(t=m(t))?c(t):this.getAttribute("transform")})),k.attr("opacity",gr).attr("transform",(function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:m(t))}))),_.remove(),x.attr("d",t===pr||t==hr?a?"M"+l*a+","+v+"H0.5V"+y+"H"+l*a:"M0.5,"+v+"V"+y:a?"M"+v+","+l*a+"V0.5H"+y+"V"+l*a:"M"+v+",0.5H"+y),w.attr("opacity",1).attr("transform",(function(t){return c(m(t))})),S.attr(u+"2",l*o),T.attr(u,l*p).text(d),b.filter(xr).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===hr?"start":t===pr?"end":"middle"),b.each((function(){this.__axis=m}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=ur.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:ur.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:ur.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f}function _r(t){return wr(dr,t)}function kr(t){return wr(pr,t)}class Sr{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=ir(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),i=0;i<r.length;i++){var o=r[i],a={};switch(o){case"(":n.branchset=[a],e.push(n),n=a;break;case",":e[e.length-1].branchset.push(a),n=a;break;case")":n=e.pop();break;case":":break;default:var s=r[i-1];")"==s||"("==s||","==s?n.name=o:":"==s&&(n.length=parseFloat(o))}}return n}(t),(t=>t.branchset)).sum((t=>t.branchset?0:1)).sort(((t,e)=>t.value-e.value||t.data.length-e.data.length)),this.leaves=this.root.leaves().sort(((t,e)=>t.value-e.value||At(t.data.length,e.data.length))),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce(((t,e)=>t+e.y),0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach((t=>{n(t),e(t)})),t.selectAll(".branch").data(r).enter().append("line").attr("x1",(t=>t.x)).attr("x2",(t=>t.data.length?t.x-this.xScale(t.data.length):t.x)).attr("y1",(t=>t.y+this.yScale.bandwidth()/2)).attr("y2",(t=>t.y+this.yScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1);const i=this.root.descendants().filter((t=>t.height)).sort(((t,e)=>e.height-t.height));t.selectAll(".arm").data(i).enter().append("line").attr("x1",(t=>t.x)).attr("x2",(t=>t.x)).attr("y1",(t=>t.children[0].y+this.yScale.bandwidth()/2)).attr("y2",(t=>t.children[1].y+this.yScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(i).enter().append("circle").attr("cx",(t=>t.x)).attr("cy",(t=>t.y+this.yScale.bandwidth()/2)).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(){ht(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call(_r(this.xScale).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort(((t,e)=>t.height-e.height||At(t.data.length,e.data.length)))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce(((t,e)=>t+e.x),0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach((t=>{e(t),n(t)})),t.selectAll(".branch").data(r).enter().append("line").attr("y1",(t=>t.y)).attr("y2",(t=>t.data.length?t.y-this.yScale(t.data.length):t.y)).attr("x1",(t=>t.x+this.xScale.bandwidth()/2)).attr("x2",(t=>t.x+this.xScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1);const i=this.root.descendants().filter((t=>t.height)).sort(((t,e)=>e.height-t.height));t.selectAll(".arm").data(i).enter().append("line").attr("y1",(t=>t.y)).attr("y2",(t=>t.y)).attr("x1",(t=>t.children[0].x+this.xScale.bandwidth()/2)).attr("x2",(t=>t.children[1].x+this.xScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(i).enter().append("circle").attr("cx",(t=>t.x+this.xScale.bandwidth()/2)).attr("cy",(t=>t.y)).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(){ht(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").call(kr(this.yScale).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce(((t,e)=>e.data.length?t+e.data.length:t),0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=Ln().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),this.xScale=oe().domain(this.postorder.map((t=>t.data.name))).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),this.yScale=oe().domain(this.postorder.map((t=>t.data.name))).range([0,this.height]).padding(.05)):this.yScale=Ln().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}class Tr{constructor(t,e=void 0,n=!1){Xt(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=Xt("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,i="fa-download"){this.createButton(t,i),ht(`#${t}`).on("click",(()=>{this.downloadSvg(e,n,r)})).on("mouseover",(()=>{this.tooltip.show("Download the plot")})).on("mouseout",(()=>{this.tooltip.hide()}))}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n),ht(`#${t}`).on("click",e).on("mouseover",(()=>{this.tooltip.show("Reset the scales")})).on("mouseout",(()=>{this.tooltip.hide()}))}createButton(t,e="fa-download",n="need to define",r=void 0){const i=Xt("<a/>").attr("id",t).addClass("btn btn-default btn-light btn-sm").appendTo(this.bar);return e.startsWith("fa-")?Xt("<i/>").addClass(`fa ${e}`).appendTo(i):i.text(e),this.buttons[t]=i,"foo"!=t&&ht(`#${t}`).on("click",(()=>{void 0===r?alert("need to define the click event"):r()})).on("mouseover",(()=>{this.tooltip.show(n)})).on("mouseout",(()=>{this.tooltip.hide()})),i}attachTooltip(t){this.tooltip=t}downloadSvg(t,n,r){console.log(t,n,r);let i=Xt(Xt(Xt(""+("#"+t)))[0]),o=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),a=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var i=n[r].cssRules,o=0;o<i.length;o++){var a=i[o];if(void 0!==a.style){var s,l=void 0===a.selectorText?a.selectorText:a.selectorText.replace(`#${t[0].id} `,"");try{s=Xt(t).find(l)}catch(t){s=[]}s.length>0&&(e+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var u=document.createElement("style");return u.setAttribute("type","text/css"),u.innerHTML="<![CDATA[\n"+e+"\n]]>",u}(i.get());o.prepend(a),Xt("#"+r).html("").hide();let s=Xt(`#${r}`).append(o).html(),l=new Blob([s],{type:"image/svg+xml"});e.saveAs(l,n),Xt(`#${r}`).html("").hide()}}var Mr={value:function(){}};function Ar(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Cr(r)}function Cr(t){this._=t}function Er(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function Nr(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Mr,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}function Dr(){et.preventDefault(),et.stopImmediatePropagation()}Cr.prototype=Ar.prototype={constructor:Cr,on:function(t,e){var n,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<s;)if(n=(t=o[a]).type)i[n]=Nr(i[n],t.name,e);else if(null==e)for(n in i)i[n]=Nr(i[n],t.name,null);return this}for(;++a<s;)if((n=(t=o[a]).type)&&(n=Er(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Cr(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var jr,$r,Lr=0,Pr=0,Ir=0,qr=1e3,Rr=0,Or=0,Hr=0,Br="object"==typeof performance&&performance.now?performance:Date,zr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Fr(){return Or||(zr(Wr),Or=Br.now()+Hr)}function Wr(){Or=0}function Gr(){this._call=this._time=this._next=null}function Vr(t,e,n){var r=new Gr;return r.restart(t,e,n),r}function Xr(){Or=(Rr=Br.now())+Hr,Lr=Pr=0;try{!function(){Fr(),++Lr;for(var t,e=jr;e;)(t=Or-e._time)>=0&&e._call.call(null,t),e=e._next;--Lr}()}finally{Lr=0,function(){var t,e,n=jr,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:jr=e);$r=t,Yr(r)}(),Or=0}}function Ur(){var t=Br.now(),e=t-Rr;e>qr&&(Hr-=e,Rr=t)}function Yr(t){Lr||(Pr&&(Pr=clearTimeout(Pr)),t-Or>24?(t<1/0&&(Pr=setTimeout(Xr,t-Br.now()-Hr)),Ir&&(Ir=clearInterval(Ir))):(Ir||(Rr=Br.now(),Ir=setInterval(Ur,qr)),Lr=1,zr(Xr)))}function Kr(t,e,n){var r=new Gr;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r}Gr.prototype=Vr.prototype={constructor:Gr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Fr():+n)+(null==e?0:+e),this._next||$r===this||($r?$r._next=this:jr=this,$r=this),this._call=t,this._time=n,Yr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Yr())}};var Qr=Ar("start","end","cancel","interrupt"),Jr=[],Zr=0,ti=1,ei=2,ni=3,ri=4,ii=5,oi=6;function ai(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(t){n.state=ti,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)}function a(o){var u,c,f,h;if(n.state!==ti)return l();for(u in i)if((h=i[u]).name===n.name){if(h.state===ni)return Kr(a);h.state===ri?(h.state=oi,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[u]):+u<e&&(h.state=oi,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[u])}if(Kr((function(){n.state===ni&&(n.state=ri,n.timer.restart(s,n.delay,n.time),s(o))})),n.state=ei,n.on.call("start",t,t.__data__,n.index,n.group),n.state===ei){for(n.state=ni,r=new Array(f=n.tween.length),u=0,c=-1;u<f;++u)(h=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function s(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=ii,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===ii&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var r in n.state=oi,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Vr(o,0,n.time)}(t,n,{name:e,index:r,group:i,on:Qr,tween:Jr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Zr})}function si(t,e){var n=ui(t,e);if(n.state>Zr)throw new Error("too late; already scheduled");return n}function li(t,e){var n=ui(t,e);if(n.state>ni)throw new Error("too late; already running");return n}function ui(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function ci(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>ei&&n.state<ii,n.state=oi,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}function fi(t,e){var n,r;return function(){var i=li(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function hi(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=li(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},l=0,u=i.length;l<u;++l)if(i[l].name===e){i[l]=s;break}l===u&&i.push(s)}o.tween=i}}function di(t,e,n){var r=t._id;return t.each((function(){var t=li(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return ui(t,r).value[e]}}function pi(t,e){var n;return("number"==typeof e?Ge:e instanceof Se?Oe:(n=Se(e))?(e=n,Oe):Ye)(t,e)}function gi(t){return function(){this.removeAttribute(t)}}function vi(t){return function(){this.removeAttributeNS(t.space,t.local)}}function yi(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function mi(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function bi(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttribute(t))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttribute(t)}}function xi(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttributeNS(t.space,t.local)}}function wi(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,i)),n}return i._value=e,i}function _i(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,i)),n}return i._value=e,i}function ki(t,e){return function(){si(this,t).delay=+e.apply(this,arguments)}}function Si(t,e){return e=+e,function(){si(this,t).delay=e}}function Ti(t,e){return function(){li(this,t).duration=+e.apply(this,arguments)}}function Mi(t,e){return e=+e,function(){li(this,t).duration=e}}var Ai=ft.prototype.constructor;function Ci(t){return function(){this.style.removeProperty(t)}}var Ei=0;function Ni(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Di(){return++Ei}var ji=ft.prototype;Ni.prototype={constructor:Ni,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=u(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,l,c=r[a],f=c.length,h=o[a]=new Array(f),d=0;d<f;++d)(s=c[d])&&(l=t.call(s,s.__data__,d,c))&&("__data__"in s&&(l.__data__=s.__data__),h[d]=l,ai(h[d],e,n,d,h,ui(s,n)));return new Ni(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=f(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var l,u=r[s],c=u.length,h=0;h<c;++h)if(l=u[h]){for(var d,p=t.call(l,l.__data__,h,u),g=ui(l,n),v=0,y=p.length;v<y;++v)(d=p[v])&&ai(d,e,n,v,p,g);o.push(p),a.push(l)}return new Ni(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],u=0;u<s;++u)(o=a[u])&&t.call(o,o.__data__,u,a)&&l.push(o);return new Ni(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,u=e[s],c=n[s],f=u.length,h=a[s]=new Array(f),d=0;d<f;++d)(l=u[d]||c[d])&&(h[d]=l);for(;s<r;++s)a[s]=e[s];return new Ni(a,this._parents,this._name,this._id)},selection:function(){return new Ai(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Di(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)if(a=s[u]){var c=ui(a,e);ai(a,t,n,u,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Ni(r,this._parents,t,n)},call:ji.call,nodes:ji.nodes,node:ji.node,size:ji.size,empty:ji.empty,each:ji.each,on:function(t,e){var n=this._id;return arguments.length<2?ui(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?si:li;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}(n,t,e))},attr:function(t,e){var n=i(t),r="transform"===n?ln:pi;return this.attrTween(t,"function"==typeof e?(n.local?xi:bi)(n,r,di(this,"attr."+t,e)):null==e?(n.local?vi:gi)(n):(n.local?mi:yi)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=i(t);return this.tween(n,(r.local?wi:_i)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?sn:pi;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=E(this,t),a=(this.style.removeProperty(t),E(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,Ci(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=E(this,t),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(t),l=s=E(this,t)),a===l?null:a===r&&l===i?o:(i=l,o=e(r=a,s))}}(t,r,di(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var l=li(this,t),u=l.on,c=null==l.value[a]?o||(o=Ci(e)):void 0;u===n&&i===c||(r=(n=u).copy()).on(s,i=c),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=E(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,o,n)),r}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(di(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=ui(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?fi:hi)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?ki:Si)(e,t)):ui(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Ti:Mi)(e,t)):ui(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){li(this,t).ease=e}}(e,t)):ui(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},l={value:function(){0==--i&&o()}};n.each((function(){var n=li(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(l)),n.on=e}))}))}};var $i={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Li(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return $i.time=Fr(),$i;return n}function Pi(t){return function(){return t}}function Ii(t,e,n){this.target=t,this.type=e,this.selection=n}function qi(){et.stopImmediatePropagation()}function Ri(){et.preventDefault(),et.stopImmediatePropagation()}ft.prototype.interrupt=function(t){return this.each((function(){ci(this,t)}))},ft.prototype.transition=function(t){var e,n;t instanceof Ni?(e=t._id,t=t._name):(e=Di(),(n=$i).time=Fr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,u=0;u<l;++u)(a=s[u])&&ai(a,t,e,u,s,n||Li(a,e));return new Ni(r,this._parents,t,e)};var Oi={name:"drag"},Hi={name:"space"},Bi={name:"handle"},zi={name:"center"};function Fi(t){return[+t[0],+t[1]]}function Wi(t){return[Fi(t[0]),Fi(t[1])]}function Gi(t){return function(e){return function(t,e,n){arguments.length<3&&(n=e,e=dt().changedTouches);for(var r,i=0,o=e?e.length:0;i<o;++i)if((r=e[i]).identifier===n)return pt(t,r);return null}(e,et.touches,t)}}var Vi={name:"x",handles:["w","e"].map(to),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Xi={name:"y",handles:["n","s"].map(to),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Ui={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(to),input:function(t){return null==t?null:Wi(t)},output:function(t){return t}},Yi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ki={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Qi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Ji={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Zi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function to(t){return{type:t}}function eo(){return!et.ctrlKey&&!et.button}function no(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function ro(){return navigator.maxTouchPoints||"ontouchstart"in this}function io(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function oo(){return function(t){var e,n=no,r=eo,i=ro,o=!0,a=Ar("start","brush","end"),s=6;function l(e){var n=e.property("__brush",g).selectAll(".overlay").data([to("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Yi.overlay).merge(n).each((function(){var t=io(this).extent;ht(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([to("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Yi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Yi[t.type]})),e.each(u).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",d).on("touchend.brush touchcancel.brush",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function u(){var t=ht(this),e=io(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-s/2:e[0][0]-s/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-s/2:e[0][1]-s/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+s:s})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+s:s}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,e,n){var r=t.__brush.emitter;return!r||n&&r.clean?new f(t,e,n):r}function f(t,e,n){this.that=t,this.args=e,this.state=t.__brush,this.active=0,this.clean=n}function h(){if((!e||et.touches)&&r.apply(this,arguments)){var n,i,a,s,l,f,h,d,p,g,v,y=this,m=et.target.__data__.type,b="selection"===(o&&et.metaKey?m="overlay":m)?Oi:o&&et.altKey?zi:Bi,x=t===Xi?null:Ji[m],w=t===Vi?null:Zi[m],_=io(y),k=_.extent,S=_.selection,T=k[0][0],M=k[0][1],A=k[1][0],C=k[1][1],E=0,N=0,D=x&&w&&o&&et.shiftKey,j=et.touches?Gi(et.changedTouches[0].identifier):gt,$=j(y),L=$,P=c(y,arguments,!0).beforestart();"overlay"===m?(S&&(p=!0),_.selection=S=[[n=t===Xi?T:$[0],a=t===Vi?M:$[1]],[l=t===Xi?A:n,h=t===Vi?C:a]]):(n=S[0][0],a=S[0][1],l=S[1][0],h=S[1][1]),i=n,s=a,f=l,d=h;var I=ht(y).attr("pointer-events","none"),q=I.selectAll(".overlay").attr("cursor",Yi[m]);if(et.touches)P.moved=O,P.ended=B;else{var R=ht(et.view).on("mousemove.brush",O,!0).on("mouseup.brush",B,!0);o&&R.on("keydown.brush",z,!0).on("keyup.brush",F,!0),function(t){var e=t.document.documentElement,n=ht(t).on("dragstart.drag",Dr,!0);"onselectstart"in e?n.on("selectstart.drag",Dr,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(et.view)}qi(),ci(y),u.call(y),P.start()}function O(){var t=j(y);!D||g||v||(Math.abs(t[0]-L[0])>Math.abs(t[1]-L[1])?v=!0:g=!0),L=t,p=!0,Ri(),H()}function H(){var t;switch(E=L[0]-$[0],N=L[1]-$[1],b){case Hi:case Oi:x&&(E=Math.max(T-n,Math.min(A-l,E)),i=n+E,f=l+E),w&&(N=Math.max(M-a,Math.min(C-h,N)),s=a+N,d=h+N);break;case Bi:x<0?(E=Math.max(T-n,Math.min(A-n,E)),i=n+E,f=l):x>0&&(E=Math.max(T-l,Math.min(A-l,E)),i=n,f=l+E),w<0?(N=Math.max(M-a,Math.min(C-a,N)),s=a+N,d=h):w>0&&(N=Math.max(M-h,Math.min(C-h,N)),s=a,d=h+N);break;case zi:x&&(i=Math.max(T,Math.min(A,n-E*x)),f=Math.max(T,Math.min(A,l+E*x))),w&&(s=Math.max(M,Math.min(C,a-N*w)),d=Math.max(M,Math.min(C,h+N*w)))}f<i&&(x*=-1,t=n,n=l,l=t,t=i,i=f,f=t,m in Ki&&q.attr("cursor",Yi[m=Ki[m]])),d<s&&(w*=-1,t=a,a=h,h=t,t=s,s=d,d=t,m in Qi&&q.attr("cursor",Yi[m=Qi[m]])),_.selection&&(S=_.selection),g&&(i=S[0][0],f=S[1][0]),v&&(s=S[0][1],d=S[1][1]),S[0][0]===i&&S[0][1]===s&&S[1][0]===f&&S[1][1]===d||(_.selection=[[i,s],[f,d]],u.call(y),P.brush())}function B(){if(qi(),et.touches){if(et.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else!function(t,e){var n=t.document.documentElement,r=ht(t).on("dragstart.drag",null);e&&(r.on("click.drag",Dr,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(et.view,p),R.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);I.attr("pointer-events","all"),q.attr("cursor",Yi.overlay),_.selection&&(S=_.selection),function(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}(S)&&(_.selection=null,u.call(y)),P.end()}function z(){switch(et.keyCode){case 16:D=x&&w;break;case 18:b===Bi&&(x&&(l=f-E*x,n=i+E*x),w&&(h=d-N*w,a=s+N*w),b=zi,H());break;case 32:b!==Bi&&b!==zi||(x<0?l=f-E:x>0&&(n=i-E),w<0?h=d-N:w>0&&(a=s-N),b=Hi,q.attr("cursor",Yi.selection),H());break;default:return}Ri()}function F(){switch(et.keyCode){case 16:D&&(g=v=D=!1,H());break;case 18:b===zi&&(x<0?l=f:x>0&&(n=i),w<0?h=d:w>0&&(a=s),b=Bi,H());break;case 32:b===Hi&&(et.altKey?(x&&(l=f-E*x,n=i+E*x),w&&(h=d-N*w,a=s+N*w),b=zi):(x<0?l=f:x>0&&(n=i),w<0?h=d:w>0&&(a=s),b=Bi),q.attr("cursor",Yi[m]),H());break;default:return}Ri()}}function d(){c(this,arguments).moved()}function p(){c(this,arguments).ended()}function g(){var e=this.__brush||{selection:null};return e.extent=Wi(n.apply(this,arguments)),e.dim=t,e}return l.move=function(e,n){e.selection?e.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var e=this,r=e.__brush,i=c(e,arguments),o=r.selection,a=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),s=Ke(o,a);function l(t){r.selection=1===t&&null===a?null:s(t),u.call(e),i.brush()}return null!==o&&null!==a?l:l(1)})):e.each((function(){var e=this,r=arguments,i=e.__brush,o=t.input("function"==typeof n?n.apply(e,r):n,i.extent),a=c(e,r).beforestart();ci(e),i.selection=null===o?null:o,u.call(e),a.start().brush().end()}))},l.clear=function(t){l.move(t,null)},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,r){var i=et;t.sourceEvent=et,et=t;try{return e.apply(n,r)}finally{et=i}}(new Ii(l,e,t.output(this.state.selection)),a.apply,a,[e,this.that,this.args])}},l.extent=function(t){return arguments.length?(n="function"==typeof t?t:Pi(Wi(t)),l):n},l.filter=function(t){return arguments.length?(r="function"==typeof t?t:Pi(!!t),l):r},l.touchable=function(t){return arguments.length?(i="function"==typeof t?t:Pi(!!t),l):i},l.handleSize=function(t){return arguments.length?(s=+t,l):s},l.keyModifiers=function(t){return arguments.length?(o=!!t,l):o},l.on=function(){var t=a.on.apply(a,arguments);return t===a?l:t},l}(Ui)}var ao=Math.PI,so=2*ao,lo=1e-6,uo=so-lo;function co(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function fo(){return new co}function ho(){return Math.random()}co.prototype=fo.prototype={constructor:co,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,l=r-e,u=o-t,c=a-e,f=u*u+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>lo)if(Math.abs(c*s-l*u)>lo&&i){var h=n-o,d=r-a,p=s*s+l*l,g=h*h+d*d,v=Math.sqrt(p),y=Math.sqrt(f),m=i*Math.tan((ao-Math.acos((p+f-g)/(2*v*y)))/2),b=m/y,x=m/v;Math.abs(b-1)>lo&&(this._+="L"+(t+b*u)+","+(e+b*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>u*d)+","+(this._x1=t+x*s)+","+(this._y1=e+x*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),l=t+a,u=e+s,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+u:(Math.abs(this._x1-l)>lo||Math.abs(this._y1-u)>lo)&&(this._+="L"+l+","+u),n&&(f<0&&(f=f%so+so),f>uo?this._+="A"+n+","+n+",0,1,"+c+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=l)+","+(this._y1=u):f>lo&&(this._+="A"+n+","+n+",0,"+ +(f>=ao)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}},function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(ho);var po=function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(ho);!function t(e){function n(){var t=po.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(ho);var go=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(ho);function vo(t){return function(){return t}}function yo(t){this._context=t}function mo(t){return new yo(t)}function bo(t){return t[0]}function xo(t){return t[1]}function wo(){var t=bo,e=null,n=vo(0),r=xo,i=vo(!0),o=null,a=mo,s=null;function l(l){var u,c,f,h,d,p=l.length,g=!1,v=new Array(p),y=new Array(p);for(null==o&&(s=a(d=fo())),u=0;u<=p;++u){if(!(u<p&&i(h=l[u],u,l))===g)if(g=!g)c=u,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),f=u-1;f>=c;--f)s.point(v[f],y[f]);s.lineEnd(),s.areaEnd()}g&&(v[u]=+t(h,u,l),y[u]=+n(h,u,l),s.point(e?+e(h,u,l):v[u],r?+r(h,u,l):y[u]))}if(d)return s=null,d+""||null}function u(){return function(){var t=bo,e=xo,n=vo(!0),r=null,i=mo,o=null;function a(a){var s,l,u,c=a.length,f=!1;for(null==r&&(o=i(u=fo())),s=0;s<=c;++s)!(s<c&&n(l=a[s],s,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(l,s,a),+e(l,s,a));if(u)return o=null,u+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:vo(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:vo(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:vo(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:vo(+n),e=null,l):t},l.x0=function(e){return arguments.length?(t="function"==typeof e?e:vo(+e),l):t},l.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:vo(+t),l):e},l.y=function(t){return arguments.length?(n="function"==typeof t?t:vo(+t),r=null,l):n},l.y0=function(t){return arguments.length?(n="function"==typeof t?t:vo(+t),l):n},l.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:vo(+t),l):r},l.lineX0=l.lineY0=function(){return u().x(t).y(n)},l.lineY1=function(){return u().x(t).y(r)},l.lineX1=function(){return u().x(e).y(n)},l.defined=function(t){return arguments.length?(i="function"==typeof t?t:vo(!!t),l):i},l.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),l):a},l.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),l):o},l}function _o(){this._=null}function ko(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function So(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function To(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Mo(t){for(;t.L;)t=t.L;return t}function Ao(t,e,n,r){var i=[null,null],o=Qo.push(i)-1;return i.left=t,i.right=e,n&&Eo(i,t,e,n),r&&Eo(i,e,t,r),Yo[t.index].halfedges.push(o),Yo[e.index].halfedges.push(o),i}function Co(t,e,n){var r=[e,n];return r.left=t,r}function Eo(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function No(t,e,n,r,i){var o,a=t[0],s=t[1],l=a[0],u=a[1],c=0,f=1,h=s[0]-l,d=s[1]-u;if(o=e-l,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>c&&(c=o)}if(o=r-l,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<f&&(f=o)}if(o=n-u,d||!(o>0)){if(o/=d,d<0){if(o<c)return;o<f&&(f=o)}else if(d>0){if(o>f)return;o>c&&(c=o)}if(o=i-u,d||!(o<0)){if(o/=d,d<0){if(o>f)return;o>c&&(c=o)}else if(d>0){if(o<c)return;o<f&&(f=o)}return!(c>0||f<1)||(c>0&&(t[0]=[l+c*h,u+c*d]),f<1&&(t[1]=[l+f*h,u+f*d]),!0)}}}}}function Do(t,e,n,r,i){var o=t[1];if(o)return!0;var a,s,l=t[0],u=t.left,c=t.right,f=u[0],h=u[1],d=c[0],p=c[1],g=(f+d)/2,v=(h+p)/2;if(p===h){if(g<e||g>=r)return;if(f>d){if(l){if(l[1]>=i)return}else l=[g,n];o=[g,i]}else{if(l){if(l[1]<n)return}else l=[g,i];o=[g,n]}}else if(s=v-(a=(f-d)/(p-h))*g,a<-1||a>1)if(f>d){if(l){if(l[1]>=i)return}else l=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(l){if(l[1]<n)return}else l=[(i-s)/a,i];o=[(n-s)/a,n]}else if(h<p){if(l){if(l[0]>=r)return}else l=[e,a*e+s];o=[r,a*r+s]}else{if(l){if(l[0]<e)return}else l=[r,a*r+s];o=[e,a*e+s]}return t[0]=l,t[1]=o,!0}function jo(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function $o(t,e){return e[+(e.left!==t.site)]}function Lo(t,e){return e[+(e.left===t.site)]}!function t(e){function n(t){var n=go.source(e)(t);return function(){return n()/t}}return n.source=t,n}(ho),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(ho),yo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},_o.prototype={constructor:_o,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Mo(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(So(this,n),n=(t=n).U),n.C=!1,r.C=!0,To(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(To(this,n),n=(t=n).U),n.C=!1,r.C=!0,So(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Mo(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,So(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,To(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,So(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,To(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,So(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,To(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Po,Io=[];function qo(){ko(this),this.x=this.y=this.arc=this.site=this.cy=null}function Ro(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],s=i[1],l=r[0]-a,u=r[1]-s,c=o[0]-a,f=o[1]-s,h=2*(l*f-u*c);if(!(h>=-Zo)){var d=l*l+u*u,p=c*c+f*f,g=(f*d-u*p)/h,v=(l*p-c*d)/h,y=Io.pop()||new qo;y.arc=t,y.site=i,y.x=g+a,y.y=(y.cy=v+s)+Math.sqrt(g*g+v*v),t.circle=y;for(var m=null,b=Ko._;b;)if(y.y<b.y||y.y===b.y&&y.x<=b.x){if(!b.L){m=b.P;break}b=b.L}else{if(!b.R){m=b;break}b=b.R}Ko.insert(m,y),m||(Po=y)}}}}function Oo(t){var e=t.circle;e&&(e.P||(Po=e.N),Ko.remove(e),Io.push(e),ko(e),t.circle=null)}var Ho=[];function Bo(){ko(this),this.edge=this.site=this.circle=null}function zo(t){var e=Ho.pop()||new Bo;return e.site=t,e}function Fo(t){Oo(t),Uo.remove(t),Ho.push(t),ko(t)}function Wo(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,s=[t];Fo(t);for(var l=o;l.circle&&Math.abs(n-l.circle.x)<Jo&&Math.abs(r-l.circle.cy)<Jo;)o=l.P,s.unshift(l),Fo(l),l=o;s.unshift(l),Oo(l);for(var u=a;u.circle&&Math.abs(n-u.circle.x)<Jo&&Math.abs(r-u.circle.cy)<Jo;)a=u.N,s.push(u),Fo(u),u=a;s.push(u),Oo(u);var c,f=s.length;for(c=1;c<f;++c)u=s[c],l=s[c-1],Eo(u.edge,l.site,u.site,i);l=s[0],(u=s[f-1]).edge=Ao(l.site,u.site,null,i),Ro(l),Ro(u)}function Go(t){for(var e,n,r,i,o=t[0],a=t[1],s=Uo._;s;)if((r=Vo(s,a)-o)>Jo)s=s.L;else{if(!((i=o-Xo(s,a))>Jo)){r>-Jo?(e=s.P,n=s):i>-Jo?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){Yo[t.index]={site:t,halfedges:[]}}(t);var l=zo(t);if(Uo.insert(e,l),e||n){if(e===n)return Oo(e),n=zo(e.site),Uo.insert(l,n),l.edge=n.edge=Ao(e.site,l.site),Ro(e),void Ro(n);if(n){Oo(e),Oo(n);var u=e.site,c=u[0],f=u[1],h=t[0]-c,d=t[1]-f,p=n.site,g=p[0]-c,v=p[1]-f,y=2*(h*v-d*g),m=h*h+d*d,b=g*g+v*v,x=[(v*m-d*b)/y+c,(h*b-g*m)/y+f];Eo(n.edge,u,p,x),l.edge=Ao(u,t,null,x),n.edge=Ao(t,p,null,x),Ro(e),Ro(n)}else l.edge=Ao(e.site,l.site)}}function Vo(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(n=a.site)[0],l=n[1],u=l-e;if(!u)return s;var c=s-r,f=1/o-1/u,h=c/u;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*u)-l+u/2+i-o/2)))/f+r:(r+s)/2}function Xo(t,e){var n=t.N;if(n)return Vo(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var Uo,Yo,Ko,Qo,Jo=1e-6,Zo=1e-12;function ta(t,e){return e[1]-t[1]||e[0]-t[0]}function ea(t,e){var n,r,i,o=t.sort(ta).pop();for(Qo=[],Yo=new Array(t.length),Uo=new _o,Ko=new _o;;)if(i=Po,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(Go(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;Wo(i.arc)}if(function(){for(var t,e,n,r,i=0,o=Yo.length;i<o;++i)if((t=Yo[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=jo(t,Qo[e[n]]);for(a.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[a[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var a=+e[0][0],s=+e[0][1],l=+e[1][0],u=+e[1][1];!function(t,e,n,r){for(var i,o=Qo.length;o--;)Do(i=Qo[o],t,e,n,r)&&No(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>Jo||Math.abs(i[0][1]-i[1][1])>Jo)||delete Qo[o]}(a,s,l,u),function(t,e,n,r){var i,o,a,s,l,u,c,f,h,d,p,g,v=Yo.length,y=!0;for(i=0;i<v;++i)if(o=Yo[i]){for(a=o.site,s=(l=o.halfedges).length;s--;)Qo[l[s]]||l.splice(s,1);for(s=0,u=l.length;s<u;)p=(d=Lo(o,Qo[l[s]]))[0],g=d[1],f=(c=$o(o,Qo[l[++s%u]]))[0],h=c[1],(Math.abs(p-f)>Jo||Math.abs(g-h)>Jo)&&(l.splice(s,0,Qo.push(Co(a,d,Math.abs(p-t)<Jo&&r-g>Jo?[t,Math.abs(f-t)<Jo?h:r]:Math.abs(g-r)<Jo&&n-p>Jo?[Math.abs(h-r)<Jo?f:n,r]:Math.abs(p-n)<Jo&&g-e>Jo?[n,Math.abs(f-n)<Jo?h:e]:Math.abs(g-e)<Jo&&p-t>Jo?[Math.abs(h-e)<Jo?f:t,e]:null))-1),++u);u&&(y=!1)}if(y){var m,b,x,w=1/0;for(i=0,y=null;i<v;++i)(o=Yo[i])&&(x=(m=(a=o.site)[0]-t)*m+(b=a[1]-e)*b)<w&&(w=x,y=o);if(y){var _=[t,e],k=[t,r],S=[n,r],T=[n,e];y.halfedges.push(Qo.push(Co(a=y.site,_,k))-1,Qo.push(Co(a,k,S))-1,Qo.push(Co(a,S,T))-1,Qo.push(Co(a,T,_))-1)}}for(i=0;i<v;++i)(o=Yo[i])&&(o.halfedges.length||delete Yo[i])}(a,s,l,u)}this.edges=Qo,this.cells=Yo,Uo=Ko=Qo=Yo=null}function na(t,e,n){this.k=t,this.x=e,this.y=n}ea.prototype={constructor:ea,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return $o(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,l,u,c=n.site,f=-1,h=e[i[o-1]],d=h.left===c?h.right:h.left;++f<o;)a=d,d=(h=e[i[f]]).left===c?h.right:h.left,a&&d&&r<a.index&&r<d.index&&(l=a,u=d,((s=c)[0]-u[0])*(l[1]-s[1])-(s[0]-l[0])*(u[1]-s[1])<0)&&t.push([c.data,a.data,d.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var l=t-i.site[0],u=e-i.site[1],c=l*l+u*u;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var l=t-s[0],u=e-s[1],f=l*l+u*u;f<c&&(c=f,a=s.index)}}))}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}},na.prototype={constructor:na,scale:function(t){return 1===t?this:new na(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new na(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},na.prototype;class ra{constructor(t,e=!1,n=30,r=-40,i=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),ht("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){ht("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=et.pageX,e=et.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY,ht("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){ht("#"+this.id).html(t)}}class ia{constructor(t,e=!0,n=10,r="YlGnBu",i=2,o="heatmapTooltip",a="heatmap-tooltip"){this.data=t,this.useLog=e,this.logBase=n,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=i,this.colorScheme=r,ht(`#${o}`).empty()&&ht("body").append("div").attr("id",o),this.tooltip=new ra(o),ht(`#${o}`).classed(a,!0),this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new Tr(t,e),this.toolbar}drawColorLegend(t,e={x:0,y:0},n=5){!function(t,e,n,r,i,o=10,a=10,s={h:10,w:40},l="h",u=!1){let c=[];if(u){let t=[...Array(o+1).keys()],e=n.domain()[1]/o;c=t.map((t=>t*e)),c=c.concat(t.filter((t=>0!=t)).map((t=>0-t*e))).sort(((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN))}else{let t=[...Array(o+1).keys()],e=n.domain()[1]/o;c=t.map((t=>t*e))}const f=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(c).enter().append("g").classed("legend",!0);"h"==l?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",s.h).attr("transform",`translate(${r.x}, ${r.y})`),f.append("rect").attr("x",((t,e)=>s.w*e)).attr("y",5).attr("width",s.w).attr("height",s.h).style("fill",n),f.append("text").attr("class","color-legend").text((t=>i?(Math.pow(a,t)-1).toPrecision(2):t.toPrecision(2))).attr("x",((t,e)=>s.w*e)).attr("y",0).style("font-size",10)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+s.h*c.length})rotate(90)`),f.append("rect").attr("x",0).attr("y",((t,e)=>s.h*e)).attr("width",s.w).attr("height",s.h).style("fill",n),f.append("text").attr("class","color-legend").text((t=>i?(Math.pow(a,t)-1).toPrecision(2):t.toPrecision(2))).attr("x",15).attr("y",((t,e)=>s.h*e+s.h/2)))}(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.logBase)}redraw(t,e,n,r={w:1e3,h:1e3},i=30){this._setXScale(r.w,e),this._setYScale(r.h,n),this.draw(t,r,i)}draw(t,e={w:1e3,h:600},n=30,r=!1,i=null,o=0,a="right"){void 0===this.xList&&this._setXScale(e.w),void 0===this.yList&&this._setYScale(e.h),void 0===this.colorScale&&this._setColorScale(o);const s=t.selectAll(".exp-map-xlabel").data(this.xList),l=null==i?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+i;s.attr("transform",(t=>`translate(${this.xScale(t)+5}, ${l}) rotate(${n})`)),s.enter().append("text").attr("class",((t,e)=>`exp-map-xlabel x${e}`)).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").style("font-size",this.xScale.bandwidth()>12?12:this.xScale.bandwidth()).attr("transform",(t=>`translate(${this.xScale(t)+5}, ${l}) rotate(${n})`)).merge(s).text((t=>t)),s.exit().remove(),t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text((t=>t)).attr("x","left"==a?this.xScale.range()[0]-5:this.xScale.range()[1]+5).attr("y",(t=>this.yScale(t)+this.yScale.bandwidth()/2)).style("font-size",this.yScale.bandwidth()).attr("class",((t,e)=>`exp-map-ylabel y${e}`)).attr("text-anchor","left"==a?"end":"start").style("cursor","default").on("click",(t=>{alert(`${t} is clicked. To be implemented`)})).on("mouseover",(function(){ht(this).classed("normal",!1).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).classed("normal",!0).classed("highlighted",!1)}));const u=t.selectAll(".exp-map-cell").data(this.data,(t=>t.value));u.attr("x",(t=>this.xScale(t.x))).attr("y",(t=>this.yScale(t.y))).attr("row",(t=>`x${this.xList.indexOf(t.x)}`)).attr("col",(t=>`y${this.yList.indexOf(t.y)}`));const c=this;u.enter().append("rect").attr("row",(t=>`x${this.xList.indexOf(t.x)}`)).attr("col",(t=>`y${this.yList.indexOf(t.y)}`)).attr("x",(t=>this.xScale(t.x))).attr("y",(t=>this.yScale(t.y))).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",(function(e){const n=ht(this);c.cellMouseover(e,t,n)})).on("mouseout",(function(){c.cellMouseout(t)})).merge(u).style("fill",(t=>t.color?t.color:(r&&0==t.value&&console.info(t),!r||0!=t.value&&null!==t.value&&void 0!==t.value?this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value):"#ffffff"))).style("stroke",(t=>r&&0==t.value?"lightgrey":t.stroke?t.stroke:"none")).style("stroke",(t=>r&&0==t.value||t.stroke?1:0)),u.exit().remove()}cellMouseout(t){t.selectAll("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(t,e,n){const r=n.attr("row"),i=n.attr("col");e.selectAll(".exp-map-xlabel").filter(`.${r}`).classed("highlighted",!0),e.selectAll(".exp-map-ylabel").filter(`.${i}`).classed("highlighted",!0),n.classed("highlighted",!0);const o=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue;this.tooltip.show(`Column: ${t.x} <br/> Row: ${t.y}<br/> Value: ${o}`)}_setXScale(t,e=void 0){this.xList=void 0!==e?e:xt().key((t=>t.x)).entries(this.data).map((t=>t.key)),this.xScale=oe().domain(this.xList).range([0,t]).padding(.05)}_setYScale(t,e){this.yList=void 0!==e?e:xt().key((t=>t.y)).entries(this.data).map((t=>t.key)),this.yScale=oe().domain(this.yList).range([0,t]).padding(.05)}_setColorScale(t=0){let e=this.useLog,n=this.data.map((t=>e?this._log(t.value):t.value));this.colorScale=tr(n,this.colorScheme,t)}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class oa{constructor(t,e,n,r="YlGnBu",i=2,o=new er,a="dmapTooltip",s=!0,l=10,u=""){this.config=o.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new Sr(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new Sr(this.data.rowTree,"h"),heatmap:new ia(this.data.heatmap,s,l,r,i,a)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.title=u,this.toolbar=void 0,this.tooltip=this.objects.heatmap.tooltip}createToolbar(t,e){return this.toolbar=new Tr(t,e),this.toolbar}render(t,e,n=!0,r=!0,i="top",o=5){let a,s;this._updateConfig(i),this.visualComponents.svg=nr(t,this.config.w,this.config.h,this.config.margin,e),n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),a=this.objects.columnTree.xScale.domain()),r&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),s=this.objects.rowTree.yScale.domain()),""!=this.title&&ht(`#${t}-svg`).append("text").attr("x",0).attr("y",20).text(this.title),this._renderHeatmap(this.objects.heatmap,a,s,o)}_renderTree(t,e,n){let r=this.visualComponents.svg;const i="row"==t?".exp-map-ylabel":".exp-map-xlabel",o=r.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`);e.draw(o,n.w,n.h);return o.selectAll(".dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",6).attr("fill","red");let e=t.leaves().map((t=>t.data.name));r.selectAll(i).filter((t=>e.includes(t))).classed("highlighted",!0),r.selectAll(".leaf-color").filter((t=>e.includes(t))).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).attr("r",2).attr("fill","#333"),r.selectAll(i).classed("highlighted",!1),r.selectAll(".leaf-color").classed("highlighted",!1)})),o}_renderHeatmap(t,e,n,r=5){let i=this.visualComponents.svg;const o=this.config.panels.main,a=i.append("g").attr("id",o.id).attr("transform",`translate(${o.x}, ${o.y})`);t.redraw(a,e,n,{w:o.w,h:o.h}),t.drawColorLegend(i,this.config.panels.legend,r)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}const aa=function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)},sa=function(t){let e=(Ht(t,.75)-Ht(t,.25))/1.34;return 1.06*Math.min($t(t),e)*Math.pow(t.length,-.2)};class la{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0,this.groups=xt().key((t=>{if(void 0===t.group)throw"required attribute does not exist";return t.group})).entries(this.data)}setYDomain(t){if(void 0===t||0==t.length){let e=[];this.data.forEach((t=>e=e.concat(t.values))),t=Lt(e)}return t}render(t,e=500,n=357,r=void 0,i=void 0,o={show:!0,angle:30,paddingInner:.01,paddingOuter:.01,textAnchor:"start",adjustHeight:0,showLabels:!0,showTicks:!0},a={show:!0,angle:0,paddingInner:0,paddingOuter:0,sort:!1,adjustHeight:5},s={label:"Y label"},l={show:!1,angle:0,adjustHeight:void 0},u=!1,c=!1,f=!1,h=!1,d=0,p=void 0,g="kdeScott"){this.dom=t,this.width=e,this.height=n,this.config={x:o,subx:a,y:s,size:l},this.scale={x:oe().range([0,this.width]).domain(r||this.groups.map((t=>t.key))).paddingOuter(this.config.x.paddingOuter).paddingInner(this.config.x.paddingInner),subx:oe(),y:Ln().rangeRound([this.height,0]).domain(this.setYDomain(i)),z:Ln()},this.show={whisker:u,outliers:h,divider:c,legend:f,points:d},this.kdeOption=g,this.vColor=p,this.reset()}update(){this.groups.forEach((t=>{t.index=this.scale.x.domain().indexOf(t.key);let e=this.groupInfo[t.key];void 0!==e&&this._renderGroupInfoText(e,t.key);this.scale.subx.domain((()=>(this.config.subx.sort&&t.values.sort(((t,e)=>t.label<e.label?-1:t.label>e.label?1:0)),t.values.map((t=>t.label))))()).range([this.scale.x(t.key),this.scale.x(t.key)+this.scale.x.bandwidth()]),t.values.forEach((e=>{0!=e.values.length&&(e.values=e.values.sort(At),void 0!==this.vColor&&(e.color=this.vColor),t.dom=this._drawViolin(e,t.index))})),this.config.size.show&&this._renderSizeAxis(t),this.config.subx.show&&this._renderSubXAxis(t)})),this._renderXAxis(),this._renderYAxis(),this.dom.on("mouseout",(()=>{void 0!==this.tooltip&&this.tooltip.hide()})),this.show.divider&&this._addGroupDivider(),this.show.legend&&this._addLegend()}addPlotTitle(t,e){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${r})`).text(e)}createTooltip(t){return 0==Xt(`#${t}`).length&&Xt("<div/>").attr("id",t).appendTo(Xt("body")),this.tooltip=new ra(t),ht(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return void 0===e&&(e=this.createTooltip(t)),this.toolbar=new Tr(t,e),this.toolbar}addBrush(t){const e=oo();e.on("end",(()=>{this.zoom(t,e)})),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,r=et.selection;if(void 0===e)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter(((t,e)=>{const n=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return e>=n&&e<=i})));const n=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([n,i]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout((function(){n=null}),350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((e=>{let n=e.key,r=e.values;this.scale.subx.range([this.scale.x(n),this.scale.x(n)+this.scale.x.bandwidth()]),r.forEach((r=>{if(0==r.values.length)return;this.scale.x.domain().indexOf(n),this.scale.z.range([this.scale.subx(r.label),this.scale.subx(r.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${e.index}-${r.label}`);o.select(".violin").transition(i).attr("d",wo().x0((t=>this.scale.z(t[1]))).x1((t=>this.scale.z(-t[1]))).y((t=>this.scale.y(t[0]))));const a=Ht(r.values,.25),s=Ht(r.values,.75),l=.1;o.select(".violin-ir").transition(i).attr("x",this.scale.z(-l)).attr("y",this.scale.y(s)).attr("width",Math.abs(this.scale.z(-l)-this.scale.z(l))).attr("height",Math.abs(this.scale.y(s)-this.scale.y(a)));const u=Ft(r.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-l)).attr("x2",this.scale.z(l)).attr("y1",this.scale.y(u)).attr("y2",this.scale.y(u))}))}))}reset(){this.dom.selectAll("*").remove(),this.update()}updateData(t,e=!1,n=!0){this.data=t,this.groups=xt().key((t=>{if(void 0===t.group)throw"required attribute does not exist";return t.group})).entries(this.data),this.updateYScale(),this.updateXScale(),this.show.outliers=n,e&&this.reset()}updateYScale(t=void 0,e=void 0,n=!1){void 0!==t&&(this.config.y.label=t),this.scale.y=Ln().rangeRound([this.height,0]).domain(this.setYDomain(e)),n&&this.reset()}updateXScale(t=void 0,e=!1){this.scale.x=oe().range([0,this.width]).domain(t||this.groups.map((t=>t.key))).paddingOuter(this.config.x.paddingOuter).paddingInner(this.config.x.paddingInner),e&&this.reset()}_drawViolin(t,e){const n=e=>{this.scale.z.domain([-e,e]).range([this.scale.subx(t.label),this.scale.subx(t.label)+this.scale.subx.bandwidth()])},r=this._generateVertices(t.values,this.kdeOption),i=this.dom.append("g").attr("id",`violin${e}-${t.label}`).attr("class","violin-g").datum(t);if(t.values.length>this.show.points&&r.length&&this._validVertices(r)){n(Bt(r,(t=>Math.abs(t[1]))));const o=Ht(t.values,.25),a=Ht(t.values,.75),s=Math.abs(a-o),l=Lt(t.values.filter((t=>t<=a+1.5*s))),u=l[1],c=l[0],f=Ft(t.values);if(this._renderViolinShape(i,t,r,f,e%2==0),(void 0===t.showBoxplot||t.showBoxplot)&&this._renderBoxPlot(i,t,c,u,o,a,f),this.show.outliers){const e=t.values.filter((t=>t<c||t>u));this._renderDataDots(i,{values:e,color:t.color},1)}t.showPoints&&this._renderDataDots(i,t,1)}else if(this.show.points>0){n(Bt(t.values,(t=>Math.abs(t)))),this._renderDataDots(i,t,1)}return i}_renderViolinShape(t,e,n,r,i,o="#94a8b8",a="#90c1c1"){let s=wo().x0((t=>this.scale.z("left"==e.showHalfViolin?0:t[1]))).x1((t=>this.scale.z("right"==e.showHalfViolin?0:-t[1]))).y((t=>this.scale.y(t[0])));const l=()=>void 0!==e.color?e.color:i?a:o,u=t.append("path").datum(n).attr("d",s).classed("violin",!0).style("fill",e.fill?e.fill:l).style("stroke",e.stroke?e.stroke:l);t.on("mouseover",(()=>{u.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+r.toPrecision(4)+"<br/>")})),t.on("mouseout",(()=>{u.classed("highlighted",!1)}))}_renderBoxPlot(t,e,n,r,i,o,a){const s=this.scale.z.domain()[1]/3;this.show.whisker&&t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(n)).style("stroke","#fff"),t.append("rect").attr("x","right"==e.showHalfViolin?this.scale.z(0):this.scale.z(-s)).attr("y",this.scale.y(o)).attr("width",void 0===e.showHalfViolin?Math.abs(this.scale.z(-s)-this.scale.z(s)):Math.abs(this.scale.z(0)-this.scale.z(s))).attr("height",Math.abs(this.scale.y(o)-this.scale.y(i))).style("fill",e.altColor||"#555f66").style("stroke-width",.2),t.append("line").attr("x1","right"==e.showHalfViolin?this.scale.z(0):this.scale.z(-s)).attr("x2","left"==e.showHalfViolin?this.scale.z(0):this.scale.z(s)).attr("y1",this.scale.y(a)).attr("y2",this.scale.y(a)).attr("class","violin-median")}_renderDataDots(t,e,n=2){const r=this.scale.z.domain()[1],i=po(0,r/4);t.append("g").attr("class","violin-points").selectAll("circle").data(e.values).enter().append("circle").attr("cx",(()=>this.scale.z("left"==e.showHalfViolin?-Math.abs(i()):Math.abs(i())))).attr("cy",(t=>this.scale.y(t))).attr("fill",e.color).attr("r",n)}_sanityCheck(t){const e=["group","label","values"];t.forEach((t=>{e.forEach((e=>{if(void 0===t[e])throw"GroupedViolin: input data error."}))}))}_addGroupDivider(){const t=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),n=(n,r)=>r!==t.length-1?this.scale.x(n)+ +this.scale.x.bandwidth()+e/2:0;this.dom.selectAll(".vline").data(t).enter().append("line").classed("vline",!0).attr("x1",n).attr("x2",n).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",((e,n)=>n!=t.length-1?1:0)).style("stroke","rgb(86,98,107)").style("opacity",.5)}_addLegend(){const t=this.dom.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");t.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const e=t.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0);e.append("rect").attr("x",((t,e)=>5+60*e+this.scale.x.range()[0])).attr("y",-28).attr("width",10).attr("height",10).style("fill",(t=>t.color)),e.append("text").attr("class","violin-legend-text").text((t=>t.label)).attr("x",((t,e)=>17+60*e+this.scale.x.range()[0])).attr("y",-20)}_renderGroupInfoText(t,e){this.dom.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","middle").attr("fill",(e=>"pvalue"==e&&parseFloat(t[e])<=parseFloat(t.pvalueThreshold)?"orangered":"SlateGray")).attr("transform",(()=>`translate(${this.scale.x(e)+this.scale.x.bandwidth()/2}, ${this.scale.y(this.scale.y.domain()[0])+50})`)).text((e=>`${e}: ${parseFloat(parseFloat(t[e]).toPrecision(3)).toExponential()}`))}_renderXAxis(){let t=this.config.subx.show?55:0;const e=this.config.x;var n;e.show&&(this.xAxis="top"==e.direction?(n=this.scale.x,wr(fr,n)):_r(this.scale.x),e.hideLabels&&(this.Axis=this.xAxis.tickFormat("")),e.hideTicks&&(this.Axis=this.xAxis.tickSize(0)),this.dom.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${void 0!==e.adjustHeight?e.adjustHeight:this.height+t})`).call(this.xAxis).selectAll("text").attr("text-anchor",e.textAnchor?e.textAnchor:"start").attr("transform",`rotate(${e.angle}, 0, 10)`))}_renderYAxis(t=!1){this.yAxis=kr(this.scale.y).tickValues(this.scale.y.ticks(5)),t&&this.dom.select(".violin-y-axis").empty().remove(),this.dom.append("g").attr("class","violin-y-axis axis--y").attr("transform","translate(-5, 0)").call(this.yAxis),this.dom.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${10+ht(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(this.config.y.label)}_renderSizeAxis(t){let e={};t.values.forEach((t=>e[t.label]=`(${t.size||t.values.length})`));let n=_r(oe().domain(t.values.map((t=>t.label))).rangeRound([this.scale.x(t.key),this.scale.x(t.key)+this.scale.x.bandwidth()])).tickFormat((t=>e[t]));const r=this.height+18,i=this.config.size,o=t.dom.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${i.adjustHeight||r})`).call(n);i.angle>0&&o.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${i.angle}, 2, 10)`)}_renderSubXAxis(t){const e=this.config.subx,n=e.adjustHeight?e.adjustHeight:5;let r=_r(this.scale.subx);e.hideTicks&&(r=r.tickSize(0));const i=t.dom.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${this.height+n})`).call(r);e.angle>0&&i.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${e.angle}, 2, 10)`)}_generateVertices(t,e){let n=function(t,e,n){return function(r){return e.map((e=>[e,zt(r,(r=>t((e-r)/n)))/n]))}}(aa,this.scale.y.ticks(100),sa(t));const r=Lt(t);let i="default"==e?n(t):function(t,e){void 0===e&&(e=Ln().domain(Lt(t)).nice().ticks(100));const n=Math.pow(t.length,-.2),r=1/$t(t)/n,i=Math.pow(2*Math.PI,-.5)*r/t.length;return e.map((e=>{let n=0;return t.forEach((t=>{n+=Math.exp(-Math.pow((t-e)*r,2)/2)})),[e,n*i]}))}(t);return i=i.filter((t=>t[0]>=r[0]&&t[0]<=r[1])),i}_validVertices(t){return!t.reduce(((t,e)=>t.concat(e)),[]).filter((t=>isNaN(t))).length}}function ua(t,e=Ut().tissue){!function(t,e=Ut().tissue){Kt(e).then((function(e){let n=Yt(e);n.forEach((t=>{t.id=t.tissueSiteDetailId,t.text=t.tissueSiteDetail})),n.sort(((t,e)=>t.tissueSiteDetail<e.tissueSiteDetail?-1:t.tissueSiteDetail>e.tissueSiteDetail?1:0)),$(`#${t}`).select2({placeholder:"Select a data set",data:n})})).catch((function(t){console.error(t)}))}(t,e)}function ca(t,e,n,r=Ut(),i=!0){const o=i?r.topInTissueFiltered:r.topInTissue,a=0==Xt("#filterInfo").length?Xt("<div/>").attr("id","filterInfo").appendTo("#messageBox"):Xt("#filterInfo");i?a.html("Mitochondrial genes are excluded.<br/>"):a.html("Mitochondrial genes are included.<br/>"),async function(t,e,n){let r,i=[];const o=Qt(t,n,e);return r=await fetch(o).then((t=>t.json())),i=i.concat(r.data),i}(o+t,50,0).then((function(o){const a=o.map((t=>{if(!t.hasOwnProperty("gencodeId"))throw console.error(t),"Parse Error: required json attribute is missing: gencodeId";return t.gencodeId}));ha(e,n,a,void 0,r,i,(function(){da(t)}),t)})).catch((function(t){console.error(t)}))}function fa(t,e,n,r,i,o=Ut(),a=void 0){Kt(o.tissue).then((function(s){let l=function(t,e=!1){let n=t;const r=n.filter((t=>t.rnaSeqAndGenotypeSampleCount<=70)).map((t=>t.tissueSiteDetailId));["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach((t=>{if(!n[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`})),n=0==e?n:n.filter((t=>!r.includes(t.tissueSiteDetailId)));let i=n.reduce(((t,e)=>{let n=e.tissueSite,r={id:e.tissueSiteDetailId,name:e.tissueSiteDetail};return t.hasOwnProperty(n)||(t[n]=[]),t[n].push(r),t}),{});return Object.keys(i).forEach((t=>{if(1==i[t].length){let e=i[t][0];delete i[t],i[e.name]=[e]}})),i}(s,!1);!function(t,e,n=!1,r=!1,i=4){const o="tissue-group-main-level";ht(`#${e}`).selectAll("*").remove();const a=$("<div/>").attr("class","col-xs-12 col-md-12").appendTo($(`#${e}`));n?$(`<label class=${o}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(a):$(`<label class=${o}><input type="radio" name="allTissues" value="all"> All </label> <label class=${o}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(a),$('input[name="allTissues"]').change((function(){switch($(this).val()){case"all":$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0);break;case"reset":$(".tissueGroup").prop("checked",!1),$(".tissueSubGroup").prop("checked",!1)}}));let s=Object.keys(t).sort(((t,e)=>"Brain"==t?-1:"Brain"==e?1:t<e?-1:t>e?1:void 0)),l=Object.keys(t).reduce(((e,n)=>t[n].length>1?e+1+t[n].length:e+t[n].length),0),u=Math.ceil(l/i),c=l%i,f=Math.floor(12/i);const h=Pt(0,i).map((t=>$(`<div id="section${t}" class="col-xs-12 col-md-${f}">`).appendTo($(`#${e}`))));let d=0,p=0;s.forEach((e=>{let n=t[e];const r=e.replace(/ /g,"_");let i=n.length;i=1==i?i:i+1,0!=d&&i+d>u+c&&(d=0,h.length!=p+1&&(p+=1)),d+=i;let a=h[p];void 0===a&&console.error(`${e} has no defined session`),$(`<label class=${o}><input type="checkbox" id="${r}" class="tissueGroup"> <span>${e}</span></label><br/>`).appendTo(a),n.length>1&&n.sort(((t,e)=>t.id>e.id?1:t.id<e.id?-1:0)).forEach((function(t,e){let r=$(`<label class=tissue-group-sub-level><input type="checkbox" id="${t.id}" class="tissueSubGroup"> <span>${t.name}</span></label><br/>`).appendTo(a);e==n.length-1&&r.addClass("last-site"),r.click((function(){$('input[name="allTissues"]').prop("checked",!1)}))})),$("#"+r).click((function(){$('input[name="allTissues"]').prop("checked",!1),$("#"+r).is(":checked")?n.forEach((function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!0)})):n.forEach((function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!1)}))}))})),r&&($('input[name="allTissues"][value="all"]').prop("checked",!0),$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0))}(l,e),Xt(`#${n}`).click((function(){void 0!==a&&a(),Xt(`#${t}`).removeClass("show"),Xt(`#${t}`).removeClass("in");let n=Xt("#genes").val().replace(/ /g,"").replace(/\n/g,"").toUpperCase().split(",").filter((t=>""!=t));if(0==n.length)throw alert("Input Error: At least one gene must be provided."),"Gene input error";let s=function(t,e,n=!1){let r=[];return $(`#${e}`).find(":input").each((function(){if($(this).is(":checked")){const e=$(this).attr("id");if($(this).hasClass("tissueGroup")){let i=e.replace(/_/g," ");1==t[i].length&&(n?r.push(t[i][0].name):r.push(t[i][0].id))}else n?r.push($($(this).siblings()[0]).text()):r.push(e)}})),r.filter((t=>void 0!==t))}(l,e);if(0==s.length)throw alert("Input Error: At least one tissue must be selected."),"Tissue input error";ha(r,i,n,s,o)}))})).catch((function(t){console.error(t)}))}function ha(t,e,n,r=void 0,i=Ut(),o=void 0,a=void 0,s=void 0){Xt("#spinner").show(),Xt(`#${t}`).empty(),Xt(`#${e}`).empty();const l=Xt("<div/><br/>").attr("class","col-xs-12 col-md-12").css("color","firebrick").appendTo(`#${t}`);let u="";n.length>100&&(u="Warning: Too many genes. Input list truncated to the first 100. <br/>",n=n.slice(0,100));const c=[Kt(i.tissue),Kt(i.geneId+n.join("&geneId="))];Promise.all(c).then((function(c){const f=Yt(c[0]),h=function(t,e=!1,n=null){if(0==t.length)throw alert("No gene is found"),"Fatal Error: gene(s) not found";if(e){if(null===n)throw"Please provide a gene ID for search results validation";if(t.length>1){let e=t.filter((t=>t.geneSymbolUpper==n.toUpperCase()||t.gencodeId==n.toUpperCase()));if(e.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";if(0==e.length)throw alert("No gene is found with "+n),"Fatal Error: gene not found";t=e}return t[0]}return t}(c[1]);u+=function(t,e,n){let r="";if(0==e.length)r="Fatal Error: the gene list is empty.<br/>";else if(e.length<n.length){let t=[];e.forEach((e=>{t.push(e.gencodeId),t.push(e.geneSymbolUpper)}));let i=n.filter((e=>!t.includes(e.toLowerCase())&&!t.includes(e.toUpperCase())));i.length>0&&(r=`Warning: Not all genes are found: ${i.join(",")}<br/>`)}return r}(0,h,n);const d=h.map((t=>t.gencodeId)).join("&gencodeId="),p=void 0===r?void 0:r.join("&tissueSiteDetailId=");(async function(t){return await fetch(t).then((t=>t.json()))})(void 0===p?i.medGeneExp+"?gencodeId="+d:i.medGeneExp+"?gencodeId="+d+"&tissueSiteDetailId="+p).then((function(n){Xt("#spinner").hide();const c=function(t){const e="medianGeneExpression";if(!t.hasOwnProperty(e))throw"expression data json format error.";return 0==t.length?"No expression data found.":void 0}(n);if(void 0!==c)l.html(u+c);else{l.html(u);const c=function(t){const e="medianGeneExpression";if(0==t[e].length)throw"parseMedianExpression finds no data.";["median","tissueSiteDetailId","gencodeId"].forEach((n=>{if(!t[e][0].hasOwnProperty(n))throw console.error(t[e][0]),`Parsing Error: required json attribute is missing: ${n}`}));let n=t[e];return n.forEach((function(t){t.value=Number(t.median),t.x=t.tissueSiteDetailId,t.y=t.gencodeId,t.displayValue=Number(t.median),t.id=t.gencodeId})),n}(n),d={root:t,violin:e,svg:`${t}-svg`,tooltip:"heatmapTooltip",toolbar:"heatmapToolbar",clone:"heatmapClone",buttons:{save:"heatmapSave",filter:"heatmapFilter",sort:"heatmapSortTissue",cluster:"heatmapClusterTissue"}};["toolbar","clone"].forEach((t=>{Xt("<div/>").attr("id",d[t]).appendTo(Xt(`#${d.root}`))}));const p=25,g=25;let v=void 0===r?Math.ceil(window.innerWidth/f.length):Math.ceil(window.innerWidth/r.length);v=v>p?p:v<g?g:v;let y={top:50,right:250,bottom:170,left:10},m=100,b=void 0===r?v*f.length+m+y.right+y.left:v*r.length+m+y.right+y.left;const x=new er(b,m,100,y,12,10),w=new oa(n.clusters.tissue,n.clusters.gene,c,"YlGnBu",2,x,d.tooltip);h.length<3?w.render(d.root,d.svg,!0,!1):w.render(d.root,d.svg);const _=f.reduce(((t,e)=>{if(!e.hasOwnProperty("tissueSiteDetailId"))throw"tissue has not attr tissueSiteDetailId";return t[e.tissueSiteDetailId]=e,t}),{}),k=w.data.heatmap.reduce(((t,e)=>{if(!e.hasOwnProperty("gencodeId"))throw"gene has no attr gencodeId";return t[e.gencodeId]={geneSymbol:e.geneSymbol,color:void 0},t}),{});ht("#"+w.config.panels.main.id).selectAll(".exp-map-xlabel").text((t=>void 0===_[t]?t:_[t].tissueSiteDetail)),ht("#"+w.config.panels.main.id).selectAll(".exp-map-ylabel").text((t=>void 0===k[t]?t:k[t].geneSymbol)),pa(w,_),function(t,e,n,r=Ut(),i,o){let a=t.createToolbar(e.toolbar,t.tooltip);a.createDownloadSvgButton(e.buttons.save,e.svg,`${e.root}-save.svg`,e.clone);const s=()=>{const t=e.buttons.filter;a.createButton(t,"fa-filter"),ht(`#${t}`).on("click",(function(){ca(o,e.root,e.violin,r,!i)})).on("mouseover",(function(){i?a.tooltip.show("Include Mitochondrial Genes"):a.tooltip.show("Exclude Mitochondrial Genes")})).on("mouseout",(function(){a.tooltip.hide()}))},l=()=>{const r=e.buttons.sort;a.createButton(r,"fa-sort-alpha-down"),ht(`#${r}`).on("click",(function(){ht("#"+t.config.panels.top.id).style("display","None"),va(t.objects.heatmap.xList.sort(),t,n)})).on("mouseover",(function(){a.tooltip.show("Sort Tissues Alphabetically")})).on("mouseout",(function(){a.tooltip.hide()}))},u=()=>{const r=e.buttons.cluster;a.createButton(r,"fa-code-branch"),ht(`#${r}`).on("click",(function(){ht("#"+t.config.panels.top.id).style("display","Block"),va(t.objects.columnTree.xScale.domain(),t,n)})).on("mouseover",(function(){a.tooltip.show("Cluster Tissues")})).on("mouseout",(function(){a.tooltip.hide()}))};void 0!==i&&s();l(),u()}(w,d,_,i,o,s),function(t,e,n,r=Ut()){const i=t.visualComponents.svg,o=t.tooltip;t.data.external=[];const a=function(r){const a=ht(this);t.objects.heatmap.cellMouseover(r,i,a);const s=[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${void 0===e[r.x]?r.x:e[r.x].tissueSiteDetail}</span>`,`<span class="tooltip-key">Gene</span>: <span class="tooltip-value">${void 0===n[r.y]?r.y:n[r.y].geneSymbol}</span>`,`<span class="tooltip-key">Median TPM</span>: <span class="tooltip-value">${parseFloat(r.displayValue.toExponential()).toPrecision(4)}</span>`];o.show(s.join("<br/>"))},s=function(){i.selectAll("*").classed("highlighted",!1),o.hide()},l=Zn();(function(t){var e=[];for(var n in t)e.push(n);return e})(n).forEach(((t,e)=>{n[t].color=l[e]}));const u=function(i){let o=ht(this),a="";o.classed("clicked")?(o.classed("clicked",!1),a="delete"):(o.classed("clicked",!0),a="add"),function(t,e,n,r,i,o=Ut()){switch(t){case"delete":i.data.external=i.data.external.filter((t=>t.gencodeId!=e)),ga(i.data.external,i,r);break;case"add":{const t=o.geneExp+e,a={};a[e]=n[e].color;const s=i.objects.heatmap.xScale.domain();Kt(t).then((function(t){void 0===i.data.external&&(i.data.external=[]),i.data.external=i.data.external.concat(function(t,e=!0,n){return t.forEach((t=>{["data","tissueSiteDetailId","geneSymbol","gencodeId"].forEach((e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: required json attribute is missing: "+e})),t.values=e?t.data.map((t=>Math.log10(+t+1))):t.data,t.group=t.tissueSiteDetailId,t.label=t.geneSymbol,t.color=void 0===n?"#90c1c1":n[t.gencodeId]})),t}(t,!0,a)).filter((t=>s.indexOf(t.group)>-1)),ga(i.data.external,i,r)})).catch((function(t){console.error(t)}));break}default:console.warn("action not understood.")}}(a,i,n,e,t,r)};i.selectAll(".exp-map-cell").on("mouseover",a).on("mouseout",s),i.selectAll(".exp-map-ylabel").style("cursor","pointer").on("click",u)}(w,_,k,i),null!=a&&a()}})).catch((function(t){console.error(t)}))})).catch((function(t){console.error(t)}))}function da(t){vt(".exp-map-xlabel").filter((e=>e==t)).classed("query",!0)}function pa(t,e){const n=t.config.panels.main.id,r=t.objects.heatmap;let i=ht(`#${n}`).selectAll(".exp-map-xcolor").data(r.xList),o=ht(`#${n}`).selectAll(".leaf-color").data(r.xList);i.attr("x",(t=>r.xScale(t))).attr("y",r.yScale.range()[1]+5),o.attr("x",(t=>r.xScale(t))).attr("y",r.yScale.range()[0]-10),i.enter().append("rect").attr("x",(t=>r.xScale(t))).attr("y",r.yScale.range()[1]+5).attr("width",r.xScale.bandwidth()).attr("height",.5*r.yScale.bandwidth()).classed("exp-map-xcolor",!0).merge(i).style("fill",(t=>void 0===e[t]?"#000000":`#${e[t].colorHex}`)),i.exit().remove(),t.objects.heatmap.yScale.domain().length>15&&(o.enter().append("rect").attr("x",(t=>r.xScale(t))).attr("y",r.yScale.range()[0]-10).attr("width",r.xScale.bandwidth()).attr("height",.5*r.yScale.bandwidth()).classed("leaf-color",!0).merge(o).style("fill",(t=>void 0===e[t]?"#000000":`#${e[t].colorHex}`)),o.exit().remove())}function ga(t,e,n){const r={root:"violinRoot",tooltip:"violinTooltip",toolbar:"violinToolbar",clone:"violinClone",chart:"violinPlot",svg:"violinSvg",buttons:{save:"violinSave"}},i=`#${r.root}`,o=`#${r.tooltip}`;if(0==Xt(i).length)throw"Violin Plot Error: rootId does not exist.";0==Xt(o).length&&Xt("<div/>").attr("id",r.tooltip).appendTo(Xt("body")),ht(i).selectAll("*").remove(),["toolbar","chart","clone"].forEach((t=>{Xt("<div/>").attr("id",r[t]).appendTo(Xt(i))}));const a=()=>{ht(i).style("opacity",0)};0==t.length&&a();let s=e.objects.heatmap.xScale.domain().map((t=>({id:t,name:n[t].tissueSiteDetail})));const l=t.reduce(((t,e)=>(t[e.label]=1,t)),{}),u=Object.keys(l).length;0==u&&a();const c=new la(t),f=c.createTooltip(r.tooltip);c.createToolbar(r.toolbar,f).createDownloadSvgButton(r.buttons.save,r.svg,`${r.root}-save.svg`,r.clone),ht(i).style("opacity",1);const h=function(t=50,e=50,n=50,r=50){return{top:t,right:e,bottom:n,left:r}}(50,50,150,e.config.panels.main.x);let d=20*Object.keys(l).length*s.length;d=d<e.config.panels.main.w?e.config.panels.main.w:d;const p=function(t=1200,e=250,n){return{width:t,height:e,outerWidth:t+(n.left+n.right),outerHeight:e+(n.top+n.bottom)}}(d,150,h),g=ht(`#${r.chart}`).append("svg").attr("width",p.outerWidth).attr("height",p.outerHeight).attr("id",r.svg).append("g").attr("transform",`translate(${h.left}, ${h.top})`),v=1!=u,y={show:!0,angle:30,paddingOuter:.01,paddingInner:.3,textAnchor:"start",adjustHeight:p.height,hideLabels:!1,hideTicks:!1};c.render(g,p.width,p.height,s.map((t=>t.id)),[],y,{show:!1},{label:"log10(TPM+1)"},void 0,!0,v,!0,!0,0,void 0,"kdeScott");const m=Number(g.select("#violinLegend").select("rect").attr("width"));let b=Number(ht(`#${r.chart}`).select("svg").attr("width"));b=b<m+150?m+150:b,ht(`#${r.chart}`).select("svg").attr("width",b),function(t,e,n,r="top"){!function(t){const e=t.select(".violin-x-axis");e.attr("transform",`${e.attr("transform")} translate(0, 3)`)}(e);const i=e.selectAll(".violin-x-axis text");i.attr("transform",`translate(0, 8) ${i.attr("transform")}`);const o=e.append("g");o.selectAll(".tcolor").data(t.scale.x.domain()).enter().append("rect").classed("tcolor",!0).attr("x",(e=>t.scale.x(e))).attr("y","top"==r?t.scale.y.range()[1]:t.scale.y.range()[0]).attr("transform","translate(0, 14)").attr("width",t.scale.x.bandwidth()).attr("height",5).style("stroke-width",0).style("fill",(t=>`#${n[t].colorHex}`)).style("opacity",.7)}(c,g,n,"bottom"),function(t,e){t.select(".violin-x-axis").selectAll("text").text((t=>void 0===e[t]?t:e[t].tissueSiteDetail))}(g,n),function(t,e){t.dom.selectAll(".violin-g").on("mouseover",(n=>{const r=[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${e[n.tissueSiteDetailId].tissueSiteDetail}</span>`,`<span class="tooltip-key">Gene</span>: <span class="tooltip-value">${n.geneSymbol}</span>`,`<span class="tooltip-key">Median TPM</span>: <span class="tooltip-value">${Ft(n.data).toPrecision(4)}</span>`];t.tooltip.show(r.join("<br/>"))}))}(c,n)}function va(t,e,n){let r;const i=ht(".exp-map-xlabel.query");i.empty()||(r=i.datum());const o=ht("#"+e.config.panels.main.id),a=e.config.panels.main;e.objects.heatmap.redraw(o,t,e.objects.heatmap.yList,a),vt(".exp-map-xlabel").text((t=>void 0===n[t]?t:n[t].tissueSiteDetail)).classed("query",!1),pa(e,n),void 0!==r&&da(r),ht("#violinRoot").style("opacity",0),vt(".exp-map-ylabel").classed("clicked",!1),e.data.external=void 0}var ya={createDatasetMenu:ua,launchTopExpressed:ca,launch:fa,searchById:ha};t.ExpressionMap=ya,t.createDatasetMenu=ua,t.launch=fa,t.launchTopExpressed=ca,t.searchById=ha}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1tYXAuYnVuZGxlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zcGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zb3J0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3R5bGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi90ZXh0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbG93ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JlbW92ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbG9uZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NvdXJjZUV2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvcG9pbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tb3VzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdEFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2ZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vam9pbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jYWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbXB0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9tYXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbmVzdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9zZXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9kZXZpYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ZhcmlhbmNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVhbnRpbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21heC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVhbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVkaWFuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2d0ZXhEYXRhUGFyc2VyLmpzIiwiLi4vLi4vc3JjL3V0aWxzL3BhZ2luYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2luaXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2FycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9vcmRpbmFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9iYW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2NvbG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlckFycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9vYmplY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblByZWZpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvc2VxdWVudGlhbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NvbG9ycy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3JhbXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUGlZRy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QdU9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkQnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRHeS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsQnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0J1R24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL09yUmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR25CdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL0JsdWVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JlZW5zLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JleXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9QdXJwbGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvUmVkcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL09yYW5nZXMuanMiLCIuLi8uLi9zcmMvdXRpbHMvY29sb3ItdXRpbHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21pbi5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL0RlbmRyb0hlYXRtYXBDb25maWcuanMiLCIuLi8uLi9zcmMvdXRpbHMvZG9tLXV0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2NvdW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaEFmdGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hCZWZvcmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc3VtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3NvcnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvcGF0aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9hbmNlc3RvcnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZGVzY2VuZGFudHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvbGVhdmVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xpbmtzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2FycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2lkZW50aXR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2F4aXMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9EZW5kcm9ncmFtLmpzIiwiLi4vLi4vc3JjL3V0aWxzL25ld2ljay5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL1Rvb2xiYXIuanMiLCIuLi8uLi9zcmMvdXRpbHMvZG93bmxvYWQtdXRpbHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2Rpc3BhdGNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZXZlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvaW50ZXJydXB0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbnRlcnBvbGF0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyVHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0VHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi90cmFuc2l0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2N1YmljLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvZXZlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL25vZXZlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2JydXNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvdG91Y2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9kcmFnLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9kZWZhdWx0U291cmNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvdW5pZm9ybS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL25vcm1hbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2xvZ05vcm1hbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2lyd2luSGFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2xpbmVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvcG9pbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2FyZWEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2xpbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvUmVkQmxhY2tUcmVlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0VkZ2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2VsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2JhdGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvZXhwb25lbnRpYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2lyY2xlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0JlYWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0RpYWdyYW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvdHJhbnNmb3JtLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvVG9vbHRpcC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL0hlYXRtYXAuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9EZW5kcm9IZWF0bWFwLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMva2RlLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvR3JvdXBlZFZpb2xpbi5qcyIsIi4uLy4uL3NyYy9FeHByZXNzaW9uTWFwLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZ3RleE1lbnVCdWlsZGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL2tleXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2VcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZShmYWxzZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKHRydWUpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwidmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG5leHBvcnQgdmFyIGV2ZW50ID0gbnVsbDtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50KSkge1xuICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApO1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIDgpKSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQxKSB7XG4gICAgdmFyIGV2ZW50MCA9IGV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV2ZW50ID0gZXZlbnQxO1xuICAgIHRyeSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHRoaXMuX19kYXRhX18sIGluZGV4LCBncm91cCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICB2YXIgZXZlbnQwID0gZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICBldmVudCA9IGV2ZW50MTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0gZmluYWxseSB7XG4gICAgZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9qb2luIGZyb20gXCIuL2pvaW5cIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW1cIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBqb2luOiBzZWxlY3Rpb25fam9pbixcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaFxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcIi4vc2VsZWN0aW9uL29uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY3VycmVudCA9IGV2ZW50LCBzb3VyY2U7XG4gIHdoaWxlIChzb3VyY2UgPSBjdXJyZW50LnNvdXJjZUV2ZW50KSBjdXJyZW50ID0gc291cmNlO1xuICByZXR1cm4gY3VycmVudDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIGV2ZW50KSB7XG4gIHZhciBzdmcgPSBub2RlLm93bmVyU1ZHRWxlbWVudCB8fCBub2RlO1xuXG4gIGlmIChzdmcuY3JlYXRlU1ZHUG9pbnQpIHtcbiAgICB2YXIgcG9pbnQgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgcG9pbnQgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obm9kZS5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuICAgIHJldHVybiBbcG9pbnQueCwgcG9pbnQueV07XG4gIH1cblxuICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiBbZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdCAtIG5vZGUuY2xpZW50TGVmdCwgZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wIC0gbm9kZS5jbGllbnRUb3BdO1xufVxuIiwiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50XCI7XG5pbXBvcnQgcG9pbnQgZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICB2YXIgZXZlbnQgPSBzb3VyY2VFdmVudCgpO1xuICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIGV2ZW50ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gIHJldHVybiBwb2ludChub2RlLCBldmVudCk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbc2VsZWN0b3IgPT0gbnVsbCA/IFtdIDogc2VsZWN0b3JdLCByb290KTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yQWxsIGZyb20gXCIuLi9zZWxlY3RvckFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGVudGVyID0gdHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIiA/IG9uZW50ZXIoZW50ZXIpIDogZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgaWYgKG9udXBkYXRlICE9IG51bGwpIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7ICsrc2l6ZTsgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICA6IHRoaXMubm9kZSgpLl9fZGF0YV9fO1xufVxuIiwiZXhwb3J0IHZhciBwcmVmaXggPSBcIiRcIjtcblxuZnVuY3Rpb24gTWFwKCkge31cblxuTWFwLnByb3RvdHlwZSA9IG1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXAsXG4gIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHByb3BlcnR5ID0gcHJlZml4ICsga2V5O1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH0sXG4gIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSxcbiAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZW50cmllcy5wdXNoKHtrZXk6IHByb3BlcnR5LnNsaWNlKDEpLCB2YWx1ZTogdGhpc1twcm9wZXJ0eV19KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfSxcbiAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBlYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwKG9iamVjdCwgZikge1xuICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWFwKSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7IG1hcC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuXG4gIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgIG87XG5cbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgb2JqZWN0IHRvIG1hcC5cbiAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcDtcbiIsImltcG9ydCBtYXAgZnJvbSBcIi4vbWFwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IFtdLFxuICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICByb2xsdXAsXG4gICAgICBuZXN0O1xuXG4gIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGFycmF5LnNvcnQoc29ydFZhbHVlcyk7XG4gICAgICByZXR1cm4gcm9sbHVwICE9IG51bGwgPyByb2xsdXAoYXJyYXkpIDogYXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAga2V5VmFsdWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCgpLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkodmFsdWUgPSBhcnJheVtpXSkgKyBcIlwiKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZXNCeUtleS5zZXQoa2V5VmFsdWUsIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlc0J5S2V5LmVhY2goZnVuY3Rpb24odmFsdWVzLCBrZXkpIHtcbiAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyaWVzKG1hcCwgZGVwdGgpIHtcbiAgICBpZiAoKytkZXB0aCA+IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgaWYgKHJvbGx1cCAhPSBudWxsICYmIGRlcHRoID49IGtleXMubGVuZ3RoKSBhcnJheSA9IG1hcC5lbnRyaWVzKCk7XG4gICAgZWxzZSBhcnJheSA9IFtdLCBtYXAuZWFjaChmdW5jdGlvbih2LCBrKSB7IGFycmF5LnB1c2goe2tleTogaywgdmFsdWVzOiBlbnRyaWVzKHYsIGRlcHRoKX0pOyB9KTtcbiAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gIH1cblxuICByZXR1cm4gbmVzdCA9IHtcbiAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgIG1hcDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCk7IH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGVudHJpZXMoYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKSwgMCk7IH0sXG4gICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydEtleXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydFZhbHVlczogZnVuY3Rpb24ob3JkZXIpIHsgc29ydFZhbHVlcyA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gbWFwKCk7XG59XG5cbmZ1bmN0aW9uIHNldE1hcChtYXAsIGtleSwgdmFsdWUpIHtcbiAgbWFwLnNldChrZXksIHZhbHVlKTtcbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBtYXAsIHByZWZpeH0gZnJvbSBcIi4vbWFwXCI7XG5cbmZ1bmN0aW9uIFNldCgpIHt9XG5cbnZhciBwcm90byA9IG1hcC5wcm90b3R5cGU7XG5cblNldC5wcm90b3R5cGUgPSBzZXQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2V0LFxuICBoYXM6IHByb3RvLmhhcyxcbiAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhbHVlICs9IFwiXCI7XG4gICAgdGhpc1twcmVmaXggKyB2YWx1ZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBwcm90by5yZW1vdmUsXG4gIGNsZWFyOiBwcm90by5jbGVhcixcbiAgdmFsdWVzOiBwcm90by5rZXlzLFxuICBzaXplOiBwcm90by5zaXplLFxuICBlbXB0eTogcHJvdG8uZW1wdHksXG4gIGVhY2g6IHByb3RvLmVhY2hcbn07XG5cbmZ1bmN0aW9uIHNldChvYmplY3QsIGYpIHtcbiAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgZWxzZSBpZiAob2JqZWN0KSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKGYob2JqZWN0W2ldLCBpLCBvYmplY3QpKTtcbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBiaXNlY3RvciBmcm9tIFwiLi9iaXNlY3RvclwiO1xuXG52YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbmV4cG9ydCB2YXIgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgdmFyIGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG59XG4iLCJpbXBvcnQgdmFyaWFuY2UgZnJvbSBcIi4vdmFyaWFuY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgdmFyIHYgPSB2YXJpYW5jZShhcnJheSwgZik7XG4gIHJldHVybiB2ID8gTWF0aC5zcXJ0KHYpIDogdjtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtID0gMCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG1lYW4gPSAwLFxuICAgICAgdmFsdWUsXG4gICAgICBkZWx0YSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobSA+IDEpIHJldHVybiBzdW0gLyAobSAtIDEpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFttaW4sIG1heF07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICBzdGFydCA9ICtzdGFydCwgc3RvcCA9ICtzdG9wLCBzdGVwID0gKG4gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDIgPyAoc3RvcCA9IHN0YXJ0LCBzdGFydCA9IDAsIDEpIDogbiA8IDMgPyAxIDogK3N0ZXA7XG5cbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxuICAgICAgcmFuZ2UgPSBuZXcgQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICByYW5nZVtpXSA9IHN0YXJ0ICsgaSAqIHN0ZXA7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgKiBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgKiBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0YXJ0IC0gc3RvcCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgLSBpKSAvIHN0ZXA7XG4gIH1cblxuICBpZiAocmV2ZXJzZSkgdGlja3MucmV2ZXJzZSgpO1xuXG4gIHJldHVybiB0aWNrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBwb3dlciA9IE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcCkgLyBNYXRoLkxOMTApLFxuICAgICAgZXJyb3IgPSBzdGVwIC8gTWF0aC5wb3coMTAsIHBvd2VyKTtcbiAgcmV0dXJuIHBvd2VyID49IDBcbiAgICAgID8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSkgKiBNYXRoLnBvdygxMCwgcG93ZXIpXG4gICAgICA6IC1NYXRoLnBvdygxMCwgLXBvd2VyKSAvIChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHAsIHZhbHVlb2YpIHtcbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkgdmFsdWVvZiA9IG51bWJlcjtcbiAgaWYgKCEobiA9IHZhbHVlcy5sZW5ndGgpKSByZXR1cm47XG4gIGlmICgocCA9ICtwKSA8PSAwIHx8IG4gPCAyKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzWzBdLCAwLCB2YWx1ZXMpO1xuICBpZiAocCA+PSAxKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzW24gLSAxXSwgbiAtIDEsIHZhbHVlcyk7XG4gIHZhciBuLFxuICAgICAgaSA9IChuIC0gMSkgKiBwLFxuICAgICAgaTAgPSBNYXRoLmZsb29yKGkpLFxuICAgICAgdmFsdWUwID0gK3ZhbHVlb2YodmFsdWVzW2kwXSwgaTAsIHZhbHVlcyksXG4gICAgICB2YWx1ZTEgPSArdmFsdWVvZih2YWx1ZXNbaTAgKyAxXSwgaTAgKyAxLCB2YWx1ZXMpO1xuICByZXR1cm4gdmFsdWUwICsgKHZhbHVlMSAtIHZhbHVlMCkgKiAoaSAtIGkwKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXg7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IG4sXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBpZiAobSkgcmV0dXJuIHN1bSAvIG07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi9xdWFudGlsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBudW1iZXJzID0gW107XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBxdWFudGlsZShudW1iZXJzLnNvcnQoYXNjZW5kaW5nKSwgMC41KTtcbn1cbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My43LjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjMtMDgtMjhUMTM6MzdaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0IHRyYWMtMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuXHRcdC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuXHRcdC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG5cdFx0Ly8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuXHRcdC8vIFN1cHBvcnQ6IFF0V2ViIDw9My44LjUsIFdlYktpdCA8PTUzNC4zNCwgd2todG1sdG9wZGYgdG9vbCA8PTAuMTIuNVxuXHRcdC8vIFBsdXMgZm9yIG9sZCBXZWJLaXQsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCBjb2xsZWN0aW9uc1xuXHRcdC8vIChlLmcuLCBgdHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpID09PSBcImZ1bmN0aW9uXCJgKS4gKGdoLTQ3NTYpXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiICYmXG5cdFx0XHR0eXBlb2Ygb2JqLml0ZW0gIT09IFwiZnVuY3Rpb25cIjtcblx0fTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyIHZlcnNpb24gPSBcIjMuNy4xXCIsXG5cblx0cmh0bWxTdWZmaXggPSAvSFRNTCQvaSxcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblxuXHQvLyBSZXRyaWV2ZSB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcblx0dGV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5vZGUsXG5cdFx0XHRyZXQgPSBcIlwiLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHRcdHdoaWxlICggKCBub2RlID0gZWxlbVsgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0XHRyZXQgKz0galF1ZXJ5LnRleHQoIG5vZGUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9XG5cdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50RWxlbWVudC50ZXh0Q29udGVudDtcblx0XHR9XG5cdFx0aWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0XHR9XG5cblx0XHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdGlzWE1MRG9jOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZXNwYWNlID0gZWxlbSAmJiBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRcdGRvY0VsZW0gPSBlbGVtICYmICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGVcblx0XHQvLyBkb2N1bWVudCBmcmFnbWVudHMuXG5cdFx0cmV0dXJuICFyaHRtbFN1ZmZpeC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0XHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cblx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn1cbnZhciBwb3AgPSBhcnIucG9wO1xuXG5cbnZhciBzb3J0ID0gYXJyLnNvcnQ7XG5cblxudmFyIHNwbGljZSA9IGFyci5zcGxpY2U7XG5cblxudmFyIHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCI7XG5cblxudmFyIHJ0cmltQ1NTID0gbmV3IFJlZ0V4cChcblx0XCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIixcblx0XCJnXCJcbik7XG5cblxuXG5cbi8vIE5vdGU6IGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcbmpRdWVyeS5jb250YWlucyA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHR2YXIgYnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cblx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdFx0Ly8gSUUgZG9lc24ndCBoYXZlIGBjb250YWluc2Agb24gU1ZHLlxuXHRcdGEuY29udGFpbnMgP1xuXHRcdFx0YS5jb250YWlucyggYnVwICkgOlxuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdCkgKTtcbn07XG5cblxuXG5cbi8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG4vLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcbnZhciByY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFx4ODAtXFx1RkZGRlxcdy1dL2c7XG5cbmZ1bmN0aW9uIGZjc3Nlc2NhcGUoIGNoLCBhc0NvZGVQb2ludCApIHtcblx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHR9XG5cblx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcbn1cblxualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblxuXG5cbnZhciBwcmVmZXJyZWREb2MgPSBkb2N1bWVudCxcblx0cHVzaE5hdGl2ZSA9IHB1c2g7XG5cbiggZnVuY3Rpb24oKSB7XG5cbnZhciBpLFxuXHRFeHByLFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblx0cHVzaCA9IHB1c2hOYXRpdmUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRkb2N1bWVudCxcblx0ZG9jdW1lbnRFbGVtZW50LFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRtYXRjaGVzLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvLFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfFwiICtcblx0XHRcImxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwczovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRybGVhZGluZ0NvbWJpbmF0b3IgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdElEOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0Q0xBU1M6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0VEFHOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0QVRUUjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0UFNFVURPOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRDSElMRDogbmV3IFJlZ0V4cChcblx0XHRcdFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRib29sOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdG5lZWRzQ29udGV4dDogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdGlmICggbm9uSGV4ICkge1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdHJldHVybiBub25IZXg7XG5cdFx0fVxuXG5cdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRyZXR1cm4gaGlnaCA8IDAgP1xuXHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzOyBzZWUgYHNldERvY3VtZW50YC5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUUvRWRnZS5cblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIG5vZGVOYW1lKCBlbGVtLCBcImZpZWxkc2V0XCIgKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0ge1xuXHRcdGFwcGx5OiBmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSxcblx0XHRjYWxsOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKSApO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gZmluZCggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHVzaC5jYWxsKCByZXN1bHRzLCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0ZmluZC5jb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cHVzaC5jYWxsKCByZXN1bHRzLCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoICFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmxlYWRpbmdDb21iaW5hdG9yLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuXG5cdFx0XHRcdFx0Ly8gc3RyaWN0LWNvbXBhcmluZyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBqUXVlcnkuZXNjYXBlU2VsZWN0b3IoIG5pZCApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzXG5cdFx0Ly8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9pc3N1ZXMvMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgalF1ZXJ5IHNlbGVjdG9yIG1vZHVsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSB8fCBub2RlTmFtZSggZWxlbSwgXCJidXR0b25cIiApICkgJiZcblx0XHRcdGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMStcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBqUXVlcnkgc2VsZWN0b3IgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtub2RlXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5mdW5jdGlvbiBzZXREb2N1bWVudCggbm9kZSApIHtcblx0dmFyIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWpRdWVyeS5pc1hNTERvYyggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBpT1MgNyBvbmx5LCBJRSA5IC0gMTErXG5cdC8vIE9sZGVyIGJyb3dzZXJzIGRpZG4ndCBzdXBwb3J0IHVucHJlZml4ZWQgYG1hdGNoZXNgLlxuXHRtYXRjaGVzID0gZG9jdW1lbnRFbGVtZW50Lm1hdGNoZXMgfHxcblx0XHRkb2N1bWVudEVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jdW1lbnRFbGVtZW50Lm1zTWF0Y2hlc1NlbGVjdG9yO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzXG5cdC8vIChzZWUgdHJhYy0xMzkzNikuXG5cdC8vIExpbWl0IHRoZSBmaXggdG8gSUUgJiBFZGdlIExlZ2FjeTsgZGVzcGl0ZSBFZGdlIDE1KyBpbXBsZW1lbnRpbmcgYG1hdGNoZXNgLFxuXHQvLyBhbGwgSUUgOSsgYW5kIEVkZ2UgTGVnYWN5IHZlcnNpb25zIGltcGxlbWVudCBgbXNNYXRjaGVzU2VsZWN0b3JgIGFzIHdlbGwuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50Lm1zTWF0Y2hlc1NlbGVjdG9yICYmXG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBqUXVlcnkuZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8XG5cdFx0XHQhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGpRdWVyeS5leHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlLlxuXHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0cmV0dXJuIG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIElFL0VkZ2UgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlXCIgKTtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IENocm9tZSAxMDUgLSAxMTEgb25seSwgU2FmYXJpIDE1LjQgLSAxNi4zIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRoZSBgOmhhcygpYCBhcmd1bWVudCBpcyBwYXJzZWQgdW5mb3JnaXZpbmdseS5cblx0Ly8gV2UgaW5jbHVkZSBgKmAgaW4gdGhlIHRlc3QgdG8gZGV0ZWN0IGJ1Z2d5IGltcGxlbWVudGF0aW9ucyB0aGF0IGFyZVxuXHQvLyBfc2VsZWN0aXZlbHlfIGZvcmdpdmluZyAoc3BlY2lmaWNhbGx5IHdoZW4gdGhlIGxpc3QgaW5jbHVkZXMgYXQgbGVhc3Rcblx0Ly8gb25lIHZhbGlkIHNlbGVjdG9yKS5cblx0Ly8gTm90ZSB0aGF0IHdlIHRyZWF0IGNvbXBsZXRlIGxhY2sgb2Ygc3VwcG9ydCBmb3IgYDpoYXMoKWAgYXMgaWYgaXQgd2VyZVxuXHQvLyBzcGVjLWNvbXBsaWFudCBzdXBwb3J0LCB3aGljaCBpcyBmaW5lIGJlY2F1c2UgdXNlIG9mIGA6aGFzKClgIGluIHN1Y2hcblx0Ly8gZW52aXJvbm1lbnRzIHdpbGwgZmFpbCBpbiB0aGUgcVNBIHBhdGggYW5kIGZhbGwgYmFjayB0byBqUXVlcnkgdHJhdmVyc2FsXG5cdC8vIGFueXdheS5cblx0c3VwcG9ydC5jc3NIYXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCkge1xuXHRcdHRyeSB7XG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBcIjpoYXMoKiw6anFmYWtlKVwiICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXIuSUQgPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZC5JRCA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXIuSUQgPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kLklEID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmQuVEFHID0gZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdH1cblx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmQuQ0xBU1MgPSBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0cmJ1Z2d5UVNBID0gW107XG5cblx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHR2YXIgaW5wdXQ7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID1cblx0XHRcdFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJyBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgZGlzYWJsZWQ9J2Rpc2FibGVkJz5cIiArXG5cdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBpT1MgPD03IC0gOCBvbmx5XG5cdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseSBpbiBzb21lIFhNTCBkb2N1bWVudHNcblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDw9NyAtIDggb25seVxuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDggb25seVxuXHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0xMDUrLCBGaXJlZm94IDw9MTA0KywgU2FmYXJpIDw9MTUuNCtcblx0XHQvLyBJbiBzb21lIG9mIHRoZSBkb2N1bWVudCBraW5kcywgdGhlc2Ugc2VsZWN0b3JzIHdvdWxkbid0IHdvcmsgbmF0aXZlbHkuXG5cdFx0Ly8gVGhpcyBpcyBwcm9iYWJseSBPSyBidXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdlIHdhbnQgdG8gbWFpbnRhaW5cblx0XHQvLyBoYW5kbGluZyB0aGVtIHRocm91Z2ggalF1ZXJ5IHRyYXZlcnNhbCBpbiBqUXVlcnkgMy54LlxuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExK1xuXHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTEwNSssIEZpcmVmb3ggPD0xMDQrLCBTYWZhcmkgPD0xNS40K1xuXHRcdC8vIEluIHNvbWUgb2YgdGhlIGRvY3VtZW50IGtpbmRzLCB0aGVzZSBzZWxlY3RvcnMgd291bGRuJ3Qgd29yayBuYXRpdmVseS5cblx0XHQvLyBUaGlzIGlzIHByb2JhYmx5IE9LIGJ1dCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2Ugd2FudCB0byBtYWludGFpblxuXHRcdC8vIGhhbmRsaW5nIHRoZW0gdGhyb3VnaCBqUXVlcnkgdHJhdmVyc2FsIGluIGpRdWVyeSAzLnguXG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHR9XG5cdH0gKTtcblxuXHRpZiAoICFzdXBwb3J0LmNzc0hhcyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSAxMDUgLSAxMTArLCBTYWZhcmkgMTUuNCAtIDE2LjMrXG5cdFx0Ly8gT3VyIHJlZ3VsYXIgYHRyeS1jYXRjaGAgbWVjaGFuaXNtIGZhaWxzIHRvIGRldGVjdCBuYXRpdmVseS11bnN1cHBvcnRlZFxuXHRcdC8vIHBzZXVkby1jbGFzc2VzIGluc2lkZSBgOmhhcygpYCAoc3VjaCBhcyBgOmhhcyg6Y29udGFpbnMoXCJGb29cIikpYClcblx0XHQvLyBpbiBicm93c2VycyB0aGF0IHBhcnNlIHRoZSBgOmhhcygpYCBhcmd1bWVudCBhcyBhIGZvcmdpdmluZyBzZWxlY3RvciBsaXN0LlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMvI3JlbGF0aW9uYWwgbm93IHJlcXVpcmVzIHRoZSBhcmd1bWVudFxuXHRcdC8vIHRvIGJlIHBhcnNlZCB1bmZvcmdpdmluZ2x5LCBidXQgYnJvd3NlcnMgaGF2ZSBub3QgeWV0IGZ1bGx5IGFkanVzdGVkLlxuXHRcdHJidWdneVFTQS5wdXNoKCBcIjpoYXNcIiApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0ZmluZC5jb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRmaW5kLmNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZi5jYWxsKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufVxuXG5maW5kLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBmaW5kKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuZmluZC5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmaW5kKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuZmluZC5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblxuZmluZC5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSB0cmFjLTEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0aWYgKCB2YWwgIT09IHVuZGVmaW5lZCApIHtcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG59O1xuXG5maW5kLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cbmpRdWVyeS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdC8vXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjArXG5cdC8vIFRlc3RpbmcgZm9yIGRldGVjdGluZyBkdXBsaWNhdGVzIGlzIHVucHJlZGljdGFibGUgc28gaW5zdGVhZCBhc3N1bWUgd2UgY2FuJ3Rcblx0Ly8gZGVwZW5kIG9uIGR1cGxpY2F0ZSBkZXRlY3Rpb24gaW4gYWxsIGJyb3dzZXJzIHdpdGhvdXQgYSBzdGFibGUgc29ydC5cblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuc29ydFN0YWJsZTtcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiBzbGljZS5jYWxsKCByZXN1bHRzLCAwICk7XG5cdHNvcnQuY2FsbCggcmVzdWx0cywgc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRzcGxpY2UuY2FsbCggcmVzdWx0cywgZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG5qUXVlcnkuZm4udW5pcXVlU29ydCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS51bmlxdWVTb3J0KCBzbGljZS5hcHBseSggdGhpcyApICkgKTtcbn07XG5cbkV4cHIgPSBqUXVlcnkuZXhwciA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRBVFRSOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIiApXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0Q0hJTEQ6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0ZmluZC5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiIClcblx0XHRcdFx0KTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0ZmluZC5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFBTRVVETzogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwci5DSElMRC50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0VEFHOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBleHBlY3RlZE5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgZXhwZWN0ZWROb2RlTmFtZSApO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRDTEFTUzogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArXG5cdFx0XHRcdFx0XCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRBVFRSOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiPVwiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQgPT09IGNoZWNrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiIT1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ICE9PSBjaGVjaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIl49XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiKj1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIiQ9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApXG5cdFx0XHRcdFx0XHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwifD1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdENISUxEOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZU5hbWUoIG5vZGUsIG5hbWUgKSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IHBhcmVudFsgZXhwYW5kbyBdIHx8ICggcGFyZW50WyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlTmFtZSggbm9kZSwgbmFtZSApIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFBTRVVETzogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdGZpbmQuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBqUXVlcnkgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YuY2FsbCggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRub3Q6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvaXNzdWVzLzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0aGFzOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGZpbmQoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Y29udGFpbnM6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGpRdWVyeS50ZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0bGFuZzogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdGZpbmQuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0dGFyZ2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRyb290OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSxcblxuXHRcdGZvY3VzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmXG5cdFx0XHRcdGRvY3VtZW50Lmhhc0ZvY3VzKCkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0ZW5hYmxlZDogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0ZGlzYWJsZWQ6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRjaGVja2VkOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUoIGVsZW0sIFwib3B0aW9uXCIgKSAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0c2VsZWN0ZWQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG5cdFx0XHQvLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gdHJlYXQgdGhlIGRlZmF1bHQgb3B0aW9uIGFzXG5cdFx0XHQvLyBzZWxlY3RlZCB3aGVuIGluIGFuIG9wdGdyb3VwLlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdGVtcHR5OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zLmVtcHR5KCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRoZWFkZXI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRpbnB1dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdGJ1dHRvbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fFxuXHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJidXR0b25cIiApO1xuXHRcdH0sXG5cblx0XHR0ZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSAmJiBlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDEwIG9ubHlcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhclxuXHRcdFx0XHQvLyB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSApID09IG51bGwgfHxcblx0XHRcdFx0XHRhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRmaXJzdDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0bGFzdDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRlcTogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSApLFxuXG5cdFx0ZXZlbjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdG9kZDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdGx0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGk7XG5cblx0XHRcdGlmICggYXJndW1lbnQgPCAwICkge1xuXHRcdFx0XHRpID0gYXJndW1lbnQgKyBsZW5ndGg7XG5cdFx0XHR9IGVsc2UgaWYgKCBhcmd1bWVudCA+IGxlbmd0aCApIHtcblx0XHRcdFx0aSA9IGxlbmd0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGkgPSBhcmd1bWVudDtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdGd0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zLm50aCA9IEV4cHIucHNldWRvcy5lcTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG5mdW5jdGlvbiB0b2tlbml6ZSggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmxlYWRpbmdDb21iaW5hdG9yLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW1DU1MsIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0aWYgKCBwYXJzZU9ubHkgKSB7XG5cdFx0cmV0dXJuIHNvRmFyLmxlbmd0aDtcblx0fVxuXG5cdHJldHVybiBzb0ZhciA/XG5cdFx0ZmluZC5lcnJvciggc2VsZWN0b3IgKSA6XG5cblx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIG5vZGVOYW1lKCBlbGVtLCBza2lwICkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKCBvbGRDYWNoZSA9IG91dGVyQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0ZmluZCggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSwgbWF0Y2hlck91dCxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fFxuXHRcdFx0XHRtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zO1xuXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXG5cdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlclxuXHRcdFx0Ly8gb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdG1hdGNoZXJPdXQgPSBwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFtdIDpcblxuXHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0cmVzdWx0cztcblxuXHRcdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVySW47XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mLmNhbGwoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFsgaSBdICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFsgdGVtcCBdID0gISggcmVzdWx0c1sgdGVtcCBdID0gZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMCBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbIFwiIFwiIF0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudFxuXHRcdFx0Ly8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9pc3N1ZXMvMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBpIF0udHlwZSBdICkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvciggZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIgKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1sgaSBdLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zWyBpIF0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBqIF0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZC5UQUcoIFwiKlwiLCBvdXRlcm1vc3QgKSxcblxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKCBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSApLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogaU9TIDw9NyAtIDkgb25seVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nXG5cdFx0XHQvLyBlbGVtZW50cyBieSBpZC4gKHNlZSB0cmFjLTE0MTQyKVxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHB1c2guY2FsbCggcmVzdWx0cywgZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuZnVuY3Rpb24gY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsXG5cdFx0XHRtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn1cblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIGpRdWVyeSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggalF1ZXJ5IHNlbGVjdG9yIGNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5mdW5jdGlvbiBzZWxlY3QoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoICggc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvciApICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICggdG9rZW4gPSB0b2tlbnNbIDAgXSApLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kLklEKFxuXHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0Y29udGV4dFxuXHRcdFx0KSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1sgaSBdO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICggdHlwZSA9IHRva2VuLnR5cGUgKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKCBmaW5kID0gRXhwci5maW5kWyB0eXBlIF0gKSApIHtcblxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoIHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1sgMCBdLnR5cGUgKSAmJlxuXHRcdFx0XHRcdFx0dGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCAtIDQuMStcbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCBcIlwiICkuc29ydCggc29ydE9yZGVyICkuam9pbiggXCJcIiApID09PSBleHBhbmRvO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgLSA0LjErXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbmpRdWVyeS5maW5kID0gZmluZDtcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IGpRdWVyeS51bmlxdWVTb3J0O1xuXG4vLyBUaGVzZSBoYXZlIGFsd2F5cyBiZWVuIHByaXZhdGUsIGJ1dCB0aGV5IHVzZWQgdG8gYmUgZG9jdW1lbnRlZCBhcyBwYXJ0IG9mXG4vLyBTaXp6bGUgc28gbGV0J3MgbWFpbnRhaW4gdGhlbSBmb3Igbm93IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBwdXJwb3Nlcy5cbmZpbmQuY29tcGlsZSA9IGNvbXBpbGU7XG5maW5kLnNlbGVjdCA9IHNlbGVjdDtcbmZpbmQuc2V0RG9jdW1lbnQgPSBzZXREb2N1bWVudDtcbmZpbmQudG9rZW5pemUgPSB0b2tlbml6ZTtcblxuZmluZC5lc2NhcGUgPSBqUXVlcnkuZXNjYXBlU2VsZWN0b3I7XG5maW5kLmdldFRleHQgPSBqUXVlcnkudGV4dDtcbmZpbmQuaXNYTUwgPSBqUXVlcnkuaXNYTUxEb2M7XG5maW5kLnNlbGVjdG9ycyA9IGpRdWVyeS5leHByO1xuZmluZC5zdXBwb3J0ID0galF1ZXJ5LnN1cHBvcnQ7XG5maW5kLnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlU29ydDtcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cbn0gKSgpO1xuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICh0cmFjLTk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICh0cmFjLTExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBqUXVlcnkjZmluZFxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLmVycm9yICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIGVycm9yLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldEVycm9ySG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MuZXJyb3IgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0RXJyb3JIb29rKCk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgZGVwcmVjYXRlZCBhbGlhcyBvZiB0aGUgYWJvdmUuIFdoaWxlIHRoZSBuYW1lIHN1Z2dlc3RzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gcmV0dXJuaW5nIHRoZSBzdGFjaywgbm90IGFuIGVycm9yIGluc3RhbmNlLCBqUXVlcnkganVzdCBwYXNzZXNcblx0XHRcdFx0XHRcdFx0XHQvLyBpdCBkaXJlY3RseSB0byBgY29uc29sZS53YXJuYCBzbyBib3RoIHdpbGwgd29yazsgYW4gaW5zdGFuY2Vcblx0XHRcdFx0XHRcdFx0XHQvLyBqdXN0IGJldHRlciBjb29wZXJhdGVzIHdpdGggc291cmNlIG1hcHMuXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MuZXJyb3IgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgcHJpbWFyeSBEZWZlcnJlZFxuXHRcdFx0cHJpbWFyeSA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRwcmltYXJ5LnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBwcmltYXJ5LmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIHByaW1hcnkucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggcHJpbWFyeS5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gcHJpbWFyeS50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBwcmltYXJ5LnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmltYXJ5LnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxuLy8gSWYgYGpRdWVyeS5EZWZlcnJlZC5nZXRFcnJvckhvb2tgIGlzIGRlZmluZWQsIGBhc3luY0Vycm9yYCBpcyBhbiBlcnJvclxuLy8gY2FwdHVyZWQgYmVmb3JlIHRoZSBhc3luYyBiYXJyaWVyIHRvIGdldCB0aGUgb3JpZ2luYWwgZXJyb3IgY2F1c2Vcbi8vIHdoaWNoIG1heSBvdGhlcndpc2UgYmUgaGlkZGVuLlxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIGFzeW5jRXJyb3IgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLFxuXHRcdFx0ZXJyb3Iuc3RhY2ssIGFzeW5jRXJyb3IgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlIHRyYWMtNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggX2FsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICh0cmFjLTk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSB0cmFjLTgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICh0cmFjLTE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICh0cmFjLTExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAodHJhYy0xNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAodHJhYy0xMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKHRyYWMtMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICh0cmFjLTEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhciBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAodHJhYy0xMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKHRyYWMtNjkxMSwgdHJhYy04MTY1LCB0cmFjLTExMzgyLCB0cmFjLTExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKHRyYWMtMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgaXNTZXR1cCApIHtcblxuXHQvLyBNaXNzaW5nIGBpc1NldHVwYCBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWlzU2V0dXAgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdGlmICggIXNhdmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nXG5cdFx0XHRcdC8vIHRoZSBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQgKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXHRcdFx0XHRcdHNhdmVkWyAwIF0sXG5cdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdCkgKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50IGJ5IGFsbCBqUXVlcnkgaGFuZGxlcnMgd2hpbGUgYWxsb3dpbmdcblx0XHRcdFx0Ly8gbmF0aXZlIGhhbmRsZXJzIG9uIHRoZSBzYW1lIGVsZW1lbnQgdG8gcnVuLiBPbiB0YXJnZXQsIHRoaXMgaXMgYWNoaWV2ZWRcblx0XHRcdFx0Ly8gYnkgc3RvcHBpbmcgaW1tZWRpYXRlIHByb3BhZ2F0aW9uIGp1c3Qgb24gdGhlIGpRdWVyeSBldmVudC4gSG93ZXZlcixcblx0XHRcdFx0Ly8gdGhlIG5hdGl2ZSBldmVudCBpcyByZS13cmFwcGVkIGJ5IGEgalF1ZXJ5IG9uZSBvbiBlYWNoIGxldmVsIG9mIHRoZVxuXHRcdFx0XHQvLyBwcm9wYWdhdGlvbiBzbyB0aGUgb25seSB3YXkgdG8gc3RvcCBpdCBmb3IgalF1ZXJ5IGlzIHRvIHN0b3AgaXQgZm9yXG5cdFx0XHRcdC8vIGV2ZXJ5b25lIHZpYSBuYXRpdmUgYHN0b3BQcm9wYWdhdGlvbigpYC4gVGhpcyBpcyBub3QgYSBwcm9ibGVtIGZvclxuXHRcdFx0XHQvLyBmb2N1cy9ibHVyIHdoaWNoIGRvbid0IGJ1YmJsZSwgYnV0IGl0IGRvZXMgYWxzbyBzdG9wIGNsaWNrIG9uIGNoZWNrYm94ZXNcblx0XHRcdFx0Ly8gYW5kIHJhZGlvcy4gV2UgYWNjZXB0IHRoaXMgbGltaXRhdGlvbi5cblx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICh0cmFjLTUwNCwgdHJhYy0xMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXHR3aGljaDogdHJ1ZVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblxuXHRmdW5jdGlvbiBmb2N1c01hcHBlZEhhbmRsZXIoIG5hdGl2ZUV2ZW50ICkge1xuXHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBmb2N1c2luL2ZvY3Vzb3V0IGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHNcblx0XHRcdC8vIGZvY3VzL2JsdXIuIFRoaXMgaXMgYmVjYXVzZSB0aGUgZm9ybWVyIGFyZSBzeW5jaHJvbm91cyBpbiBJRSB3aGlsZSB0aGUgbGF0dGVyXG5cdFx0XHQvLyBhcmUgYXN5bmMuIEluIG90aGVyIGJyb3dzZXJzLCBhbGwgdGhvc2UgaGFuZGxlcnMgYXJlIGludm9rZWQgc3luY2hyb25vdXNseS5cblxuXHRcdFx0Ly8gYGhhbmRsZWAgZnJvbSBwcml2YXRlIGRhdGEgd291bGQgYWxyZWFkeSB3cmFwIHRoZSBldmVudCwgYnV0IHdlIG5lZWRcblx0XHRcdC8vIHRvIGNoYW5nZSB0aGUgYHR5cGVgIGhlcmUuXG5cdFx0XHR2YXIgaGFuZGxlID0gZGF0YVByaXYuZ2V0KCB0aGlzLCBcImhhbmRsZVwiICksXG5cdFx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblx0XHRcdGV2ZW50LnR5cGUgPSBuYXRpdmVFdmVudC50eXBlID09PSBcImZvY3VzaW5cIiA/IFwiZm9jdXNcIiA6IFwiYmx1clwiO1xuXHRcdFx0ZXZlbnQuaXNTaW11bGF0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBGaXJzdCwgaGFuZGxlIGZvY3VzaW4vZm9jdXNvdXRcblx0XHRcdGhhbmRsZSggbmF0aXZlRXZlbnQgKTtcblxuXHRcdFx0Ly8gLi4udGhlbiwgaGFuZGxlIGZvY3VzL2JsdXJcblx0XHRcdC8vXG5cdFx0XHQvLyBmb2N1cy9ibHVyIGRvbid0IGJ1YmJsZSB3aGlsZSBmb2N1c2luL2ZvY3Vzb3V0IGRvOyBzaW11bGF0ZSB0aGUgZm9ybWVyIGJ5IG9ubHlcblx0XHRcdC8vIGludm9raW5nIHRoZSBoYW5kbGVyIGF0IHRoZSBsb3dlciBsZXZlbC5cblx0XHRcdGlmICggZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICkge1xuXG5cdFx0XHRcdC8vIFRoZSBzZXR1cCBwYXJ0IGNhbGxzIGBsZXZlcmFnZU5hdGl2ZWAsIHdoaWNoLCBpbiB0dXJuLCBjYWxsc1xuXHRcdFx0XHQvLyBgalF1ZXJ5LmV2ZW50LmFkZGAsIHNvIGV2ZW50IGhhbmRsZSB3aWxsIGFscmVhZHkgaGF2ZSBiZWVuIHNldFxuXHRcdFx0XHQvLyBieSB0aGlzIHBvaW50LlxuXHRcdFx0XHRoYW5kbGUoIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIG5vbi1JRSBicm93c2VycywgYXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudFxuXHRcdFx0Ly8gd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0LlxuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBkZWxlZ2F0ZVR5cGUsIG5hdGl2ZUV2ZW50LnRhcmdldCxcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSApO1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBhdHRhY2hlcztcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCB0cnVlICk7XG5cblx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHRcdFx0Ly8gV2UgdXNlIHRoZSBzYW1lIG5hdGl2ZSBoYW5kbGVyIGZvciBmb2N1c2luICYgZm9jdXMgKGFuZCBmb2N1c291dCAmIGJsdXIpXG5cdFx0XHRcdC8vIHNvIHdlIG5lZWQgdG8gY29vcmRpbmF0ZSBzZXR1cCAmIHRlYXJkb3duIHBhcnRzIGJldHdlZW4gdGhvc2UgZXZlbnRzLlxuXHRcdFx0XHQvLyBVc2UgYGRlbGVnYXRlVHlwZWAgYXMgdGhlIGtleSBhcyBgdHlwZWAgaXMgYWxyZWFkeSB1c2VkIGJ5IGBsZXZlcmFnZU5hdGl2ZWAuXG5cdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuZ2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUgKTtcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgZGVsZWdhdGVUeXBlLCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGF0dGFjaGVzO1xuXG5cdFx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIGRlbGVnYXRlVHlwZSApIC0gMTtcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggdGhpcywgZGVsZWdhdGVUeXBlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGluZGljYXRlIHN0YW5kYXJkIHRlYXJkb3duIHNob3VsZCBiZSBhcHBsaWVkXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZVxuXHRcdC8vIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBldmVudC50YXJnZXQsIHR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcblx0Ly8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuXHQvLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuXHQvL1xuXHQvLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcblx0Ly8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG5cdC8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuXHQvLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuXHQvL1xuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdC8vIFRvIHByZXNlcnZlIHJlbGF0aXZlIGZvY3VzaW4vZm9jdXMgJiBmb2N1c291dC9ibHVyIGV2ZW50IG9yZGVyIGd1YXJhbnRlZWQgb24gdGhlIDMueCBicmFuY2gsXG5cdC8vIGF0dGFjaCBhIHNpbmdsZSBoYW5kbGVyIGZvciBib3RoIGV2ZW50cyBpbiBJRS5cblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGRlbGVnYXRlVHlwZSBdID0ge1xuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRkYXRhSG9sZGVyID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlID8gdGhpcyA6IGRvYyxcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdFx0XHQvLyBXZSB1c2UgdGhlIHNhbWUgbmF0aXZlIGhhbmRsZXIgZm9yIGZvY3VzaW4gJiBmb2N1cyAoYW5kIGZvY3Vzb3V0ICYgYmx1cilcblx0XHRcdC8vIHNvIHdlIG5lZWQgdG8gY29vcmRpbmF0ZSBzZXR1cCAmIHRlYXJkb3duIHBhcnRzIGJldHdlZW4gdGhvc2UgZXZlbnRzLlxuXHRcdFx0Ly8gVXNlIGBkZWxlZ2F0ZVR5cGVgIGFzIHRoZSBrZXkgYXMgYHR5cGVgIGlzIGFscmVhZHkgdXNlZCBieSBgbGV2ZXJhZ2VOYXRpdmVgLlxuXHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXHRcdFx0XHRcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGRhdGFQcml2LnNldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlLCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHR9LFxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRkYXRhSG9sZGVyID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlID8gdGhpcyA6IGRvYyxcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSApIC0gMTtcblxuXHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXHRcdFx0XHRcdHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFQcml2LnNldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlLCBhdHRhY2hlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCFcXFtDREFUQVxcW3xcXF1cXF0+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKHRyYWMtODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmUtZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVud3JhcCBhIENEQVRBIHNlY3Rpb24gY29udGFpbmluZyBzY3JpcHQgY29udGVudHMuIFRoaXMgc2hvdWxkbid0IGJlXG5cdFx0XHRcdFx0XHRcdC8vIG5lZWRlZCBhcyBpbiBYTUwgZG9jdW1lbnRzIHRoZXkncmUgYWxyZWFkeSBub3QgdmlzaWJsZSB3aGVuXG5cdFx0XHRcdFx0XHRcdC8vIGluc3BlY3RpbmcgZWxlbWVudCBjb250ZW50cyBhbmQgaW4gSFRNTCBkb2N1bWVudHMgdGhleSBoYXZlIG5vXG5cdFx0XHRcdFx0XHRcdC8vIG1lYW5pbmcgYnV0IHdlJ3JlIHByZXNlcnZpbmcgdGhhdCBsb2dpYyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgd2lsbCBiZSByZW1vdmVkIGNvbXBsZXRlbHkgaW4gNC4wLiBTZWUgZ2gtNDkwNC5cblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBqUXVlcnkjZmluZCBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOlxuXHRcdFx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgcmN1c3RvbVByb3AgPSAvXi0tLztcblxuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAodHJhYy0xNTA5OCwgdHJhYy0xNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKHRyYWMtODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNzArXG5cdFx0Ly8gT25seSBGaXJlZm94IGluY2x1ZGVzIGJvcmRlciB3aWR0aHNcblx0XHQvLyBpbiBjb21wdXRlZCBkaW1lbnNpb25zLiAoZ2gtNDUyOSlcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlXCI7XG5cdFx0XHRcdHRyLnN0eWxlLmNzc1RleHQgPSBcImJveC1zaXppbmc6Y29udGVudC1ib3g7Ym9yZGVyOjFweCBzb2xpZFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSGVpZ2h0IHNldCB0aHJvdWdoIGNzc1RleHQgZG9lcyBub3QgZ2V0IGFwcGxpZWQuXG5cdFx0XHRcdC8vIENvbXB1dGVkIGhlaWdodCB0aGVuIGNvbWVzIGJhY2sgYXMgMC5cblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgOCBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEluIG91ciBib2R5QmFja2dyb3VuZC5odG1sIGlmcmFtZSxcblx0XHRcdFx0Ly8gZGlzcGxheSBmb3IgYWxsIGRpdiBlbGVtZW50cyBpcyBzZXQgdG8gXCJpbmxpbmVcIixcblx0XHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGEgcHJvYmxlbSBvbmx5IGluIEFuZHJvaWQgOCBDaHJvbWUgODYuXG5cdFx0XHRcdC8vIEVuc3VyaW5nIHRoZSBkaXYgaXMgYGRpc3BsYXk6IGJsb2NrYFxuXHRcdFx0XHQvLyBnZXRzIGFyb3VuZCB0aGlzIGlzc3VlLlxuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9ICggcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0LCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgsIDEwICkgKSA9PT0gdHIub2Zmc2V0SGVpZ2h0O1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksIHRyYWMtMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKGdoLTMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHQvLyBJRSBvbmx5IHN1cHBvcnRzIGBcImZsb2F0XCJgIGluIGBnZXRQcm9wZXJ0eVZhbHVlYDsgaW4gY29tcHV0ZWQgc3R5bGVzXG5cdFx0Ly8gaXQncyBvbmx5IGF2YWlsYWJsZSBhcyBgXCJjc3NGbG9hdFwiYC4gV2Ugbm8gbG9uZ2VyIG1vZGlmeSBwcm9wZXJ0aWVzXG5cdFx0Ly8gc2VudCB0byBgLmNzcygpYCBhcGFydCBmcm9tIGNhbWVsQ2FzaW5nLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGJvdGguXG5cdFx0Ly8gTm9ybWFsbHksIHRoaXMgd291bGQgY3JlYXRlIGRpZmZlcmVuY2UgaW4gYmVoYXZpb3I6IGlmXG5cdFx0Ly8gYGdldFByb3BlcnR5VmFsdWVgIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLCB0aGUgdmFsdWUgcmV0dXJuZWRcblx0XHQvLyBieSBgLmNzcygpYCB3b3VsZCBiZSBgdW5kZWZpbmVkYC4gVGhpcyBpcyB1c3VhbGx5IHRoZSBjYXNlIGZvclxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBlbGVtZW50cy4gSG93ZXZlciwgaW4gSUUgZXZlbiBkaXNjb25uZWN0ZWQgZWxlbWVudHNcblx0XHQvLyB3aXRoIG5vIHN0eWxlcyByZXR1cm4gYFwibm9uZVwiYCBmb3IgYGdldFByb3BlcnR5VmFsdWUoIFwiZmxvYXRcIiApYFxuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCBpc0N1c3RvbVByb3AgJiYgcmV0ICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDEwNSssIENocm9tZSA8PTEwNStcblx0XHRcdC8vIFNwZWMgcmVxdWlyZXMgdHJpbW1pbmcgd2hpdGVzcGFjZSBmb3IgY3VzdG9tIHByb3BlcnRpZXMgKGdoLTQ5MjYpLlxuXHRcdFx0Ly8gRmlyZWZveCBvbmx5IHRyaW1zIGxlYWRpbmcgd2hpdGVzcGFjZS4gQ2hyb21lIGp1c3QgY29sbGFwc2VzXG5cdFx0XHQvLyBib3RoIGxlYWRpbmcgJiB0cmFpbGluZyB3aGl0ZXNwYWNlIHRvIGEgc2luZ2xlIHNwYWNlLlxuXHRcdFx0Ly9cblx0XHRcdC8vIEZhbGwgYmFjayB0byBgdW5kZWZpbmVkYCBpZiBlbXB0eSBzdHJpbmcgcmV0dXJuZWQuXG5cdFx0XHQvLyBUaGlzIGNvbGxhcHNlcyBhIG1pc3NpbmcgZGVmaW5pdGlvbiB3aXRoIHByb3BlcnR5IGRlZmluZWRcblx0XHRcdC8vIGFuZCBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIGJ1dCB0aGVyZSdzIG5vIHN0YW5kYXJkIEFQSVxuXHRcdFx0Ly8gYWxsb3dpbmcgdXMgdG8gZGlmZmVyZW50aWF0ZSB0aGVtIHdpdGhvdXQgYSBwZXJmb3JtYW5jZSBwZW5hbHR5XG5cdFx0XHQvLyBhbmQgcmV0dXJuaW5nIGB1bmRlZmluZWRgIGFsaWducyB3aXRoIG9sZGVyIGpRdWVyeS5cblx0XHRcdC8vXG5cdFx0XHQvLyBydHJpbUNTUyB0cmVhdHMgVSswMDBEIENBUlJJQUdFIFJFVFVSTiBhbmQgVSswMDBDIEZPUk0gRkVFRFxuXHRcdFx0Ly8gYXMgd2hpdGVzcGFjZSB3aGlsZSBDU1MgZG9lcyBub3QsIGJ1dCB0aGlzIGlzIG5vdCBhIHByb2JsZW1cblx0XHRcdC8vIGJlY2F1c2UgQ1NTIHByZXByb2Nlc3NpbmcgcmVwbGFjZXMgdGhlbSB3aXRoIFUrMDAwQSBMSU5FIEZFRURcblx0XHRcdC8vICh3aGljaCAqaXMqIENTUyB3aGl0ZXNwYWNlKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaW5wdXQtcHJlcHJvY2Vzc2luZ1xuXHRcdFx0cmV0ID0gcmV0LnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiQxXCIgKSB8fCB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwLFxuXHRcdG1hcmdpbkRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHQvLyBDb3VudCBtYXJnaW4gZGVsdGEgc2VwYXJhdGVseSB0byBvbmx5IGFkZCBpdCBhZnRlciBzY3JvbGwgZ3V0dGVyIGFkanVzdG1lbnQuXG5cdFx0Ly8gVGhpcyBpcyBuZWVkZWQgdG8gbWFrZSBuZWdhdGl2ZSBtYXJnaW5zIHdvcmsgd2l0aCBgb3V0ZXJIZWlnaHQoIHRydWUgKWAgKGdoLTM5ODIpLlxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0bWFyZ2luRGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhICsgbWFyZ2luRGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiB0cnVlLFxuXHRcdGFzcGVjdFJhdGlvOiB0cnVlLFxuXHRcdGJvcmRlckltYWdlU2xpY2U6IHRydWUsXG5cdFx0Y29sdW1uQ291bnQ6IHRydWUsXG5cdFx0ZmxleEdyb3c6IHRydWUsXG5cdFx0ZmxleFNocmluazogdHJ1ZSxcblx0XHRmb250V2VpZ2h0OiB0cnVlLFxuXHRcdGdyaWRBcmVhOiB0cnVlLFxuXHRcdGdyaWRDb2x1bW46IHRydWUsXG5cdFx0Z3JpZENvbHVtbkVuZDogdHJ1ZSxcblx0XHRncmlkQ29sdW1uU3RhcnQ6IHRydWUsXG5cdFx0Z3JpZFJvdzogdHJ1ZSxcblx0XHRncmlkUm93RW5kOiB0cnVlLFxuXHRcdGdyaWRSb3dTdGFydDogdHJ1ZSxcblx0XHRsaW5lSGVpZ2h0OiB0cnVlLFxuXHRcdG9wYWNpdHk6IHRydWUsXG5cdFx0b3JkZXI6IHRydWUsXG5cdFx0b3JwaGFuczogdHJ1ZSxcblx0XHRzY2FsZTogdHJ1ZSxcblx0XHR3aWRvd3M6IHRydWUsXG5cdFx0ekluZGV4OiB0cnVlLFxuXHRcdHpvb206IHRydWUsXG5cblx0XHQvLyBTVkctcmVsYXRlZFxuXHRcdGZpbGxPcGFjaXR5OiB0cnVlLFxuXHRcdGZsb29kT3BhY2l0eTogdHJ1ZSxcblx0XHRzdG9wT3BhY2l0eTogdHJ1ZSxcblx0XHRzdHJva2VNaXRlcmxpbWl0OiB0cnVlLFxuXHRcdHN0cm9rZU9wYWNpdHk6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKHRyYWMtNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnIHRyYWMtOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICh0cmFjLTcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAodHJhYy0xMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCAodHJhYy0xMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGN1ciwgY3VyVmFsdWUsIGNsYXNzTmFtZSwgaSwgZmluYWxWYWx1ZTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc05hbWVzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGN1ciA9IHRoaXMubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkgXTtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGFzc05hbWUgKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGN1ciwgY3VyVmFsdWUsIGNsYXNzTmFtZSwgaSwgZmluYWxWYWx1ZTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3NOYW1lcy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IHRoaXMubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGNsYXNzTmFtZSwgaSwgc2VsZixcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKHRyYWMtMTQ2ODYsIHRyYWMtMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICh0cmFjLTI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbCwgcGFyc2VyRXJyb3JFbGVtO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdHBhcnNlckVycm9yRWxlbSA9IHhtbCAmJiB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApWyAwIF07XG5cdGlmICggIXhtbCB8fCBwYXJzZXJFcnJvckVsZW0gKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIChcblx0XHRcdHBhcnNlckVycm9yRWxlbSA/XG5cdFx0XHRcdGpRdWVyeS5tYXAoIHBhcnNlckVycm9yRWxlbS5jaGlsZE5vZGVzLCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsLnRleHRDb250ZW50O1xuXHRcdFx0XHR9ICkuam9pbiggXCJcXG5cIiApIDpcblx0XHRcdFx0ZGF0YVxuXHRcdCkgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAodHJhYy05OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAodHJhYy05NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsICkgKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICh0cmFjLTYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9ICkubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vIHRyYWMtNzY1MywgdHJhYy04MTI1LCB0cmFjLTgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKHRyYWMtMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5vcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgdHJhYy05ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAodHJhYy0xMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCB0cmFjLTEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAodHJhYy0xNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vIHRyYWMtOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHQgYnV0IG5vdCBpZiBqc29ucFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwianNvblwiLCBzLmRhdGFUeXBlcyApIDwgMCApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAodHJhYy0xMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zLCBkb2MgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gdHJhYy0xNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgdHJhYy04NjA1LCB0cmFjLTE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyB0cmFjLTE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UuZ3VpZCsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHtcblx0XHRwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLFxuXHRcdGNvbnRlbnQ6IHR5cGUsXG5cdFx0XCJcIjogXCJvdXRlclwiICsgbmFtZVxuXHR9LCBmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzXG5cdFx0XHQub24oIFwibW91c2VlbnRlclwiLCBmbk92ZXIgKVxuXHRcdFx0Lm9uKCBcIm1vdXNlbGVhdmVcIiwgZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goXG5cdCggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH1cbik7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG4vLyBSZXF1aXJlIHRoYXQgdGhlIFwid2hpdGVzcGFjZSBydW5cIiBzdGFydHMgZnJvbSBhIG5vbi13aGl0ZXNwYWNlXG4vLyB0byBhdm9pZCBPKE5eMikgYmVoYXZpb3Igd2hlbiB0aGUgZW5naW5lIHdvdWxkIHRyeSBtYXRjaGluZyBcIlxccyskXCIgYXQgZWFjaCBzcGFjZSBwb3NpdGlvbi5cbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfChbXlxcc1xcdUZFRkZcXHhBMF0pW1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAodHJhYy03MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAodHJhYy0xMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgKi9cbi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cblwidXNlIHN0cmljdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEd0ZXhVcmxzKCl7XG4gICAgY29uc3QgaG9zdCA9IFwiaHR0cHM6Ly9ndGV4cG9ydGFsLm9yZy9hcGkvdjIvXCI7XG4gICAgY29uc3QgZGF0YXNldElkID0gXCJndGV4X3Y4XCI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gc2luZ2xlLWNlbGwgZXhwcmVzc2lvblxuICAgICAgICBzaW5nbGVDZWxsRXhwcmVzc2lvbjogXG4gICAgICAgICAgICBob3N0ICsgXCJleHByZXNzaW9uL3NpbmdsZU51Y2xldXNHZW5lRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF9zbnJuYXNlcV9waWxvdCZnZW5jb2RlSWQ9XCIsXG4gICAgICAgIHNpbmdsZUNlbGxFeHByZXNzaW9uU3VtbWFyeTpcbiAgICAgICAgICAgIGhvc3QgKyBcImV4cHJlc3Npb24vc2luZ2xlTnVjbGV1c0dlbmVFeHByZXNzaW9uU3VtbWFyeVwiLFxuXG4gICAgICAgIC8vIGVxdGwgRGFzaGJvYXJkIHNwZWNpZmljXG4gICAgICAgIGR5bmVxdGw6IGhvc3QgKyBcImFzc29jaWF0aW9uL2R5bmVxdGxcIixcbiAgICAgICAgc25wOiBob3N0ICsgXCJkYXRhc2V0L3ZhcmlhbnQ/c25wSWQ9XCIsXG4gICAgICAgIHZhcmlhbnRJZDogaG9zdCArIFwiZGF0YXNldC92YXJpYW50P3ZhcmlhbnRJZD1cIixcblxuICAgICAgICAvLyB0cmFuc2NyaXB0LCBleG9uLCBqdW5jdGlvbiBleHByZXNzaW9uIHNwZWNpZmljXG4gICAgICAgIGV4b25FeHA6IGhvc3QgKyBcImV4cHJlc3Npb24vY2x1c3RlcmVkTWVkaWFuRXhvbkV4cHJlc3Npb24/Z2VuY29kZUlkPVwiLFxuICAgICAgICB0cmFuc2NyaXB0RXhwOiBob3N0ICsgXCJleHByZXNzaW9uL2NsdXN0ZXJlZE1lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uP2dlbmNvZGVJZD1cIixcbiAgICAgICAganVuY3Rpb25FeHA6IGhvc3QgKyBcImV4cHJlc3Npb24vY2x1c3RlcmVkTWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uP2dlbmNvZGVJZD1cIixcbiAgICAgICAgdHJhbnNjcmlwdDogaG9zdCArIGByZWZlcmVuY2UvdHJhbnNjcmlwdD9kYXRhc2V0SWQ9JHtkYXRhc2V0SWR9JmdlbmNvZGVJZD1gLFxuICAgICAgICBcbiAgICAgICAgZXhvbjogaG9zdCArIGByZWZlcmVuY2UvZXhvbj9kYXRhc2V0SWQ9JHtkYXRhc2V0SWR9JmdlbmNvZGVJZD1gLFxuICAgICAgICBnZW5lTW9kZWw6IGhvc3QgKyBcImRhdGFzZXQvY29sbGFwc2VkR2VuZU1vZGVsRXhvbj9nZW5jb2RlSWQ9XCIsXG4gICAgICAgIGdlbmVNb2RlbFVuZmlsdGVyZWQ6IGhvc3QgKyBcImRhdGFzZXQvZnVsbENvbGxhcHNlZEdlbmVNb2RlbEV4b24/Z2VuY29kZUlkPVwiLFxuXG4gICAgICAgIC8vIGdlbmUgZXhwcmVzc2lvbiB2aW9saW4gcGxvdCBzcGVjaWZpY1xuICAgICAgICBnZW5lRXhwOiBob3N0ICsgXCJleHByZXNzaW9uL2dlbmVFeHByZXNzaW9uP2dlbmNvZGVJZD1cIixcblxuICAgICAgICAvLyBnZW5lIGV4cHJlc3Npb24gaGVhdCBtYXAgc3BlY2lmaWNcbiAgICAgICAgbWVkR2VuZUV4cDogaG9zdCArIFwiZXhwcmVzc2lvbi9jbHVzdGVyZWRNZWRpYW5HZW5lRXhwcmVzc2lvblwiLFxuICAgICAgICBcbiAgICAgICAgLy8gdG9wIGV4cHJlc3NlZCBnZW5lIGV4cHJlc3Npb24gc3BlY2lmaWNcbiAgICAgICAgdG9wSW5UaXNzdWVGaWx0ZXJlZDogaG9zdCArIFwiZXhwcmVzc2lvbi90b3BFeHByZXNzZWRHZW5lP2ZpbHRlck10R2VuZT10cnVlJnRpc3N1ZVNpdGVEZXRhaWxJZD1cIixcbiAgICAgICAgdG9wSW5UaXNzdWU6IGhvc3QgKyBcImV4cHJlc3Npb24vdG9wRXhwcmVzc2VkR2VuZT8mZmlsdGVyTXRHZW5lPWZhbHNlJnRpc3N1ZVNpdGVEZXRhaWxJZD1cIixcblxuICAgICAgICBnZW5lSWQ6IGhvc3QgKyBcInJlZmVyZW5jZS9nZW5lP2dlbmVJZD1cIixcblxuICAgICAgICAvLyB0aXNzdWUgbWVudSBzcGVjaWZpY1xuICAgICAgICB0aXNzdWU6IGhvc3QgKyBcImRhdGFzZXQvdGlzc3VlU2l0ZURldGFpbFwiLFxuXG4gICAgICAgIC8vIGxvY2FsIHN0YXRpYyBmaWxlc1xuICAgICAgICBzYW1wbGU6IFwidG1wU3VtbWFyeURhdGEvZ3RleC5TYW1wbGUuY3N2XCIsXG4gICAgICAgIHJuYXNlcUNyYW06IFwidG1wU3VtbWFyeURhdGEvcm5hc2VxX2NyYW1fZmlsZXNfdjdfZGJHYVBfMDExNTE2LnR4dFwiLFxuICAgICAgICB3Z3NDcmFtOiBcInRtcFN1bW1hcnlEYXRhL3dnc19jcmFtX2ZpbGVzX3Y3X2hnMzhfZGJHYVBfMDExNTE2LnR4dFwiLFxuXG4gICAgICAgIC8vIGFkZGl0aW9uYWwgZHluYW1pYyBRVEwgdXJsc1xuICAgICAgICBkeW5zcXRsOiBob3N0ICsgXCJhc3NvY2lhdGlvbi9keW5zcXRsXCIsXG5cbiAgICAgICAgLy8gZmlyZUNsb3VkXG4gICAgICAgIGZjQmlsbGluZzogXCJodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS9wcm9maWxlL2JpbGxpbmdcIixcbiAgICAgICAgZmNXb3JrU3BhY2U6IFwiaHR0cHM6Ly9hcGkuZmlyZWNsb3VkLm9yZy9hcGkvd29ya3NwYWNlc1wiLFxuICAgICAgICBmY1BvcnRhbFdvcmtTcGFjZTogXCJodHRwczovL3BvcnRhbC5maXJlY2xvdWQub3JnLyN3b3Jrc3BhY2VzXCJcbiAgICB9O1xufVxuXG4vKipcbiAqIHBhcnNlIEdURXggZHlucXRsIGpzb25cbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZHluYW1pYyBRVEwgd2ViIHNlcnZpY2VzXG4gKiBAcmV0dXJucyBkYXRhIHtKU09OfSBtb2RpZmllZCBkYXRhXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEeW5RdGwoanNvbil7XG4gICAgLy8gY2hlY2sgcmVxdWlyZWQganNvbiBhdHRyaWJ1dGVzXG4gICAgW1wiZGF0YVwiLCBcImdlbm90eXBlc1wiLCBcInBWYWx1ZVwiLCBcInBWYWx1ZVRocmVzaG9sZFwiLCBcInRpc3N1ZVNpdGVEZXRhaWxJZFwiXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGQpKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanNvbik7XG4gICAgICAgICAgICB0aHJvdyBcIlBhcnNlIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGpzb24uZXhwcmVzc2lvbl92YWx1ZXMgPSBqc29uLmRhdGEubWFwKChkKT0+cGFyc2VGbG9hdChkKSk7XG4gICAganNvbi5nZW5vdHlwZXMgPSBqc29uLmdlbm90eXBlcy5tYXAoKGQpPT5wYXJzZUZsb2F0KGQpKTtcblxuICAgIGpzb24uaG9tb1JlZkV4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09IDA7XG4gICAgfSk7XG4gICAganNvbi5ob21vQWx0RXhwID0ganNvbi5leHByZXNzaW9uX3ZhbHVlcy5maWx0ZXIoKGQsaSkgPT4ge1xuICAgICAgICByZXR1cm4ganNvbi5nZW5vdHlwZXNbaV0gPT0gMjtcbiAgICB9KTtcbiAgICBqc29uLmhldGVyb0V4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09IDE7XG4gICAgfSk7XG5cbiAgICAvLyBnZW5lcmF0ZSBnZW5vdHlwZSB0ZXh0IGxhYmVsc1xuICAgIGxldCByZWYgPSBqc29uLnZhcmlhbnRJZC5zcGxpdCgvXy8pWzJdO1xuICAgIGxldCBhbHQgPSBqc29uLnZhcmlhbnRJZC5zcGxpdCgvXy8pWzNdO1xuICAgIGpzb24uaGV0ID0gcmVmICsgYWx0O1xuICAgIGpzb24ucmVmID0gcmVmICsgcmVmO1xuICAgIGpzb24uYWx0ID0gYWx0ICsgYWx0O1xuXG4gICAgcmV0dXJuIGpzb247XG59XG5cblxuLyoqXG4gKiBQYXJzZSB0aGUgc2luZ2xlIHRpc3N1ZSBlcXRscyBmcm9tIEdURXggd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHBhcmFtIHRpc3N1ZVNpdGVUYWJsZSB7SnNvbn0gb3B0aW9uYWwgZm9yIG1hcHBpbmcgdGlzc3VlU2l0ZURldGFpbElkIHRvIHRpc3N1ZVNpdGVEZXRhaWwsIGEgZGljdGlvbmFyeSBvZiB0aXNzdWVTaXRlIG9iamVjdHMgKHdpdGggdGhlIGF0dHIgdGlzc3VlU2l0ZURldGFpbCkgaW5kZXhlZCBieSB0aXNzdWVTaXRlRGV0YWlsSWQsIGFuZFxuICogQHJldHVybnMge0xpc3R9IG9mIGVxdGxzIHdpdGggYXR0cmlidXRlcyByZXF1aXJlZCBmb3IgR0VWIHJlbmRlcmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTaW5nbGVUaXNzdWVFcXRscyhkYXRhLCB0aXNzdWVTaXRlVGFibGUgPSB1bmRlZmluZWQpe1xuICAgIGNvbnN0IGF0dHIgPSBcInNpbmdsZVRpc3N1ZUVxdGxcIjtcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBhdHRyaWJ1dGUgaXMgbm90IGZvdW5kOiBcIiArIGF0dHI7XG4gICAgW1widmFyaWFudElkXCIsIFwidGlzc3VlU2l0ZURldGFpbElkXCIsIFwibmVzXCIsIFwicFZhbHVlXCJdLmZvckVhY2goKGspPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShrKSkgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBhdHRyaWJ1dGUgaXMgbWlzc2luZzogXCIgKyBhdHRyO1xuICAgIH0pO1xuXG5cbiAgICByZXR1cm4gZGF0YVthdHRyXS5tYXAoKGQpPT57XG4gICAgICAgIGQueCA9IGQudmFyaWFudElkO1xuICAgICAgICBkLmRpc3BsYXlYID0gZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChkLnZhcmlhbnRJZCk7XG4gICAgICAgIGQueSA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBpZiAodGlzc3VlU2l0ZVRhYmxlKSBkLmRpc3BsYXlZID0gdGlzc3VlU2l0ZVRhYmxlW2QudGlzc3VlU2l0ZURldGFpbElkXS50aXNzdWVTaXRlRGV0YWlsO1xuICAgICAgICBkLnZhbHVlID0gZC5uZXM7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gZC5uZXMudG9QcmVjaXNpb24oMyk7XG4gICAgICAgIGQuciA9IC1NYXRoLmxvZzEwKGQucFZhbHVlKTsgLy8gc2V0IHIgdG8gYmUgdGhlIC1sb2cxMChwLXZhbHVlKVxuICAgICAgICBkLnJEaXNwbGF5VmFsdWUgPSBwYXJzZUZsb2F0KGQucFZhbHVlLnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oMyk7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBnZW5lcyBmcm9tIEdURXggd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVzKGRhdGEsIHNpbmdsZT1mYWxzZSwgZ2VuZUlkPW51bGwpe1xuICAgIGlmIChkYXRhLmxlbmd0aD09MCl7XG4gICAgICAgIGFsZXJ0KFwiTm8gZ2VuZSBpcyBmb3VuZFwiKTtcbiAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogZ2VuZShzKSBub3QgZm91bmRcIjtcbiAgICB9XG4gICAgaWYgKHNpbmdsZSl7XG4gICAgICAgIGlmIChnZW5lSWQgPT09IG51bGwpIHRocm93IFwiUGxlYXNlIHByb3ZpZGUgYSBnZW5lIElEIGZvciBzZWFyY2ggcmVzdWx0cyB2YWxpZGF0aW9uXCI7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aD4xKSB7IC8vIHdoZW4gYSBzaW5nbGUgZ2VuZSBJRCBoYXMgbXVsdGlwbGUgbWF0Y2hlc1xuICAgICAgICAgICAgbGV0IGZpbHRlcmVkID0gZGF0YS5maWx0ZXIoKGcpPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIGcuZ2VuZVN5bWJvbFVwcGVyPT1nZW5lSWQudG9VcHBlckNhc2UoKSB8fCBnLmdlbmNvZGVJZCA9PSBnZW5lSWQudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIkZhdGFsIEVycm9yOiBpbnB1dCBnZW5lIElEIGlzIG5vdCB1bmlxdWUuXCIpO1xuICAgICAgICAgICAgICAgIHRocm93IFwiRmF0YWwgRXJyb3I6IGlucHV0IGdlbmUgSUQgaXMgbm90IHVuaXF1ZS5cIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyZWQubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiTm8gZ2VuZSBpcyBmb3VuZCB3aXRoIFwiICsgZ2VuZUlkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIkZhdGFsIEVycm9yOiBnZW5lIG5vdCBmb3VuZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBkYXRhID0gZmlsdGVyZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGFbMF07XG4gICAgfVxuICAgIGVsc2UgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIHRpc3N1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3Vlcyhqc29uKXtcbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbXCJ0aXNzdWVTaXRlRGV0YWlsSWRcIiwgXCJ0aXNzdWVTaXRlRGV0YWlsXCIsIFwiY29sb3JIZXhcIl0uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFqc29uWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiBcIiArIGQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGpzb247XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXMgYW5kIHJldHVybiBhIGxvb2t1cCB0YWJsZSBpbmRleGVkIGJ5IHRpc3N1ZVNpdGVEZXRhaWxJZFxuICogQHBhcmFtIGpzb24gZnJvbSB3ZWIgc2VydmljZSB0aXNzdWVTaXRlRGV0YWlsXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlRGljdChqc29uKXtcbiAgICAvLyBjb25zdCBhdHRyID0gXCJ0aXNzdWVJbmZvXCI7XG4gICAgLy8gaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6IFwiICsgYXR0cjtcbiAgICAvLyBjb25zdCB0aXNzdWVzID0ganNvblthdHRyXTtcbiAgICAvLyBUT0RPOiBJdCdzIGEgYnVnIGluIHRoZSB3ZWIgc2VydmljZSB0aGF0IHRoZSBqc29uIG9iamVjdCBpcyBub3Qgd3JhcHBlZCBpbiBhIGtleVxuICAgIGNvbnN0IHRpc3N1ZXMgPSBqc29uO1xuICAgIC8vIHNhbml0eSBjaGVja1xuICAgIFtcInRpc3N1ZVNpdGVEZXRhaWxJZFwiLCBcInRpc3N1ZVNpdGVEZXRhaWxcIiwgXCJjb2xvckhleFwiXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6IFwiICsgZDtcbiAgICB9KTtcbiAgICByZXR1cm4gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PnthcnJbZC50aXNzdWVTaXRlRGV0YWlsSWRdID0gZDsgcmV0dXJuIGFycjt9LHt9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3VlcyBzYW1wbGUgY291bnRzLCBHVEV4IHJlbGVhc2Ugc3BlY2lmaWNcbiAqIEBwYXJhbSBqc29uIGZyb20gd2ViIHNlcnZpY2UgdGlzc3VlSW5mb1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVTYW1wbGVDb3VudHMoanNvbil7XG4gICAgY29uc3QgYXR0ciA9IFwidGlzc3VlSW5mb1wiO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiBcIiArIGF0dHI7XG4gICAgY29uc3QgdGlzc3VlcyA9IGpzb25bYXR0cl07XG5cbiAgICAvLyBjaGVjayBqc29uIHN0cnVjdHVyZVxuICAgIGNvbnN0IHRpc3N1ZSA9IHRpc3N1ZXNbMF07XG4gICAgaWYgKCF0aXNzdWUuaGFzT3duUHJvcGVydHkoXCJ0aXNzdWVTaXRlRGV0YWlsSWRcIikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0ciBpcyBtaXNzaW5nOiB0aXNzdWVTaXRlRGV0YWlsSWRcIjtcbiAgICBpZiAoIXRpc3N1ZS5oYXNPd25Qcm9wZXJ0eShcInJuYVNlcUFuZEdlbm90eXBlU2FtcGxlQ291bnRcIikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0ciBpcyBtaXNzaW5nOiBybmFTZXFBbmRHZW5vdHlwZVNhbXBsZUNvdW50XCI7XG4gICAgcmV0dXJuIHRpc3N1ZXM7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZSBncm91cHNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHBhcmFtIGZvckVxdGwge0Jvb2xlYW59IHJlc3RyaWN0IHRvIGVxdGwgdGlzc3Vlc1xuICogQHJldHVybnMge0RpY3Rpb25hcnl9IG9mIGxpc3RzIG9mIHRpc3N1ZXMgaW5kZXhlZCBieSB0aGUgdGlzc3VlIGdyb3VwIG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlU2l0ZXMoZGF0YSwgZm9yRXF0bD1mYWxzZSl7XG4gICAgLy8gdGhlIGxpc3Qgb2YgaW52YWxpZCBlcXRsIHRpc3N1ZXMgZHVlIHRvIHNhbXBsZSBzaXplIDwgNzBcbiAgICAvLyBhIGhhcmQtY29kZWQgbGlzdCBiZWNhdXNlIHRoZSBzYW1wbGUgc2l6ZSBpcyBub3QgZWFzeSB0byByZXRyaWV2ZVxuICAgIFxuICAgIGxldCB0aXNzdWVzID0gZGF0YTtcbiAgICBjb25zdCBpbnZhbGlkVGlzc3VlcyA9IHRpc3N1ZXMuZmlsdGVyKCh0KT0+dC5ybmFTZXFBbmRHZW5vdHlwZVNhbXBsZUNvdW50PD03MCkubWFwKCh0KT0+dC50aXNzdWVTaXRlRGV0YWlsSWQpOyAvL1tcIkJsYWRkZXJcIiwgXCJDZXJ2aXhfRWN0b2NlcnZpeFwiLCBcIkNlcnZpeF9FbmRvY2Vydml4XCIsIFwiRmFsbG9waWFuX1R1YmVcIiwgXCJLaWRuZXlfTWVkdWxsYVwiXTtcblxuICAgIFtcInRpc3N1ZVNpdGVcIixcInRpc3N1ZVNpdGVEZXRhaWxJZFwiLFwidGlzc3VlU2l0ZURldGFpbFwiXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IGBwYXJzZVRpc3N1ZVNpdGVzIGF0dHIgZXJyb3IuICR7ZH0gaXMgbm90IGZvdW5kYDtcbiAgICB9KTtcbiAgICB0aXNzdWVzID0gZm9yRXF0bD09ZmFsc2U/dGlzc3Vlczp0aXNzdWVzLmZpbHRlcigoZCk9PntyZXR1cm4gIWludmFsaWRUaXNzdWVzLmluY2x1ZGVzKGQudGlzc3VlU2l0ZURldGFpbElkKTt9KTsgLy8gYW4gYXJyYXkgb2YgdGlzc3VlU2l0ZURldGFpbElkIG9iamVjdHNcblxuICAgIC8vIGJ1aWxkIHRoZSB0aXNzdWVHcm91cHMgbG9va3VwIGRpY3Rpb25hcnkgaW5kZXhlZCBieSB0aGUgdGlzc3VlIGdyb3VwIG5hbWUgKGkuZS4gdGhlIHRpc3N1ZSBtYWluIHNpdGUgbmFtZSlcbiAgICBsZXQgdGlzc3VlR3JvdXBzID0gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PntcbiAgICAgICAgbGV0IGdyb3VwTmFtZSA9IGQudGlzc3VlU2l0ZTtcbiAgICAgICAgbGV0IHNpdGUgPSB7XG4gICAgICAgICAgICBpZDogZC50aXNzdWVTaXRlRGV0YWlsSWQsXG4gICAgICAgICAgICBuYW1lOiBkLnRpc3N1ZVNpdGVEZXRhaWxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFhcnIuaGFzT3duUHJvcGVydHkoZ3JvdXBOYW1lKSkgYXJyW2dyb3VwTmFtZV0gPSBbXTsgLy8gaW5pdGlhdGUgYW4gYXJyYXlcbiAgICAgICAgYXJyW2dyb3VwTmFtZV0ucHVzaChzaXRlKTtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9LCB7fSk7XG5cbiAgICAvLyBtb2RpZnkgdGhlIHRpc3N1ZSBncm91cHMgdGhhdCBoYXZlIG9ubHkgYSBzaW5nbGUgc2l0ZVxuICAgIC8vIGJ5IHJlcGxhY2luZyB0aGUgZ3JvdXAncyBuYW1lIHdpdGggdGhlIHNpbmdsZSBzaXRlJ3MgbmFtZSAtLSByZXN1bHRpbmcgYSBiZXR0ZXIgQWxwaGFiZXRpY2FsIG9yZGVyIG9mIHRoZSB0aXNzdWUgZ3JvdXBzXG5cbiAgICBPYmplY3Qua2V5cyh0aXNzdWVHcm91cHMpLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICh0aXNzdWVHcm91cHNbZF0ubGVuZ3RoID09IDEpeyAvLyBhIHNpbmdsZS1zaXRlIGdyb3VwXG4gICAgICAgICAgICBsZXQgc2l0ZSA9IHRpc3N1ZUdyb3Vwc1tkXVswXTsgLy8gdGhlIHNpbmdsZSBzaXRlXG4gICAgICAgICAgICBkZWxldGUgdGlzc3VlR3JvdXBzW2RdOyAvLyByZW1vdmUgdGhlIG9sZCBncm91cCBpbiB0aGUgZGljdGlvbmFyeVxuICAgICAgICAgICAgdGlzc3VlR3JvdXBzW3NpdGUubmFtZV0gPSBbc2l0ZV07IC8vIGNyZWF0ZSBhIG5ldyBncm91cCB3aXRoIHRoZSBzaXRlJ3MgbmFtZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRpc3N1ZUdyb3Vwcztcbn1cblxuXG4vKipcbiAqIHBhcnNlIHRoZSBleG9uc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcGFyYW0gZnVsbCB7Qm9vbGVhbn1cbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBleG9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNb2RlbEV4b25zKGpzb24pe1xuICAgIC8vY29uc3QgYXR0ciA9IGZ1bGw/XCJmdWxsQ29sbGFwc2VkR2VuZU1vZGVsRXhvblwiOlwiY29sbGFwc2VkR2VuZU1vZGVsRXhvblwiO1xuICAgIC8qaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpe1xuICAgICAgICBjb25zb2xlLmVycm9yKGpzb24pO1xuICAgICAgICB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IFJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IFwiICsgYXR0cjtcbiAgICB9Ki9cbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbXCJzdGFydFwiLCBcImVuZFwiXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWpzb25bMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IFwiUGFyc2luZyBFcnJvcjogUmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogXCIgKyBkO1xuICAgIH0pO1xuICAgIHJldHVybiBqc29uLm1hcCgoZCk9PntcbiAgICAgICAgZC5jaHJvbVN0YXJ0ID0gZC5zdGFydDtcbiAgICAgICAgZC5jaHJvbUVuZCA9IGQuZW5kO1xuICAgICAgICByZXR1cm4gZDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUganVuY3Rpb25zXG4gKiBAcGFyYW0gZGF0YVxuICogQHJldHVybnMge0xpc3R9IG9mIGp1bmN0aW9uc1xuICogLy8ganVuY3Rpb24gYW5ub3RhdGlvbnMgYXJlIG5vdCBzdG9yZWQgaW4gTW9uZ29cbiAgICAvLyBzbyBoZXJlIHdlIHVzZSB0aGUganVuY3Rpb24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZSB0byBwYXJzZSB0aGUganVuY3Rpb24gSUQgZm9yIGl0cyBnZW5vbWljIGxvY2F0aW9uXG4gICAgLy8gYXNzdW1pbmcgdGhhdCBlYWNoIHRpc3N1ZSBoYXMgdGhlIHNhbWUganVuY3Rpb25zLFxuICAgIC8vIHRvIGdyYWIgYWxsIHRoZSBrbm93biBqdW5jdGlvbnMgb2YgYSBnZW5lLCB3ZSBvbmx5IG5lZWQgdG8gcXVlcnkgb25lIHRpc3N1ZVxuICAgIC8vIGhlcmUgd2UgYXJiaXRyYXJpbHkgcGljayBMaXZlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnVuY3Rpb25zKGpzb24pe1xuXG4gICAgY29uc3QgYXR0ciA9IFwibWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uXCI7XG4gICAgXG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcGFyc2VKdW5jdGlvbnMgaW5wdXQgZXJyb3IuIFwiICsgYXR0cjtcbiAgICBpZiAoanNvblthdHRyXS5sZW5ndGggPT0gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGVyZSBpcyBubyBqdW5jdGlvbiBlbnRyeVwiKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICAvLyBjaGVjayByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZXNcbiAgICBbXCJ0aXNzdWVTaXRlRGV0YWlsSWRcIiwgXCJqdW5jdGlvbklkXCJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIC8vIHVzZSB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUganNvbiBvYmplY3RzIGFzIGEgdGVzdCBjYXNlXG4gICAgICAgIGlmKCFqc29uW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanNvblswXSk7XG4gICAgICAgICAgICB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGp1bmN0aW9uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGQ7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ganNvblthdHRyXS5maWx0ZXIoKGQpPT5kLnRpc3N1ZVNpdGVEZXRhaWxJZD09XCJMaXZlclwiKVxuICAgICAgICAubWFwKChkKSA9PiB7XG4gICAgICAgICAgICBsZXQgcG9zID0gZC5qdW5jdGlvbklkLnNwbGl0KFwiX1wiKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY2hyb206IHBvc1swXSxcbiAgICAgICAgICAgICAgICBjaHJvbVN0YXJ0OiBwb3NbMV0sXG4gICAgICAgICAgICAgICAgY2hyb21FbmQ6IHBvc1syXSxcbiAgICAgICAgICAgICAgICBqdW5jdGlvbklkOiBkLmp1bmN0aW9uSWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIHJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIHRyYW5zY3JpcHQgZXhvbiBvYmplY3QgbGlzdHMgaW5kZXhlZCBieSB0cmFuc2NyaXB0IElEcyAtLSBFTlNUIElEc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9ucyhqc29uKXtcbiAgICAvL2NvbnN0IGF0dHIgPSBcImV4b25cIjtcbiAgICAvL2lmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IGV4b25cIjtcbiAgICByZXR1cm4ganNvbi5yZWR1Y2UoKGEsIGQpPT57XG4gICAgICAgIC8vIGNoZWNrIHJlcXVpcmVkIGF0dHJpYnV0ZXNcbiAgICAgICAgW1widHJhbnNjcmlwdElkXCIsIFwiY2hyb21vc29tZVwiLCBcInN0YXJ0XCIsIFwiZW5kXCIsIFwiZXhvbk51bWJlclwiLCBcImV4b25JZFwiXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogXCIgKyBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFbZC50cmFuc2NyaXB0SWRdID09PSB1bmRlZmluZWQpIGFbZC50cmFuc2NyaXB0SWRdID0gW107XG4gICAgICAgIGQuY2hyb20gPSBkLmNocm9tb3NvbWU7XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGQuc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBkLmVuZDtcbiAgICAgICAgYVtkLnRyYW5zY3JpcHRJZF0ucHVzaChkKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfSwge30pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn0gZnJvbSB3ZWIgc2VydmljZSBleG9uXG4gKiByZXR1cm5zIGEgbGlzdCBvZiBhbGwgRXhvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXhvbnNUb0xpc3QoanNvbil7XG4gICAgY29uc3QgYXR0ciA9IFwiZXhvblwiO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IGV4b25cIjtcbiAgICByZXR1cm4ganNvblthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGlzb2Zvcm1zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn0gZnJvbSBHVEV4IHdlYiBzZXJ2aWNlICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9J1xuICogcmV0dXJucyBhIGxpc3Qgb2YgaXNvZm9ybSBvYmplY3RzIHNvcnRlZCBieSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0cyhqc29uKXtcbiAgICAvL2NvbnN0IGF0dHIgPSBcInRyYW5zY3JpcHRcIjtcbiAgICAvL2lmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyhcInBhcnNlSXNvZm9ybXMgaW5wdXQgZXJyb3JcIik7XG5cbiAgICAvLyBjaGVjayByZXF1aXJlZCBhdHRyaWJ1dGVzLCB1c2UgdGhlIGZpcnN0IHRyYW5zY3JpcHQgYXMgdGhlIHRlc3QgY2FzZVxuICAgIFtcInRyYW5zY3JpcHRJZFwiLCBcInN0YXJ0XCIsIFwiZW5kXCJdLmZvckVhY2goKGspPT57XG4gICAgICAgIGlmKCFqc29uWzBdLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IFwiICsgaztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGpzb24uc29ydCgoYSwgYik9PntcbiAgICAgICAgY29uc3QgbDEgPSBNYXRoLmFicyhhLmVuZCAtIGEuc3RhcnQpICsgMTtcbiAgICAgICAgY29uc3QgbDIgPSBNYXRoLmFicyhiLmVuZCAtIGIuc3RhcnQpICsgMTtcbiAgICAgICAgcmV0dXJuIC0obDEtbDIpOyAvLyBzb3J0IGJ5IGlzb2Zvcm0gbGVuZ3RoIGluIGRlc2NlbmRpbmcgb3JkZXJcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSBmaW5hbCAobWFza2VkKSBnZW5lIG1vZGVsIGV4b24gZXhwcmVzc2lvblxuICogZXhwcmVzc2lvbiBpcyBub3JtYWxpemVkIHRvIHJlYWRzIHBlciBrYlxuICogQHBhcmFtIGRhdGEge0pTT059IG9mIGV4b24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHBhcmFtIGV4b25zIHtMaXN0fSBvZiBleG9ucyB3aXRoIHBvc2l0aW9uc1xuICogQHJldHVybnMge0xpc3R9IG9mIGV4b24gb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9uRXhwcmVzc2lvbihkYXRhLCBleG9ucyl7XG4gICAgY29uc3QgZXhvbkRpY3QgPSBleG9ucy5yZWR1Y2UoKGEsIGQpPT57YVtkLmV4b25JZF0gPSBkOyByZXR1cm4gYTt9LCB7fSk7XG4gICAgY29uc3QgYXR0ciA9IFwibWVkaWFuRXhvbkV4cHJlc3Npb25cIjtcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coXCJwYXJzZUV4b25FeHByZXNzaW9uIGlucHV0IGVycm9yXCIpO1xuXG4gICAgY29uc3QgZXhvbk9iamVjdHMgPSBkYXRhW2F0dHJdO1xuICAgIC8vIGVycm9yLWNoZWNraW5nXG4gICAgW1wibWVkaWFuXCIsIFwiZXhvbklkXCIsIFwidGlzc3VlU2l0ZURldGFpbElkXCJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghZXhvbk9iamVjdHNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IFwiRmF0YWwgRXJyb3I6IHBhcnNlRXhvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6IFwiICsgZDtcbiAgICB9KTtcbiAgICAvLyBwYXJzZSBHVEV4IG1lZGlhbiBleG9uIGNvdW50c1xuICAgIGV4b25PYmplY3RzLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgY29uc3QgZXhvbiA9IGV4b25EaWN0W2QuZXhvbklkXTsgLy8gZm9yIHJldHJpZXZpbmcgZXhvbiBwb3NpdGlvbnNcbiAgICAgICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICAgICAgW1wiZW5kXCIsIFwic3RhcnRcIl0uZm9yRWFjaCgocCk9PntcbiAgICAgICAgICAgIGlmICghZXhvbi5oYXNPd25Qcm9wZXJ0eShwKSkgdGhyb3cgXCJGYXRhbCBFcnJvcjogcGFyc2VFeG9uRXhwcmVzc2lvbiBwb3NpdGlvbiBhdHRyIG5vdCBmb3VuZDogXCIgKyBwO1xuICAgICAgICB9KTtcbiAgICAgICAgZC5sID0gZXhvbi5lbmQgLSBleG9uLnN0YXJ0ICsgMTtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihkLm1lZGlhbikvZC5sO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihkLm1lZGlhbikvZC5sO1xuICAgICAgICBkLnggPSBkLmV4b25JZDtcbiAgICAgICAgZC55ID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC5jaHJvbVN0YXJ0ID0gZXhvbi5zdGFydDtcbiAgICAgICAgZC5jaHJvbUVuZCA9IGV4b24uZW5kO1xuICAgICAgICBkLnVuaXQgPSBcIm1lZGlhbiBcIiArIGQudW5pdCArIFwiIHBlciBiYXNlXCI7XG4gICAgICAgIGQudGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICB9KTtcbiAgICByZXR1cm4gZXhvbk9iamVjdHMuc29ydCgoYSxiKT0+e1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PGIuY2hyb21TdGFydCkgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PmIuY2hyb21TdGFydCkgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0pOyAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG59XG5cbi8qKlxuICogUGFyc2UganVuY3Rpb24gbWVkaWFuIHJlYWQgY291bnQgZGF0YVxuICogQHBhcmFtIGRhdGEge0pTT059IG9mIHRoZSBqdW5jdGlvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YganVuY3Rpb24gb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9IFwibWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uXCI7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KFwicGFyc2VKdW5jdGlvbkV4cHJlc3Npb24gaW5wdXQgZXJyb3JcIik7XG5cbiAgICBjb25zdCBqdW5jdGlvbnMgPSBkYXRhW2F0dHJdO1xuXG4gICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICBpZiAoanVuY3Rpb25zID09PSB1bmRlZmluZWQgfHwganVuY3Rpb25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIk5vIGp1bmN0aW9uIGRhdGEgZm91bmRcIik7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG5cbiAgICAvLyBwYXJzZSBHVEV4IG1lZGlhbiBqdW5jdGlvbiByZWFkIGNvdW50c1xuICAgIGp1bmN0aW9ucy5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFtcInRpc3N1ZVNpdGVEZXRhaWxJZFwiLCBcImp1bmN0aW9uSWRcIiwgXCJtZWRpYW5cIiwgXCJnZW5jb2RlSWRcIl0uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmICghZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJQYXJzaW5nciBFcnJvcjogcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6IFwiICsgaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgbGV0IHRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnggPSBkLmp1bmN0aW9uSWQ7XG4gICAgICAgIGQueSA9IHRpc3N1ZUlkO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgfSk7XG5cbiAgICAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG4gICAgcmV0dXJuIGp1bmN0aW9ucy5zb3J0KChhLGIpPT57XG4gICAgICAgIGlmIChhLmp1bmN0aW9uSWQ+Yi5qdW5jdGlvbklkKSByZXR1cm4gMTtcbiAgICAgICAgZWxzZSBpZiAoYS5qdW5jdGlvbklkPGIuanVuY3Rpb25JZCkgcmV0dXJuIC0xO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9IFwibWVkaWFuVHJhbnNjcmlwdEV4cHJlc3Npb25cIjtcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coXCJQYXJzaW5nIEVycm9yOiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uIGlucHV0IGVycm9yXCIpO1xuICAgIC8vIHBhcnNlIEdURXggaXNvZm9ybSBtZWRpYW4gVFBNXG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFtcIm1lZGlhblwiLCBcInRyYW5zY3JpcHRJZFwiLCBcInRpc3N1ZVNpdGVEZXRhaWxJZFwiLCBcImdlbmNvZGVJZFwiXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgdHJhbnNjaXB0IGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC54ID0gZC50cmFuc2NyaXB0SWQ7XG4gICAgICAgIGQueSA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgZXhwcmVzc2lvbiwgYW5kIHRyYW5zcG9zZSB0aGUgbWF0cml4XG4gKiBAcGFyYW0gZGF0YVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uVHJhbnNwb3NlKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSBcIm1lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uXCI7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihkYXRhKTtcbiAgICAgICAgdGhyb3coXCJQYXJzaW5nIEVycm9yOiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uVHJhbnNwb3NlIGlucHV0IGVycm9yLlwiKTtcbiAgICB9XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgW1wibWVkaWFuXCIsIFwidHJhbnNjcmlwdElkXCIsIFwidGlzc3VlU2l0ZURldGFpbElkXCIsIFwiZ2VuY29kZUlkXCJdLmZvckVhY2goKGspPT57XG4gICAgICAgICAgICBpZighZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3coXCJQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCB0cmFuc2NyaXB0IGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWVkaWFuID0gZC5tZWRpYW47XG4gICAgICAgIGNvbnN0IHRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIobWVkaWFuKTtcbiAgICAgICAgZC5kaXNwbGF5VmFsdWUgPSBOdW1iZXIobWVkaWFuKTtcbiAgICAgICAgZC55ID0gZC50cmFuc2NyaXB0SWQ7XG4gICAgICAgIGQueCA9IHRpc3N1ZUlkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIHBhcnNlIG1lZGlhbiBnZW5lIGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhIHtKc29ufSB3aXRoIGF0dHIgbWVkaWFuR2VuZUV4cHJlc3Npb25cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNZWRpYW5FeHByZXNzaW9uKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSBcIm1lZGlhbkdlbmVFeHByZXNzaW9uXCI7XG4gICAgLy9pZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGF0dHI7XG4gICAgLy8gcGFyc2UgR1RFeCBtZWRpYW4gZ2VuZSBleHByZXNzaW9uXG4gICAgLy8gZXJyb3ItY2hlY2tpbmcgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZXM6XG4gICAgaWYgKGRhdGFbYXR0cl0ubGVuZ3RoID09IDApIHRocm93IFwicGFyc2VNZWRpYW5FeHByZXNzaW9uIGZpbmRzIG5vIGRhdGEuXCI7XG4gICAgW1wibWVkaWFuXCIsIFwidGlzc3VlU2l0ZURldGFpbElkXCIsIFwiZ2VuY29kZUlkXCJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkYXRhW2F0dHJdWzBdKTtcbiAgICAgICAgICAgIHRocm93IGBQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAke2R9YDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGxldCByZXN1bHRzID0gZGF0YVthdHRyXTtcbiAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLnggPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC55ID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGEgZ3JvdXBlZCB2aW9saW4gcGxvdFxuICogQHBhcmFtIGRhdGEge0pTT059IGZyb20gR1RFeCBnZW5lIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBjb2xvcnMge0RpY3Rpb25hcnl9IHRoZSB2aW9saW4gY29sb3IgZm9yIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluKGRhdGEsIHVzZUxvZz10cnVlLCBjb2xvcnM9dW5kZWZpbmVkKXtcbiAgICAvL2NvbnN0IGF0dHIgPSBcImdlbmVFeHByZXNzaW9uXCI7XG4gICAgLy9pZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGF0dHI7XG4gICAgZGF0YS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBbXCJkYXRhXCIsIFwidGlzc3VlU2l0ZURldGFpbElkXCIsIFwiZ2VuZVN5bWJvbFwiLCBcImdlbmNvZGVJZFwiXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLnZhbHVlcyA9IHVzZUxvZz9kLmRhdGEubWFwKChkZCk9PntyZXR1cm4gTWF0aC5sb2cxMCgrZGQrMSk7fSk6ZC5kYXRhO1xuICAgICAgICBkLmdyb3VwID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQubGFiZWwgPSBkLmdlbmVTeW1ib2w7XG4gICAgICAgIGQuY29sb3IgPSBjb2xvcnM9PT11bmRlZmluZWQ/XCIjOTBjMWMxXCI6Y29sb3JzW2QuZ2VuY29kZUlkXTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUgTEQgKGxpbmthZ2UgZGlzZXF1aWxpYnJpdW0gZGF0YSlcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggbGQgd2ViIHNlcnZpY2VcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTEQoZGF0YSkge1xuICAgIGNvbnN0IGF0dHIgPSBcImxkXCI7XG4gICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IFwiICsgYXR0cjtcbiAgICBsZXQgcGFyc2VkID0gW107XG4gICAgbGV0IHVuaXF1ZSA9IHt9O1xuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBsZXQgbGFiZWxzID0gZFswXS5zcGxpdChcIixcIikuc29ydCgpOyAvLyBzb3J0IHRoZSB2YXJpYW50IElEc1xuICAgICAgICB1bmlxdWVbbGFiZWxzWzBdXSA9IHRydWU7XG4gICAgICAgIHVuaXF1ZVtsYWJlbHNbMV1dID0gdHJ1ZTtcbiAgICAgICAgcGFyc2VkLnB1c2goe1xuICAgICAgICAgICAgeDogbGFiZWxzWzBdLFxuICAgICAgICAgICAgZGlzcGxheVg6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQobGFiZWxzWzBdKSxcbiAgICAgICAgICAgIHk6IGxhYmVsc1sxXSxcbiAgICAgICAgICAgIGRpc3BsYXlZOiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGxhYmVsc1sxXSksXG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VGbG9hdChkWzFdKSxcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogcGFyc2VGbG9hdChkWzFdKS50b1ByZWNpc2lvbigzKSAvLyB0b1ByZWNpc2lvbigpIHJldHVybnMgYSBzdHJpbmdcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXModW5pcXVlKS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBwYXJzZWQucHVzaCh7XG4gICAgICAgICAgICB4OiBkLFxuICAgICAgICAgICAgZGlzcGxheVg6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoZCksXG4gICAgICAgICAgICB5OiBkLFxuICAgICAgICAgICAgZGlzcGxheVk6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoZCksXG4gICAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogXCIxXCJcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cblxuLyogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGJveHBsb3RcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZ2VuZSBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gdGlzc3VlcyB7T2JqZWN0fSBtYXBwaW5nIG9mIHRpc3N1ZSBpZHMgdG8gbGFiZWxzICh0aXNzdWUgbmFtZSlcbiAqIEBwYXJhbSBjb2xvcnMge09iamVjdH0gbWFwcGluZyBvZiB0aXNzdWUgaWRzIHRvIGJveHBsb3QgY29sb3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yQm94cGxvdChkYXRhLCB0aXNzdWVzPXVuZGVmaW5lZCwgY29sb3JzPXVuZGVmaW5lZCkge1xuICAgIGRhdGEuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgW1wiZGF0YVwiLCBcImdlbmNvZGVJZFwiLCBcImdlbmVTeW1ib2xcIiwgXCJ0aXNzdWVTaXRlRGV0YWlsSWRcIl0uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmICghZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgYFBhcnNpbmcgZXJyb3I6IHJlcXVpcmVkIEpTT04gYXR0cmlidXRlICR7a30gaXMgbWlzc2luZyBmcm9tIGEgcmVjb3JkLmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLmxhYmVsID0gdGlzc3Vlcz09PXVuZGVmaW5lZD9kLnRpc3N1ZVNpdGVEZXRhaWxJZDp0aXNzdWVzW2QudGlzc3VlU2l0ZURldGFpbElkXTtcbiAgICAgICAgZC5jb2xvciA9IGNvbG9ycz09PXVuZGVmaW5lZD9cIiM0NjgyYjRcIjpjb2xvcnNbZC50aXNzdWVTaXRlRGV0YWlsSWRdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogZ2VuZXJhdGUgdmFyaWFudCBJRCBzaG9ydGhhbmRcbiAqIEBwYXJhbSBpZFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoaWQpe1xuICAgIGxldCB0ZW1wID0gaWQuc3BsaXQoXCJfXCIpO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID09IDEgJiYgdGVtcFszXS5sZW5ndGggPT0gMSkgcmV0dXJuIGlkO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID4gdGVtcFszXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFsyXSA9IFwiZGVsXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDMsIDEpOyAvLyBkZWxldGUgdGhlIGFsdFxuICAgIH1cbiAgICBlbHNlIGlmKHRlbXBbM10ubGVuZ3RoID4gdGVtcFsyXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFszXSA9IFwiaW5zXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDIsIDEpOyAvLyBkZWxldGUgdGhlIHJlZlxuICAgIH1cbiAgICBlbHNlIHsgLy8gdGVtcFszXS5sZW5ndGggPT0gdGVtcFsyXS5sZW5ndGggYW5kIHRlbXBbM10ubGVuZ3RoID4gMVxuICAgICAgICB0ZW1wWzNdID0gXCJzdWJcIjtcbiAgICAgICAgdGVtcC5zcGxpY2UoMiwgMSk7IC8vIGRlbGV0ZSB0aGUgcmVmXG4gICAgfVxuICAgIHJldHVybiB0ZW1wLmpvaW4oXCJfXCIpO1xufVxuIiwiYXN5bmMgZnVuY3Rpb24gUmV0cmlldmVBbGxQYWdpbmF0ZWREYXRhKEJhc2VVUkwsIHBhZ2VTaXplPTI1MCkge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBsZXQgcmV0cmlldmVkRGF0YTtcbiAgICBsZXQgcGFnZU51bWJlciA9IDA7XG4gICAgZG8ge1xuICAgICAgICBjb25zdCByZXF1ZXN0VVJMID0gZ2VuZXJhdGVVUkwoQmFzZVVSTCwgcGFnZU51bWJlciwgcGFnZVNpemUpO1xuICAgICAgICByZXRyaWV2ZWREYXRhID0gYXdhaXQgZmV0Y2gocmVxdWVzdFVSTClcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHsgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsgfSk7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQocmV0cmlldmVkRGF0YS5kYXRhKTtcbiAgICAgICAgcGFnZU51bWJlciArPSAxO1xuICAgIH0gd2hpbGUgKHBhZ2VOdW1iZXIgPCByZXRyaWV2ZWREYXRhLnBhZ2luZ19pbmZvLm51bWJlck9mUGFnZXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIFJldHJpZXZlT25lUGFnZShCYXNlVVJMLCBwYWdlU2l6ZSwgcGFnZU51bWJlcikge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBsZXQgcmV0cmlldmVkRGF0YTtcbiAgICBjb25zdCByZXF1ZXN0VVJMID0gZ2VuZXJhdGVVUkwoQmFzZVVSTCwgcGFnZU51bWJlciwgcGFnZVNpemUpO1xuICAgIHJldHJpZXZlZERhdGEgPSBhd2FpdCBmZXRjaChyZXF1ZXN0VVJMKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7IHJldHVybiByZXNwb25zZS5qc29uKCk7IH0pO1xuICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQocmV0cmlldmVkRGF0YS5kYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBSZXRyaWV2ZU5vblBhZ2luYXRlZERhdGEoQmFzZVVSTCl7XG4gICAgbGV0IHJldHJpZXZlZERhdGEgPSBhd2FpdCBmZXRjaChCYXNlVVJMKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7IHJldHVybiByZXNwb25zZS5qc29uKCk7IH0pO1xuICAgIHJldHVybiByZXRyaWV2ZWREYXRhO1xufVxuXG5leHBvcnQgeyBSZXRyaWV2ZUFsbFBhZ2luYXRlZERhdGEgLCBSZXRyaWV2ZU9uZVBhZ2UsIFJldHJpZXZlTm9uUGFnaW5hdGVkRGF0YX07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVVJMKEJhc2VVUkwsIHBhZ2VOdW1iZXIsIHBhZ2VTaXplID0gMjUwKSB7XG4gICAgbGV0IHJlcXVlc3RCeVBhZ2U7XG4gICAgY29uc3QgcGFnZXMgPSBcInBhZ2U9XCIgKyBwYWdlTnVtYmVyO1xuICAgIGlmIChCYXNlVVJMLmluY2x1ZGVzKFwiP1wiKSkge1xuICAgICAgICByZXF1ZXN0QnlQYWdlID0gQmFzZVVSTCArIFwiJlwiICsgcGFnZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdEJ5UGFnZSA9IEJhc2VVUkwgKyBcIj9cIiArIHBhZ2VzO1xuICAgIH1cbiAgICBjb25zdCBzaXplID0gXCJpdGVtc1BlclBhZ2U9XCIgKyBwYWdlU2l6ZTtcbiAgICByZXF1ZXN0QnlQYWdlID0gcmVxdWVzdEJ5UGFnZSArIFwiJlwiICsgc2l6ZTtcbiAgICByZXR1cm4gcmVxdWVzdEJ5UGFnZTtcbn1cblxuIiwiZXhwb3J0IGZ1bmN0aW9uIGluaXRSYW5nZShkb21haW4sIHJhbmdlKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLnJhbmdlKGRvbWFpbik7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRoaXMucmFuZ2UocmFuZ2UpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRJbnRlcnBvbGF0b3IoZG9tYWluLCBpbnRlcnBvbGF0b3IpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMuaW50ZXJwb2xhdG9yKGRvbWFpbik7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRoaXMuaW50ZXJwb2xhdG9yKGludGVycG9sYXRvcikuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbiIsImltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmV4cG9ydCB2YXIgaW1wbGljaXQgPSB7bmFtZTogXCJpbXBsaWNpdFwifTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkaW5hbCgpIHtcbiAgdmFyIGluZGV4ID0gbWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHJhbmdlID0gW10sXG4gICAgICB1bmtub3duID0gaW1wbGljaXQ7XG5cbiAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgIGlmICghaSkge1xuICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXSwgaW5kZXggPSBtYXAoKTtcbiAgICB2YXIgaSA9IC0xLCBuID0gXy5sZW5ndGgsIGQsIGtleTtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoa2V5ID0gKGQgPSBfW2ldKSArIFwiXCIpKSBpbmRleC5zZXQoa2V5LCBkb21haW4ucHVzaChkKSk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbChkb21haW4sIHJhbmdlKS51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJpbXBvcnQge3JhbmdlIGFzIHNlcXVlbmNlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQgb3JkaW5hbCBmcm9tIFwiLi9vcmRpbmFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhbmQoKSB7XG4gIHZhciBzY2FsZSA9IG9yZGluYWwoKS51bmtub3duKHVuZGVmaW5lZCksXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXG4gICAgICBvcmRpbmFsUmFuZ2UgPSBzY2FsZS5yYW5nZSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgc3RlcCxcbiAgICAgIGJhbmR3aWR0aCxcbiAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICBwYWRkaW5nSW5uZXIgPSAwLFxuICAgICAgcGFkZGluZ091dGVyID0gMCxcbiAgICAgIGFsaWduID0gMC41O1xuXG4gIGRlbGV0ZSBzY2FsZS51bmtub3duO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIG4gPSBkb21haW4oKS5sZW5ndGgsXG4gICAgICAgIHJldmVyc2UgPSByYW5nZVsxXSA8IHJhbmdlWzBdLFxuICAgICAgICBzdGFydCA9IHJhbmdlW3JldmVyc2UgLSAwXSxcbiAgICAgICAgc3RvcCA9IHJhbmdlWzEgLSByZXZlcnNlXTtcbiAgICBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgxLCBuIC0gcGFkZGluZ0lubmVyICsgcGFkZGluZ091dGVyICogMik7XG4gICAgaWYgKHJvdW5kKSBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICBzdGFydCArPSAoc3RvcCAtIHN0YXJ0IC0gc3RlcCAqIChuIC0gcGFkZGluZ0lubmVyKSkgKiBhbGlnbjtcbiAgICBiYW5kd2lkdGggPSBzdGVwICogKDEgLSBwYWRkaW5nSW5uZXIpO1xuICAgIGlmIChyb3VuZCkgc3RhcnQgPSBNYXRoLnJvdW5kKHN0YXJ0KSwgYmFuZHdpZHRoID0gTWF0aC5yb3VuZChiYW5kd2lkdGgpO1xuICAgIHZhciB2YWx1ZXMgPSBzZXF1ZW5jZShuKS5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gc3RhcnQgKyBzdGVwICogaTsgfSk7XG4gICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuYmFuZHdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmR3aWR0aDtcbiAgfTtcblxuICBzY2FsZS5zdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHN0ZXA7XG4gIH07XG5cbiAgc2NhbGUucm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWluKDEsIHBhZGRpbmdPdXRlciA9ICtfKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5taW4oMSwgXyksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdPdXRlciA9ICtfLCByZXNjYWxlKCkpIDogcGFkZGluZ091dGVyO1xuICB9O1xuXG4gIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFsaWduID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogYWxpZ247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kKGRvbWFpbigpLCByYW5nZSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXG4gICAgICAgIC5hbGlnbihhbGlnbik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShyZXNjYWxlKCksIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHBvaW50aXNoKHNjYWxlKSB7XG4gIHZhciBjb3B5ID0gc2NhbGUuY29weTtcblxuICBzY2FsZS5wYWRkaW5nID0gc2NhbGUucGFkZGluZ091dGVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ0lubmVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ091dGVyO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcG9pbnRpc2goY29weSgpKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCgpIHtcbiAgcmV0dXJuIHBvaW50aXNoKGJhbmQuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYWRkaW5nSW5uZXIoMSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yKCkge31cblxuZXhwb3J0IHZhciBkYXJrZXIgPSAwLjc7XG5leHBvcnQgdmFyIGJyaWdodGVyID0gMSAvIGRhcmtlcjtcblxudmFyIHJlSSA9IFwiXFxcXHMqKFsrLV0/XFxcXGQrKVxcXFxzKlwiLFxuICAgIHJlTiA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pXFxcXHMqXCIsXG4gICAgcmVQID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXggPSAvXiMoWzAtOWEtZl17Myw4fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVJLCByZUksIHJlSV0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZUksIHJlSSwgcmVJLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbGFcXFxcKFwiICsgW3JlTiwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgY29weTogZnVuY3Rpb24oY2hhbm5lbHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgdGhpcy5jb25zdHJ1Y3RvciwgdGhpcywgY2hhbm5lbHMpO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBjb2xvcl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogY29sb3JfZm9ybWF0SGV4LFxuICBmb3JtYXRIc2w6IGNvbG9yX2Zvcm1hdEhzbCxcbiAgZm9ybWF0UmdiOiBjb2xvcl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiBjb2xvcl9mb3JtYXRSZ2Jcbn0pO1xuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdEhleCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIc2woKSB7XG4gIHJldHVybiBoc2xDb252ZXJ0KHRoaXMpLmZvcm1hdEhzbCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRSZ2IoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdFJnYigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG0sIGw7XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXguZXhlYyhmb3JtYXQpKSA/IChsID0gbVsxXS5sZW5ndGgsIG0gPSBwYXJzZUludChtWzFdLCAxNiksIGwgPT09IDYgPyByZ2JuKG0pIC8vICNmZjAwMDBcbiAgICAgIDogbCA9PT0gMyA/IG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkgLy8gI2YwMFxuICAgICAgOiBsID09PSA4ID8gcmdiYShtID4+IDI0ICYgMHhmZiwgbSA+PiAxNiAmIDB4ZmYsIG0gPj4gOCAmIDB4ZmYsIChtICYgMHhmZikgLyAweGZmKSAvLyAjZmYwMDAwMDBcbiAgICAgIDogbCA9PT0gNCA/IHJnYmEoKG0gPj4gMTIgJiAweGYpIHwgKG0gPj4gOCAmIDB4ZjApLCAobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSkgLyAweGZmKSAvLyAjZjAwMFxuICAgICAgOiBudWxsKSAvLyBpbnZhbGlkIGhleFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoLTAuNSA8PSB0aGlzLnIgJiYgdGhpcy5yIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuZyAmJiB0aGlzLmcgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5iICYmIHRoaXMuYiA8IDI1NS41KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IHJnYl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogcmdiX2Zvcm1hdEhleCxcbiAgZm9ybWF0UmdiOiByZ2JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogcmdiX2Zvcm1hdFJnYlxufSkpO1xuXG5mdW5jdGlvbiByZ2JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gXCIjXCIgKyBoZXgodGhpcy5yKSArIGhleCh0aGlzLmcpICsgaGV4KHRoaXMuYik7XG59XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRSZ2IoKSB7XG4gIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMucikgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGZvcm1hdEhzbDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJoc2woXCIgOiBcImhzbGEoXCIpXG4gICAgICAgICsgKHRoaXMuaCB8fCAwKSArIFwiLCBcIlxuICAgICAgICArICh0aGlzLnMgfHwgMCkgKiAxMDAgKyBcIiUsIFwiXG4gICAgICAgICsgKHRoaXMubCB8fCAwKSAqIDEwMCArIFwiJVwiXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkLmpzXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGJhc2lzKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xuICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gIHJldHVybiAoKDEgLSAzICogdDEgKyAzICogdDIgLSB0MykgKiB2MFxuICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxuICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgKyB0MyAqIHYzKSAvIDY7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdCA8PSAwID8gKHQgPSAwKSA6IHQgPj0gMSA/ICh0ID0gMSwgbiAtIDEpIDogTWF0aC5mbG9vcih0ICogbiksXG4gICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgIHYwID0gaSA+IDAgPyB2YWx1ZXNbaSAtIDFdIDogMiAqIHYxIC0gdjIsXG4gICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgaWYgKCFiKSBiID0gW107XG4gIHZhciBuID0gYSA/IE1hdGgubWluKGIubGVuZ3RoLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgYyA9IGIuc2xpY2UoKSxcbiAgICAgIGk7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY1tpXSA9IGFbaV0gKiAoMSAtIHQpICsgYltpXSAqIHQ7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlckFycmF5KHgpIHtcbiAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyh4KSAmJiAhKHggaW5zdGFuY2VvZiBEYXRhVmlldyk7XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWUuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIChpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXkgOiBnZW5lcmljQXJyYXkpKGEsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJpY0FycmF5KGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICogKDEgLSB0KSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKiAoMSAtIHQpICsgYiAqIHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IHZhbHVlKGFba10sIGJba10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjW2tdID0gYltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCByZ2IgZnJvbSBcIi4vcmdiLmpzXCI7XG5pbXBvcnQge2dlbmVyaWNBcnJheX0gZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCBkYXRlIGZyb20gXCIuL2RhdGUuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5pbXBvcnQgb2JqZWN0IGZyb20gXCIuL29iamVjdC5qc1wiO1xuaW1wb3J0IHN0cmluZyBmcm9tIFwiLi9zdHJpbmcuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IG51bWJlckFycmF5LCB7aXNOdW1iZXJBcnJheX0gZnJvbSBcIi4vbnVtYmVyQXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQoYilcbiAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBudW1iZXJcbiAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgcmdiKSA6IHN0cmluZylcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gcmdiXG4gICAgICA6IGIgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZVxuICAgICAgOiBpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXlcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGdlbmVyaWNBcnJheVxuICAgICAgOiB0eXBlb2YgYi52YWx1ZU9mICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGIudG9TdHJpbmcgIT09IFwiZnVuY3Rpb25cIiB8fCBpc05hTihiKSA/IG9iamVjdFxuICAgICAgOiBudW1iZXIpKGEsIGIpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhICogKDEgLSB0KSArIGIgKiB0KTtcbiAgfTtcbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2UuanNcIjtcblxudmFyIGNzc05vZGUsXG4gICAgY3NzUm9vdCxcbiAgICBjc3NWaWV3LFxuICAgIHN2Z05vZGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IFwibm9uZVwiKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghY3NzTm9kZSkgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIGNzc1Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNzc1ZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgY3NzUm9vdC5yZW1vdmVDaGlsZChjc3NOb2RlKTtcbiAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xuICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlci5qc1wiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlLmpzXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiAreDtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGUgYXMgaW50ZXJwb2xhdGVWYWx1ZSwgaW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHttYXAsIHNsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhLCBiKSB7XG4gIHJldHVybiAoYiAtPSAoYSA9ICthKSlcbiAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgIDogY29uc3RhbnQoaXNOYU4oYikgPyBOYU4gOiAwLjUpO1xufVxuXG5mdW5jdGlvbiBjbGFtcGVyKGRvbWFpbikge1xuICB2YXIgYSA9IGRvbWFpblswXSwgYiA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sIHQ7XG4gIGlmIChhID4gYikgdCA9IGEsIGEgPSBiLCBiID0gdDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubWF4KGEsIE1hdGgubWluKGIsIHgpKTsgfTtcbn1cblxuLy8gbm9ybWFsaXplKGEsIGIpKHgpIHRha2VzIGEgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyIHQgaW4gWzAsMV0uXG4vLyBpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJhbmdlIHZhbHVlIHggaW4gW2EsYl0uXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgZDAgPSBkb21haW5bMF0sIGQxID0gZG9tYWluWzFdLCByMCA9IHJhbmdlWzBdLCByMSA9IHJhbmdlWzFdO1xuICBpZiAoZDEgPCBkMCkgZDAgPSBub3JtYWxpemUoZDEsIGQwKSwgcjAgPSBpbnRlcnBvbGF0ZShyMSwgcjApO1xuICBlbHNlIGQwID0gbm9ybWFsaXplKGQwLCBkMSksIHIwID0gaW50ZXJwb2xhdGUocjAsIHIxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHIwKGQwKHgpKTsgfTtcbn1cblxuZnVuY3Rpb24gcG9seW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IG5vcm1hbGl6ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgIHJbaV0gPSBpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKVxuICAgICAgLnVua25vd24oc291cmNlLnVua25vd24oKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1lcigpIHtcbiAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICByYW5nZSA9IHVuaXQsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlVmFsdWUsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICB1bnRyYW5zZm9ybSxcbiAgICAgIHVua25vd24sXG4gICAgICBjbGFtcCA9IGlkZW50aXR5LFxuICAgICAgcGllY2V3aXNlLFxuICAgICAgb3V0cHV0LFxuICAgICAgaW5wdXQ7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBwaWVjZXdpc2UgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA/IHBvbHltYXAgOiBiaW1hcDtcbiAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4ubWFwKHRyYW5zZm9ybSksIHJhbmdlLCBpbnRlcnBvbGF0ZSkpKSh0cmFuc2Zvcm0oY2xhbXAoeCkpKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gY2xhbXAodW50cmFuc2Zvcm0oKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCBpbnRlcnBvbGF0ZU51bWJlcikpKSh5KSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCBjbGFtcCA9PT0gaWRlbnRpdHkgfHwgKGNsYW1wID0gY2xhbXBlcihkb21haW4pKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9IF8gPyBjbGFtcGVyKGRvbWFpbikgOiBpZGVudGl0eSwgc2NhbGUpIDogY2xhbXAgIT09IGlkZW50aXR5O1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgcmVzY2FsZSgpKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQsIHUpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB1bnRyYW5zZm9ybSA9IHU7XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGludW91cyh0cmFuc2Zvcm0sIHVudHJhbnNmb3JtKSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcigpKHRyYW5zZm9ybSwgdW50cmFuc2Zvcm0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBNYXRoLmFicyh4ID0gTWF0aC5yb3VuZCh4KSkgPj0gMWUyMVxuICAgICAgPyB4LnRvTG9jYWxlU3RyaW5nKFwiZW5cIikucmVwbGFjZSgvLC9nLCBcIlwiKVxuICAgICAgOiB4LnRvU3RyaW5nKDEwKTtcbn1cblxuLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbFBhcnRzKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBwKSB7XG4gIGlmICgoaSA9ICh4ID0gcCA/IHgudG9FeHBvbmVudGlhbChwIC0gMSkgOiB4LnRvRXhwb25lbnRpYWwoKSkuaW5kZXhPZihcImVcIikpIDwgMCkgcmV0dXJuIG51bGw7IC8vIE5hTiwgwrFJbmZpbml0eVxuICB2YXIgaSwgY29lZmZpY2llbnQgPSB4LnNsaWNlKDAsIGkpO1xuXG4gIC8vIFRoZSBzdHJpbmcgcmV0dXJuZWQgYnkgdG9FeHBvbmVudGlhbCBlaXRoZXIgaGFzIHRoZSBmb3JtIFxcZFxcLlxcZCtlWy0rXVxcZCtcbiAgLy8gKGUuZy4sIDEuMmUrMykgb3IgdGhlIGZvcm0gXFxkZVstK11cXGQrIChlLmcuLCAxZSszKS5cbiAgcmV0dXJuIFtcbiAgICBjb2VmZmljaWVudC5sZW5ndGggPiAxID8gY29lZmZpY2llbnRbMF0gKyBjb2VmZmljaWVudC5zbGljZSgyKSA6IGNvZWZmaWNpZW50LFxuICAgICt4LnNsaWNlKGkgKyAxKVxuICBdO1xufVxuIiwiaW1wb3J0IHtmb3JtYXREZWNpbWFsUGFydHN9IGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9IGZvcm1hdERlY2ltYWxQYXJ0cyhNYXRoLmFicyh4KSksIHggPyB4WzFdIDogTmFOO1xufVxuIiwiLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcih7XG4gICAgZmlsbDogbWF0Y2hbMV0sXG4gICAgYWxpZ246IG1hdGNoWzJdLFxuICAgIHNpZ246IG1hdGNoWzNdLFxuICAgIHN5bWJvbDogbWF0Y2hbNF0sXG4gICAgemVybzogbWF0Y2hbNV0sXG4gICAgd2lkdGg6IG1hdGNoWzZdLFxuICAgIGNvbW1hOiBtYXRjaFs3XSxcbiAgICBwcmVjaXNpb246IG1hdGNoWzhdICYmIG1hdGNoWzhdLnNsaWNlKDEpLFxuICAgIHRyaW06IG1hdGNoWzldLFxuICAgIHR5cGU6IG1hdGNoWzEwXVxuICB9KTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZXhwb3J0IGZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgdGhpcy5maWxsID0gc3BlY2lmaWVyLmZpbGwgPT09IHVuZGVmaW5lZCA/IFwiIFwiIDogc3BlY2lmaWVyLmZpbGwgKyBcIlwiO1xuICB0aGlzLmFsaWduID0gc3BlY2lmaWVyLmFsaWduID09PSB1bmRlZmluZWQgPyBcIj5cIiA6IHNwZWNpZmllci5hbGlnbiArIFwiXCI7XG4gIHRoaXMuc2lnbiA9IHNwZWNpZmllci5zaWduID09PSB1bmRlZmluZWQgPyBcIi1cIiA6IHNwZWNpZmllci5zaWduICsgXCJcIjtcbiAgdGhpcy5zeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnN5bWJvbCArIFwiXCI7XG4gIHRoaXMuemVybyA9ICEhc3BlY2lmaWVyLnplcm87XG4gIHRoaXMud2lkdGggPSBzcGVjaWZpZXIud2lkdGggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIud2lkdGg7XG4gIHRoaXMuY29tbWEgPSAhIXNwZWNpZmllci5jb21tYTtcbiAgdGhpcy5wcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLnByZWNpc2lvbjtcbiAgdGhpcy50cmltID0gISFzcGVjaWZpZXIudHJpbTtcbiAgdGhpcy50eXBlID0gc3BlY2lmaWVyLnR5cGUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIudHlwZSArIFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuIiwiaW1wb3J0IHtmb3JtYXREZWNpbWFsUGFydHN9IGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV07XG4gIHJldHVybiBleHBvbmVudCA8IDAgPyBcIjAuXCIgKyBuZXcgQXJyYXkoLWV4cG9uZW50KS5qb2luKFwiMFwiKSArIGNvZWZmaWNpZW50XG4gICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgIDogY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoZXhwb25lbnQgLSBjb2VmZmljaWVudC5sZW5ndGggKyAyKS5qb2luKFwiMFwiKTtcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcbmltcG9ydCBmb3JtYXRQcmVmaXhBdXRvIGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBmb3JtYXRSb3VuZGVkIGZyb20gXCIuL2Zvcm1hdFJvdW5kZWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBcIiVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7IH0sXG4gIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICBcImNcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4geCArIFwiXCI7IH0sXG4gIFwiZFwiOiBmb3JtYXREZWNpbWFsLFxuICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxuICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICBcImdcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b1ByZWNpc2lvbihwKTsgfSxcbiAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXG4gIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICBcInhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXAuanNcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFscy5qc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXIuanNcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW0uanNcIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlcy5qc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbnZhciBtYXAgPSBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyA9PT0gdW5kZWZpbmVkIHx8IGxvY2FsZS50aG91c2FuZHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0R3JvdXAobWFwLmNhbGwobG9jYWxlLmdyb3VwaW5nLCBOdW1iZXIpLCBsb2NhbGUudGhvdXNhbmRzICsgXCJcIiksXG4gICAgICBjdXJyZW5jeVByZWZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVswXSArIFwiXCIsXG4gICAgICBjdXJyZW5jeVN1ZmZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVsxXSArIFwiXCIsXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwgPT09IHVuZGVmaW5lZCA/IFwiLlwiIDogbG9jYWxlLmRlY2ltYWwgKyBcIlwiLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0TnVtZXJhbHMobWFwLmNhbGwobG9jYWxlLm51bWVyYWxzLCBTdHJpbmcpKSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCA9PT0gdW5kZWZpbmVkID8gXCIlXCIgOiBsb2NhbGUucGVyY2VudCArIFwiXCIsXG4gICAgICBtaW51cyA9IGxvY2FsZS5taW51cyA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBsb2NhbGUubWludXMgKyBcIlwiLFxuICAgICAgbmFuID0gbG9jYWxlLm5hbiA9PT0gdW5kZWZpbmVkID8gXCJOYU5cIiA6IGxvY2FsZS5uYW4gKyBcIlwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0cmltID0gc3BlY2lmaWVyLnRyaW0sXG4gICAgICAgIHR5cGUgPSBzcGVjaWZpZXIudHlwZTtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIFRoZSBcIlwiIHR5cGUsIGFuZCBhbnkgaW52YWxpZCB0eXBlLCBpcyBhbiBhbGlhcyBmb3IgXCIuMTJ+Z1wiLlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgcHJlY2lzaW9uID09PSB1bmRlZmluZWQgJiYgKHByZWNpc2lvbiA9IDEyKSwgdHJpbSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICAgIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVByZWZpeCA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5U3VmZml4IDogL1slcF0vLnRlc3QodHlwZSkgPyBwZXJjZW50IDogXCJcIjtcblxuICAgIC8vIFdoYXQgZm9ybWF0IGZ1bmN0aW9uIHNob3VsZCB3ZSB1c2U/XG4gICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICB2YXIgZm9ybWF0VHlwZSA9IGZvcm1hdFR5cGVzW3R5cGVdLFxuICAgICAgICBtYXliZVN1ZmZpeCA9IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXG4gICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IDZcbiAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIHByZWNpc2lvbikpO1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXG4gICAgICAgICAgaSwgbiwgYztcblxuICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBzaWduLiAtMCBpcyBub3QgbGVzcyB0aGFuIDAsIGJ1dCAxIC8gLTAgaXMhXG4gICAgICAgIHZhciB2YWx1ZU5lZ2F0aXZlID0gdmFsdWUgPCAwIHx8IDEgLyB2YWx1ZSA8IDA7XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICB2YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IG5hbiA6IGZvcm1hdFR5cGUoTWF0aC5hYnModmFsdWUpLCBwcmVjaXNpb24pO1xuXG4gICAgICAgIC8vIFRyaW0gaW5zaWduaWZpY2FudCB6ZXJvcy5cbiAgICAgICAgaWYgKHRyaW0pIHZhbHVlID0gZm9ybWF0VHJpbSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gSWYgYSBuZWdhdGl2ZSB2YWx1ZSByb3VuZHMgdG8gemVybyBhZnRlciBmb3JtYXR0aW5nLCBhbmQgbm8gZXhwbGljaXQgcG9zaXRpdmUgc2lnbiBpcyByZXF1ZXN0ZWQsIGhpZGUgdGhlIHNpZ24uXG4gICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCAmJiBzaWduICE9PSBcIitcIikgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IG1pbnVzKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdLFxuICBtaW51czogXCItXCJcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZ3JvdXBpbmcsIHRob3VzYW5kcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHQgPSBbXSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG51bWVyYWxzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bMC05XS9nLCBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gbnVtZXJhbHNbK2ldO1xuICAgIH0pO1xuICB9O1xufVxuIiwiLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzKSB7XG4gIG91dDogZm9yICh2YXIgbiA9IHMubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHNbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogaWYgKCErc1tpXSkgYnJlYWsgb3V0OyBpZiAoaTAgPiAwKSBpMCA9IDA7IGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTAgPiAwID8gcy5zbGljZSgwLCBpMCkgKyBzLnNsaWNlKGkxICsgMSkgOiBzO1xufVxuIiwiaW1wb3J0IHt0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdCwgZm9ybWF0UHJlZml4LCBmb3JtYXRTcGVjaWZpZXIsIHByZWNpc2lvbkZpeGVkLCBwcmVjaXNpb25QcmVmaXgsIHByZWNpc2lvblJvdW5kfSBmcm9tIFwiZDMtZm9ybWF0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBjb250aW51b3VzLCB7Y29weSwgaWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGlkZW50aXR5LCBpZGVudGl0eSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIoKSk7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiaW1wb3J0IHtpZGVudGl0eX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0SW50ZXJwb2xhdG9yfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyXCI7XG5pbXBvcnQge2xvZ2dpc2h9IGZyb20gXCIuL2xvZ1wiO1xuaW1wb3J0IHtzeW1sb2dpc2h9IGZyb20gXCIuL3N5bWxvZ1wiO1xuaW1wb3J0IHtwb3dpc2h9IGZyb20gXCIuL3Bvd1wiO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1lcigpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHgxID0gMSxcbiAgICAgIHQwLFxuICAgICAgdDEsXG4gICAgICBrMTAsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICBpbnRlcnBvbGF0b3IgPSBpZGVudGl0eSxcbiAgICAgIGNsYW1wID0gZmFsc2UsXG4gICAgICB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiBpbnRlcnBvbGF0b3IoazEwID09PSAwID8gMC41IDogKHggPSAodHJhbnNmb3JtKHgpIC0gdDApICogazEwLCBjbGFtcCA/IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHgpKSA6IHgpKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0MCA9IHRyYW5zZm9ybSh4MCA9ICtfWzBdKSwgdDEgPSB0cmFuc2Zvcm0oeDEgPSArX1sxXSksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAxIC8gKHQxIC0gdDApLCBzY2FsZSkgOiBbeDAsIHgxXTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9ICEhXywgc2NhbGUpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRvciA9IF8sIHNjYWxlKSA6IGludGVycG9sYXRvcjtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdHJhbnNmb3JtID0gdCwgdDAgPSB0KHgwKSwgdDEgPSB0KHgxKSwgazEwID0gdDAgPT09IHQxID8gMCA6IDEgLyAodDEgLSB0MCk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5pbnRlcnBvbGF0b3Ioc291cmNlLmludGVycG9sYXRvcigpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKVxuICAgICAgLnVua25vd24oc291cmNlLnVua25vd24oKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlcXVlbnRpYWwoKSB7XG4gIHZhciBzY2FsZSA9IGxpbmVhcmlzaCh0cmFuc2Zvcm1lcigpKGlkZW50aXR5KSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzZXF1ZW50aWFsKCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVudGlhbExvZygpIHtcbiAgdmFyIHNjYWxlID0gbG9nZ2lzaCh0cmFuc2Zvcm1lcigpKS5kb21haW4oWzEsIDEwXSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzZXF1ZW50aWFsTG9nKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxTeW1sb2coKSB7XG4gIHZhciBzY2FsZSA9IHN5bWxvZ2lzaCh0cmFuc2Zvcm1lcigpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHNlcXVlbnRpYWxTeW1sb2coKSkuY29uc3RhbnQoc2NhbGUuY29uc3RhbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW50aWFsUG93KCkge1xuICB2YXIgc2NhbGUgPSBwb3dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzZXF1ZW50aWFsUG93KCkpLmV4cG9uZW50KHNjYWxlLmV4cG9uZW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVudGlhbFNxcnQoKSB7XG4gIHJldHVybiBzZXF1ZW50aWFsUG93LmFwcGx5KG51bGwsIGFyZ3VtZW50cykuZXhwb25lbnQoMC41KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICB2YXIgbiA9IHNwZWNpZmllci5sZW5ndGggLyA2IHwgMCwgY29sb3JzID0gbmV3IEFycmF5KG4pLCBpID0gMDtcbiAgd2hpbGUgKGkgPCBuKSBjb2xvcnNbaV0gPSBcIiNcIiArIHNwZWNpZmllci5zbGljZShpICogNiwgKytpICogNik7XG4gIHJldHVybiBjb2xvcnM7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlUmdiQmFzaXN9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzY2hlbWUpIHtcbiAgcmV0dXJuIGludGVycG9sYXRlUmdiQmFzaXMoc2NoZW1lW3NjaGVtZS5sZW5ndGggLSAxXSk7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlOWEzYzlmN2Y3ZjdhMWQ3NmFcIixcbiAgXCJkMDFjOGJmMWI2ZGFiOGUxODY0ZGFjMjZcIixcbiAgXCJkMDFjOGJmMWI2ZGFmN2Y3ZjdiOGUxODY0ZGFjMjZcIixcbiAgXCJjNTFiN2RlOWEzYzlmZGUwZWZlNmY1ZDBhMWQ3NmE0ZDkyMjFcIixcbiAgXCJjNTFiN2RlOWEzYzlmZGUwZWZmN2Y3ZjdlNmY1ZDBhMWQ3NmE0ZDkyMjFcIixcbiAgXCJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjFcIixcbiAgXCJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZmN2Y3ZjdlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjFcIixcbiAgXCI4ZTAxNTJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjEyNzY0MTlcIixcbiAgXCI4ZTAxNTJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZmN2Y3ZjdlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjEyNzY0MTlcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiOTk4ZWMzZjdmN2Y3ZjFhMzQwXCIsXG4gIFwiNWUzYzk5YjJhYmQyZmRiODYzZTY2MTAxXCIsXG4gIFwiNWUzYzk5YjJhYmQyZjdmN2Y3ZmRiODYzZTY2MTAxXCIsXG4gIFwiNTQyNzg4OTk4ZWMzZDhkYWViZmVlMGI2ZjFhMzQwYjM1ODA2XCIsXG4gIFwiNTQyNzg4OTk4ZWMzZDhkYWViZjdmN2Y3ZmVlMGI2ZjFhMzQwYjM1ODA2XCIsXG4gIFwiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2XCIsXG4gIFwiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZjdmN2Y3ZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2XCIsXG4gIFwiMmQwMDRiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2N2YzYjA4XCIsXG4gIFwiMmQwMDRiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZjdmN2Y3ZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2N2YzYjA4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmY3ZjdmNzY3YTljZlwiLFxuICBcImNhMDAyMGY0YTU4MjkyYzVkZTA1NzFiMFwiLFxuICBcImNhMDAyMGY0YTU4MmY3ZjdmNzkyYzVkZTA1NzFiMFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2QxZTVmMDY3YTljZjIxNjZhY1wiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2Y3ZjdmN2QxZTVmMDY3YTljZjIxNjZhY1wiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhY1wiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2Y3ZjdmN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhY1wiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhYzA1MzA2MVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2Y3ZjdmN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhYzA1MzA2MVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZjhhNjJmZmZmZmY5OTk5OTlcIixcbiAgXCJjYTAwMjBmNGE1ODJiYWJhYmE0MDQwNDBcIixcbiAgXCJjYTAwMjBmNGE1ODJmZmZmZmZiYWJhYmE0MDQwNDBcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdlMGUwZTA5OTk5OTk0ZDRkNGRcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdmZmZmZmZlMGUwZTA5OTk5OTk0ZDRkNGRcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGRcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmZmZmZmZlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGRcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGQxYTFhMWFcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmZmZmZmZlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGQxYTFhMWFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTFiZmRiXCIsXG4gIFwiZDcxOTFjZmRhZTYxYWJkOWU5MmM3YmI2XCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYWJkOWU5MmM3YmI2XCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDkwZTBmM2Y4OTFiZmRiNDU3NWI0XCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDkwZmZmZmJmZTBmM2Y4OTFiZmRiNDU3NWI0XCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0XCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZmZmZmJmZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0MzEzNjk1XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZmZmZmJmZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0MzEzNjk1XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU1ZjVmOTk5ZDhjOTJjYTI1ZlwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDIzOGI0NVwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNmQyYzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWU4YzhmZGJiODRlMzRhMzNcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTlkNzMwMWZcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWZiMzAwMDA3ZjAwMDBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlN2YyYTZiZGRiMmI4Y2JlXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMDU3MGIwXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDQ1YThkMDIzODU4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVkZjhiMTdmY2RiYjJjN2ZiOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDIyNWVhOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODI1MzQ5NDA4MWQ1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkZWViZjc5ZWNhZTEzMTgyYmRcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYyMTcxYjVcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODUxOWMwODMwNmJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWUwYTFkOTliMzFhMzU0XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MjM4YjQ1XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImYwZjBmMGJkYmRiZDYzNjM2M1wiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjUyNTI1MlwiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNTAwMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZmVkZjViY2JkZGM3NTZiYjFcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg2YTUxYTNcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM1NDI3OGYzZjAwN2RcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlMGQyZmM5MjcyZGUyZDI2XCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhY2IxODFkXCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkYTUwZjE1NjcwMDBkXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZTZjZWZkYWU2YmU2NTUwZFwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2Q5NDcwMVwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMWE2MzYwMzdmMjcwNFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOSBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5pbXBvcnQge21heCwgbWlufSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7c2NhbGVTZXF1ZW50aWFsfSBmcm9tIFwiZDMtc2NhbGVcIjtcbmltcG9ydCAqIGFzIGQzQ2hyb21hdGljIGZyb20gXCJkMy1zY2FsZS1jaHJvbWF0aWNcIjtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29sb3JDaGFydChzaHVmZmxlPXRydWUpe1xuICAgIC8vIHJlZiBpbGx1c3RyYXRvciBjb2xvciB0aGVtZXNcbiAgICBjb25zdCBjb2xvcnMgPSBbXG4gICAgICAgIFwicmdiKDEwMCwxMTgsMTIwKVwiLFxuICAgICAgICBcInJnYigxMDEsMTQxLDE0NSlcIixcbiAgICAgICAgXCJyZ2IoMTAzLDEyNiw4MilcIixcbiAgICAgICAgXCJyZ2IoMTAzLDE4NCwyMjIpXCIsXG4gICAgICAgIFwicmdiKDEwOCwxMTAsODgpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTA4LDE0NywxMjgpXCIsXG4gICAgICAgIFwicmdiKDExOSwxNDQsMTgyKVwiLFxuICAgICAgICBcInJnYigxMjYsMTMwLDEyMilcIixcbiAgICAgICAgXCJyZ2IoMTMzLDE3MywxODYpXCIsXG4gICAgICAgIFwicmdiKDEzNywxMTQsOTEpXCIsXG4gICAgICAgIFwicmdiKDE0NSwxNzAsMTU3KVwiLFxuXG4gICAgICAgIFwicmdiKDE0NSwyMDEsMjMyKVwiLFxuICAgICAgICBcInJnYigxNDcsMTA1LDY2KVwiLFxuICAgICAgICBcInJnYigxNTksMTE0LDExNilcIixcbiAgICAgICAgXCJyZ2IoMTU5LDE4OCwxOTEpXCIsXG4gICAgICAgIFwicmdiKDE1OSwyMjksMTk0KVwiLFxuICAgICAgICBcInJnYigxNjMsMTYzLDE3MSlcIixcblxuICAgICAgICBcInJnYigxNjQsMjA3LDE5MClcIixcbiAgICAgICAgXCJyZ2IoMTcyLDEwOCwxMzApXCIsXG4gICAgICAgIFwicmdiKDE3Myw4NCwxMTQpXCIsXG4gICAgICAgIFwicmdiKDE3NCwxOTUsMjIyKVwiLFxuICAgICAgICBcInJnYigxNzYsMjA0LDE1MylcIixcblxuICAgICAgICBcInJnYigxNzksMTgwLDE1MClcIixcbiAgICAgICAgXCJyZ2IoMTgwLDIyMCwyMzcpXCIsXG4gICAgICAgIFwicmdiKDE4MywyMDIsMTIxKVwiLFxuICAgICAgICBcInJnYigxOTIsMjAyLDg1KVwiLFxuICAgICAgICBcInJnYigxOTMsMTkxLDE5MylcIixcbiAgICAgICAgXCJyZ2IoMTk1LDk3LDEzNilcIixcblxuICAgICAgICBcInJnYigxOTksMTIxLDEwMilcIixcbiAgICAgICAgXCJyZ2IoMjA3LDIwMiw3NilcIixcbiAgICAgICAgXCJyZ2IoMjA5LDIxOSwxODkpXCIsXG4gICAgICAgIFwicmdiKDIxMywyNTEsMjU1KVwiLFxuICAgICAgICBcInJnYigyMTUsOTQsNTYpXCIsXG5cbiAgICAgICAgXCJyZ2IoMjE4LDExNCwxMjYpXCIsXG4gICAgICAgIFwicmdiKDIyMyw5MCw3MylcIixcbiAgICAgICAgXCJyZ2IoMjI0LDI0NywyMTcpXCIsXG4gICAgICAgIFwicmdiKDIyNywyMDUsMTY0KVwiLFxuICAgICAgICBcInJnYigyMjgsMTY4LDE4NSlcIixcblxuICAgICAgICBcInJnYigyMzAsMTc2LDE1MilcIixcbiAgICAgICAgXCJyZ2IoMjMyLDIxMiwxNzUpXCIsXG4gICAgICAgIFwicmdiKDIzOSwyMDEsNzYpXCIsXG4gICAgICAgIFwicmdiKDI0MCwxMjQsMTA4KVwiLFxuICAgICAgICBcInJnYigyNDYsMjMyLDE3NylcIixcblxuICAgICAgICBcInJnYigyNDksMjI4LDE3MylcIixcbiAgICAgICAgXCJyZ2IoMjUyLDI0NSwxOTEpXCIsXG4gICAgICAgIFwicmdiKDI1NSwxODgsMTAzKVwiLFxuICAgICAgICBcInJnYig0NSw5NCwxMTApXCIsXG4gICAgICAgIFwicmdiKDUxLDE1MywyMDQpXCIsXG5cbiAgICAgICAgXCJyZ2IoNjAsMTI0LDE0NSlcIixcbiAgICAgICAgXCJyZ2IoNjIsODcsMTQ1KVwiLFxuICAgICAgICBcInJnYig2NSwxMTUsMTIwKVwiLFxuICAgICAgICBcInJnYig4OSwyMTYsMjI5KVwiLFxuICAgICAgICBcInJnYig5NCwxNzgsMTUzKVwiLFxuICAgICAgICBcInJnYig5NSwxMjQsMTM0KVwiXG4gICAgXTtcblxuICAgIGlmIChzaHVmZmxlKSByZXR1cm4gc2h1ZmZsZUNvbG9ycyhjb2xvcnMpO1xuICAgIHJldHVybiBjb2xvcnM7XG59XG5cbmZ1bmN0aW9uIHNodWZmbGVDb2xvcnMoYXJyYXkpIHtcbiAgICAvLyBGaXNoZXItWWF0ZXMgc2h1ZmZsZVxuICAgIGxldCBjb3VudGVyID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgLy8gV2hpbGUgdGhlcmUgYXJlIGVsZW1lbnRzIGluIHRoZSBhcnJheVxuICAgIHdoaWxlIChjb3VudGVyID4gMCkge1xuICAgICAgICAvLyBQaWNrIGEgcmFuZG9tIGluZGV4XG4gICAgICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvdW50ZXIpO1xuXG4gICAgICAgIC8vIERlY3JlYXNlIGNvdW50ZXIgYnkgMVxuICAgICAgICBjb3VudGVyLS07XG5cbiAgICAgICAgLy8gQW5kIHN3YXAgdGhlIGxhc3QgZWxlbWVudCB3aXRoIGl0XG4gICAgICAgIGxldCB0ZW1wID0gYXJyYXlbY291bnRlcl07XG4gICAgICAgIGFycmF5W2NvdW50ZXJdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB0ZW1wO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBnZXQgYSBjb2xvciBzY2hlbWUgYnkgbmFtZVxuICogQHBhcmFtIG5hbWUge2VudW19OiBCdUduLCBPclJkLi4uLlxuICogQHJldHVybnMgeyp9OiBhIGNvbnRpbnVvdXMgaW50ZXJwb2xhdG9yICh1c2VkIHdpdGggZDMuc2NhbGVTZXF1ZW50aWFsKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sb3JJbnRlcnBvbGF0b3IobmFtZSl7XG4gICAgLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtc2NhbGUtY2hyb21hdGljL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCNzZXF1ZW50aWFsLW11bHRpLWh1ZVxuXG4gICAgY29uc3QgaW50ZXJwb2xhdG9ycyA9IHtcbiAgICAgICAgQnVHbjogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVCdUduLFxuICAgICAgICBPclJkOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZU9yUmQsXG4gICAgICAgIFB1QnU6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUHVCdSxcbiAgICAgICAgWWxHbkJ1OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVlsR25CdSxcbiAgICAgICAgQmx1ZXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlQmx1ZXMsXG4gICAgICAgIE9yYW5nZXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlT3JhbmdlcyxcbiAgICAgICAgR3JlZW5zOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUdyZWVucyxcbiAgICAgICAgUHVycGxlczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdXJwbGVzLFxuICAgICAgICBSZWRzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVJlZHMsXG4gICAgICAgIEdyZXlzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUdyZXlzLFxuICAgICAgICBHcmF5czogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmV5cyxcblxuICAgICAgICAvLyBkaXZlcmdpbmcgY29sb3Igc2NoZW1lc1xuICAgICAgICBSZEJ1OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVJkQnUsXG4gICAgICAgIFJkR3k6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUmRHeSxcbiAgICAgICAgUGlZRzogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQaVlHLFxuICAgICAgICBQdU9yOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVB1T3IsXG4gICAgICAgIFJkWWxCdTogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVSZFlsQnVcbiAgICB9O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICBpZiAoIWludGVycG9sYXRvcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29uc3QgZXJyID0gXCJVbnJlY29nbml6ZWQgY29sb3I6IFwiICsgbmFtZTtcbiAgICAgICAgYWxlcnQoZXJyKTtcbiAgICAgICAgdGhyb3coZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIGludGVycG9sYXRvcnNbbmFtZV07XG59XG5cbi8qKlxuICogcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtc2NhbGVcbiAqIHJlZmVyZW5jZTogaHR0cDovL2JsLm9ja3Mub3JnL2N1cnJhbi8zMDk0YjM3ZTYzYjkxOGJhYjBhMDY3ODdlMTYxNjA3YlxuICogc2NhbGVTZXF1ZW50aWFsIG1hcHMgdGhlIGNvbnRpbnVvdXMgZG9tYWluIHRvIGEgY29udGludW91cyBjb2xvciBzY2FsZVxuICogQHBhcmFtIGRhdGEge0xpc3R9IG9mIG51bWVyaWNhbCBkYXRhXG4gKiBAcGFyYW0gY29sb3JzIHtTdHJpbmd9IGEgY29sb3IgbmFtZSB0aGF0IGlzIGF2YWlsYWJsZSBpbiBnZXRDb2xvckludGVycG9sYXRvcigpXG4gKiBAcGFyYW0gZG1pbiB7TnVtYmVyfSBtaW5pbXVtIGRvbWFpbiB2YWx1ZVxuICogQHBhcmFtIGRtYXgge051bWJlcn0gbWF4aW11bSBkb21haW4gdmFsdWVcbiAqIEBwYXJhbSByZXZlcnNlIHtCb29sZWFufSByZXZlcnNlIHRoZSBjb2xvciBzY2hlbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvbG9yU2NhbGUoZGF0YSwgY29sb3JzPVwiWWxHbkJ1XCIsIGRtaW49dW5kZWZpbmVkLCBkbWF4PXVuZGVmaW5lZCwgcmV2ZXJzZT1mYWxzZSkge1xuICAgIGRhdGEgPSBkYXRhLmZpbHRlcigoZCk9PntyZXR1cm4gaXNGaW5pdGUoZCk7fSk7XG4gICAgZG1heCA9IGRtYXggPT09IHVuZGVmaW5lZD9tYXgoZGF0YSk6ZG1heDtcbiAgICBkbWluID0gZG1pbiA9PT0gdW5kZWZpbmVkP21pbihkYXRhKTpkbWluO1xuICAgIGNvbnN0IHNjYWxlID0gc2NhbGVTZXF1ZW50aWFsKGdldENvbG9ySW50ZXJwb2xhdG9yKGNvbG9ycykpO1xuICAgIGlmKHJldmVyc2UpIHNjYWxlLmRvbWFpbihbZG1heCwgZG1pbl0pO1xuICAgIGVsc2Ugc2NhbGUuZG9tYWluKFtkbWluLCBkbWF4XSk7XG4gICAgcmV0dXJuIHNjYWxlO1xufVxuXG4vKipcbiAqIERyYXcgYSBjb2xvciBsZWdlbmQgYmFyLlxuICogRGVwZW5kZW5jaWVzOiBleHByZXNzaW9uTWFwLmNzc1xuICogQHBhcmFtIHRpdGxlIHtTdHJpbmd9XG4gKiBAcGFyYW0gZG9tIHtvYmplY3R9IEQzIGRvbSBvYmplY3RcbiAqIEBwYXJhbSBzY2FsZSB7T2JqZWN0fSBEMyBzY2FsZSBvZiB0aGUgY29sb3JcbiAqIEBwYXJhbSBjb25maWcge09iamVjdH0gd2l0aCBhdHRyOiB4LCB5XG4gKiBAcGFyYW0gdXNlTG9nIHtCb29sZWFufVxuICogQHBhcmFtIHRpY2tzIHtJbnRlZ2VyfSBudW1iZXIgb2YgdGlja3MgKG9uZS1zaWRlZClcbiAqIEBwYXJhbSBiYXNlIHtJbnRlZ2VyfSBsb2cgYmFzZVxuICogQHBhcmFtIGNlbGwge09iamVjdH0gd2l0aCBhdHRyaWJ1dGVzOiBoLCB3XG4gKiBAcGFyYW0gb3JpZW50YXRpb24ge2VudW19IGggb3IgdiwgaS5lLiBob3Jpem9udGFsIG9yIHZlcnRpY2FsXG4gKiBAcGFyYW0gZGl2ZXJnaW5nIHtCb29sZWFufSB3aGV0aGVyIHRoZSBjb2xvciBzY2hlbWUgaXMgZGl2ZXJnaW5nXG4gKiBAcGFyYW0gY2VsbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZHJhd0NvbG9yTGVnZW5kKHRpdGxlLCBkb20sIHNjYWxlLCBjb25maWcsIHVzZUxvZywgdGlja3M9MTAsIGJhc2U9MTAsIGNlbGw9e2g6MTAsIHc6NDB9LCBvcmllbnRhdGlvbj1cImhcIiwgZGl2ZXJnaW5nPWZhbHNlKXtcbiAgICBsZXQgZGF0YSA9IFtdO1xuXG4gICAgaWYoZGl2ZXJnaW5nKXtcbiAgICAgICAgbGV0IHJhbmdlID0gWy4uLkFycmF5KHRpY2tzKzEpLmtleXMoKV07XG4gICAgICAgIGxldCBpbnRlcnZhbCA9IHNjYWxlLmRvbWFpbigpWzFdL3RpY2tzO1xuICAgICAgICBkYXRhID0gcmFuZ2UubWFwKChkKT0+ZCppbnRlcnZhbCk7XG4gICAgICAgIGRhdGEgPSBkYXRhLmNvbmNhdChyYW5nZS5maWx0ZXIoKGQpPT5kIT0wKS5tYXAoKGQpPT4wLWQqaW50ZXJ2YWwpKS5zb3J0KChhLCBiKSA9PiB7cmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO30pO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgICBsZXQgcmFuZ2UgPSBbLi4uQXJyYXkodGlja3MrMSkua2V5cygpXTtcbiAgICAgICAgbGV0IGludGVydmFsID0gc2NhbGUuZG9tYWluKClbMV0vdGlja3M7XG4gICAgICAgIGRhdGEgPSByYW5nZS5tYXAoKGQpPT5kKmludGVydmFsKTtcbiAgICB9XG5cbiAgICAvLyBsZWdlbmQgZ3JvdXBzXG4gICAgY29uc3QgbGVnZW5kcyA9IGRvbS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYClcbiAgICAgICAgLnNlbGVjdEFsbChcIi5sZWdlbmRcIikuZGF0YShkYXRhKTtcblxuICAgIGNvbnN0IGcgPSBsZWdlbmRzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5jbGFzc2VkKFwibGVnZW5kXCIsIHRydWUpO1xuXG4gICAgaWYgKG9yaWVudGF0aW9uID09IFwiaFwiKXtcbiAgICAgICAgLy8gbGVnZW5kIHRpdGxlXG4gICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCh0aXRsZSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAtMTApXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgY2VsbC5oKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYCk7XG5cbiAgICAgICAgLy8gdGhlIGNvbG9yIGxlZ2VuZFxuICAgICAgICBnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gY2VsbC53KmkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgNSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgY2VsbC53KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2VsbC5oKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBzY2FsZSk7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gdXNlTG9nPyhNYXRoLnBvdyhiYXNlLCBkKS0xKS50b1ByZWNpc2lvbigyKTpkLnRvUHJlY2lzaW9uKDIpKSAvLyBhc3N1bWluZyB0aGF0IHJhdyB2YWx1ZSBoYWQgYmVlbiBhZGp1c3RlZCBieSArMSB0byBkZWFsIHdpdGggbG9nIHRyYW5zZm9ybWluZyB6ZXJvc1xuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiBjZWxsLncgKiBpKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgMTApO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbGVnZW5kIHRpdGxlXG4gICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCh0aXRsZSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCA1KVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtjb25maWcueH0sICR7Y29uZmlnLnkgKyBjZWxsLmggKiBkYXRhLmxlbmd0aH0pcm90YXRlKDkwKWApO1xuXG4gICAgICAgIGcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQsIGkpID0+IGNlbGwuaCppKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBjZWxsLncpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBjZWxsLmgpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIHNjYWxlKTtcblxuICAgICAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiB1c2VMb2c/KE1hdGgucG93KGJhc2UsIGQpLTEpLnRvUHJlY2lzaW9uKDIpOmQudG9QcmVjaXNpb24oMikpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMTUpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQsIGkpID0+IGNlbGwuaCAqIGkgKyAoY2VsbC5oLzIpKTtcbiAgICB9XG5cblxuXG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIG1pbiA+IHZhbHVlKSB7XG4gICAgICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1pbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qKlxuICogVE9ETzogY29kZSByZXZpZXcgb2YgaG93IHRvIHByZXNldCBwYXJhbWV0ZXIgdmFsdWVzXG4gKiByZXZpZXcgYWxsIHRoZSBwb3NpdGlvbiBjYWxjdWxhdGlvbnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVuZHJvSGVhdG1hcENvbmZpZyB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHJvb3RXIHtOdW1iZXJ9LCB0aGlzIHdpZHRoIGluY2x1ZGVzIG1hcmdpbiBsZWZ0IGFuZCByaWdodCwgcm93VHJlZVBhbmVsIHdpZHRoIGFuZCBoZWF0bWFwIHdpZHRoLlxuICAgICAqIEBwYXJhbSBsZWZ0UGFuZWxXIHtJbnRlZ2VyfSwgc2V0IHRvIDAgaWYgdGhlcmUncyBubyBsZWZ0IHBhbmVsXG4gICAgICogQHBhcmFtIHRvcFBhbmVsSCB7SW50ZWdlcn0sIHNldCB0byAwIGlmIHRoZXJlJ3Mgbm8gdG9wIHBhbmVsXG4gICAgICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIGF0dHI6IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc21hbGxlciB2YWx1ZXMgdGhhbiB0aGUgZGVmYXVsdCBhcmUgbm90IHJlY29tbWVuZGVkIGZvciB0aGUgaGVhdG1hcCwgdG9wIG1hcmdpbiBzaG91bGQgYmUgYXQgbGVhc3QgNTBcbiAgICAgKiBAcGFyYW0gY2VsbEgge0ludGVnZXJ9XG4gICAgICogQHBhcmFtIGFkanVzdCB7SW50ZWdlcn0sIGFkanVzdGVkIHNwYWNpbmcgYmV0d2VlbiB0aGUgaGVhdG1hcCBhbmQgdGhlIGRlbmRyb2dyYW1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihyb290Vz13aW5kb3cuaW5uZXJXaWR0aCwgbGVmdFBhbmVsVz0xMDAsIHRvcFBhbmVsSD0xMDAsIG1hcmdpbj17dG9wOjUwLCByaWdodDoyNTAsIGJvdHRvbToxNzAsIGxlZnQ6MTB9LCBjZWxsSD0xMiwgYWRqdXN0PTEwKSB7XG4gICAgICAgIHRoaXMubWFyZ2luID0gbWFyZ2luO1xuICAgICAgICB0aGlzLnJvb3RXID0gcm9vdFc7XG5cbiAgICAgICAgdGhpcy5sZWZ0VHJlZVBhbmVsID0geyAvLyB0aGUgcm93IGRlbmRyb2dyYW0gcGFuZWxcbiAgICAgICAgICAgIHg6IG1hcmdpbi5sZWZ0LFxuICAgICAgICAgICAgeTogbWFyZ2luLnRvcCArIHRvcFBhbmVsSCxcbiAgICAgICAgICAgIGg6IHVuZGVmaW5lZCwgLy8gdW5kZWZpbmVkIGluaXRpYWxseSwgYmVjYXVzZSBpdCdzIGRhdGEtZGVwZW5kZW50XG4gICAgICAgICAgICB3OiBsZWZ0UGFuZWxXIC0gYWRqdXN0LFxuICAgICAgICAgICAgaWQ6IFwibGVmdFRyZWVcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuY2VsbCA9IHtcbiAgICAgICAgICAgIHc6IHVuZGVmaW5lZCwgLy8gdG8gYmUgY2FsY3VsYXRlZCBiYXNlZCBvbiB0aGUgZGF0YSBhbmQgcm9vdFdcbiAgICAgICAgICAgIGg6IGNlbGxIXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50b3BUcmVlUGFuZWwgPSB7IC8vIHRoZSBjb2x1bW4gZGVuZHJvZ3JhbSBwYW5lbFxuICAgICAgICAgICAgeDogbWFyZ2luLmxlZnQgKyBsZWZ0UGFuZWxXLFxuICAgICAgICAgICAgeTogbWFyZ2luLnRvcCxcbiAgICAgICAgICAgIGg6IHRvcFBhbmVsSCAtIGFkanVzdCxcbiAgICAgICAgICAgIHc6IHRoaXMucm9vdFcgLSAobWFyZ2luLmxlZnQgKyBsZWZ0UGFuZWxXICsgbWFyZ2luLnJpZ2h0KSwgLy8gaGFyZC1jb2RlZCB2YWx1ZXM/XG4gICAgICAgICAgICBpZDogXCJ0b3BUcmVlXCJcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhlYXRtYXBQYW5lbCA9IHtcbiAgICAgICAgICAgIHg6IG1hcmdpbi5sZWZ0ICsgbGVmdFBhbmVsVyxcbiAgICAgICAgICAgIHk6IG1hcmdpbi50b3AgKyB0b3BQYW5lbEgsXG4gICAgICAgICAgICBoOiB0aGlzLmxlZnRUcmVlUGFuZWwuaCxcbiAgICAgICAgICAgIHc6IHRoaXMudG9wVHJlZVBhbmVsLncsXG4gICAgICAgICAgICBpZDogXCJoZWF0bWFwXCJcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmxlZ2VuZFBhbmVsID0geyAvLyB0aGUgY29sb3IgbGVnZW5kIHBhbmVsXG4gICAgICAgICAgICB4OiBtYXJnaW4ubGVmdCArIGxlZnRQYW5lbFcsXG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgaDogbWFyZ2luLnRvcC8yLFxuICAgICAgICAgICAgdzogdGhpcy50b3BUcmVlUGFuZWwudyxcbiAgICAgICAgICAgIGNlbGw6IHt3OiA2MH0sXG4gICAgICAgICAgICBpZDogXCJsZWdlbmRcIlxuICAgICAgICB9O1xuXG5cbiAgICB9XG5cbiAgICBnZXQoKXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hcmdpbjogdGhpcy5tYXJnaW4sXG4gICAgICAgICAgICBjZWxsOiB0aGlzLmNlbGwsXG4gICAgICAgICAgICB3OiB0aGlzLnJvb3RXLFxuICAgICAgICAgICAgaDogdGhpcy5tYXJnaW4udG9wICsgdGhpcy50b3BUcmVlUGFuZWwuaCArIHRoaXMubGVnZW5kUGFuZWwuaCArIHRoaXMubWFyZ2luLmJvdHRvbSwgLy8gaW5pdGlhbCBoZWlnaHRcbiAgICAgICAgICAgIHBhbmVsczoge1xuICAgICAgICAgICAgICAgIHRvcDogdGhpcy50b3BUcmVlUGFuZWwsXG4gICAgICAgICAgICAgICAgbGVmdDogdGhpcy5sZWZ0VHJlZVBhbmVsLFxuICAgICAgICAgICAgICAgIG1haW46IHRoaXMuaGVhdG1hcFBhbmVsLFxuICAgICAgICAgICAgICAgIGxlZ2VuZDogdGhpcy5sZWdlbmRQYW5lbFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuLyoqXG4gKiBDcmVhdGVzIGFuIFNWR1xuICogQHBhcmFtIGlkIHtTdHJpbmd9IGEgRE9NIGVsZW1lbnQgSUQgdGhhdCBzdGFydHMgd2l0aCBhIFwiI1wiXG4gKiBAcGFyYW0gd2lkdGgge051bWVyaWN9XG4gKiBAcGFyYW0gaGVpZ2h0IHtOdW1lcmljfVxuICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIHR3byBhdHRyaWJ1dGVzOiB3aWR0aCBhbmQgaGVpZ2h0XG4gKiBAcmV0dXJuIHtTZWxlY3Rpb259IHRoZSBkMyBzZWxlY3Rpb24gb2JqZWN0IG9mIHRoZSBTVkdcbiAqL1xuXG5pbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tEb21JZChpZCl7XG4gICAgLy8gdGVzdCBpbnB1dCBwYXJhbXNcbiAgICBpZiAoc2VsZWN0KGAjJHtpZH1gKS5lbXB0eSgpKSB7XG4gICAgICAgIGxldCBlcnJvciA9IGBJbnB1dCBFcnJvcjogRE9NIElEICR7aWR9IGlzIG5vdCBmb3VuZC5gO1xuICAgICAgICAvL2FsZXJ0KGVycm9yKTtcbiAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIENhbnZhcyBEMyBvYmplY3RcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgcGFyZW50IGRvbSBJRFxuICogQHBhcmFtIHdpZHRoIHtOdW1lcmljfTogdGhlIG91dGVyIHdpZHRoXG4gKiBAcGFyYW0gaGVpZ2h0IHtOdW1lcmljfTogdGhlIG91dGVyIGhlaWdodFxuICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIGF0dHI6IGxlZnQsIHRvcFxuICogQHBhcmFtIGNhbnZhc0lkIHtTdHJpbmd9XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNhbnZhcyhpZCwgd2lkdGgsIGhlaWdodCwgbWFyZ2luLCBjYW52YXNJZD11bmRlZmluZWQsIHBvc2l0aW9uPVwiYWJzb2x1dGVcIil7XG4gICAgY2hlY2tEb21JZChpZCk7XG4gICAgaWYoY2FudmFzSWQ9PT11bmRlZmluZWQpIGNhbnZhc0lkPWAke2lkfS1jYW52YXNgO1xuICAgIHJldHVybiBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgIC5hcHBlbmQoXCJjYW52YXNcIilcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBjYW52YXNJZClcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBwb3NpdGlvbik7IC8vIFRPRE86IHNob3VsZCB0aGUgcG9zaXRpb24gYmUgdXNlci1kZWZpbmVkPyByZWxhdGl2ZSB2cyBhYnNvbHV0ZVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBTVkcgRDMgb2JqZWN0XG4gKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIHBhcmVudCBkb20gSURcbiAqIEBwYXJhbSB3aWR0aCB7TnVtZXJpY306IHRoZSBvdXRlciB3aWR0aFxuICogQHBhcmFtIGhlaWdodCB7TnVtZXJpY306IHRoZSBvdXRlciBoZWlnaHRcbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCBhdHRyOiBsZWZ0LCB0b3BcbiAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdmcoaWQsIHdpZHRoLCBoZWlnaHQsIG1hcmdpbiwgc3ZnSWQ9dW5kZWZpbmVkKXtcbiAgICBjaGVja0RvbUlkKGlkKTtcbiAgICBpZiAoc3ZnSWQ9PT11bmRlZmluZWQpIHN2Z0lkPWAke2lkfS1zdmdgO1xuICAgIGlmIChtYXJnaW49PT11bmRlZmluZWQpIG1hcmdpbj17dG9wOjAsIGxlZnQ6MH07XG4gICAgcmV0dXJuIHNlbGVjdChcIiNcIitpZCkuYXBwZW5kKFwic3ZnXCIpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBzdmdJZClcbiAgICAgICAgLy8gLnN0eWxlKFwicG9zaXRpb25cIiwgcG9zaXRpb24pXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7bWFyZ2luLnRvcH0pYCk7XG59XG5cblxuXG4iLCJmdW5jdGlvbiBjb3VudChub2RlKSB7XG4gIHZhciBzdW0gPSAwLFxuICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKCFpKSBzdW0gPSAxO1xuICBlbHNlIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICBub2RlLnZhbHVlID0gc3VtO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGNvdW50KTtcbn1cbiIsImltcG9ydCBub2RlX2NvdW50IGZyb20gXCIuL2NvdW50LmpzXCI7XG5pbXBvcnQgbm9kZV9lYWNoIGZyb20gXCIuL2VhY2guanNcIjtcbmltcG9ydCBub2RlX2VhY2hCZWZvcmUgZnJvbSBcIi4vZWFjaEJlZm9yZS5qc1wiO1xuaW1wb3J0IG5vZGVfZWFjaEFmdGVyIGZyb20gXCIuL2VhY2hBZnRlci5qc1wiO1xuaW1wb3J0IG5vZGVfc3VtIGZyb20gXCIuL3N1bS5qc1wiO1xuaW1wb3J0IG5vZGVfc29ydCBmcm9tIFwiLi9zb3J0LmpzXCI7XG5pbXBvcnQgbm9kZV9wYXRoIGZyb20gXCIuL3BhdGguanNcIjtcbmltcG9ydCBub2RlX2FuY2VzdG9ycyBmcm9tIFwiLi9hbmNlc3RvcnMuanNcIjtcbmltcG9ydCBub2RlX2Rlc2NlbmRhbnRzIGZyb20gXCIuL2Rlc2NlbmRhbnRzLmpzXCI7XG5pbXBvcnQgbm9kZV9sZWF2ZXMgZnJvbSBcIi4vbGVhdmVzLmpzXCI7XG5pbXBvcnQgbm9kZV9saW5rcyBmcm9tIFwiLi9saW5rcy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoaWVyYXJjaHkoZGF0YSwgY2hpbGRyZW4pIHtcbiAgdmFyIHJvb3QgPSBuZXcgTm9kZShkYXRhKSxcbiAgICAgIHZhbHVlZCA9ICtkYXRhLnZhbHVlICYmIChyb290LnZhbHVlID0gZGF0YS52YWx1ZSksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbcm9vdF0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcyxcbiAgICAgIGksXG4gICAgICBuO1xuXG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSBjaGlsZHJlbiA9IGRlZmF1bHRDaGlsZHJlbjtcblxuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgaWYgKHZhbHVlZCkgbm9kZS52YWx1ZSA9ICtub2RlLmRhdGEudmFsdWU7XG4gICAgaWYgKChjaGlsZHMgPSBjaGlsZHJlbihub2RlLmRhdGEpKSAmJiAobiA9IGNoaWxkcy5sZW5ndGgpKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4pO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IE5vZGUoY2hpbGRzW2ldKSk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICAgIGNoaWxkLmRlcHRoID0gbm9kZS5kZXB0aCArIDE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJvb3QuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbn1cblxuZnVuY3Rpb24gbm9kZV9jb3B5KCkge1xuICByZXR1cm4gaGllcmFyY2h5KHRoaXMpLmVhY2hCZWZvcmUoY29weURhdGEpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q2hpbGRyZW4oZCkge1xuICByZXR1cm4gZC5jaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY29weURhdGEobm9kZSkge1xuICBub2RlLmRhdGEgPSBub2RlLmRhdGEuZGF0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVIZWlnaHQobm9kZSkge1xuICB2YXIgaGVpZ2h0ID0gMDtcbiAgZG8gbm9kZS5oZWlnaHQgPSBoZWlnaHQ7XG4gIHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50KSAmJiAobm9kZS5oZWlnaHQgPCArK2hlaWdodCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTm9kZShkYXRhKSB7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuZGVwdGggPVxuICB0aGlzLmhlaWdodCA9IDA7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbn1cblxuTm9kZS5wcm90b3R5cGUgPSBoaWVyYXJjaHkucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTm9kZSxcbiAgY291bnQ6IG5vZGVfY291bnQsXG4gIGVhY2g6IG5vZGVfZWFjaCxcbiAgZWFjaEFmdGVyOiBub2RlX2VhY2hBZnRlcixcbiAgZWFjaEJlZm9yZTogbm9kZV9lYWNoQmVmb3JlLFxuICBzdW06IG5vZGVfc3VtLFxuICBzb3J0OiBub2RlX3NvcnQsXG4gIHBhdGg6IG5vZGVfcGF0aCxcbiAgYW5jZXN0b3JzOiBub2RlX2FuY2VzdG9ycyxcbiAgZGVzY2VuZGFudHM6IG5vZGVfZGVzY2VuZGFudHMsXG4gIGxlYXZlczogbm9kZV9sZWF2ZXMsXG4gIGxpbmtzOiBub2RlX2xpbmtzLFxuICBjb3B5OiBub2RlX2NvcHlcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIGN1cnJlbnQsIG5leHQgPSBbbm9kZV0sIGNoaWxkcmVuLCBpLCBuO1xuICBkbyB7XG4gICAgY3VycmVudCA9IG5leHQucmV2ZXJzZSgpLCBuZXh0ID0gW107XG4gICAgd2hpbGUgKG5vZGUgPSBjdXJyZW50LnBvcCgpKSB7XG4gICAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5leHQucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICB9IHdoaWxlIChuZXh0Lmxlbmd0aCk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgbmV4dCA9IFtdLCBjaGlsZHJlbiwgaSwgbjtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIG5leHQucHVzaChub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChub2RlID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKG5vZGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgY2hpbGRyZW4sIGk7XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIHN1bSA9ICt2YWx1ZShub2RlLmRhdGEpIHx8IDAsXG4gICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgICB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgICBub2RlLnZhbHVlID0gc3VtO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZW5kKSB7XG4gIHZhciBzdGFydCA9IHRoaXMsXG4gICAgICBhbmNlc3RvciA9IGxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksXG4gICAgICBub2RlcyA9IFtzdGFydF07XG4gIHdoaWxlIChzdGFydCAhPT0gYW5jZXN0b3IpIHtcbiAgICBzdGFydCA9IHN0YXJ0LnBhcmVudDtcbiAgICBub2Rlcy5wdXNoKHN0YXJ0KTtcbiAgfVxuICB2YXIgayA9IG5vZGVzLmxlbmd0aDtcbiAgd2hpbGUgKGVuZCAhPT0gYW5jZXN0b3IpIHtcbiAgICBub2Rlcy5zcGxpY2UoaywgMCwgZW5kKTtcbiAgICBlbmQgPSBlbmQucGFyZW50O1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cblxuZnVuY3Rpb24gbGVhc3RDb21tb25BbmNlc3RvcihhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gYTtcbiAgdmFyIGFOb2RlcyA9IGEuYW5jZXN0b3JzKCksXG4gICAgICBiTm9kZXMgPSBiLmFuY2VzdG9ycygpLFxuICAgICAgYyA9IG51bGw7XG4gIGEgPSBhTm9kZXMucG9wKCk7XG4gIGIgPSBiTm9kZXMucG9wKCk7XG4gIHdoaWxlIChhID09PSBiKSB7XG4gICAgYyA9IGE7XG4gICAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgICBiID0gYk5vZGVzLnBvcCgpO1xuICB9XG4gIHJldHVybiBjO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV07XG4gIHdoaWxlIChub2RlID0gbm9kZS5wYXJlbnQpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBbXTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBsZWF2ZXMgPSBbXTtcbiAgdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGxlYXZlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsZWF2ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3QgPSB0aGlzLCBsaW5rcyA9IFtdO1xuICByb290LmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlICE9PSByb290KSB7IC8vIERvbuKAmXQgaW5jbHVkZSB0aGUgcm9vdOKAmXMgcGFyZW50LCBpZiBhbnkuXG4gICAgICBsaW5rcy5wdXNoKHtzb3VyY2U6IG5vZGUucGFyZW50LCB0YXJnZXQ6IG5vZGV9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGlua3M7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHRvcCA9IDEsXG4gICAgcmlnaHQgPSAyLFxuICAgIGJvdHRvbSA9IDMsXG4gICAgbGVmdCA9IDQsXG4gICAgZXBzaWxvbiA9IDFlLTY7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoeCArIDAuNSkgKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoeSArIDAuNSkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2VudGVyKHNjYWxlKSB7XG4gIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIDEpIC8gMjsgLy8gQWRqdXN0IGZvciAwLjVweCBvZmZzZXQuXG4gIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKSArIG9mZnNldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gIHJldHVybiAhdGhpcy5fX2F4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICB0aWNrUGFkZGluZyA9IDMsXG4gICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgeCA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gXCJ4XCIgOiBcInlcIixcbiAgICAgIHRyYW5zZm9ybSA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gYm90dG9tID8gdHJhbnNsYXRlWCA6IHRyYW5zbGF0ZVk7XG5cbiAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyKShzY2FsZS5jb3B5KCkpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKSk7XG5cbiAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgbGluZSA9IGxpbmUubWVyZ2UodGlja0VudGVyLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKTsgfSk7XG4gICAgfVxuXG4gICAgdGlja0V4aXQucmVtb3ZlKCk7XG5cbiAgICBwYXRoXG4gICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09IHJpZ2h0XG4gICAgICAgICAgICA/ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIMC41VlwiICsgcmFuZ2UxICsgXCJIXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTTAuNSxcIiArIHJhbmdlMCArIFwiVlwiICsgcmFuZ2UxKVxuICAgICAgICAgICAgOiAodGlja1NpemVPdXRlciA/IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk1cIiArIHJhbmdlMCArIFwiLDAuNUhcIiArIHJhbmdlMSkpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuLypcbiAgICBEZW5kcm9ncmFtIHZpc3VhbGl6ZXMgYSB0ZXh0LWJhc2VkIE5ld2ljayB0cmVlIHVzaW5nIEQzIFY1LlxuXG4gICAgZGVwZW5kZW5jaWVzOlxuICAgIGQzIHY1XG4gICAgdGhlIG5ld2ljayBwYXJzZXI6IG5ld2ljay5qc1xuXG4gICAgcmVmZXJlbmNlczpcbiAgICBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtaGllcmFyY2h5XG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2phc29uZGF2aWVzL25ld2ljay5qcy9cblxuICAgIG5vdGVzIG9uIHRoZSB1bmRlcmx5aW5nIGRhdGEgc3RydWN0dXJlczpcbiAgICAtIGl0IHVzZXMgcGFyc2VOZXdpY2soKSB0byBjb252ZXJ0IHRoZSBuZXdpY2sgdHJlZSBpbnRvIHRoZSBmb2xsb3dpbmcganNvbjpcbiAgICAgICAge1xuICAgICAgICAgICAgYnJhbmNoc2V0OltjaGlsZCBub2RlIGpzb24gb2JqZWN0c10sXG4gICAgICAgICAgICBuYW1lOiBcIlwiIC8vIGludGVybmFsIG5vZGVzIHdvdWxkIGhhdmUgbm8gcmVhbCBsYWJlbHNcbiAgICAgICAgfVxuICAgICAgIFRoaXMganNvbiBzdHJ1Y3R1cmUgaXMgdGhlIGlucHV0IGRhdGEgb2YgZDMuaGllcmFyY2h5KClcblxuICAgIC0gSW4gdGhlIGQzLmhpZXJhcmNoeSgpLCB0aGUgcm9vdCBub2RlIG9iamVjdCBoYXMgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbY28sIGNvXSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBicmFuY2hzZXQ6IEFycmF5KDIpLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibm9kZSBuYW1lXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgICAgIGhlaWdodDogaW50ZWdlcixcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlOiA5XG4gICAgICAgIH1cbiAqL1xuXG4vLyBUT0RPOiBlbGltaW5hdGUgaGFyZC1jb2RlZCB2YWx1ZXNcblxuaW1wb3J0IHtoaWVyYXJjaHl9IGZyb20gXCJkMy1oaWVyYXJjaHlcIjtcbmltcG9ydCB7YXNjZW5kaW5nfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7YXhpc0JvdHRvbSwgYXhpc0xlZnR9IGZyb20gXCJkMy1heGlzXCI7XG5pbXBvcnQge3NjYWxlTGluZWFyLCBzY2FsZUJhbmR9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7cGFyc2VOZXdpY2t9IGZyb20gXCIuLi91dGlscy9uZXdpY2tcIjtcbmNvbnN0IHZlcmJvc2UgPSBmYWxzZTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbmRyb2dyYW0ge1xuICAgIGNvbnN0cnVjdG9yKG5ld2ljaywgb3JpZW50YXRpb249XCJoXCIpe1xuICAgICAgICB0aGlzLm5ld2ljayA9IG5ld2ljaztcbiAgICAgICAgdGhpcy5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xuICAgICAgICB0aGlzLnBvc3RvcmRlciA9IFtdO1xuICAgICAgICB0aGlzLnJvb3QgPSBoaWVyYXJjaHkocGFyc2VOZXdpY2sobmV3aWNrKSwgKGQpID0+IGQuYnJhbmNoc2V0KVxuICAgICAgICAgICAgLnN1bSgoZCk9PmQuYnJhbmNoc2V0PzA6MSlcbiAgICAgICAgICAgIC5zb3J0KChhLGIpPT5hLnZhbHVlLWIudmFsdWV8fGEuZGF0YS5sZW5ndGgtYi5kYXRhLmxlbmd0aCk7XG4gICAgICAgIHRoaXMubGVhdmVzID0gdGhpcy5yb290LmxlYXZlcygpLnNvcnQoKGEsIGIpID0+IChhLnZhbHVlIC0gYi52YWx1ZSkgfHwgYXNjZW5kaW5nKGEuZGF0YS5sZW5ndGgsIGIuZGF0YS5sZW5ndGgpKTtcbiAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueFNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnlTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBkcmF3KGRvbSwgd2lkdGgsIGhlaWdodCl7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuX3NldFhTY2FsZSgpO1xuICAgICAgICB0aGlzLl9zZXRZU2NhbGUoKTtcbiAgICAgICAgaWYgKFwiaFwiID09IHRoaXMub3JpZW50YXRpb24pIHRoaXMuX2RyYXdIVHJlZShkb20pO1xuICAgICAgICBlbHNlIHRoaXMuX2RyYXdWVHJlZShkb20pO1xuICAgIH1cblxuICAgIC8vLy8vLy8gcHJpdmF0ZSBtZXRob2RzIC8vLy8vLy9cblxuICAgIF9kcmF3SFRyZWUoZG9tKXtcbiAgICAgICAgY29uc3Qgc2V0WSA9IChub2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gYSBsZWFmIG5vZGVcbiAgICAgICAgICAgICAgICBub2RlLnkgPSB0aGlzLnlTY2FsZShub2RlLmRhdGEubmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGFuIGludGVybmFsIG5vZGVcbiAgICAgICAgICAgICAgICAvLyB0aGUgeSBjb29yZGluYXRlIG9mIGFuIGludGVybmFsIG5vZGUgaXMgdGhlIGF2ZXJhZ2UgeSBmcm9tIGl0cyBjaGlsZHJlblxuICAgICAgICAgICAgICAgIG5vZGUueSA9IG5vZGUuY2hpbGRyZW4ucmVkdWNlKChzdW0sIGQpPT5zdW0rZC55LCAwKS9ub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc2V0WCA9IChub2RlKSA9PiB7XG4gICAgICAgICAgICBub2RlLnggPSB0aGlzLnhTY2FsZSh0aGlzLl9nZXRCcmFuY2hMZW5ndGhUb1Jvb3Qobm9kZSkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGZyb20gdGhlIGxlYWYgbGV2ZWwgLT4gcm9vdFxuICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMuX3NvcnROb2Rlc0J5TGV2ZWwoKTtcbiAgICAgICAgbm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgc2V0WChub2RlKTtcbiAgICAgICAgICAgIHNldFkobm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIuYnJhbmNoXCIpXG4gICAgICAgICAgICAuZGF0YShub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgKGQpID0+IGQueClcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgKGQpID0+IGQuZGF0YS5sZW5ndGg/ZC54IC0gdGhpcy54U2NhbGUoZC5kYXRhLmxlbmd0aCk6ZC54KVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCAoZCkgPT4gZC55ICsgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgKGQpID0+IGQueSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImdyYXlcIilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEpO1xuXG4gICAgICAgIC8vIGZvciBhbGwgaW50ZXJuYWwgbm9kZXNcbiAgICAgICAgY29uc3QgaW5vZGVzID0gdGhpcy5yb290LmRlc2NlbmRhbnRzKCkuZmlsdGVyKChkKT0+ZC5oZWlnaHQpLnNvcnQoKGEsYik9PmIuaGVpZ2h0LWEuaGVpZ2h0KTtcbiAgICAgICAgZG9tLnNlbGVjdEFsbChcIi5hcm1cIilcbiAgICAgICAgICAgIC5kYXRhKGlub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgKGQpID0+IGQueClcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgKGQpID0+IGQueClcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpID0+IGQuY2hpbGRyZW5bMF0ueSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIChkKSA9PiBkLmNoaWxkcmVuWzFdLnkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJncmF5XCIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKTtcblxuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLm5vZGVcIilcbiAgICAgICAgICAgIC5kYXRhKGlub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCkgPT4gZC54KVxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCAoZCkgPT4gZC55ICsgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKVxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzMzM1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDAuNSlcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkZW5kcm9ncmFtLW5vZGVcIilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QodGhpcykuYXR0cihcInJcIiwgMyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZC5sZWF2ZXMoKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QodGhpcykuYXR0cihcInJcIiwgMik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBheGlzXG4gICAgICAgIC8vIEFkZCB0aGUgeCBBeGlzXG4gICAgICAgIGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZGVuZHJvZ3JhbS1heGlzXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgdGhpcy5oZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgIC5jYWxsKFxuICAgICAgICAgICAgICAgIGF4aXNCb3R0b20odGhpcy54U2NhbGUpXG4gICAgICAgICAgICAgICAgICAgIC50aWNrcygzKVxuICAgICAgICAgICAgICAgIC8vIC50aWNrVmFsdWVzKFtNYXRoLmZsb29yKHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpLzIpLCBNYXRoLmZsb29yKHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpKV0pXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIF9zb3J0Tm9kZXNCeUxldmVsKCl7XG4gICAgICAgIC8vIHJldHVybnMgYSBsaXN0IG9mIG5vZGVzIG9yZGVyZWQgYnkgYW5jZXN0cmFsIGxldmVsLCB0aGVuIGJ5IGJyYW5jaCBsZW5ndGhcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5kZXNjZW5kYW50cygpLnNvcnQoKGEsIGIpID0+IChhLmhlaWdodCAtIGIuaGVpZ2h0KSB8fCBhc2NlbmRpbmcoYS5kYXRhLmxlbmd0aCwgYi5kYXRhLmxlbmd0aCkpO1xuICAgIH1cblxuICAgIF9kcmF3VlRyZWUoZG9tKXtcbiAgICAgICAgY29uc3Qgc2V0WCA9IChub2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gYSBsZWFmIG5vZGVcbiAgICAgICAgICAgICAgICBub2RlLnggPSB0aGlzLnhTY2FsZShub2RlLmRhdGEubmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGFuIGludGVybmFsIG5vZGVcbiAgICAgICAgICAgICAgICAvLyB0aGUgeSBjb29yZGluYXRlIG9mIGFuIGludGVybmFsIG5vZGUgaXMgdGhlIGF2ZXJhZ2UgeSBmcm9tIGl0cyBjaGlsZHJlblxuICAgICAgICAgICAgICAgIG5vZGUueCA9IG5vZGUuY2hpbGRyZW4ucmVkdWNlKChzdW0sIGQpPT5zdW0rZC54LCAwKS9ub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc2V0WSA9IChub2RlKSA9PiB7XG4gICAgICAgICAgICBub2RlLnkgPSB0aGlzLnlTY2FsZSh0aGlzLl9nZXRCcmFuY2hMZW5ndGhUb1Jvb3Qobm9kZSkpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBmcm9tIHRoZSBsZWFmIGxldmVsIC0+IHJvb3RcbiAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLl9zb3J0Tm9kZXNCeUxldmVsKCk7XG4gICAgICAgIG5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIHNldFgobm9kZSk7XG4gICAgICAgICAgICBzZXRZKG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgZG9tLnNlbGVjdEFsbChcIi5icmFuY2hcIilcbiAgICAgICAgICAgIC5kYXRhKG5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCAoZCkgPT4gZC55KVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCAoZCkgPT4gZC5kYXRhLmxlbmd0aD9kLnkgLSB0aGlzLnlTY2FsZShkLmRhdGEubGVuZ3RoKTpkLnkpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLnggKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC54ICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiZ3JheVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMSk7XG5cbiAgICAgICAgLy8gZm9yIGFsbCBpbnRlcm5hbCBub2Rlc1xuICAgICAgICBjb25zdCBpbm9kZXMgPSB0aGlzLnJvb3QuZGVzY2VuZGFudHMoKS5maWx0ZXIoKGQpPT5kLmhlaWdodCkuc29ydCgoYSxiKT0+Yi5oZWlnaHQtYS5oZWlnaHQpO1xuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmFybVwiKVxuICAgICAgICAgICAgLmRhdGEoaW5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCAoZCkgPT4gZC55KVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCAoZCkgPT4gZC55KVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCAoZCkgPT4gZC5jaGlsZHJlblswXS54ICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgKGQpID0+IGQuY2hpbGRyZW5bMV0ueCArIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImdyYXlcIilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEpO1xuXG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIubm9kZVwiKVxuICAgICAgICAgICAgLmRhdGEoaW5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIChkKSA9PiBkLnggKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCAoZCkgPT4gZC55KVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDIpXG4gICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjMzMzXCIpXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMC41KVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRlbmRyb2dyYW0tbm9kZVwiKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5hdHRyKFwiclwiLCAzKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkLmxlYXZlcygpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5hdHRyKFwiclwiLCAyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGF4aXNcbiAgICAgICAgLy8gQWRkIHRoZSB4IEF4aXNcbiAgICAgICAgZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC8vIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt0aGlzLndpZHRofSwgMClgKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRlbmRyb2dyYW0tYXhpc1wiKVxuICAgICAgICAgICAgLmNhbGwoXG4gICAgICAgICAgICAgICAgYXhpc0xlZnQodGhpcy55U2NhbGUpXG4gICAgICAgICAgICAgICAgICAgIC50aWNrcygzKVxuICAgICAgICAgICAgICAgIC8vIC50aWNrVmFsdWVzKFtNYXRoLmZsb29yKHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpLzIpLCBNYXRoLmZsb29yKHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpKV0pXG4gICAgICAgICAgICApO1xuXG4gICAgfVxuXG4gICAgX2dldEJyYW5jaExlbmd0aFRvUm9vdChub2RlKSB7XG4gICAgICAgIC8vIG5vZGU6IGEgZDMuaGllcmFyY2h5IG5vZGVcbiAgICAgICAgcmV0dXJuIG5vZGUucGF0aCh0aGlzLnJvb3QpXG4gICAgICAgICAgICAucmVkdWNlKChzdW0sIGQpID0+IGQuZGF0YS5sZW5ndGg/c3VtK2QuZGF0YS5sZW5ndGg6c3VtLCAwKTtcbiAgICB9XG5cbiAgICBfZ2V0TWF4QnJhbmNoTGVuZ3RoKCkge1xuICAgICAgICAvLyB0aGUgYXNzdW1wdGlvbiBoZXJlIGlzIHRoYXQgYWxsIGxlYWYgbm9kZXMgaGF2ZSB0aGUgc2FtZSBkaXN0YW5jZSB0byB0aGUgcm9vdC5cbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLmxlYXZlc1swXTsgLy8gcmFuZG9tbHkgcGlja3MgYSBsZWFmIG5vZGVcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJyYW5jaExlbmd0aFRvUm9vdChub2RlKTtcbiAgICB9XG5cbiAgICBfYXNzaWduUG9zdG9yZGVyKG5vZGUpe1xuICAgICAgICAvLyBhc3NpZ25zIHBvc3Qtb3JkZXIgb2YgYWxsIGxlYWYgbm9kZXNcbiAgICAgICAgaWYobm9kZS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIC8vIGJhc2UgY2FzZVxuICAgICAgICAgICAgdGhpcy5wb3N0b3JkZXIucHVzaChub2RlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Fzc2lnblBvc3RvcmRlcihub2RlLmNoaWxkcmVuWzBdKTtcbiAgICAgICAgICAgIHRoaXMuX2Fzc2lnblBvc3RvcmRlcihub2RlLmNoaWxkcmVuWzFdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRYU2NhbGUoKXtcbiAgICAgICAgaWYgKFwiaFwiID09IHRoaXMub3JpZW50YXRpb24pe1xuICAgICAgICAgICAgdGhpcy54U2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLmRvbWFpbihbMCwgdGhpcy5fZ2V0TWF4QnJhbmNoTGVuZ3RoKCldKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy53aWR0aF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYXNzaWduUG9zdG9yZGVyKHRoaXMucm9vdCk7XG4gICAgICAgICAgICBpZiAodmVyYm9zZSkgY29uc29sZS5sb2codGhpcy5wb3N0b3JkZXIpO1xuICAgICAgICAgICAgdGhpcy54U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgIC5kb21haW4odGhpcy5wb3N0b3JkZXIubWFwKChkKSA9PiBkLmRhdGEubmFtZSkpXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCB0aGlzLndpZHRoXSlcbiAgICAgICAgICAgICAgICAucGFkZGluZyguMDUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3NldFlTY2FsZSgpe1xuICAgICAgICBpZiAoXCJoXCIgPT0gdGhpcy5vcmllbnRhdGlvbil7XG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Qb3N0b3JkZXIodGhpcy5yb290KTtcbiAgICAgICAgICAgIGlmICh2ZXJib3NlKSBjb25zb2xlLmxvZyh0aGlzLnBvc3RvcmRlcik7XG4gICAgICAgICAgICB0aGlzLnlTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgLmRvbWFpbih0aGlzLnBvc3RvcmRlci5tYXAoKGQpID0+IGQuZGF0YS5uYW1lKSlcbiAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIHRoaXMuaGVpZ2h0XSlcbiAgICAgICAgICAgICAgICAucGFkZGluZyguMDUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy55U2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLmRvbWFpbihbMCwgdGhpcy5fZ2V0TWF4QnJhbmNoTGVuZ3RoKCldKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy5oZWlnaHRdKTtcbiAgICAgICAgfVxuICAgIH1cblxufSIsIi8vIENvcHlyaWdodCAyMDExIEphc29uIERhdmllcyBodHRwczovL2dpdGh1Yi5jb20vamFzb25kYXZpZXMvbmV3aWNrLmpzXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU5ld2ljayhzKSB7XG4gICAgdmFyIGFuY2VzdG9ycyA9IFtdO1xuICAgIHZhciB0cmVlID0ge307XG4gICAgdmFyIHRva2VucyA9IHMuc3BsaXQoL1xccyooO3xcXCh8XFwpfCx8OilcXHMqLyk7XG4gICAgZm9yICh2YXIgaT0wOyBpPHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgIHZhciBzdWJ0cmVlID0ge307XG5cbiAgICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlIFwiKFwiOiAvLyBuZXcgYnJhbmNoc2V0XG4gICAgICAgICAgICB0cmVlLmJyYW5jaHNldCA9IFtzdWJ0cmVlXTtcbiAgICAgICAgICAgIGFuY2VzdG9ycy5wdXNoKHRyZWUpO1xuICAgICAgICAgICAgdHJlZSA9IHN1YnRyZWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIixcIjogLy8gYW5vdGhlciBicmFuY2hcbiAgICAgICAgICAgIGFuY2VzdG9yc1thbmNlc3RvcnMubGVuZ3RoLTFdLmJyYW5jaHNldC5wdXNoKHN1YnRyZWUpO1xuICAgICAgICAgICAgdHJlZSA9IHN1YnRyZWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIilcIjogLy8gb3B0aW9uYWwgbmFtZSBuZXh0XG4gICAgICAgICAgICB0cmVlID0gYW5jZXN0b3JzLnBvcCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI6XCI6IC8vIG9wdGlvbmFsIGxlbmd0aCBuZXh0XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhciB4ID0gdG9rZW5zW2ktMV07XG4gICAgICAgICAgICBpZiAoeCA9PSBcIilcIiB8fCB4ID09IFwiKFwiIHx8IHggPT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICB0cmVlLm5hbWUgPSB0b2tlbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeCA9PSBcIjpcIikge1xuICAgICAgICAgICAgICAgIHRyZWUubGVuZ3RoID0gcGFyc2VGbG9hdCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRyZWU7XG59XG5cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qKlxuICogQ3JlYXRlIGEgdG9vbGJhclxuICogVGhpcyBjbGFzcyB1c2VzIGEgbG90IG9mIGpRdWVyeSBmb3IgZG9tIGVsZW1lbnQgbWFuaXB1bGF0aW9uXG4gKi9cblxuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7cGFyc2VDc3NTdHlsZXN9IGZyb20gXCIuLi91dGlscy9kb3dubG9hZC11dGlsc1wiO1xuaW1wb3J0IHtzYXZlQXN9IGZyb20gXCJmaWxlLXNhdmVyXCI7XG5pbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCI7IFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sYmFyIHtcbiAgICBjb25zdHJ1Y3Rvcihkb21JZCwgdG9vbHRpcD11bmRlZmluZWQsIHZlcnRpY2FsPWZhbHNlKXtcbiAgICAgICAgJChgIyR7ZG9tSWR9YCkuc2hvdygpOyAvLyBpZiBoaWRkZW5cblxuICAgICAgICAvLyBhZGQgYSBuZXcgYmFyZ3JvdXAgZGl2IHRvIGRvbUlEIHdpdGggYm9vdHN0cmFwIGJ1dHRvbiBjbGFzc2VzXG4gICAgICAgIGNvbnN0IGJ0bkNsYXNzZXMgPSB2ZXJ0aWNhbD9cImJ0bi1ncm91cC12ZXJ0aWNhbCBidG4tZ3JvdXAtc21cIjogXCJidG4tZ3JvdXAgYnRuLWdyb3VwLXNtXCI7XG4gICAgICAgIHRoaXMuYmFyID0gJChcIjxkaXYvPlwiKS5hZGRDbGFzcyhidG5DbGFzc2VzKS5hcHBlbmRUbyhgIyR7ZG9tSWR9YCk7XG4gICAgICAgIHRoaXMuYnV0dG9ucyA9IHt9O1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRvd25sb2FkIGJ1dHRvbiBmb3IgU1ZHXG4gICAgICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBidXR0b24gZG9tIElEXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IHRoZSBTVkcgZG9tIElEIHRvIGdyYWIgYW5kIGRvd25sb2FkXG4gICAgICogQHBhcmFtIG91dGZpbGVOYW1lIHtTdHJpbmd9IHRoZSBkb3dubG9hZCBmaWxlIG5hbWVcbiAgICAgKiBAcGFyYW0gY2xvbmVJZCB7U3RyaW5nfSB0aGUgY2xvbmVkIFNWRyBkb20gSURcbiAgICAgKiBAcGFyYW0gaWNvbiB7U3RyaW5nfSBhIGZvbnRhd2Vzb21lJ3MgaWNvbiBjbGFzcyBuYW1lXG4gICAgICovXG4gICAgY3JlYXRlRG93bmxvYWRTdmdCdXR0b24oaWQsIHN2Z0lkLCBvdXRmaWxlTmFtZSwgY2xvbmVJZCwgaWNvbj1cImZhLWRvd25sb2FkXCIpe1xuICAgICAgICB0aGlzLmNyZWF0ZUJ1dHRvbihpZCwgaWNvbik7XG4gICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgICAgIC5vbihcImNsaWNrXCIsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFN2ZyhzdmdJZCwgb3V0ZmlsZU5hbWUsIGNsb25lSWQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KFwiRG93bmxvYWQgdGhlIHBsb3RcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlUmVzZXRCdXR0b24oaWQsIGNhbGxiYWNrLCBpY29uPVwiZmEtZXhwYW5kLWFycm93cy1hbHRcIil7XG4gICAgICAgIHRoaXMuY3JlYXRlQnV0dG9uKGlkLCBpY29uKTtcbiAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgY2FsbGJhY2spXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhcIlJlc2V0IHRoZSBzY2FsZXNcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIGEgYnV0dG9uIHRvIHRoZSB0b29sYmFyXG4gICAgICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBidXR0b24ncyBpZFxuICAgICAqIEBwYXJhbSBpY29uIHtTdHJpbmd9IGEgZm9udGF3ZXNvbWUgaWNvbiBjbGFzc1xuICAgICAqIERlcGVuZGVuY2llczogQm9vdHN0cmFwLCBqUXVlcnksIEZvbnRhd2Vzb21lXG4gICAgICovXG4gICAgY3JlYXRlQnV0dG9uKGlkLCBpY29uPVwiZmEtZG93bmxvYWRcIiwgaG92ZXI9XCJuZWVkIHRvIGRlZmluZVwiLCBjYWxsYmFjaz11bmRlZmluZWQpe1xuICAgICAgICBjb25zdCAkYnV0dG9uID0gJChcIjxhLz5cIikuYXR0cihcImlkXCIsIGlkKVxuICAgICAgICAgICAgLmFkZENsYXNzKFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1saWdodCBidG4tc21cIikuYXBwZW5kVG8odGhpcy5iYXIpO1xuICAgICAgICBpZiAoaWNvbi5zdGFydHNXaXRoKFwiZmEtXCIpKSAkKFwiPGkvPlwiKS5hZGRDbGFzcyhgZmEgJHtpY29ufWApLmFwcGVuZFRvKCRidXR0b24pO1xuICAgICAgICBlbHNlIHskYnV0dG9uLnRleHQoaWNvbik7fVxuICAgICAgICB0aGlzLmJ1dHRvbnNbaWRdID0gJGJ1dHRvbjtcbiAgICAgICAgaWYgKGlkIT1cImZvb1wiKXtcbiAgICAgICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgICAgICAgICAub24oXCJjbGlja1wiLCAoKT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2s9PT11bmRlZmluZWQpIGFsZXJ0KFwibmVlZCB0byBkZWZpbmUgdGhlIGNsaWNrIGV2ZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgKCk9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coaG92ZXIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgKCk9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuICRidXR0b247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYXR0YWNoIGEgdG9vbHRpcCBkb20gd2l0aCB0aGUgdG9vbGJhclxuICAgICAqIEBwYXJhbSB0b29sdGlwIHtUb29sdGlwfVxuICAgICAqL1xuICAgIGF0dGFjaFRvb2x0aXAodG9vbHRpcCl7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG93bmxvYWQgU1ZHIG9ialxuICAgICAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfSB0aGUgU1ZHIGRvbSBJRFxuICAgICAqIEBwYXJhbSBmaWxlTmFtZSB7U3RyaW5nfSB0aGUgb3V0cHV0IGZpbGUgbmFtZVxuICAgICAqIEBwYXJhbSBjbG9uZUlkIHtTdHJpbmd9IHRoZSB0ZW1wb3JhcnkgZG9tIElEIHRvIGNvcHkgdGhlIFNWRyB0b1xuICAgICAqIERlcGVuZGVuY2llczogRmlsZVNhdmVyXG4gICAgICovXG4gICAgZG93bmxvYWRTdmcoc3ZnSWQsIGZpbGVOYW1lLCBjbG9uZUlkKXtcbiAgICAgICAgY29uc29sZS5sb2coc3ZnSWQsIGZpbGVOYW1lLCBjbG9uZUlkKTtcbiAgICAgICAgLy8gbGV0IHN2Z09iaiA9ICQoJCgkKGAke1wiI1wiICtzdmdJZH0gc3ZnYCkpWzBdKTsgLy8gY29tcGxpY2F0ZWQgalF1ZXJ5IHRvIGdldCB0byB0aGUgU1ZHIG9iamVjdFxuICAgICAgICBsZXQgc3ZnT2JqID0gJCgkKCQoYCR7XCIjXCIgK3N2Z0lkfWApKVswXSk7XG4gICAgICAgIGxldCAkc3ZnQ29weSA9IHN2Z09iai5jbG9uZSgpXG4gICAgICAgICAgICAuYXR0cihcInZlcnNpb25cIiwgXCIxLjFcIilcbiAgICAgICAgICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgICAgICAvLyBwYXJzZSBhbmQgYWRkIGFsbCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgICAgIGxldCBzdHlsZXMgPSBwYXJzZUNzc1N0eWxlcyhzdmdPYmouZ2V0KCkpO1xuICAgICAgICAkc3ZnQ29weS5wcmVwZW5kKHN0eWxlcyk7XG5cbiAgICAgICAgJChcIiNcIiArIGNsb25lSWQpLmh0bWwoXCJcIikuaGlkZSgpOyAvLyBtYWtlIHN1cmUgdGhlIGNvcHlJRCBpcyBpbnZpc2libGVcbiAgICAgICAgbGV0IHN2Z0h0bWwgPSAkKGAjJHtjbG9uZUlkfWApLmFwcGVuZCgkc3ZnQ29weSkuaHRtbCgpO1xuXG4gICAgICAgIGxldCBzdmdCbG9iID0gbmV3IEJsb2IoW3N2Z0h0bWxdLCB7dHlwZTogXCJpbWFnZS9zdmcreG1sXCJ9KTtcbiAgICAgICAgc2F2ZUFzKHN2Z0Jsb2IsIGZpbGVOYW1lKTsgLy8gdGhpcyBpcyBhIEZpbGVTYXZlciBmdW5jdGlvbi4uLi5cblxuICAgICAgICAvLyBjbGVhciB0aGUgdGVtcCBkb3dubG9hZCBkaXZcbiAgICAgICAgJChgIyR7Y2xvbmVJZH1gKS5odG1sKFwiXCIpLmhpZGUoKTtcbiAgICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQge3NhdmVBc30gZnJvbSBcImZpbGUtc2F2ZXJcIjtcbmltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjtcblxuLyoqXG4gKiBEb3dubG9hZCBTVkdcbiAqIEBwYXJhbSBzdmdPYmpcbiAqIEBwYXJhbSBkb3dubG9hZEZpbGVOYW1lIHtTdHJpbmd9XG4gKiBAcGFyYW0gdGVtcERvd25sb2FkRGl2SWQge1N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkU3ZnKHN2Z09iaiwgZG93bmxvYWRGaWxlTmFtZSwgdGVtcERvd25sb2FkRGl2SWQpe1xuICAgIGNvbnNvbGUubG9nKHN2Z09iaik7XG4gICAgdmFyICRzdmdDb3B5ID0gc3ZnT2JqLmNsb25lKClcbiAgICAgICAgLmF0dHIoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpXG4gICAgICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgIC8vIHBhcnNlIGFuZCBhZGQgdGhlIENTUyBzdHlsaW5nIHVzZWQgYnkgdGhlIFNWR1xuICAgIHZhciBzdHlsZXMgPSBwYXJzZUNzc1N0eWxlcyhzdmdPYmouZ2V0KCkpO1xuICAgICRzdmdDb3B5LnByZXBlbmQoc3R5bGVzKTtcblxuICAgICQoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuaHRtbChcIlwiKS5oaWRlKCk7XG4gICAgdmFyIHN2Z0h0bWwgPSAkKFwiI1wiICsgdGVtcERvd25sb2FkRGl2SWQpLmFwcGVuZCgkc3ZnQ29weSkuaHRtbCgpO1xuXG4gICAgdmFyIHN2Z0Jsb2IgPSBuZXcgQmxvYihbc3ZnSHRtbF0sIHt0eXBlOiBcImltYWdlL3N2Zyt4bWxcIn0pO1xuICAgIHNhdmVBcyhzdmdCbG9iLCBkb3dubG9hZEZpbGVOYW1lKTtcblxuICAgIC8vIGNsZWFyIHRoZSB0ZW1wIGRvd25sb2FkIGRpdlxuICAgICQoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuaHRtbChcIlwiKS5oaWRlKCk7XG59XG4vKipcbiAqIEEgZnVuY3Rpb24gZm9yIHBhcnNpbmcgdGhlIENTUyBzdHlsZSBzaGVldCBhbmQgaW5jbHVkaW5nIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIGluIHRoZSBkb3dubG9hZGFibGUgU1ZHLlxuICogQHBhcmFtIGRvbVxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzc1N0eWxlcyAoZG9tKSB7XG4gICAgdmFyIHVzZWQgPSBcIlwiO1xuICAgIHZhciBzaGVldHMgPSBkb2N1bWVudC5zdHlsZVNoZWV0cztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hlZXRzLmxlbmd0aDsgaSsrKSB7IC8vIFRPRE86IHdhbGsgdGhyb3VnaCB0aGlzIGJsb2NrIG9mIGNvZGVcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHNoZWV0c1tpXS5jc3NSdWxlcyA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciBydWxlcyA9IHNoZWV0c1tpXS5jc3NSdWxlcztcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBydWxlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBydWxlID0gcnVsZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihydWxlLnN0eWxlKSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtcztcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZpbmcgYW55IHNlbGVjdG9yIHRleHQgaW5jbHVkaW5nIHN2ZyBlbGVtZW50IElEIC0tIGRvbSBhbHJlYWR5IHNlbGVjdHMgZm9yIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gcnVsZS5zZWxlY3RvclRleHQgPT09IHVuZGVmaW5lZD8gcnVsZS5zZWxlY3RvclRleHQgOiBydWxlLnNlbGVjdG9yVGV4dC5yZXBsYWNlKGAjJHtkb21bMF0uaWR9IGAsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAvL1NvbWUgc2VsZWN0b3JzIHdvbid0IHdvcmssIGFuZCBtb3N0IG9mIHRoZXNlIGRvbid0IG1hdHRlci5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1zID0gJChkb20pLmZpbmQoc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgKz0gcnVsZS5zZWxlY3RvclRleHQgKyBcIiB7IFwiICsgcnVsZS5zdHlsZS5jc3NUZXh0ICsgXCIgfVxcblwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBJbiBGaXJlZm94LCBpZiBzdHlsZXNoZWV0IG9yaWdpbmF0ZXMgZnJvbSBhIGRpZmYgZG9tYWluLFxuICAgICAgICAgICAgLy8gdHJ5aW5nIHRvIGFjY2VzcyB0aGUgY3NzUnVsZXMgd2lsbCB0aHJvdyBhIFNlY3VyaXR5RXJyb3IuXG4gICAgICAgICAgICAvLyBIZW5jZSwgd2UgbXVzdCB1c2UgYSB0cnkvY2F0Y2ggdG8gaGFuZGxlIHRoaXMgaW4gRmlyZWZveFxuICAgICAgICAgICAgaWYgKGUubmFtZSAhPT0gXCJTZWN1cml0eUVycm9yXCIpIHRocm93IGU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgIHMuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHQvY3NzXCIpO1xuICAgIHMuaW5uZXJIVE1MID0gXCI8IVtDREFUQVtcXG5cIiArIHVzZWQgKyBcIlxcbl1dPlwiO1xuXG4gICAgcmV0dXJuIHM7XG59XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSB8fCAvW1xccy5dLy50ZXN0KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgX1t0XSA9IFtdO1xuICB9XG4gIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG59XG5cbmZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgdGhpcy5fID0gXztcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbkRpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpc3BhdGNoLFxuICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgIFQgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIsIF8pLFxuICAgICAgICB0LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBULmxlbmd0aDtcblxuICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7XG4gICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY29weTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvcHkgPSB7fSwgXyA9IHRoaXMuXztcbiAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChjb3B5KTtcbiAgfSxcbiAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHR5cGUsIHRoYXQsIGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodmFyIHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldCh0eXBlLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gYy52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0KHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICB0eXBlW2ldID0gbm9vcCwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BhdGNoO1xuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiIsInZhciBmcmFtZSA9IDAsIC8vIGlzIGFuIGFuaW1hdGlvbiBmcmFtZSBwZW5kaW5nP1xuICAgIHRpbWVvdXQgPSAwLCAvLyBpcyBhIHRpbWVvdXQgcGVuZGluZz9cbiAgICBpbnRlcnZhbCA9IDAsIC8vIGFyZSBhbnkgdGltZXJzIGFjdGl2ZT9cbiAgICBwb2tlRGVsYXkgPSAxMDAwLCAvLyBob3cgZnJlcXVlbnRseSB3ZSBjaGVjayBmb3IgY2xvY2sgc2tld1xuICAgIHRhc2tIZWFkLFxuICAgIHRhc2tUYWlsLFxuICAgIGNsb2NrTGFzdCA9IDAsXG4gICAgY2xvY2tOb3cgPSAwLFxuICAgIGNsb2NrU2tldyA9IDAsXG4gICAgY2xvY2sgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwib2JqZWN0XCIgJiYgcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2UgOiBEYXRlLFxuICAgIHNldEZyYW1lID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdykgOiBmdW5jdGlvbihmKSB7IHNldFRpbWVvdXQoZiwgMTcpOyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gY2xvY2tOb3cgfHwgKHNldEZyYW1lKGNsZWFyTm93KSwgY2xvY2tOb3cgPSBjbG9jay5ub3coKSArIGNsb2NrU2tldyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICBjbG9ja05vdyA9IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUaW1lcigpIHtcbiAgdGhpcy5fY2FsbCA9XG4gIHRoaXMuX3RpbWUgPVxuICB0aGlzLl9uZXh0ID0gbnVsbDtcbn1cblxuVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVGltZXIsXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICBlbHNlIHRhc2tIZWFkID0gdGhpcztcbiAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHNsZWVwKCk7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lckZsdXNoKCkge1xuICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgKytmcmFtZTsgLy8gUHJldGVuZCB3ZeKAmXZlIHNldCBhbiBhbGFybSwgaWYgd2UgaGF2ZW7igJl0IGFscmVhZHkuXG4gIHZhciB0ID0gdGFza0hlYWQsIGU7XG4gIHdoaWxlICh0KSB7XG4gICAgaWYgKChlID0gY2xvY2tOb3cgLSB0Ll90aW1lKSA+PSAwKSB0Ll9jYWxsLmNhbGwobnVsbCwgZSk7XG4gICAgdCA9IHQuX25leHQ7XG4gIH1cbiAgLS1mcmFtZTtcbn1cblxuZnVuY3Rpb24gd2FrZSgpIHtcbiAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gY2xvY2subm93KCkpICsgY2xvY2tTa2V3O1xuICBmcmFtZSA9IHRpbWVvdXQgPSAwO1xuICB0cnkge1xuICAgIHRpbWVyRmx1c2goKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBmcmFtZSA9IDA7XG4gICAgbmFwKCk7XG4gICAgY2xvY2tOb3cgPSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBva2UoKSB7XG4gIHZhciBub3cgPSBjbG9jay5ub3coKSwgZGVsYXkgPSBub3cgLSBjbG9ja0xhc3Q7XG4gIGlmIChkZWxheSA+IHBva2VEZWxheSkgY2xvY2tTa2V3IC09IGRlbGF5LCBjbG9ja0xhc3QgPSBub3c7XG59XG5cbmZ1bmN0aW9uIG5hcCgpIHtcbiAgdmFyIHQwLCB0MSA9IHRhc2tIZWFkLCB0MiwgdGltZSA9IEluZmluaXR5O1xuICB3aGlsZSAodDEpIHtcbiAgICBpZiAodDEuX2NhbGwpIHtcbiAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcbiAgICAgIHQwID0gdDEsIHQxID0gdDEuX25leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcbiAgICAgIHQxID0gdDAgPyB0MC5fbmV4dCA9IHQyIDogdGFza0hlYWQgPSB0MjtcbiAgICB9XG4gIH1cbiAgdGFza1RhaWwgPSB0MDtcbiAgc2xlZXAodGltZSk7XG59XG5cbmZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgaWYgKGZyYW1lKSByZXR1cm47IC8vIFNvb25lc3QgYWxhcm0gYWxyZWFkeSBzZXQsIG9yIHdpbGwgYmUuXG4gIGlmICh0aW1lb3V0KSB0aW1lb3V0ID0gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7IC8vIFN0cmljdGx5IGxlc3MgdGhhbiBpZiB3ZSByZWNvbXB1dGVkIGNsb2NrTm93LlxuICBpZiAoZGVsYXkgPiAyNCkge1xuICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIHRpbWUgLSBjbG9jay5ub3coKSAtIGNsb2NrU2tldyk7XG4gICAgaWYgKGludGVydmFsKSBpbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW50ZXJ2YWwpIGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpLCBpbnRlcnZhbCA9IHNldEludGVydmFsKHBva2UsIHBva2VEZWxheSk7XG4gICAgZnJhbWUgPSAxLCBzZXRGcmFtZSh3YWtlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtUaW1lcn0gZnJvbSBcIi4vdGltZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICBkZWxheSA9IGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5O1xuICB0LnJlc3RhcnQoZnVuY3Rpb24oZWxhcHNlZCkge1xuICAgIHQuc3RvcCgpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXIsIHRpbWVvdXR9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJjYW5jZWxcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG5leHBvcnQgdmFyIENSRUFURUQgPSAwO1xuZXhwb3J0IHZhciBTQ0hFRFVMRUQgPSAxO1xuZXhwb3J0IHZhciBTVEFSVElORyA9IDI7XG5leHBvcnQgdmFyIFNUQVJURUQgPSAzO1xuZXhwb3J0IHZhciBSVU5OSU5HID0gNDtcbmV4cG9ydCB2YXIgRU5ESU5HID0gNTtcbmV4cG9ydCB2YXIgRU5ERUQgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gIGNyZWF0ZShub2RlLCBpZCwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgb246IGVtcHR5T24sXG4gICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgIHRpbWVyOiBudWxsLFxuICAgIHN0YXRlOiBDUkVBVEVEXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzY2hlZHVsZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBTVEFSVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBydW5uaW5nXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dChzdGFydCk7XG5cbiAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLlxuICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG5vZGUsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cbiIsImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBzY2hlZHVsZS5vbi5jYWxsKGFjdGl2ZSA/IFwiaW50ZXJydXB0XCIgOiBcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZS5pbmRleCwgc2NoZWR1bGUuZ3JvdXApO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gIH1cblxuICBpZiAoZW1wdHkpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSB0d2VlbjAgPSB0d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjEgPSB0d2VlbjEuc2xpY2UoKTtcbiAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgdCA9IHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9LCBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IG4pIHR3ZWVuMS5wdXNoKHQpO1xuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICBuYW1lICs9IFwiXCI7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0KHRoaXMubm9kZSgpLCBpZCkudHdlZW47XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2Vlbi5sZW5ndGgsIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICB0cmFuc2l0aW9uLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUudmFsdWUgfHwgKHNjaGVkdWxlLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldChub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gIH07XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxudmFyIFNlbGVjdGlvbiA9IHNlbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9ncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge3N0eWxlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBzdHlsZU51bGwobmFtZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICBzdHJpbmcxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgc3RyaW5nMTAgPSBzdHJpbmcxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSxcbiAgICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSBzdHJpbmcxID0gdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlTWF5YmVSZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIG9uMCwgb24xLCBsaXN0ZW5lcjAsIGtleSA9IFwic3R5bGUuXCIgKyBuYW1lLCBldmVudCA9IFwiZW5kLlwiICsga2V5LCByZW1vdmU7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uLFxuICAgICAgICBsaXN0ZW5lciA9IHNjaGVkdWxlLnZhbHVlW2tleV0gPT0gbnVsbCA/IHJlbW92ZSB8fCAocmVtb3ZlID0gc3R5bGVSZW1vdmUobmFtZSkpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wIHx8IGxpc3RlbmVyMCAhPT0gbGlzdGVuZXIpIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24oZXZlbnQsIGxpc3RlbmVyMCA9IGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGkgPSAobmFtZSArPSBcIlwiKSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVOdWxsKG5hbWUsIGkpKVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgc3R5bGVSZW1vdmUobmFtZSkpXG4gICAgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlRnVuY3Rpb24obmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUpKSlcbiAgICAgIC5lYWNoKHN0eWxlTWF5YmVSZW1vdmUodGhpcy5faWQsIG5hbWUpKVxuICAgIDogdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVDb25zdGFudChuYW1lLCBpLCB2YWx1ZSksIHByaW9yaXR5KVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgbnVsbCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHRUd2VlbiBmcm9tIFwiLi90ZXh0VHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmQuanNcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICB0ZXh0VHdlZW46IHRyYW5zaXRpb25fdGV4dFR3ZWVuLFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2UsXG4gIGVuZDogdHJhbnNpdGlvbl9lbmRcbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwiaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgb24wLCBvbjEsIHRoYXQgPSB0aGlzLCBpZCA9IHRoYXQuX2lkLCBzaXplID0gdGhhdC5zaXplKCk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgY2FuY2VsID0ge3ZhbHVlOiByZWplY3R9LFxuICAgICAgICBlbmQgPSB7dmFsdWU6IGZ1bmN0aW9uKCkgeyBpZiAoLS1zaXplID09PSAwKSByZXNvbHZlKCk7IH19O1xuXG4gICAgdGhhdC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKG9uICE9PSBvbjApIHtcbiAgICAgICAgb24xID0gKG9uMCA9IG9uKS5jb3B5KCk7XG4gICAgICAgIG9uMS5fLmNhbmNlbC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmludGVycnVwdC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmVuZC5wdXNoKGVuZCk7XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwgdHlwZSwgc2VsZWN0aW9uKSB7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtjdXN0b21FdmVudCwgZXZlbnQsIHRvdWNoLCBtb3VzZSwgc2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IEJydXNoRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG52YXIgTU9ERV9EUkFHID0ge25hbWU6IFwiZHJhZ1wifSxcbiAgICBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn0sXG4gICAgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn0sXG4gICAgTU9ERV9DRU5URVIgPSB7bmFtZTogXCJjZW50ZXJcIn07XG5cbmZ1bmN0aW9uIG51bWJlcjEoZSkge1xuICByZXR1cm4gWytlWzBdLCArZVsxXV07XG59XG5cbmZ1bmN0aW9uIG51bWJlcjIoZSkge1xuICByZXR1cm4gW251bWJlcjEoZVswXSksIG51bWJlcjEoZVsxXSldO1xufVxuXG5mdW5jdGlvbiB0b3VjaGVyKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgIHJldHVybiB0b3VjaCh0YXJnZXQsIGV2ZW50LnRvdWNoZXMsIGlkZW50aWZpZXIpO1xuICB9O1xufVxuXG52YXIgWCA9IHtcbiAgbmFtZTogXCJ4XCIsXG4gIGhhbmRsZXM6IFtcIndcIiwgXCJlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHgsIGUpIHsgcmV0dXJuIHggPT0gbnVsbCA/IG51bGwgOiBbWyt4WzBdLCBlWzBdWzFdXSwgWyt4WzFdLCBlWzFdWzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG59O1xuXG52YXIgWSA9IHtcbiAgbmFtZTogXCJ5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgPT0gbnVsbCA/IG51bGwgOiBbW2VbMF1bMF0sICt5WzBdXSwgW2VbMV1bMF0sICt5WzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVsxXSwgeHlbMV1bMV1dOyB9XG59O1xuXG52YXIgWFkgPSB7XG4gIG5hbWU6IFwieHlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcIndcIiwgXCJlXCIsIFwic1wiLCBcIm53XCIsIFwibmVcIiwgXCJzd1wiLCBcInNlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSA9PSBudWxsID8gbnVsbCA6IG51bWJlcjIoeHkpOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxufTtcblxudmFyIGN1cnNvcnMgPSB7XG4gIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gIG46IFwibnMtcmVzaXplXCIsXG4gIGU6IFwiZXctcmVzaXplXCIsXG4gIHM6IFwibnMtcmVzaXplXCIsXG4gIHc6IFwiZXctcmVzaXplXCIsXG4gIG53OiBcIm53c2UtcmVzaXplXCIsXG4gIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gIHN3OiBcIm5lc3ctcmVzaXplXCJcbn07XG5cbnZhciBmbGlwWCA9IHtcbiAgZTogXCJ3XCIsXG4gIHc6IFwiZVwiLFxuICBudzogXCJuZVwiLFxuICBuZTogXCJud1wiLFxuICBzZTogXCJzd1wiLFxuICBzdzogXCJzZVwiXG59O1xuXG52YXIgZmxpcFkgPSB7XG4gIG46IFwic1wiLFxuICBzOiBcIm5cIixcbiAgbnc6IFwic3dcIixcbiAgbmU6IFwic2VcIixcbiAgc2U6IFwibmVcIixcbiAgc3c6IFwibndcIlxufTtcblxudmFyIHNpZ25zWCA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IG51bGwsXG4gIGU6ICsxLFxuICBzOiBudWxsLFxuICB3OiAtMSxcbiAgbnc6IC0xLFxuICBuZTogKzEsXG4gIHNlOiArMSxcbiAgc3c6IC0xXG59O1xuXG52YXIgc2lnbnNZID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogLTEsXG4gIGU6IG51bGwsXG4gIHM6ICsxLFxuICB3OiBudWxsLFxuICBudzogLTEsXG4gIG5lOiAtMSxcbiAgc2U6ICsxLFxuICBzdzogKzFcbn07XG5cbmZ1bmN0aW9uIHR5cGUodCkge1xuICByZXR1cm4ge3R5cGU6IHR9O1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gIHJldHVybiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgc3ZnID0gdGhpcy5vd25lclNWR0VsZW1lbnQgfHwgdGhpcztcbiAgaWYgKHN2Zy5oYXNBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIpKSB7XG4gICAgc3ZnID0gc3ZnLnZpZXdCb3guYmFzZVZhbDtcbiAgICByZXR1cm4gW1tzdmcueCwgc3ZnLnldLCBbc3ZnLnggKyBzdmcud2lkdGgsIHN2Zy55ICsgc3ZnLmhlaWdodF1dO1xuICB9XG4gIHJldHVybiBbWzAsIDBdLCBbc3ZnLndpZHRoLmJhc2VWYWwudmFsdWUsIHN2Zy5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IChcIm9udG91Y2hzdGFydFwiIGluIHRoaXMpO1xufVxuXG4vLyBMaWtlIGQzLmxvY2FsLCBidXQgd2l0aCB0aGUgbmFtZSDigJxfX2JydXNo4oCdIHJhdGhlciB0aGFuIGF1dG8tZ2VuZXJhdGVkLlxuZnVuY3Rpb24gbG9jYWwobm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX19icnVzaCkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgcmV0dXJuIG5vZGUuX19icnVzaDtcbn1cblxuZnVuY3Rpb24gZW1wdHkoZXh0ZW50KSB7XG4gIHJldHVybiBleHRlbnRbMF1bMF0gPT09IGV4dGVudFsxXVswXVxuICAgICAgfHwgZXh0ZW50WzBdWzFdID09PSBleHRlbnRbMV1bMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFNlbGVjdGlvbihub2RlKSB7XG4gIHZhciBzdGF0ZSA9IG5vZGUuX19icnVzaDtcbiAgcmV0dXJuIHN0YXRlID8gc3RhdGUuZGltLm91dHB1dChzdGF0ZS5zZWxlY3Rpb24pIDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWCgpIHtcbiAgcmV0dXJuIGJydXNoKFgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hZKCkge1xuICByZXR1cm4gYnJ1c2goWSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gYnJ1c2goWFkpO1xufVxuXG5mdW5jdGlvbiBicnVzaChkaW0pIHtcbiAgdmFyIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIGtleXMgPSB0cnVlLFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxuICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICB0b3VjaGVuZGluZztcblxuICBmdW5jdGlvbiBicnVzaChncm91cCkge1xuICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAuZGF0YShbdHlwZShcIm92ZXJsYXlcIildKTtcblxuICAgIG92ZXJsYXkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KVxuICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xuICAgICAgICB9KTtcblxuICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgIC5kYXRhKFt0eXBlKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNlbGVjdGlvblwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzc3N1wiKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcImNyaXNwRWRnZXNcIik7XG5cbiAgICB2YXIgaGFuZGxlID0gZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaGFuZGxlLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTsgfSk7XG5cbiAgICBncm91cFxuICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uYnJ1c2hcIiwgc3RhcnRlZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmJydXNoXCIsIHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS5icnVzaFwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICBicnVzaC5tb3ZlID0gZnVuY3Rpb24oZ3JvdXAsIHNlbGVjdGlvbikge1xuICAgIGlmIChncm91cC5zZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpLnN0YXJ0KCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAgIC50d2VlbihcImJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMCA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShzZWxlY3Rpb24wLCBzZWxlY3Rpb24xKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHdlZW4odCkge1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIHNlbGVjdGlvbjEgPT09IG51bGwgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgIT09IG51bGwgJiYgc2VsZWN0aW9uMSAhPT0gbnVsbCA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIGVtaXQuc3RhcnQoKS5icnVzaCgpLmVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBicnVzaC5jbGVhciA9IGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgYnJ1c2gubW92ZShncm91cCwgbnVsbCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICB2YXIgZW1pdCA9IHRoYXQuX19icnVzaC5lbWl0dGVyO1xuICAgIHJldHVybiBlbWl0ICYmICghY2xlYW4gfHwgIWVtaXQuY2xlYW4pID8gZW1pdCA6IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MsIGNsZWFuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgdGhpcy5jbGVhbiA9IGNsZWFuO1xuICB9XG5cbiAgRW1pdHRlci5wcm90b3R5cGUgPSB7XG4gICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHRoaXMuc3RhdGUuZW1pdHRlciA9IHRoaXMsIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zdGFydGluZykgdGhpcy5zdGFydGluZyA9IGZhbHNlLCB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgIGVsc2UgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGJydXNoOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZW1pdChcImJydXNoXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIGRlbGV0ZSB0aGlzLnN0YXRlLmVtaXR0ZXIsIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgY3VzdG9tRXZlbnQobmV3IEJydXNoRXZlbnQoYnJ1c2gsIHR5cGUsIGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgIGlmICh0b3VjaGVuZGluZyAmJiAhZXZlbnQudG91Y2hlcykgcmV0dXJuO1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcblxuICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgdHlwZSA9IGV2ZW50LnRhcmdldC5fX2RhdGFfXy50eXBlLFxuICAgICAgICBtb2RlID0gKGtleXMgJiYgZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogKGtleXMgJiYgZXZlbnQuYWx0S2V5ID8gTU9ERV9DRU5URVIgOiBNT0RFX0hBTkRMRSksXG4gICAgICAgIHNpZ25YID0gZGltID09PSBZID8gbnVsbCA6IHNpZ25zWFt0eXBlXSxcbiAgICAgICAgc2lnblkgPSBkaW0gPT09IFggPyBudWxsIDogc2lnbnNZW3R5cGVdLFxuICAgICAgICBzdGF0ZSA9IGxvY2FsKHRoYXQpLFxuICAgICAgICBleHRlbnQgPSBzdGF0ZS5leHRlbnQsXG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgVyA9IGV4dGVudFswXVswXSwgdzAsIHcxLFxuICAgICAgICBOID0gZXh0ZW50WzBdWzFdLCBuMCwgbjEsXG4gICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcbiAgICAgICAgUyA9IGV4dGVudFsxXVsxXSwgczAsIHMxLFxuICAgICAgICBkeCA9IDAsXG4gICAgICAgIGR5ID0gMCxcbiAgICAgICAgbW92aW5nLFxuICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGtleXMgJiYgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIGxvY2tYLFxuICAgICAgICBsb2NrWSxcbiAgICAgICAgcG9pbnRlciA9IGV2ZW50LnRvdWNoZXMgPyB0b3VjaGVyKGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXIpIDogbW91c2UsXG4gICAgICAgIHBvaW50MCA9IHBvaW50ZXIodGhhdCksXG4gICAgICAgIHBvaW50ID0gcG9pbnQwLFxuICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMsIHRydWUpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIGlmIChzZWxlY3Rpb24pIG1vdmluZyA9IHRydWU7XG4gICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24gPSBbXG4gICAgICAgIFt3MCA9IGRpbSA9PT0gWSA/IFcgOiBwb2ludDBbMF0sIG4wID0gZGltID09PSBYID8gTiA6IHBvaW50MFsxXV0sXG4gICAgICAgIFtlMCA9IGRpbSA9PT0gWSA/IEUgOiB3MCwgczAgPSBkaW0gPT09IFggPyBTIDogbjBdXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvblswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvblsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICBlbWl0Lm1vdmVkID0gbW92ZWQ7XG4gICAgICBlbWl0LmVuZGVkID0gZW5kZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgICAgaWYgKGtleXMpIHZpZXdcbiAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cHBlZCwgdHJ1ZSlcblxuICAgICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgfVxuXG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGludGVycnVwdCh0aGF0KTtcbiAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICBlbWl0LnN0YXJ0KCk7XG5cbiAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgIHZhciBwb2ludDEgPSBwb2ludGVyKHRoYXQpO1xuICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHBvaW50MVswXSAtIHBvaW50WzBdKSA+IE1hdGguYWJzKHBvaW50MVsxXSAtIHBvaW50WzFdKSkgbG9ja1kgPSB0cnVlO1xuICAgICAgICBlbHNlIGxvY2tYID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBvaW50ID0gcG9pbnQxO1xuICAgICAgbW92aW5nID0gdHJ1ZTtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIG1vdmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKCkge1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfSEFORExFOiB7XG4gICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSB3MCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBNYXRoLm1heChXIC0gZTAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSA8IDApIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gbjAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMDtcbiAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gTWF0aC5tYXgoTiAtIHMwLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAsIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIHcwIC0gZHggKiBzaWduWCkpLCBlMSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBzMCArIGR5ICogc2lnblkpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZTEgPCB3MSkge1xuICAgICAgICBzaWduWCAqPSAtMTtcbiAgICAgICAgdCA9IHcwLCB3MCA9IGUwLCBlMCA9IHQ7XG4gICAgICAgIHQgPSB3MSwgdzEgPSBlMSwgZTEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWCkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBYW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzMSA8IG4xKSB7XG4gICAgICAgIHNpZ25ZICo9IC0xO1xuICAgICAgICB0ID0gbjAsIG4wID0gczAsIHMwID0gdDtcbiAgICAgICAgdCA9IG4xLCBuMSA9IHMxLCBzMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBZKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFlbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUhXG4gICAgICBpZiAobG9ja1gpIHcxID0gc2VsZWN0aW9uWzBdWzBdLCBlMSA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIGlmIChsb2NrWSkgbjEgPSBzZWxlY3Rpb25bMF1bMV0sIHMxID0gc2VsZWN0aW9uWzFdWzFdO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uWzBdWzBdICE9PSB3MVxuICAgICAgICAgIHx8IHNlbGVjdGlvblswXVsxXSAhPT0gbjFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMF0gIT09IGUxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzFdICE9PSBzMSkge1xuICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBbW3cxLCBuMV0sIFtlMSwgczFdXTtcbiAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIG1vdmluZyk7XG4gICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgZ3JvdXAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpO1xuICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSAob24gc3RhcnQpIVxuICAgICAgaWYgKGVtcHR5KHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5lbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXlkb3duZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX1NQQUNFO1xuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleXVwcGVkKCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykubW92ZWQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoKSB7XG4gICAgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZGVkKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX19icnVzaCB8fCB7c2VsZWN0aW9uOiBudWxsfTtcbiAgICBzdGF0ZS5leHRlbnQgPSBudW1iZXIyKGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBzdGF0ZS5kaW0gPSBkaW07XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQobnVtYmVyMihfKSksIGJydXNoKSA6IGV4dGVudDtcbiAgfTtcblxuICBicnVzaC5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBicnVzaCkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgYnJ1c2gudG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIGJydXNoLmhhbmRsZVNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaGFuZGxlU2l6ZSA9ICtfLCBicnVzaCkgOiBoYW5kbGVTaXplO1xuICB9O1xuXG4gIGJydXNoLmtleU1vZGlmaWVycyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrZXlzID0gISFfLCBicnVzaCkgOiBrZXlzO1xuICB9O1xuXG4gIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGJydXNoIDogdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIGJydXNoO1xufVxuIiwiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50XCI7XG5pbXBvcnQgcG9pbnQgZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgdG91Y2hlcywgaWRlbnRpZmllcikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGlkZW50aWZpZXIgPSB0b3VjaGVzLCB0b3VjaGVzID0gc291cmNlRXZlbnQoKS5jaGFuZ2VkVG91Y2hlcztcblxuICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMgPyB0b3VjaGVzLmxlbmd0aCA6IDAsIHRvdWNoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCh0b3VjaCA9IHRvdWNoZXNbaV0pLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJldHVybiBwb2ludChub2RlLCB0b3VjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJpbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IG5vZXZlbnQgZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2aWV3KSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuX19ub3NlbGVjdCA9IHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdDtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSBcIm5vbmVcIjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24geWVzZHJhZyh2aWV3LCBub2NsaWNrKSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgaWYgKG5vY2xpY2spIHtcbiAgICBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbnVsbCk7IH0sIDApO1xuICB9XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSByb290Ll9fbm9zZWxlY3Q7XG4gICAgZGVsZXRlIHJvb3QuX19ub3NlbGVjdDtcbiAgfVxufVxuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKTtcblxuICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xuICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHgxICsgdDAxICogeDAxKSArIFwiLFwiICsgKHkxICsgdDAxICogeTAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMCxcIiArICgrKHkwMSAqIHgyMCA+IHgwMSAqIHkyMCkpICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICB9XG4gIH0sXG4gIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyLCBjY3cgPSAhIWNjdztcbiAgICB2YXIgZHggPSByICogTWF0aC5jb3MoYTApLFxuICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgIHgwID0geCArIGR4LFxuICAgICAgICB5MCA9IHkgKyBkeSxcbiAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICBkYSA9IGNjdyA/IGEwIC0gYTEgOiBhMSAtIGEwO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgwLHkwKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgwLHkwKSBub3QgY29pbmNpZGVudCB3aXRoIHRoZSBwcmV2aW91cyBwb2ludD8gTGluZSB0byAoeDAseTApLlxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBlbXB0eT8gV2XigJlyZSBkb25lLlxuICAgIGlmICghcikgcmV0dXJuO1xuXG4gICAgLy8gRG9lcyB0aGUgYW5nbGUgZ28gdGhlIHdyb25nIHdheT8gRmxpcCB0aGUgZGlyZWN0aW9uLlxuICAgIGlmIChkYSA8IDApIGRhID0gZGEgJSB0YXUgKyB0YXU7XG5cbiAgICAvLyBJcyB0aGlzIGEgY29tcGxldGUgY2lyY2xlPyBEcmF3IHR3byBhcmNzIHRvIGNvbXBsZXRlIHRoZSBjaXJjbGUuXG4gICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAoeCAtIGR4KSArIFwiLFwiICsgKHkgLSBkeSkgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geDApICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MCk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgbm9uLWVtcHR5PyBEcmF3IGFuIGFyYyFcbiAgICBlbHNlIGlmIChkYSA+IGVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLFwiICsgKCsoZGEgPj0gcGkpKSArIFwiLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpKSArIFwiLFwiICsgKHRoaXMuX3kxID0geSArIHIgKiBNYXRoLnNpbihhMSkpO1xuICAgIH1cbiAgfSxcbiAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KSArIFwiaFwiICsgKCt3KSArIFwidlwiICsgKCtoKSArIFwiaFwiICsgKC13KSArIFwiWlwiO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGF0aDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbn1cbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbVVuaWZvcm0oc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbVVuaWZvcm0obWluLCBtYXgpIHtcbiAgICBtaW4gPSBtaW4gPT0gbnVsbCA/IDAgOiArbWluO1xuICAgIG1heCA9IG1heCA9PSBudWxsID8gMSA6ICttYXg7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIG1heCA9IG1pbiwgbWluID0gMDtcbiAgICBlbHNlIG1heCAtPSBtaW47XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNvdXJjZSgpICogbWF4ICsgbWluO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Vbmlmb3JtLnNvdXJjZSA9IHNvdXJjZVJhbmRvbVVuaWZvcm07XG5cbiAgcmV0dXJuIHJhbmRvbVVuaWZvcm07XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbU5vcm1hbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tTm9ybWFsKG11LCBzaWdtYSkge1xuICAgIHZhciB4LCByO1xuICAgIG11ID0gbXUgPT0gbnVsbCA/IDAgOiArbXU7XG4gICAgc2lnbWEgPSBzaWdtYSA9PSBudWxsID8gMSA6ICtzaWdtYTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeTtcblxuICAgICAgLy8gSWYgYXZhaWxhYmxlLCB1c2UgdGhlIHNlY29uZCBwcmV2aW91c2x5LWdlbmVyYXRlZCB1bmlmb3JtIHJhbmRvbS5cbiAgICAgIGlmICh4ICE9IG51bGwpIHkgPSB4LCB4ID0gbnVsbDtcblxuICAgICAgLy8gT3RoZXJ3aXNlLCBnZW5lcmF0ZSBhIG5ldyB4IGFuZCB5LlxuICAgICAgZWxzZSBkbyB7XG4gICAgICAgIHggPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICB5ID0gc291cmNlKCkgKiAyIC0gMTtcbiAgICAgICAgciA9IHggKiB4ICsgeSAqIHk7XG4gICAgICB9IHdoaWxlICghciB8fCByID4gMSk7XG5cbiAgICAgIHJldHVybiBtdSArIHNpZ21hICogeSAqIE1hdGguc3FydCgtMiAqIE1hdGgubG9nKHIpIC8gcik7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbU5vcm1hbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21Ob3JtYWw7XG5cbiAgcmV0dXJuIHJhbmRvbU5vcm1hbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuaW1wb3J0IG5vcm1hbCBmcm9tIFwiLi9ub3JtYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUxvZ05vcm1hbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tTG9nTm9ybWFsKCkge1xuICAgIHZhciByYW5kb21Ob3JtYWwgPSBub3JtYWwuc291cmNlKHNvdXJjZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWF0aC5leHAocmFuZG9tTm9ybWFsKCkpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Mb2dOb3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTG9nTm9ybWFsO1xuXG4gIHJldHVybiByYW5kb21Mb2dOb3JtYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUlyd2luSGFsbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tSXJ3aW5IYWxsKG4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBzdW0gPSAwLCBpID0gMDsgaSA8IG47ICsraSkgc3VtICs9IHNvdXJjZSgpO1xuICAgICAgcmV0dXJuIHN1bTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tSXJ3aW5IYWxsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUlyd2luSGFsbDtcblxuICByZXR1cm4gcmFuZG9tSXJ3aW5IYWxsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXIucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpOyBicmVhaztcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXIoY29udGV4dCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24geChwKSB7XG4gIHJldHVybiBwWzBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24geShwKSB7XG4gIHJldHVybiBwWzFdO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyLmpzXCI7XG5pbXBvcnQgbGluZSBmcm9tIFwiLi9saW5lLmpzXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4MCA9IHBvaW50WCxcbiAgICAgIHgxID0gbnVsbCxcbiAgICAgIHkwID0gY29uc3RhbnQoMCksXG4gICAgICB5MSA9IHBvaW50WSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gYXJlYShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGosXG4gICAgICAgIGssXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyLFxuICAgICAgICB4MHogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHkweiA9IG5ldyBBcnJheShuKTtcblxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIHtcbiAgICAgICAgICBqID0gaTtcbiAgICAgICAgICBvdXRwdXQuYXJlYVN0YXJ0KCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoayA9IGkgLSAxOyBrID49IGo7IC0taykge1xuICAgICAgICAgICAgb3V0cHV0LnBvaW50KHgweltrXSwgeTB6W2tdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQuYXJlYUVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIHtcbiAgICAgICAgeDB6W2ldID0gK3gwKGQsIGksIGRhdGEpLCB5MHpbaV0gPSAreTAoZCwgaSwgZGF0YSk7XG4gICAgICAgIG91dHB1dC5wb2ludCh4MSA/ICt4MShkLCBpLCBkYXRhKSA6IHgweltpXSwgeTEgPyAreTEoZCwgaSwgZGF0YSkgOiB5MHpbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhbGluZSgpIHtcbiAgICByZXR1cm4gbGluZSgpLmRlZmluZWQoZGVmaW5lZCkuY3VydmUoY3VydmUpLmNvbnRleHQoY29udGV4dCk7XG4gIH1cblxuICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgeDEgPSBudWxsLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB4MDtcbiAgfTtcblxuICBhcmVhLngxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgxO1xuICB9O1xuXG4gIGFyZWEueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB5MSA9IG51bGwsIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHkwO1xuICB9O1xuXG4gIGFyZWEueTEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTE7XG4gIH07XG5cbiAgYXJlYS5saW5lWDAgPVxuICBhcmVhLmxpbmVZMCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTApO1xuICB9O1xuXG4gIGFyZWEubGluZVkxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MSk7XG4gIH07XG5cbiAgYXJlYS5saW5lWDEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgxKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYXJlYSkgOiBkZWZpbmVkO1xuICB9O1xuXG4gIGFyZWEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgYXJlYSkgOiBjdXJ2ZTtcbiAgfTtcblxuICBhcmVhLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGFyZWEpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gYXJlYTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2N1cnZlL2xpbmVhci5qc1wiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IHBvaW50WCxcbiAgICAgIHkgPSBwb2ludFksXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQodHJ1ZSksXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICBvdXRwdXQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxpbmUoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGQsXG4gICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgIGJ1ZmZlcjtcblxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgZWxzZSBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmluZWQwKSBvdXRwdXQucG9pbnQoK3goZCwgaSwgZGF0YSksICt5KGQsIGksIGRhdGEpKTtcbiAgICB9XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgbGluZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB4O1xuICB9O1xuXG4gIGxpbmUueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeTtcbiAgfTtcblxuICBsaW5lLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgbGluZSkgOiBkZWZpbmVkO1xuICB9O1xuXG4gIGxpbmUuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgbGluZSkgOiBjdXJ2ZTtcbiAgfTtcblxuICBsaW5lLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGxpbmUpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gbGluZTtcbn1cbiIsImZ1bmN0aW9uIFJlZEJsYWNrVHJlZSgpIHtcbiAgdGhpcy5fID0gbnVsbDsgLy8gcm9vdCBub2RlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZWRCbGFja05vZGUobm9kZSkge1xuICBub2RlLlUgPSAvLyBwYXJlbnQgbm9kZVxuICBub2RlLkMgPSAvLyBjb2xvciAtIHRydWUgZm9yIHJlZCwgZmFsc2UgZm9yIGJsYWNrXG4gIG5vZGUuTCA9IC8vIGxlZnQgbm9kZVxuICBub2RlLlIgPSAvLyByaWdodCBub2RlXG4gIG5vZGUuUCA9IC8vIHByZXZpb3VzIG5vZGVcbiAgbm9kZS5OID0gbnVsbDsgLy8gbmV4dCBub2RlXG59XG5cblJlZEJsYWNrVHJlZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBSZWRCbGFja1RyZWUsXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbihhZnRlciwgbm9kZSkge1xuICAgIHZhciBwYXJlbnQsIGdyYW5kcGEsIHVuY2xlO1xuXG4gICAgaWYgKGFmdGVyKSB7XG4gICAgICBub2RlLlAgPSBhZnRlcjtcbiAgICAgIG5vZGUuTiA9IGFmdGVyLk47XG4gICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgIGFmdGVyLk4gPSBub2RlO1xuICAgICAgaWYgKGFmdGVyLlIpIHtcbiAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICB3aGlsZSAoYWZ0ZXIuTCkgYWZ0ZXIgPSBhZnRlci5MO1xuICAgICAgICBhZnRlci5MID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFmdGVyLlIgPSBub2RlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIGlmICh0aGlzLl8pIHtcbiAgICAgIGFmdGVyID0gUmVkQmxhY2tGaXJzdCh0aGlzLl8pO1xuICAgICAgbm9kZS5QID0gbnVsbDtcbiAgICAgIG5vZGUuTiA9IGFmdGVyO1xuICAgICAgYWZ0ZXIuUCA9IGFmdGVyLkwgPSBub2RlO1xuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuUCA9IG5vZGUuTiA9IG51bGw7XG4gICAgICB0aGlzLl8gPSBub2RlO1xuICAgICAgcGFyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcbiAgICBub2RlLlUgPSBwYXJlbnQ7XG4gICAgbm9kZS5DID0gdHJ1ZTtcblxuICAgIGFmdGVyID0gbm9kZTtcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5DKSB7XG4gICAgICBncmFuZHBhID0gcGFyZW50LlU7XG4gICAgICBpZiAocGFyZW50ID09PSBncmFuZHBhLkwpIHtcbiAgICAgICAgdW5jbGUgPSBncmFuZHBhLlI7XG4gICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuUikge1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bmNsZSA9IGdyYW5kcGEuTDtcbiAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5MKSB7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgfVxuICAgIHRoaXMuXy5DID0gZmFsc2U7XG4gIH0sXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuTikgbm9kZS5OLlAgPSBub2RlLlA7XG4gICAgaWYgKG5vZGUuUCkgbm9kZS5QLk4gPSBub2RlLk47XG4gICAgbm9kZS5OID0gbm9kZS5QID0gbnVsbDtcblxuICAgIHZhciBwYXJlbnQgPSBub2RlLlUsXG4gICAgICAgIHNpYmxpbmcsXG4gICAgICAgIGxlZnQgPSBub2RlLkwsXG4gICAgICAgIHJpZ2h0ID0gbm9kZS5SLFxuICAgICAgICBuZXh0LFxuICAgICAgICByZWQ7XG5cbiAgICBpZiAoIWxlZnQpIG5leHQgPSByaWdodDtcbiAgICBlbHNlIGlmICghcmlnaHQpIG5leHQgPSBsZWZ0O1xuICAgIGVsc2UgbmV4dCA9IFJlZEJsYWNrRmlyc3QocmlnaHQpO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7XG4gICAgICBlbHNlIHBhcmVudC5SID0gbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobGVmdCAmJiByaWdodCkge1xuICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgbmV4dC5DID0gbm9kZS5DO1xuICAgICAgbmV4dC5MID0gbGVmdDtcbiAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICBpZiAobmV4dCAhPT0gcmlnaHQpIHtcbiAgICAgICAgcGFyZW50ID0gbmV4dC5VO1xuICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgIHBhcmVudC5MID0gbm9kZTtcbiAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgIHJpZ2h0LlUgPSBuZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBuZXh0O1xuICAgICAgICBub2RlID0gbmV4dC5SO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWQgPSBub2RlLkM7XG4gICAgICBub2RlID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobm9kZSkgbm9kZS5VID0gcGFyZW50O1xuICAgIGlmIChyZWQpIHJldHVybjtcbiAgICBpZiAobm9kZSAmJiBub2RlLkMpIHsgbm9kZS5DID0gZmFsc2U7IHJldHVybjsgfVxuXG4gICAgZG8ge1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICBpZiAobm9kZSA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgcGFyZW50LkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgaWYgKCFzaWJsaW5nLlIgfHwgIXNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICB8fCAoc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSkge1xuICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5MLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICB9IHdoaWxlICghbm9kZS5DKTtcblxuICAgIGlmIChub2RlKSBub2RlLkMgPSBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVMZWZ0KHRyZWUsIG5vZGUpIHtcbiAgdmFyIHAgPSBub2RlLFxuICAgICAgcSA9IG5vZGUuUixcbiAgICAgIHBhcmVudCA9IHAuVTtcblxuICBpZiAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7XG4gICAgZWxzZSBwYXJlbnQuUiA9IHE7XG4gIH0gZWxzZSB7XG4gICAgdHJlZS5fID0gcTtcbiAgfVxuXG4gIHEuVSA9IHBhcmVudDtcbiAgcC5VID0gcTtcbiAgcC5SID0gcS5MO1xuICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gIHEuTCA9IHA7XG59XG5cbmZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlUmlnaHQodHJlZSwgbm9kZSkge1xuICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5MLFxuICAgICAgcGFyZW50ID0gcC5VO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgfSBlbHNlIHtcbiAgICB0cmVlLl8gPSBxO1xuICB9XG5cbiAgcS5VID0gcGFyZW50O1xuICBwLlUgPSBxO1xuICBwLkwgPSBxLlI7XG4gIGlmIChwLkwpIHAuTC5VID0gcDtcbiAgcS5SID0gcDtcbn1cblxuZnVuY3Rpb24gUmVkQmxhY2tGaXJzdChub2RlKSB7XG4gIHdoaWxlIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWRCbGFja1RyZWU7XG4iLCJpbXBvcnQge2NlbGxzLCBlZGdlcywgZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWRnZShsZWZ0LCByaWdodCwgdjAsIHYxKSB7XG4gIHZhciBlZGdlID0gW251bGwsIG51bGxdLFxuICAgICAgaW5kZXggPSBlZGdlcy5wdXNoKGVkZ2UpIC0gMTtcbiAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICBpZiAodjApIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHYwKTtcbiAgaWYgKHYxKSBzZXRFZGdlRW5kKGVkZ2UsIHJpZ2h0LCBsZWZ0LCB2MSk7XG4gIGNlbGxzW2xlZnQuaW5kZXhdLmhhbGZlZGdlcy5wdXNoKGluZGV4KTtcbiAgY2VsbHNbcmlnaHQuaW5kZXhdLmhhbGZlZGdlcy5wdXNoKGluZGV4KTtcbiAgcmV0dXJuIGVkZ2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCb3JkZXJFZGdlKGxlZnQsIHYwLCB2MSkge1xuICB2YXIgZWRnZSA9IFt2MCwgdjFdO1xuICBlZGdlLmxlZnQgPSBsZWZ0O1xuICByZXR1cm4gZWRnZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHZlcnRleCkge1xuICBpZiAoIWVkZ2VbMF0gJiYgIWVkZ2VbMV0pIHtcbiAgICBlZGdlWzBdID0gdmVydGV4O1xuICAgIGVkZ2UubGVmdCA9IGxlZnQ7XG4gICAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICB9IGVsc2UgaWYgKGVkZ2UubGVmdCA9PT0gcmlnaHQpIHtcbiAgICBlZGdlWzFdID0gdmVydGV4O1xuICB9IGVsc2Uge1xuICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XG4gIH1cbn1cblxuLy8gTGlhbmfigJNCYXJza3kgbGluZSBjbGlwcGluZy5cbmZ1bmN0aW9uIGNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBhID0gZWRnZVswXSxcbiAgICAgIGIgPSBlZGdlWzFdLFxuICAgICAgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgdDAgPSAwLFxuICAgICAgdDEgPSAxLFxuICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgZHkgPSBieSAtIGF5LFxuICAgICAgcjtcblxuICByID0geDAgLSBheDtcbiAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHgxIC0gYXg7XG4gIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIHIgPSB5MCAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geTEgLSBheTtcbiAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgaWYgKCEodDAgPiAwKSAmJiAhKHQxIDwgMSkpIHJldHVybiB0cnVlOyAvLyBUT0RPIEJldHRlciBjaGVjaz9cblxuICBpZiAodDAgPiAwKSBlZGdlWzBdID0gW2F4ICsgdDAgKiBkeCwgYXkgKyB0MCAqIGR5XTtcbiAgaWYgKHQxIDwgMSkgZWRnZVsxXSA9IFtheCArIHQxICogZHgsIGF5ICsgdDEgKiBkeV07XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0RWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgdjEgPSBlZGdlWzFdO1xuICBpZiAodjEpIHJldHVybiB0cnVlO1xuXG4gIHZhciB2MCA9IGVkZ2VbMF0sXG4gICAgICBsZWZ0ID0gZWRnZS5sZWZ0LFxuICAgICAgcmlnaHQgPSBlZGdlLnJpZ2h0LFxuICAgICAgbHggPSBsZWZ0WzBdLFxuICAgICAgbHkgPSBsZWZ0WzFdLFxuICAgICAgcnggPSByaWdodFswXSxcbiAgICAgIHJ5ID0gcmlnaHRbMV0sXG4gICAgICBmeCA9IChseCArIHJ4KSAvIDIsXG4gICAgICBmeSA9IChseSArIHJ5KSAvIDIsXG4gICAgICBmbSxcbiAgICAgIGZiO1xuXG4gIGlmIChyeSA9PT0gbHkpIHtcbiAgICBpZiAoZnggPCB4MCB8fCBmeCA+PSB4MSkgcmV0dXJuO1xuICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICBpZiAoIXYwKSB2MCA9IFtmeCwgeTBdO1xuICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgIHYxID0gW2Z4LCB5MV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MV07XG4gICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICB2MSA9IFtmeCwgeTBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmbSA9IChseCAtIHJ4KSAvIChyeSAtIGx5KTtcbiAgICBmYiA9IGZ5IC0gZm0gKiBmeDtcbiAgICBpZiAoZm0gPCAtMSB8fCBmbSA+IDEpIHtcbiAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdID49IHkxKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO1xuICAgICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChseSA8IHJ5KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA+PSB4MSkgcmV0dXJuO1xuICAgICAgICB2MSA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gxLCBmbSAqIHgxICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA8IHgwKSByZXR1cm47XG4gICAgICAgIHYxID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVkZ2VbMF0gPSB2MDtcbiAgZWRnZVsxXSA9IHYxO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgaSA9IGVkZ2VzLmxlbmd0aCxcbiAgICAgIGVkZ2U7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICghY29ubmVjdEVkZ2UoZWRnZSA9IGVkZ2VzW2ldLCB4MCwgeTAsIHgxLCB5MSlcbiAgICAgICAgfHwgIWNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICB8fCAhKE1hdGguYWJzKGVkZ2VbMF1bMF0gLSBlZGdlWzFdWzBdKSA+IGVwc2lsb25cbiAgICAgICAgICAgIHx8IE1hdGguYWJzKGVkZ2VbMF1bMV0gLSBlZGdlWzFdWzFdKSA+IGVwc2lsb24pKSB7XG4gICAgICBkZWxldGUgZWRnZXNbaV07XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge2NyZWF0ZUJvcmRlckVkZ2V9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCB7Y2VsbHMsIGVkZ2VzLCBlcHNpbG9ufSBmcm9tIFwiLi9EaWFncmFtXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDZWxsKHNpdGUpIHtcbiAgcmV0dXJuIGNlbGxzW3NpdGUuaW5kZXhdID0ge1xuICAgIHNpdGU6IHNpdGUsXG4gICAgaGFsZmVkZ2VzOiBbXVxuICB9O1xufVxuXG5mdW5jdGlvbiBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlKSB7XG4gIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgdmEgPSBlZGdlLmxlZnQsXG4gICAgICB2YiA9IGVkZ2UucmlnaHQ7XG4gIGlmIChzaXRlID09PSB2YikgdmIgPSB2YSwgdmEgPSBzaXRlO1xuICBpZiAodmIpIHJldHVybiBNYXRoLmF0YW4yKHZiWzFdIC0gdmFbMV0sIHZiWzBdIC0gdmFbMF0pO1xuICBpZiAoc2l0ZSA9PT0gdmEpIHZhID0gZWRnZVsxXSwgdmIgPSBlZGdlWzBdO1xuICBlbHNlIHZhID0gZWRnZVswXSwgdmIgPSBlZGdlWzFdO1xuICByZXR1cm4gTWF0aC5hdGFuMih2YVswXSAtIHZiWzBdLCB2YlsxXSAtIHZhWzFdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2UpIHtcbiAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgIT09IGNlbGwuc2l0ZSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2UpIHtcbiAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgPT09IGNlbGwuc2l0ZSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydENlbGxIYWxmZWRnZXMoKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gY2VsbHMubGVuZ3RoLCBjZWxsLCBoYWxmZWRnZXMsIGosIG07IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGNlbGwgPSBjZWxsc1tpXSkgJiYgKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHtcbiAgICAgIHZhciBpbmRleCA9IG5ldyBBcnJheShtKSxcbiAgICAgICAgICBhcnJheSA9IG5ldyBBcnJheShtKTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGluZGV4W2pdID0gaiwgYXJyYXlbal0gPSBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlc1toYWxmZWRnZXNbal1dKTtcbiAgICAgIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gYXJyYXlbal0gLSBhcnJheVtpXTsgfSk7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBhcnJheVtqXSA9IGhhbGZlZGdlc1tpbmRleFtqXV07XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBoYWxmZWRnZXNbal0gPSBhcnJheVtqXTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsaXBDZWxscyh4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbkNlbGxzID0gY2VsbHMubGVuZ3RoLFxuICAgICAgaUNlbGwsXG4gICAgICBjZWxsLFxuICAgICAgc2l0ZSxcbiAgICAgIGlIYWxmZWRnZSxcbiAgICAgIGhhbGZlZGdlcyxcbiAgICAgIG5IYWxmZWRnZXMsXG4gICAgICBzdGFydCxcbiAgICAgIHN0YXJ0WCxcbiAgICAgIHN0YXJ0WSxcbiAgICAgIGVuZCxcbiAgICAgIGVuZFgsXG4gICAgICBlbmRZLFxuICAgICAgY292ZXIgPSB0cnVlO1xuXG4gIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXM7XG4gICAgICBpSGFsZmVkZ2UgPSBoYWxmZWRnZXMubGVuZ3RoO1xuXG4gICAgICAvLyBSZW1vdmUgYW55IGRhbmdsaW5nIGNsaXBwZWQgZWRnZXMuXG4gICAgICB3aGlsZSAoaUhhbGZlZGdlLS0pIHtcbiAgICAgICAgaWYgKCFlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pIHtcbiAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSW5zZXJ0IGFueSBib3JkZXIgZWRnZXMgYXMgbmVjZXNzYXJ5LlxuICAgICAgaUhhbGZlZGdlID0gMCwgbkhhbGZlZGdlcyA9IGhhbGZlZGdlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaUhhbGZlZGdlIDwgbkhhbGZlZGdlcykge1xuICAgICAgICBlbmQgPSBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZXNbaGFsZmVkZ2VzW2lIYWxmZWRnZV1dKSwgZW5kWCA9IGVuZFswXSwgZW5kWSA9IGVuZFsxXTtcbiAgICAgICAgc3RhcnQgPSBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1toYWxmZWRnZXNbKytpSGFsZmVkZ2UgJSBuSGFsZmVkZ2VzXV0pLCBzdGFydFggPSBzdGFydFswXSwgc3RhcnRZID0gc3RhcnRbMV07XG4gICAgICAgIGlmIChNYXRoLmFicyhlbmRYIC0gc3RhcnRYKSA+IGVwc2lsb24gfHwgTWF0aC5hYnMoZW5kWSAtIHN0YXJ0WSkgPiBlcHNpbG9uKSB7XG4gICAgICAgICAgaGFsZmVkZ2VzLnNwbGljZShpSGFsZmVkZ2UsIDAsIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCBlbmQsXG4gICAgICAgICAgICAgIE1hdGguYWJzKGVuZFggLSB4MCkgPCBlcHNpbG9uICYmIHkxIC0gZW5kWSA+IGVwc2lsb24gPyBbeDAsIE1hdGguYWJzKHN0YXJ0WCAtIHgwKSA8IGVwc2lsb24gPyBzdGFydFkgOiB5MV1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRZIC0geTEpIDwgZXBzaWxvbiAmJiB4MSAtIGVuZFggPiBlcHNpbG9uID8gW01hdGguYWJzKHN0YXJ0WSAtIHkxKSA8IGVwc2lsb24gPyBzdGFydFggOiB4MSwgeTFdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWCAtIHgxKSA8IGVwc2lsb24gJiYgZW5kWSAtIHkwID4gZXBzaWxvbiA/IFt4MSwgTWF0aC5hYnMoc3RhcnRYIC0geDEpIDwgZXBzaWxvbiA/IHN0YXJ0WSA6IHkwXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MCkgPCBlcHNpbG9uICYmIGVuZFggLSB4MCA+IGVwc2lsb24gPyBbTWF0aC5hYnMoc3RhcnRZIC0geTApIDwgZXBzaWxvbiA/IHN0YXJ0WCA6IHgwLCB5MF1cbiAgICAgICAgICAgICAgOiBudWxsKSkgLSAxKTtcbiAgICAgICAgICArK25IYWxmZWRnZXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5IYWxmZWRnZXMpIGNvdmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgdGhlcmUgd2VyZW7igJl0IGFueSBlZGdlcywgaGF2ZSB0aGUgY2xvc2VzdCBzaXRlIGNvdmVyIHRoZSBleHRlbnQuXG4gIC8vIEl0IGRvZXNu4oCZdCBtYXR0ZXIgd2hpY2ggY29ybmVyIG9mIHRoZSBleHRlbnQgd2UgbWVhc3VyZSFcbiAgaWYgKGNvdmVyKSB7XG4gICAgdmFyIGR4LCBkeSwgZDIsIGRjID0gSW5maW5pdHk7XG5cbiAgICBmb3IgKGlDZWxsID0gMCwgY292ZXIgPSBudWxsOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgICAgc2l0ZSA9IGNlbGwuc2l0ZTtcbiAgICAgICAgZHggPSBzaXRlWzBdIC0geDA7XG4gICAgICAgIGR5ID0gc2l0ZVsxXSAtIHkwO1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCBkYykgZGMgPSBkMiwgY292ZXIgPSBjZWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb3Zlcikge1xuICAgICAgdmFyIHYwMCA9IFt4MCwgeTBdLCB2MDEgPSBbeDAsIHkxXSwgdjExID0gW3gxLCB5MV0sIHYxMCA9IFt4MSwgeTBdO1xuICAgICAgY292ZXIuaGFsZmVkZ2VzLnB1c2goXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlID0gY292ZXIuc2l0ZSwgdjAwLCB2MDEpKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MDEsIHYxMSkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYxMSwgdjEwKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjEwLCB2MDApKSAtIDFcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gTGFzdGx5IGRlbGV0ZSBhbnkgY2VsbHMgd2l0aCBubyBlZGdlczsgdGhlc2Ugd2VyZSBlbnRpcmVseSBjbGlwcGVkLlxuICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgaWYgKCFjZWxsLmhhbGZlZGdlcy5sZW5ndGgpIHtcbiAgICAgICAgZGVsZXRlIGNlbGxzW2lDZWxsXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcbmltcG9ydCBpcndpbkhhbGwgZnJvbSBcIi4vaXJ3aW5IYWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21CYXRlcyhzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tQmF0ZXMobikge1xuICAgIHZhciByYW5kb21JcndpbkhhbGwgPSBpcndpbkhhbGwuc291cmNlKHNvdXJjZSkobik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbCgpIC8gbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tQmF0ZXMuc291cmNlID0gc291cmNlUmFuZG9tQmF0ZXM7XG5cbiAgcmV0dXJuIHJhbmRvbUJhdGVzO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21FeHBvbmVudGlhbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tRXhwb25lbnRpYWwobGFtYmRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmxvZygxIC0gc291cmNlKCkpIC8gbGFtYmRhO1xuICAgIH07XG4gIH1cblxuICByYW5kb21FeHBvbmVudGlhbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21FeHBvbmVudGlhbDtcblxuICByZXR1cm4gcmFuZG9tRXhwb25lbnRpYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCB7UmVkQmxhY2tOb2RlfSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcbmltcG9ydCB7Y2lyY2xlcywgZXBzaWxvbjJ9IGZyb20gXCIuL0RpYWdyYW1cIjtcblxudmFyIGNpcmNsZVBvb2wgPSBbXTtcblxuZXhwb3J0IHZhciBmaXJzdENpcmNsZTtcblxuZnVuY3Rpb24gQ2lyY2xlKCkge1xuICBSZWRCbGFja05vZGUodGhpcyk7XG4gIHRoaXMueCA9XG4gIHRoaXMueSA9XG4gIHRoaXMuYXJjID1cbiAgdGhpcy5zaXRlID1cbiAgdGhpcy5jeSA9IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hDaXJjbGUoYXJjKSB7XG4gIHZhciBsQXJjID0gYXJjLlAsXG4gICAgICByQXJjID0gYXJjLk47XG5cbiAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG5cbiAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgY1NpdGUgPSBhcmMuc2l0ZSxcbiAgICAgIHJTaXRlID0gckFyYy5zaXRlO1xuXG4gIGlmIChsU2l0ZSA9PT0gclNpdGUpIHJldHVybjtcblxuICB2YXIgYnggPSBjU2l0ZVswXSxcbiAgICAgIGJ5ID0gY1NpdGVbMV0sXG4gICAgICBheCA9IGxTaXRlWzBdIC0gYngsXG4gICAgICBheSA9IGxTaXRlWzFdIC0gYnksXG4gICAgICBjeCA9IHJTaXRlWzBdIC0gYngsXG4gICAgICBjeSA9IHJTaXRlWzFdIC0gYnk7XG5cbiAgdmFyIGQgPSAyICogKGF4ICogY3kgLSBheSAqIGN4KTtcbiAgaWYgKGQgPj0gLWVwc2lsb24yKSByZXR1cm47XG5cbiAgdmFyIGhhID0gYXggKiBheCArIGF5ICogYXksXG4gICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgeCA9IChjeSAqIGhhIC0gYXkgKiBoYykgLyBkLFxuICAgICAgeSA9IChheCAqIGhjIC0gY3ggKiBoYSkgLyBkO1xuXG4gIHZhciBjaXJjbGUgPSBjaXJjbGVQb29sLnBvcCgpIHx8IG5ldyBDaXJjbGU7XG4gIGNpcmNsZS5hcmMgPSBhcmM7XG4gIGNpcmNsZS5zaXRlID0gY1NpdGU7XG4gIGNpcmNsZS54ID0geCArIGJ4O1xuICBjaXJjbGUueSA9IChjaXJjbGUuY3kgPSB5ICsgYnkpICsgTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpOyAvLyB5IGJvdHRvbVxuXG4gIGFyYy5jaXJjbGUgPSBjaXJjbGU7XG5cbiAgdmFyIGJlZm9yZSA9IG51bGwsXG4gICAgICBub2RlID0gY2lyY2xlcy5fO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKGNpcmNsZS55IDwgbm9kZS55IHx8IChjaXJjbGUueSA9PT0gbm9kZS55ICYmIGNpcmNsZS54IDw9IG5vZGUueCkpIHtcbiAgICAgIGlmIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG4gICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZS5QOyBicmVhazsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobm9kZS5SKSBub2RlID0gbm9kZS5SO1xuICAgICAgZWxzZSB7IGJlZm9yZSA9IG5vZGU7IGJyZWFrOyB9XG4gICAgfVxuICB9XG5cbiAgY2lyY2xlcy5pbnNlcnQoYmVmb3JlLCBjaXJjbGUpO1xuICBpZiAoIWJlZm9yZSkgZmlyc3RDaXJjbGUgPSBjaXJjbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRhY2hDaXJjbGUoYXJjKSB7XG4gIHZhciBjaXJjbGUgPSBhcmMuY2lyY2xlO1xuICBpZiAoY2lyY2xlKSB7XG4gICAgaWYgKCFjaXJjbGUuUCkgZmlyc3RDaXJjbGUgPSBjaXJjbGUuTjtcbiAgICBjaXJjbGVzLnJlbW92ZShjaXJjbGUpO1xuICAgIGNpcmNsZVBvb2wucHVzaChjaXJjbGUpO1xuICAgIFJlZEJsYWNrTm9kZShjaXJjbGUpO1xuICAgIGFyYy5jaXJjbGUgPSBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQge1JlZEJsYWNrTm9kZX0gZnJvbSBcIi4vUmVkQmxhY2tUcmVlXCI7XG5pbXBvcnQge2NyZWF0ZUNlbGx9IGZyb20gXCIuL0NlbGxcIjtcbmltcG9ydCB7YXR0YWNoQ2lyY2xlLCBkZXRhY2hDaXJjbGV9IGZyb20gXCIuL0NpcmNsZVwiO1xuaW1wb3J0IHtjcmVhdGVFZGdlLCBzZXRFZGdlRW5kfSBmcm9tIFwiLi9FZGdlXCI7XG5pbXBvcnQge2JlYWNoZXMsIGVwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxudmFyIGJlYWNoUG9vbCA9IFtdO1xuXG5mdW5jdGlvbiBCZWFjaCgpIHtcbiAgUmVkQmxhY2tOb2RlKHRoaXMpO1xuICB0aGlzLmVkZ2UgPVxuICB0aGlzLnNpdGUgPVxuICB0aGlzLmNpcmNsZSA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJlYWNoKHNpdGUpIHtcbiAgdmFyIGJlYWNoID0gYmVhY2hQb29sLnBvcCgpIHx8IG5ldyBCZWFjaDtcbiAgYmVhY2guc2l0ZSA9IHNpdGU7XG4gIHJldHVybiBiZWFjaDtcbn1cblxuZnVuY3Rpb24gZGV0YWNoQmVhY2goYmVhY2gpIHtcbiAgZGV0YWNoQ2lyY2xlKGJlYWNoKTtcbiAgYmVhY2hlcy5yZW1vdmUoYmVhY2gpO1xuICBiZWFjaFBvb2wucHVzaChiZWFjaCk7XG4gIFJlZEJsYWNrTm9kZShiZWFjaCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVCZWFjaChiZWFjaCkge1xuICB2YXIgY2lyY2xlID0gYmVhY2guY2lyY2xlLFxuICAgICAgeCA9IGNpcmNsZS54LFxuICAgICAgeSA9IGNpcmNsZS5jeSxcbiAgICAgIHZlcnRleCA9IFt4LCB5XSxcbiAgICAgIHByZXZpb3VzID0gYmVhY2guUCxcbiAgICAgIG5leHQgPSBiZWFjaC5OLFxuICAgICAgZGlzYXBwZWFyaW5nID0gW2JlYWNoXTtcblxuICBkZXRhY2hCZWFjaChiZWFjaCk7XG5cbiAgdmFyIGxBcmMgPSBwcmV2aW91cztcbiAgd2hpbGUgKGxBcmMuY2lyY2xlXG4gICAgICAmJiBNYXRoLmFicyh4IC0gbEFyYy5jaXJjbGUueCkgPCBlcHNpbG9uXG4gICAgICAmJiBNYXRoLmFicyh5IC0gbEFyYy5jaXJjbGUuY3kpIDwgZXBzaWxvbikge1xuICAgIHByZXZpb3VzID0gbEFyYy5QO1xuICAgIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICAgIGRldGFjaEJlYWNoKGxBcmMpO1xuICAgIGxBcmMgPSBwcmV2aW91cztcbiAgfVxuXG4gIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICBkZXRhY2hDaXJjbGUobEFyYyk7XG5cbiAgdmFyIHJBcmMgPSBuZXh0O1xuICB3aGlsZSAockFyYy5jaXJjbGVcbiAgICAgICYmIE1hdGguYWJzKHggLSByQXJjLmNpcmNsZS54KSA8IGVwc2lsb25cbiAgICAgICYmIE1hdGguYWJzKHkgLSByQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uKSB7XG4gICAgbmV4dCA9IHJBcmMuTjtcbiAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcbiAgICBkZXRhY2hCZWFjaChyQXJjKTtcbiAgICByQXJjID0gbmV4dDtcbiAgfVxuXG4gIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICBkZXRhY2hDaXJjbGUockFyYyk7XG5cbiAgdmFyIG5BcmNzID0gZGlzYXBwZWFyaW5nLmxlbmd0aCxcbiAgICAgIGlBcmM7XG4gIGZvciAoaUFyYyA9IDE7IGlBcmMgPCBuQXJjczsgKytpQXJjKSB7XG4gICAgckFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjXTtcbiAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcbiAgICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbEFyYy5zaXRlLCByQXJjLnNpdGUsIHZlcnRleCk7XG4gIH1cblxuICBsQXJjID0gZGlzYXBwZWFyaW5nWzBdO1xuICByQXJjID0gZGlzYXBwZWFyaW5nW25BcmNzIC0gMV07XG4gIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsIHZlcnRleCk7XG5cbiAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICBhdHRhY2hDaXJjbGUockFyYyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRCZWFjaChzaXRlKSB7XG4gIHZhciB4ID0gc2l0ZVswXSxcbiAgICAgIGRpcmVjdHJpeCA9IHNpdGVbMV0sXG4gICAgICBsQXJjLFxuICAgICAgckFyYyxcbiAgICAgIGR4bCxcbiAgICAgIGR4cixcbiAgICAgIG5vZGUgPSBiZWFjaGVzLl87XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBkeGwgPSBsZWZ0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpIC0geDtcbiAgICBpZiAoZHhsID4gZXBzaWxvbikgbm9kZSA9IG5vZGUuTDsgZWxzZSB7XG4gICAgICBkeHIgPSB4IC0gcmlnaHRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCk7XG4gICAgICBpZiAoZHhyID4gZXBzaWxvbikge1xuICAgICAgICBpZiAoIW5vZGUuUikge1xuICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLlI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZHhsID4gLWVwc2lsb24pIHtcbiAgICAgICAgICBsQXJjID0gbm9kZS5QO1xuICAgICAgICAgIHJBcmMgPSBub2RlO1xuICAgICAgICB9IGVsc2UgaWYgKGR4ciA+IC1lcHNpbG9uKSB7XG4gICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgckFyYyA9IG5vZGUuTjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsQXJjID0gckFyYyA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlQ2VsbChzaXRlKTtcbiAgdmFyIG5ld0FyYyA9IGNyZWF0ZUJlYWNoKHNpdGUpO1xuICBiZWFjaGVzLmluc2VydChsQXJjLCBuZXdBcmMpO1xuXG4gIGlmICghbEFyYyAmJiAhckFyYykgcmV0dXJuO1xuXG4gIGlmIChsQXJjID09PSByQXJjKSB7XG4gICAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIHJBcmMgPSBjcmVhdGVCZWFjaChsQXJjLnNpdGUpO1xuICAgIGJlYWNoZXMuaW5zZXJ0KG5ld0FyYywgckFyYyk7XG4gICAgbmV3QXJjLmVkZ2UgPSByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgICBhdHRhY2hDaXJjbGUockFyYyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFyQXJjKSB7IC8vICYmIGxBcmNcbiAgICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZWxzZSBsQXJjICE9PSByQXJjXG4gIGRldGFjaENpcmNsZShsQXJjKTtcbiAgZGV0YWNoQ2lyY2xlKHJBcmMpO1xuXG4gIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSxcbiAgICAgIGF4ID0gbFNpdGVbMF0sXG4gICAgICBheSA9IGxTaXRlWzFdLFxuICAgICAgYnggPSBzaXRlWzBdIC0gYXgsXG4gICAgICBieSA9IHNpdGVbMV0gLSBheSxcbiAgICAgIHJTaXRlID0gckFyYy5zaXRlLFxuICAgICAgY3ggPSByU2l0ZVswXSAtIGF4LFxuICAgICAgY3kgPSByU2l0ZVsxXSAtIGF5LFxuICAgICAgZCA9IDIgKiAoYnggKiBjeSAtIGJ5ICogY3gpLFxuICAgICAgaGIgPSBieCAqIGJ4ICsgYnkgKiBieSxcbiAgICAgIGhjID0gY3ggKiBjeCArIGN5ICogY3ksXG4gICAgICB2ZXJ0ZXggPSBbKGN5ICogaGIgLSBieSAqIGhjKSAvIGQgKyBheCwgKGJ4ICogaGMgLSBjeCAqIGhiKSAvIGQgKyBheV07XG5cbiAgc2V0RWRnZUVuZChyQXJjLmVkZ2UsIGxTaXRlLCByU2l0ZSwgdmVydGV4KTtcbiAgbmV3QXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxTaXRlLCBzaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKHNpdGUsIHJTaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gIGF0dGFjaENpcmNsZShyQXJjKTtcbn1cblxuZnVuY3Rpb24gbGVmdEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgdmFyIHNpdGUgPSBhcmMuc2l0ZSxcbiAgICAgIHJmb2N4ID0gc2l0ZVswXSxcbiAgICAgIHJmb2N5ID0gc2l0ZVsxXSxcbiAgICAgIHBieTIgPSByZm9jeSAtIGRpcmVjdHJpeDtcblxuICBpZiAoIXBieTIpIHJldHVybiByZm9jeDtcblxuICB2YXIgbEFyYyA9IGFyYy5QO1xuICBpZiAoIWxBcmMpIHJldHVybiAtSW5maW5pdHk7XG5cbiAgc2l0ZSA9IGxBcmMuc2l0ZTtcbiAgdmFyIGxmb2N4ID0gc2l0ZVswXSxcbiAgICAgIGxmb2N5ID0gc2l0ZVsxXSxcbiAgICAgIHBsYnkyID0gbGZvY3kgLSBkaXJlY3RyaXg7XG5cbiAgaWYgKCFwbGJ5MikgcmV0dXJuIGxmb2N4O1xuXG4gIHZhciBobCA9IGxmb2N4IC0gcmZvY3gsXG4gICAgICBhYnkyID0gMSAvIHBieTIgLSAxIC8gcGxieTIsXG4gICAgICBiID0gaGwgLyBwbGJ5MjtcblxuICBpZiAoYWJ5MikgcmV0dXJuICgtYiArIE1hdGguc3FydChiICogYiAtIDIgKiBhYnkyICogKGhsICogaGwgLyAoLTIgKiBwbGJ5MikgLSBsZm9jeSArIHBsYnkyIC8gMiArIHJmb2N5IC0gcGJ5MiAvIDIpKSkgLyBhYnkyICsgcmZvY3g7XG5cbiAgcmV0dXJuIChyZm9jeCArIGxmb2N4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHJpZ2h0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICB2YXIgckFyYyA9IGFyYy5OO1xuICBpZiAockFyYykgcmV0dXJuIGxlZnRCcmVha1BvaW50KHJBcmMsIGRpcmVjdHJpeCk7XG4gIHZhciBzaXRlID0gYXJjLnNpdGU7XG4gIHJldHVybiBzaXRlWzFdID09PSBkaXJlY3RyaXggPyBzaXRlWzBdIDogSW5maW5pdHk7XG59XG4iLCJpbXBvcnQge2FkZEJlYWNoLCByZW1vdmVCZWFjaH0gZnJvbSBcIi4vQmVhY2hcIjtcbmltcG9ydCB7c29ydENlbGxIYWxmZWRnZXMsIGNlbGxIYWxmZWRnZVN0YXJ0LCBjbGlwQ2VsbHN9IGZyb20gXCIuL0NlbGxcIjtcbmltcG9ydCB7Zmlyc3RDaXJjbGV9IGZyb20gXCIuL0NpcmNsZVwiO1xuaW1wb3J0IHtjbGlwRWRnZXN9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCBSZWRCbGFja1RyZWUgZnJvbSBcIi4vUmVkQmxhY2tUcmVlXCI7XG5cbmV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTY7XG5leHBvcnQgdmFyIGVwc2lsb24yID0gMWUtMTI7XG5leHBvcnQgdmFyIGJlYWNoZXM7XG5leHBvcnQgdmFyIGNlbGxzO1xuZXhwb3J0IHZhciBjaXJjbGVzO1xuZXhwb3J0IHZhciBlZGdlcztcblxuZnVuY3Rpb24gdHJpYW5nbGVBcmVhKGEsIGIsIGMpIHtcbiAgcmV0dXJuIChhWzBdIC0gY1swXSkgKiAoYlsxXSAtIGFbMV0pIC0gKGFbMF0gLSBiWzBdKSAqIChjWzFdIC0gYVsxXSk7XG59XG5cbmZ1bmN0aW9uIGxleGljb2dyYXBoaWMoYSwgYikge1xuICByZXR1cm4gYlsxXSAtIGFbMV1cbiAgICAgIHx8IGJbMF0gLSBhWzBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEaWFncmFtKHNpdGVzLCBleHRlbnQpIHtcbiAgdmFyIHNpdGUgPSBzaXRlcy5zb3J0KGxleGljb2dyYXBoaWMpLnBvcCgpLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBjaXJjbGU7XG5cbiAgZWRnZXMgPSBbXTtcbiAgY2VsbHMgPSBuZXcgQXJyYXkoc2l0ZXMubGVuZ3RoKTtcbiAgYmVhY2hlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG4gIGNpcmNsZXMgPSBuZXcgUmVkQmxhY2tUcmVlO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY2lyY2xlID0gZmlyc3RDaXJjbGU7XG4gICAgaWYgKHNpdGUgJiYgKCFjaXJjbGUgfHwgc2l0ZVsxXSA8IGNpcmNsZS55IHx8IChzaXRlWzFdID09PSBjaXJjbGUueSAmJiBzaXRlWzBdIDwgY2lyY2xlLngpKSkge1xuICAgICAgaWYgKHNpdGVbMF0gIT09IHggfHwgc2l0ZVsxXSAhPT0geSkge1xuICAgICAgICBhZGRCZWFjaChzaXRlKTtcbiAgICAgICAgeCA9IHNpdGVbMF0sIHkgPSBzaXRlWzFdO1xuICAgICAgfVxuICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoY2lyY2xlKSB7XG4gICAgICByZW1vdmVCZWFjaChjaXJjbGUuYXJjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgc29ydENlbGxIYWxmZWRnZXMoKTtcblxuICBpZiAoZXh0ZW50KSB7XG4gICAgdmFyIHgwID0gK2V4dGVudFswXVswXSxcbiAgICAgICAgeTAgPSArZXh0ZW50WzBdWzFdLFxuICAgICAgICB4MSA9ICtleHRlbnRbMV1bMF0sXG4gICAgICAgIHkxID0gK2V4dGVudFsxXVsxXTtcbiAgICBjbGlwRWRnZXMoeDAsIHkwLCB4MSwgeTEpO1xuICAgIGNsaXBDZWxscyh4MCwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICB0aGlzLmVkZ2VzID0gZWRnZXM7XG4gIHRoaXMuY2VsbHMgPSBjZWxscztcblxuICBiZWFjaGVzID1cbiAgY2lyY2xlcyA9XG4gIGVkZ2VzID1cbiAgY2VsbHMgPSBudWxsO1xufVxuXG5EaWFncmFtLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpYWdyYW0sXG5cbiAgcG9seWdvbnM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlZGdlcyA9IHRoaXMuZWRnZXM7XG5cbiAgICByZXR1cm4gdGhpcy5jZWxscy5tYXAoZnVuY3Rpb24oY2VsbCkge1xuICAgICAgdmFyIHBvbHlnb24gPSBjZWxsLmhhbGZlZGdlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaV0pOyB9KTtcbiAgICAgIHBvbHlnb24uZGF0YSA9IGNlbGwuc2l0ZS5kYXRhO1xuICAgICAgcmV0dXJuIHBvbHlnb247XG4gICAgfSk7XG4gIH0sXG5cbiAgdHJpYW5nbGVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHJpYW5nbGVzID0gW10sXG4gICAgICAgIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgIHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG4gICAgICBpZiAoIShtID0gKGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzKS5sZW5ndGgpKSByZXR1cm47XG4gICAgICB2YXIgc2l0ZSA9IGNlbGwuc2l0ZSxcbiAgICAgICAgICBoYWxmZWRnZXMsXG4gICAgICAgICAgaiA9IC0xLFxuICAgICAgICAgIG0sXG4gICAgICAgICAgczAsXG4gICAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbbSAtIDFdXSxcbiAgICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG5cbiAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIGUxID0gZWRnZXNbaGFsZmVkZ2VzW2pdXTtcbiAgICAgICAgczEgPSBlMS5sZWZ0ID09PSBzaXRlID8gZTEucmlnaHQgOiBlMS5sZWZ0O1xuICAgICAgICBpZiAoczAgJiYgczEgJiYgaSA8IHMwLmluZGV4ICYmIGkgPCBzMS5pbmRleCAmJiB0cmlhbmdsZUFyZWEoc2l0ZSwgczAsIHMxKSA8IDApIHtcbiAgICAgICAgICB0cmlhbmdsZXMucHVzaChbc2l0ZS5kYXRhLCBzMC5kYXRhLCBzMS5kYXRhXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0cmlhbmdsZXM7XG4gIH0sXG5cbiAgbGlua3M6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVkZ2VzLmZpbHRlcihmdW5jdGlvbihlZGdlKSB7XG4gICAgICByZXR1cm4gZWRnZS5yaWdodDtcbiAgICB9KS5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlOiBlZGdlLmxlZnQuZGF0YSxcbiAgICAgICAgdGFyZ2V0OiBlZGdlLnJpZ2h0LmRhdGFcbiAgICAgIH07XG4gICAgfSk7XG4gIH0sXG5cbiAgZmluZDogZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzLCBpMCwgaTEgPSB0aGF0Ll9mb3VuZCB8fCAwLCBuID0gdGhhdC5jZWxscy5sZW5ndGgsIGNlbGw7XG5cbiAgICAvLyBVc2UgdGhlIHByZXZpb3VzbHktZm91bmQgY2VsbCwgb3Igc3RhcnQgd2l0aCBhbiBhcmJpdHJhcnkgb25lLlxuICAgIHdoaWxlICghKGNlbGwgPSB0aGF0LmNlbGxzW2kxXSkpIGlmICgrK2kxID49IG4pIHJldHVybiBudWxsO1xuICAgIHZhciBkeCA9IHggLSBjZWxsLnNpdGVbMF0sIGR5ID0geSAtIGNlbGwuc2l0ZVsxXSwgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcblxuICAgIC8vIFRyYXZlcnNlIHRoZSBoYWxmLWVkZ2VzIHRvIGZpbmQgYSBjbG9zZXIgY2VsbCwgaWYgYW55LlxuICAgIGRvIHtcbiAgICAgIGNlbGwgPSB0aGF0LmNlbGxzW2kwID0gaTFdLCBpMSA9IG51bGw7XG4gICAgICBjZWxsLmhhbGZlZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGVkZ2UgPSB0aGF0LmVkZ2VzW2VdLCB2ID0gZWRnZS5sZWZ0O1xuICAgICAgICBpZiAoKHYgPT09IGNlbGwuc2l0ZSB8fCAhdikgJiYgISh2ID0gZWRnZS5yaWdodCkpIHJldHVybjtcbiAgICAgICAgdmFyIHZ4ID0geCAtIHZbMF0sIHZ5ID0geSAtIHZbMV0sIHYyID0gdnggKiB2eCArIHZ5ICogdnk7XG4gICAgICAgIGlmICh2MiA8IGQyKSBkMiA9IHYyLCBpMSA9IHYuaW5kZXg7XG4gICAgICB9KTtcbiAgICB9IHdoaWxlIChpMSAhPT0gbnVsbCk7XG5cbiAgICB0aGF0Ll9mb3VuZCA9IGkwO1xuXG4gICAgcmV0dXJuIHJhZGl1cyA9PSBudWxsIHx8IGQyIDw9IHJhZGl1cyAqIHJhZGl1cyA/IGNlbGwuc2l0ZSA6IG51bGw7XG4gIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBUcmFuc2Zvcm0oaywgeCwgeSkge1xuICB0aGlzLmsgPSBrO1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtLFxuICBzY2FsZTogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBrID09PSAxID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rICogaywgdGhpcy54LCB0aGlzLnkpO1xuICB9LFxuICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4geCA9PT0gMCAmIHkgPT09IDAgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmssIHRoaXMueCArIHRoaXMuayAqIHgsIHRoaXMueSArIHRoaXMuayAqIHkpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gW3BvaW50WzBdICogdGhpcy5rICsgdGhpcy54LCBwb2ludFsxXSAqIHRoaXMuayArIHRoaXMueV07XG4gIH0sXG4gIGFwcGx5WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4ICogdGhpcy5rICsgdGhpcy54O1xuICB9LFxuICBhcHBseVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geSAqIHRoaXMuayArIHRoaXMueTtcbiAgfSxcbiAgaW52ZXJ0OiBmdW5jdGlvbihsb2NhdGlvbikge1xuICAgIHJldHVybiBbKGxvY2F0aW9uWzBdIC0gdGhpcy54KSAvIHRoaXMuaywgKGxvY2F0aW9uWzFdIC0gdGhpcy55KSAvIHRoaXMua107XG4gIH0sXG4gIGludmVydFg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gKHggLSB0aGlzLngpIC8gdGhpcy5rO1xuICB9LFxuICBpbnZlcnRZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuICh5IC0gdGhpcy55KSAvIHRoaXMuaztcbiAgfSxcbiAgcmVzY2FsZVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geC5jb3B5KCkuZG9tYWluKHgucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRYLCB0aGlzKS5tYXAoeC5pbnZlcnQsIHgpKTtcbiAgfSxcbiAgcmVzY2FsZVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geS5jb3B5KCkuZG9tYWluKHkucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRZLCB0aGlzKS5tYXAoeS5pbnZlcnQsIHkpKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMueCArIFwiLFwiICsgdGhpcy55ICsgXCIpIHNjYWxlKFwiICsgdGhpcy5rICsgXCIpXCI7XG4gIH1cbn07XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSBuZXcgVHJhbnNmb3JtKDEsIDAsIDApO1xuXG50cmFuc2Zvcm0ucHJvdG90eXBlID0gVHJhbnNmb3JtLnByb3RvdHlwZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtKG5vZGUpIHtcbiAgd2hpbGUgKCFub2RlLl9fem9vbSkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybiBpZGVudGl0eTtcbiAgcmV0dXJuIG5vZGUuX196b29tO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuLy8gaW1wb3J0IHtzZWxlY3QsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG4vLyBpbXBvcnQgdHJhbnNpdGlvbiBmcm9tICdkMy10cmFuc2l0aW9uJztcbmltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sdGlwIHtcbiAgICBjb25zdHJ1Y3RvcihpZCwgdmVyYm9zZT1mYWxzZSwgb2Zmc2V0WD0zMCwgb2Zmc2V0WT0tNDAsIGR1cmF0aW9uPTEwMCl7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy52ZXJib3NlID0gdmVyYm9zZTtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gb2Zmc2V0WDtcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gb2Zmc2V0WTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIH1cblxuICAgIHNob3coaW5mbykge1xuICAgICAgICBpZih0aGlzLnZlcmJvc2UpIGNvbnNvbGUubG9nKGluZm8pO1xuICAgICAgICB0aGlzLmVkaXQoaW5mbyk7XG4gICAgICAgIHRoaXMubW92ZSgpO1xuICAgICAgICBkMy5zZWxlY3QoXCIjXCIgKyB0aGlzLmlkKVxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcImlubGluZVwiKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKHRoaXMuZHVyYXRpb24pXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEuMCk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgZDMuc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjApO1xuICAgICAgICB0aGlzLmVkaXQoXCJcIik7XG4gICAgfVxuXG4gICAgbW92ZSh4ID0gZDMuZXZlbnQucGFnZVgsIHkgPSBkMy5ldmVudC5wYWdlWSkge1xuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh4KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHkpO1xuICAgICAgICB9XG4gICAgICAgIHggPSB4ICsgdGhpcy5vZmZzZXRYOyAvLyBUT0RPOiBnZXQgcmlkIG9mIHRoZSBoYXJkLWNvZGVkIGFkanVzdG1lbnRcbiAgICAgICAgeSA9ICh5ICsgdGhpcy5vZmZzZXRZKTwwPzEwOnkrdGhpcy5vZmZzZXRZO1xuICAgICAgICBkMy5zZWxlY3QoXCIjXCIrdGhpcy5pZClcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgYCR7eH1weGApXG4gICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgYCR7eX1weGApO1xuICAgIH1cblxuICAgIGVkaXQoaW5mbykge1xuICAgICAgICBkMy5zZWxlY3QoXCIjXCIgKyB0aGlzLmlkKVxuICAgICAgICAgICAgLmh0bWwoaW5mbyk7XG4gICAgfVxufVxuXG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5pbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtzY2FsZUJhbmR9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHtuZXN0fSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuXG5pbXBvcnQge3NldENvbG9yU2NhbGUsIGRyYXdDb2xvckxlZ2VuZH0gZnJvbSBcIi4uL3V0aWxzL2NvbG9yLXV0aWxzXCI7XG5pbXBvcnQgVG9vbGJhciBmcm9tIFwiLi9Ub29sYmFyXCI7XG5pbXBvcnQgVG9vbHRpcCBmcm9tIFwiLi9Ub29sdGlwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYXRtYXAge1xuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIGRhdGEge0xpc3R9LCBhIGxpc3Qgb2Ygb2JqZWN0cyB3aXRoIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczogeDogdGhlIHggbGFiZWwsIHk6IHRoZSB5IGxhYmVsXG4gICAgICAgIHZhbHVlOiB0aGUgcmVuZGVyZWQgbnVtZXJpY2FsIHZhbHVlICh0cmFuc2Zvcm1lZClcbiAgICAgICAgZGlzcGxheVZhbHVlOiBkaXNwbGF5IG51bWVyaWNhbCB2YWx1ZVxuICAgICAqIEBwYXJhbSB1c2VMb2cge0Jvb2xlYW59IHBlcmZvcm1zIGxvZyB0cmFuc2Zvcm1hdGlvblxuICAgICAqIEBwYXJhbSBjb2xvclNjaGVtZSB7U3RyaW5nfTogcmVjb2duaXplZCB0ZXJtcyBpbiBDb2xvcnM6Z2V0Q29sb3JJbnRlcnBvbGF0b3JcbiAgICAgKiBAcGFyYW0gciB7SW50ZWdlcn06IGNlbGwgY29ybmVyIHJhZGl1c1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIHVzZUxvZz10cnVlLCBsb2dCYXNlPTEwLCBjb2xvclNjaGVtZT1cIllsR25CdVwiLCByPTIsIHRvb2x0aXBJZD1cImhlYXRtYXBUb29sdGlwXCIsIHRvb2x0aXBDc3NDbGFzcz1cImhlYXRtYXAtdG9vbHRpcFwiKXtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy51c2VMb2cgPSB1c2VMb2c7XG4gICAgICAgIHRoaXMubG9nQmFzZSA9IGxvZ0Jhc2U7XG4gICAgICAgIHRoaXMubnVsbENvbG9yID0gXCIjZTZlNmU2XCI7IC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlLiBtYWtlIGl0IGEgcGFyYW0uXG4gICAgICAgIHRoaXMuY29sb3JTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54TGlzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy55TGlzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54U2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueVNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICB0aGlzLmNvbG9yU2NoZW1lID0gY29sb3JTY2hlbWU7XG5cbiAgICAgICAgLy8gcGVyaXBoZXJhbCBmZWF0dXJlc1xuICAgICAgICAvLy8gVG9vbHRpcFxuICAgICAgICAvLy8gY3JlYXRlIHRoZSB0b29sdGlwIERJVlxuICAgICAgICBpZiAoc2VsZWN0KGAjJHt0b29sdGlwSWR9YCkuZW1wdHkoKSkgc2VsZWN0KFwiYm9keVwiKS5hcHBlbmQoXCJkaXZcIikuYXR0cihcImlkXCIsIHRvb2x0aXBJZCk7XG5cbiAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IFRvb2x0aXAodG9vbHRpcElkKTtcbiAgICAgICAgc2VsZWN0KGAjJHt0b29sdGlwSWR9YCkuY2xhc3NlZCh0b29sdGlwQ3NzQ2xhc3MsIHRydWUpO1xuXG4gICAgICAgIHRoaXMudG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2xiYXIgcGFuZWxcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2xiYXIncyBkb20gSURcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICAgKi9cblxuICAgIGNyZWF0ZVRvb2xiYXIoZG9tSWQsIHRvb2x0aXApe1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSBuZXcgVG9vbGJhcihkb21JZCwgdG9vbHRpcCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xiYXI7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBkcmF3IGNvbG9yIGxlZ2VuZCBmb3IgdGhlIGhlYXQgbWFwXG4gICAgICogQHBhcmFtIGRvbSB7U2VsZWN0aW9ufSBhIGQzIHNlbGVjdGlvbiBvYmplY3RcbiAgICAgKiBAcGFyYW0gbGVnZW5kQ29uZmlnIHtPYmplY3R9IHdpdGggYXR0cjogeCwgeVxuICAgICAqL1xuXG4gICAgZHJhd0NvbG9yTGVnZW5kKGRvbSwgbGVnZW5kQ29uZmlnPXt4OjAsIHk6MH0sIHRpY2tzPTUpe1xuICAgICAgICBkcmF3Q29sb3JMZWdlbmQodGhpcy5kYXRhWzBdLnVuaXR8fFwiVmFsdWVcIiwgZG9tLCB0aGlzLmNvbG9yU2NhbGUsIGxlZ2VuZENvbmZpZywgdGhpcy51c2VMb2csIHRpY2tzLCB0aGlzLmxvZ0Jhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlZHJhd3MgdGhlIGhlYXRtYXA6IHdoZW4gdGhlIHhsaXN0IGFuZCB5bGlzdCBhcmUgY2hhbmdlZCwgcmVkcmF3IHRoZSBoZWF0bWFwXG4gICAgICogQHBhcmFtIGRvbSB7U2VsZWN0aW9ufSBhIGQzIHNlbGVjdGlvbiBvYmplY3RcbiAgICAgKiBAcGFyYW0geExpc3Qge0xpc3R9IGEgbGlzdCBvZiB4IGxhYmVsc1xuICAgICAqIEBwYXJhbSB5TGlzdCB7TGlzdH0gYSBsaXN0IG9mIHkgbGFiZWxzXG4gICAgICogQHBhcmFtIGRpbWVuc2lvbnMge0RpY3Rpb25hcnl9IHt3OkludGVnZXIsIGg6aW50ZWdlcn0gd2l0aCB0d28gYXR0cmlidXRlczogdyBhbmQgaFxuICAgICAqIEBwYXJhbSBhbmdsZSB7SW50ZWdlcn0gZm9yIHRoZSB5IHRleHQgbGFiZWxzXG4gICAgICovXG4gICAgcmVkcmF3KGRvbSwgeExpc3QsIHlMaXN0LCBkaW1lbnNpb25zPXt3OjEwMDAsIGg6MTAwMH0sIGFuZ2xlPTMwKXtcbiAgICAgICAgdGhpcy5fc2V0WFNjYWxlKGRpbWVuc2lvbnMudywgeExpc3QpO1xuICAgICAgICB0aGlzLl9zZXRZU2NhbGUoZGltZW5zaW9ucy5oLCB5TGlzdCk7XG4gICAgICAgIHRoaXMuZHJhdyhkb20sIGRpbWVuc2lvbnMsIGFuZ2xlKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIGRyYXdzIHRoZSBoZWF0bWFwXG4gICAgICogQHBhcmFtIGRvbSB7U2VsZWN0aW9ufVxuICAgICAqIEBwYXJhbSBkaW1lbnNpb25zIHtEaWN0aW9uYXJ5fSB7dzpJbnRlZ2VyLCBoOmludGVnZXJ9IG9mIHRoZSBoZWF0bWFwXG4gICAgICogQHBhcmFtIGFuZ2xlIHtJbnRlZ2VyfSBmb3IgdGhlIHkgdGV4dCBsYWJlbHNcbiAgICAgKiBAcGFyYW0gdXNlTnVsbENvbG9yIHtCb29sZWFufSB3aGV0aGVyIHRvIHJlbmRlciBudWxsIHZhbHVlcyB3aXRoIHRoZSBwcmUtZGVmaW5lZCBudWxsIGNvbG9yXG4gICAgICogQHBhcmFtIHlsYWJlbFBsYWNlbWVudCB7U3RyaW5nfSBsZWZ0IG9yIHJpZ2h0XG4gICAgICovXG5cbiAgICBkcmF3KGRvbSwgZGltZW5zaW9ucz17dzoxMDAwLCBoOjYwMH0sIGFuZ2xlPTMwLCB1c2VOdWxsQ29sb3I9ZmFsc2UsIGNvbHVtbkxhYmVsUG9zQWRqdXN0PW51bGwsIGRtaW49MCwgeWxhYmVsUGxhY2VtZW50PVwicmlnaHRcIil7XG5cbiAgICAgICAgaWYgKHRoaXMueExpc3QgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0WFNjYWxlKGRpbWVuc2lvbnMudyk7XG4gICAgICAgIGlmICh0aGlzLnlMaXN0ID09PSB1bmRlZmluZWQpIHRoaXMuX3NldFlTY2FsZShkaW1lbnNpb25zLmgpO1xuICAgICAgICBpZiAodGhpcy5jb2xvclNjYWxlID09PSB1bmRlZmluZWQpIHRoaXMuX3NldENvbG9yU2NhbGUoZG1pbik7XG5cbiAgICAgICAgLy8gdGV4dCBsYWJlbHNcbiAgICAgICAgLy8vLyBkYXRhIGpvaW5cbiAgICAgICAgY29uc3QgeExhYmVscyA9IGRvbS5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIilcbiAgICAgICAgICAgIC5kYXRhKHRoaXMueExpc3QpO1xuXG4gICAgICAgIC8vLy8gdXBkYXRlIGFuZCB0cmFuc2Zvcm1cbiAgICAgICAgY29uc3QgWSA9IGNvbHVtbkxhYmVsUG9zQWRqdXN0PT1udWxsP3RoaXMueVNjYWxlLnJhbmdlKClbMV0gKyAodGhpcy55U2NhbGUuYmFuZHdpZHRoKCkgKiAyKTp0aGlzLnlTY2FsZS5yYW5nZSgpWzFdK2NvbHVtbkxhYmVsUG9zQWRqdXN0O1xuICAgICAgICBjb25zdCBhZGp1c3QgPSA1O1xuICAgICAgICB4TGFiZWxzLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IHtcbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy54U2NhbGUoZCkgKyBhZGp1c3Q7XG4gICAgICAgICAgICBsZXQgeSA9IFk7XG4gICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KSByb3RhdGUoJHthbmdsZX0pYDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8vLyBlbnRlcnMgbmV3IGVsZW1lbnRzXG4gICAgICAgIHhMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkLCBpKSA9PiBgZXhwLW1hcC14bGFiZWwgeCR7aX1gKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcbiAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKT4xMj8xMjp0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnhTY2FsZShkKSArIGFkanVzdDtcbiAgICAgICAgICAgICAgICBsZXQgeSA9IFk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSkgcm90YXRlKCR7YW5nbGV9KWA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm1lcmdlKHhMYWJlbHMpXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gZCk7XG5cbiAgICAgICAgLy8vLyBleGl0IC0tIHJlbW92ZXMgb2xkIGVsZW1lbnRzIGFzIG5lZWRlZFxuICAgICAgICB4TGFiZWxzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLnlMaXN0KVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLnRleHQoKGQpID0+IGQpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgeWxhYmVsUGxhY2VtZW50PT1cImxlZnRcIj90aGlzLnhTY2FsZS5yYW5nZSgpWzBdIC0gNTp0aGlzLnhTY2FsZS5yYW5nZSgpWzFdICsgNSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCkgPT4gdGhpcy55U2NhbGUoZCkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCAoZCwgaSkgPT4gYGV4cC1tYXAteWxhYmVsIHkke2l9YClcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgeWxhYmVsUGxhY2VtZW50PT1cImxlZnRcIj9cImVuZFwiOlwic3RhcnRcIilcbiAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcbiAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgYWxlcnQoYCR7ZH0gaXMgY2xpY2tlZC4gVG8gYmUgaW1wbGVtZW50ZWRgKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJub3JtYWxcIiwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJub3JtYWxcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW5kZXJzIHRoZSBoZWF0bWFwIGNlbGxzXG5cbiAgICAgICAgLy8vLyBkYXRhIGpvaW5cbiAgICAgICAgY29uc3QgY2VsbHMgPSBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhLCAoZCkgPT4gZC52YWx1ZSk7XG5cbiAgICAgICAgLy8vLyB1cGRhdGUgb2xkIGVsZW1lbnRzXG4gICAgICAgIGNlbGxzLmF0dHIoXCJ4XCIsIChkKSA9PiB0aGlzLnhTY2FsZShkLngpKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkKSA9PiB0aGlzLnlTY2FsZShkLnkpKVxuICAgICAgICAgICAgLmF0dHIoXCJyb3dcIiwgKGQpID0+IGB4JHt0aGlzLnhMaXN0LmluZGV4T2YoZC54KX1gKSAvLyBUT0RPOiByb3cgc2hvdWxkIGJlIHksIGNvbHVtbiBzaG91bGQgYmUgeC4uLlxuICAgICAgICAgICAgLmF0dHIoXCJjb2xcIiwgKGQpID0+IGB5JHt0aGlzLnlMaXN0LmluZGV4T2YoZC55KX1gKTtcblxuICAgICAgICAvLy8vIGVudGVyIG5ldyBlbGVtZW50c1xuICAgICAgICBjb25zdCBudWxsQ29sb3IgPSBcIiNmZmZmZmZcIjtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNlbGxzLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJyb3dcIiwgKGQpID0+IGB4JHt0aGlzLnhMaXN0LmluZGV4T2YoZC54KX1gKVxuICAgICAgICAgICAgLmF0dHIoXCJjb2xcIiwgKGQpID0+IGB5JHt0aGlzLnlMaXN0LmluZGV4T2YoZC55KX1gKVxuXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgKGQpID0+IHRoaXMueFNjYWxlKGQueCkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQpID0+IHRoaXMueVNjYWxlKGQueSkpXG4gICAgICAgICAgICAuYXR0cihcInJ4XCIsIHRoaXMucilcbiAgICAgICAgICAgIC5hdHRyKFwicnlcIiwgdGhpcy5yKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIiNlZWVlZWVcIilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTsgLy8gTm90ZTogXCJ0aGlzXCIgaGVyZSByZWZlcnMgdG8gdGhlIGRvbSBlbGVtZW50IG5vdCB0aGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgc2VsZi5jZWxsTW91c2VvdmVyKGQsIGRvbSwgc2VsZWN0ZWQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgc2VsZi5jZWxsTW91c2VvdXQoZG9tKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWVyZ2UoY2VsbHMpXG5cbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZC5jb2xvcikgcmV0dXJuIGQuY29sb3I7XG4gICAgICAgICAgICAgICAgaWYgKHVzZU51bGxDb2xvciYmZC52YWx1ZT09MCkgY29uc29sZS5pbmZvKGQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB1c2VOdWxsQ29sb3ImJihkLnZhbHVlPT0wfHxkLnZhbHVlPT09bnVsbHx8ZC52YWx1ZT09PXVuZGVmaW5lZCk/bnVsbENvbG9yOnRoaXMudXNlTG9nP3RoaXMuY29sb3JTY2FsZSh0aGlzLl9sb2coZC52YWx1ZSkpOnRoaXMuY29sb3JTY2FsZShkLnZhbHVlKTtcbiAgICAgICAgICAgIH0pIC8vIFRPRE86IHdoYXQgaWYgbnVsbCB2YWx1ZSBpc25cInQgMD9cbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCAoZCk9PntcbiAgICAgICAgICAgICAgICBpZiAodXNlTnVsbENvbG9yJiZkLnZhbHVlPT0wKSByZXR1cm4gXCJsaWdodGdyZXlcIjtcbiAgICAgICAgICAgICAgICBpZihkLnN0cm9rZSkgcmV0dXJuIGQuc3Ryb2tlO1xuICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIFwibm9uZVwiO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCAoZCk9PntcbiAgICAgICAgICAgICAgICBpZiAodXNlTnVsbENvbG9yJiZkLnZhbHVlPT0wKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICBpZihkLnN0cm9rZSkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vLy8gZXhpdCBhbmQgcmVtb3ZlXG4gICAgICAgIGNlbGxzLmV4aXQoKS5yZW1vdmUoKTtcbiAgICB9XG5cblxuICAgIGNlbGxNb3VzZW91dChkb20pe1xuICAgICAgICBkb20uc2VsZWN0QWxsKFwiKlwiKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgIH1cblxuICAgIC8vIG5vdGU6IHRoaXMgaXMgb2Z0ZW4gb3ZlcnJpZGVuIGJ5IGEgY3VzdG9tIHZpc3VhbGl6YXRpb25cbiAgICBjZWxsTW91c2VvdmVyIChkLCBkb20sIHNlbGVjdGVkKSB7XG4gICAgICAgIGNvbnN0IHJvd0NsYXNzID0gc2VsZWN0ZWQuYXR0cihcInJvd1wiKTtcbiAgICAgICAgY29uc3QgY29sQ2xhc3MgPSBzZWxlY3RlZC5hdHRyKFwiY29sXCIpO1xuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpLmZpbHRlcihgLiR7cm93Q2xhc3N9YClcbiAgICAgICAgICAgIC5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIuZXhwLW1hcC15bGFiZWxcIikuZmlsdGVyKGAuJHtjb2xDbGFzc31gKVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgc2VsZWN0ZWQuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICBjb25zdCBkaXNwbGF5VmFsdWUgPSBkLmRpc3BsYXlWYWx1ZSA9PT0gdW5kZWZpbmVkP3BhcnNlRmxvYXQoZC52YWx1ZS50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDQpOmQuZGlzcGxheVZhbHVlO1xuICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhgQ29sdW1uOiAke2QueH0gPGJyLz4gUm93OiAke2QueX08YnIvPiBWYWx1ZTogJHtkaXNwbGF5VmFsdWV9YCk7XG4gICAgfVxuXG4gICAgX3NldFhTY2FsZSh3aWR0aCwgbmV3TGlzdCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBpZihuZXdMaXN0ICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy54TGlzdCA9IG5ld0xpc3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnhMaXN0ID0gbmVzdCgpXG4gICAgICAgICAgICAgICAgLmtleSgoZCkgPT4gZC54KVxuICAgICAgICAgICAgICAgIC5lbnRyaWVzKHRoaXMuZGF0YSlcbiAgICAgICAgICAgICAgICAubWFwKChkKSA9PiBkLmtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy54U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgLmRvbWFpbih0aGlzLnhMaXN0KVxuICAgICAgICAgICAgLnJhbmdlKFswLCB3aWR0aF0pXG4gICAgICAgICAgICAucGFkZGluZyguMDUpOyAvLyBUT0RPOiBlbGltaW5hdGUgaGFyZC1jb2RlZCB2YWx1ZVxuICAgIH1cblxuICAgIF9zZXRZU2NhbGUoaGVpZ2h0LCBuZXdMaXN0KSB7XG4gICAgICAgIGlmKG5ld0xpc3QgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnlMaXN0ID0gbmV3TGlzdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueUxpc3QgPSBuZXN0KClcbiAgICAgICAgICAgICAgICAua2V5KChkKSA9PiBkLnkpXG4gICAgICAgICAgICAgICAgLmVudHJpZXModGhpcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5tYXAoKGQpID0+IGQua2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnlTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAuZG9tYWluKHRoaXMueUxpc3QpXG4gICAgICAgICAgICAucmFuZ2UoWzAsIGhlaWdodF0pXG4gICAgICAgICAgICAucGFkZGluZyguMDUpOyAvLyBUT0RPOiBlbGltaW5hdGUgaGFyZC1jb2RlZCB2YWx1ZVxuICAgIH1cblxuICAgIF9zZXRDb2xvclNjYWxlKG1pbj0wKXtcbiAgICAgICAgbGV0IHVzZUxvZyA9IHRoaXMudXNlTG9nO1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuZGF0YS5tYXAoKGQpPT51c2VMb2c/dGhpcy5fbG9nKGQudmFsdWUpOmQudmFsdWUpO1xuICAgICAgICB0aGlzLmNvbG9yU2NhbGUgPSBzZXRDb2xvclNjYWxlKGRhdGEsIHRoaXMuY29sb3JTY2hlbWUsIG1pbik7XG4gICAgfVxuXG4gICAgX2xvZyh2KXtcbiAgICAgICAgY29uc3QgYWRqdXN0ID0gMTtcbiAgICAgICAgcmV0dXJuIE1hdGgubG9nKE51bWJlcih2K2FkanVzdCkpL01hdGgubG9nKHRoaXMubG9nQmFzZSk7XG4gICAgfVxuXG5cblxufSIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbmltcG9ydCB7Y3JlYXRlU3ZnfSBmcm9tIFwiLi4vdXRpbHMvZG9tLXV0aWxzXCI7XG5pbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5pbXBvcnQgRGVuZHJvSGVhdG1hcENvbmZpZyBmcm9tIFwiLi9EZW5kcm9IZWF0bWFwQ29uZmlnXCI7XG5pbXBvcnQgRGVuZHJvZ3JhbSBmcm9tIFwiLi9EZW5kcm9ncmFtXCI7XG5pbXBvcnQgSGVhdG1hcCBmcm9tIFwiLi9IZWF0bWFwXCI7XG5pbXBvcnQgVG9vbGJhciBmcm9tIFwiLi9Ub29sYmFyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbmRyb0hlYXRtYXAge1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gY29sdW1uVHJlZSB7U3RyaW5nfSBhIG5ld2ljayB0cmVlXG4gICAgICogQHBhcmFtIHJvd1RyZWUge1N0cmluZ30gYSBuZXdpY2sgdHJlZVxuICAgICAqIEBwYXJhbSBoZWF0bWFwRGF0YSB7TGlzdH0gb2Ygb2JqZWN0cyB3aXRoIGF0dHJpYnV0ZXM6IHg6IFN0cmluZywgeTpTdHJpbmcsIHZhbHVlOkZsb2F0LCBkaXNwbGF5VmFsdWU6RmxvYXRcbiAgICAgKiBAcGFyYW0gY29sb3Ige1N0cmluZ30gYSBjb2xvciBuYW1lIHRoYXQncyBhdmFpbGFibGUgaW4gQ29sb3JzLmdldENvbG9ySW50ZXJwb2xhdG9yXG4gICAgICogQHBhcmFtIHIge0ludGVnZXJ9IHRoZSBkZWdyZWVzIG9mIHJvdW5kZWQtY29ybmVycyBvZiB0aGUgaGVhdG1hcCBjZWxsc1xuICAgICAqIEBwYXJhbSBjb25maWcge0RlbmRyb0hlYXRtYXBDb25maWd9XG4gICAgICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2x1bW5UcmVlLCByb3dUcmVlLCBoZWF0bWFwRGF0YSwgY29sb3I9XCJZbEduQnVcIiwgcj0yLCBjb25maWc9bmV3IERlbmRyb0hlYXRtYXBDb25maWcoKSwgdG9vbHRpcElkPVwiZG1hcFRvb2x0aXBcIiwgdXNlTG9nPXRydWUsIGJhc2U9MTAsIHRpdGxlID0gXCJcIil7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnLmdldCgpO1xuICAgICAgICAvL2lucHV0IGV2YWx1YXRpb25zXG4gICAgICAgIGNvbHVtblRyZWUgPSBjb2x1bW5UcmVlPT09dW5kZWZpbmVkfHxjb2x1bW5UcmVlLnN0YXJ0c1dpdGgoXCJOb3QgZW5vdWdoIGRhdGFcIik/dW5kZWZpbmVkOmNvbHVtblRyZWU7XG4gICAgICAgIHJvd1RyZWUgPSByb3dUcmVlPT09dW5kZWZpbmVkfHxyb3dUcmVlLnN0YXJ0c1dpdGgoXCJOb3QgZW5vdWdoIGRhdGFcIik/dW5kZWZpbmVkOnJvd1RyZWU7XG4gICAgICAgIC8vIGFzc2lnbiBhdHRyaWJ1dGUgdmFsdWVzIGJhc2VkIG9uIGlucHV0IGFyZ3VtZW50c1xuICAgICAgICB0aGlzLmRhdGEgPSB7XG4gICAgICAgICAgICBjb2x1bW5UcmVlOiBjb2x1bW5UcmVlLFxuICAgICAgICAgICAgcm93VHJlZTogcm93VHJlZSxcbiAgICAgICAgICAgIGhlYXRtYXA6IGhlYXRtYXBEYXRhLFxuICAgICAgICAgICAgZXh0ZXJuYWw6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9iamVjdHMgPSB7XG4gICAgICAgICAgICBjb2x1bW5UcmVlOiB0aGlzLmRhdGEuY29sdW1uVHJlZT09PXVuZGVmaW5lZD8gdW5kZWZpbmVkOm5ldyBEZW5kcm9ncmFtKHRoaXMuZGF0YS5jb2x1bW5UcmVlLCBcInZcIiksXG4gICAgICAgICAgICByb3dUcmVlOiB0aGlzLmRhdGEucm93VHJlZT09PXVuZGVmaW5lZD91bmRlZmluZWQ6bmV3IERlbmRyb2dyYW0odGhpcy5kYXRhLnJvd1RyZWUsIFwiaFwiKSxcbiAgICAgICAgICAgIGhlYXRtYXA6IG5ldyBIZWF0bWFwKHRoaXMuZGF0YS5oZWF0bWFwLCB1c2VMb2csIGJhc2UsIGNvbG9yLCByLCB0b29sdGlwSWQpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudmlzdWFsQ29tcG9uZW50cyA9IHtcbiAgICAgICAgICAgIHN2ZzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY29sdW1uVHJlZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcm93VHJlZTogdW5kZWZpbmVkXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRoaXMub2JqZWN0cy5oZWF0bWFwLnRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSB0b29sYmFyIHBhbmVsXG4gICAgICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IHRoZSB0b29sYmFyJ3MgZG9tIElEXG4gICAgICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9XG4gICAgICogQHJldHVybnMge1Rvb2xiYXJ9XG4gICAgICovXG5cbiAgICBjcmVhdGVUb29sYmFyKGRvbUlkLCB0b29sdGlwKXtcbiAgICAgICAgdGhpcy50b29sYmFyID0gbmV3IFRvb2xiYXIoZG9tSWQsIHRvb2x0aXApO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciB0aGUgZGVuZHJvZ3JhbXMgYW5kIGNvcnJlc3BvbmRpbmcgaGVhdG1hcFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgcGFyZW50IERPTSBpZCBvZiB0aGUgU1ZHXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IG9mIHRoZSBTVkdcbiAgICAgKiBAcGFyYW0gc2hvd0NvbHVtblRyZWUge0Jvb2xlYW59IHJlbmRlciB0aGUgY29sdW1uIGRlbmRyb2dyYW1cbiAgICAgKiBAcGFyYW0gc2hvd1Jvd1RyZWUge0Jvb2xlYW59IHJlbmRlciB0aGUgcm93IGRlbmRyb2dyYW1cbiAgICAgKiBAcGFyYW0gbGVnZW5kUG9zIHtFbnVtfSB3aGVyZSB0byBwbGFjZSB0aGUgY29sb3IgbGVnZW5kOiBib3R0b20sIHRvcFxuICAgICAqIEBwYXJhbSB0aWNrcyB7SW50ZWdlcn0gbnVtYmVyIG9mIGJpbnMgb2YgdGhlIGNvbG9yIGxlZ2VuZFxuICAgICAqL1xuICAgIHJlbmRlcihkb21JZCwgc3ZnSWQsIHNob3dDb2x1bW5UcmVlPXRydWUsIHNob3dSb3dUcmVlPXRydWUsIGxlZ2VuZFBvcz1cInRvcFwiLCB0aWNrcz01KXtcbiAgICAgICAgdGhpcy5fdXBkYXRlQ29uZmlnKGxlZ2VuZFBvcyk7XG4gICAgICAgIHRoaXMudmlzdWFsQ29tcG9uZW50cy5zdmcgPSBjcmVhdGVTdmcoZG9tSWQsIHRoaXMuY29uZmlnLncsIHRoaXMuY29uZmlnLmgsIHRoaXMuY29uZmlnLm1hcmdpbiwgc3ZnSWQpO1xuXG4gICAgICAgIGxldCB4bGlzdCA9IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHlsaXN0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChzaG93Q29sdW1uVHJlZSAmJiB0aGlzLm9iamVjdHMuY29sdW1uVHJlZSE9PXVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnZpc3VhbENvbXBvbmVudHMuY29sdW1uVHJlZSA9IHRoaXMuX3JlbmRlclRyZWUoXCJjb2x1bW5cIiwgdGhpcy5vYmplY3RzLmNvbHVtblRyZWUsIHRoaXMuY29uZmlnLnBhbmVscy50b3ApO1xuICAgICAgICAgICAgeGxpc3QgPSB0aGlzLm9iamVjdHMuY29sdW1uVHJlZS54U2NhbGUuZG9tYWluKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3dSb3dUcmVlICYmIHRoaXMub2JqZWN0cy5yb3dUcmVlICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy52aXN1YWxDb21wb25lbnRzLnJvd1RyZWUgPSB0aGlzLl9yZW5kZXJUcmVlKFwicm93XCIsIHRoaXMub2JqZWN0cy5yb3dUcmVlLCB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdCk7XG4gICAgICAgICAgICB5bGlzdCA9IHRoaXMub2JqZWN0cy5yb3dUcmVlLnlTY2FsZS5kb21haW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnRpdGxlICE9IFwiXCIpIHtcbiAgICAgICAgICAgIHNlbGVjdChgIyR7ZG9tSWR9LXN2Z2ApLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgMjApXG4gICAgICAgICAgICAgICAgLnRleHQodGhpcy50aXRsZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZW5kZXJIZWF0bWFwKHRoaXMub2JqZWN0cy5oZWF0bWFwLCB4bGlzdCwgeWxpc3QsIHRpY2tzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgYSBuZXdpY2sgdHJlZVxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24ge2VudW19IGNvbHVtbiBvciByb3dcbiAgICAgKiBAcGFyYW0gdHJlZSB7RGVuZHJvZ3JhbX0gYSBEZW5kcm9ncmFtIG9iamVjdFxuICAgICAqIEBwYXJhbSBjb25maWcge09iamVjdH0gYSBwYW5lbCBjb25maWcgd2l0aCBhdHRyaWJ1dGVzOiB4LCB5LCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVuZGVyVHJlZShkaXJlY3Rpb24sIHRyZWUsIGNvbmZpZyl7XG4gICAgICAgIGxldCBzdmcgPSB0aGlzLnZpc3VhbENvbXBvbmVudHMuc3ZnO1xuICAgICAgICBjb25zdCBsYWJlbENsYXNzID0gZGlyZWN0aW9uPT1cInJvd1wiP1wiLmV4cC1tYXAteWxhYmVsXCI6XCIuZXhwLW1hcC14bGFiZWxcIjtcblxuICAgICAgICBjb25zdCBnID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgY29uZmlnLmlkKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYCk7XG4gICAgICAgIHRyZWUuZHJhdyhnLCBjb25maWcudywgY29uZmlnLmgpO1xuXG4gICAgICAgIGNvbnN0IG1vdXNlb3V0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiMzMzNcIik7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKGxhYmVsQ2xhc3MpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKFwiLmxlYWYtY29sb3JcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBtb3VzZW92ZXIgPSBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCA2KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcInJlZFwiKTtcbiAgICAgICAgICAgIGxldCBpZHMgPSBkLmxlYXZlcygpLm1hcCgobm9kZSk9Pm5vZGUuZGF0YS5uYW1lKTtcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwobGFiZWxDbGFzcylcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChsYWJlbCk9Pmlkcy5pbmNsdWRlcyhsYWJlbCkpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoXCIubGVhZi1jb2xvclwiKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGxhYmVsKT0+aWRzLmluY2x1ZGVzKGxhYmVsKSlcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGcuc2VsZWN0QWxsKFwiLmRlbmRyb2dyYW0tbm9kZVwiKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIG1vdXNlb3ZlcilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIG1vdXNlb3V0KTtcbiAgICAgICAgcmV0dXJuIGc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIHRoZSBoZWF0bWFwIGFuZCBjb2xvciBsZWdlbmRcbiAgICAgKiBAcGFyYW0gaGVhdG1hcCB7SGVhdG1hcH0gYSBIZWF0bWFwIG9iamVjdFxuICAgICAqIEBwYXJhbSB4TGlzdCB7TGlzdH0gYSBsaXN0IG9mIHggbGFiZWxzXG4gICAgICogQHBhcmFtIHlMaXN0IHtMaXN0fSBhIGxpc3Qgb2YgeSBsYWJlbHNcbiAgICAgKiBAcGFyYW0gdGlja3Mge0ludGVnZXJ9IHRoZSBudW1iZXIgb2YgYmlucyBpbiB0aGUgY29sb3IgbGVnZW5kXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVuZGVySGVhdG1hcChoZWF0bWFwLCB4TGlzdCwgeUxpc3QsIHRpY2tzPTUpe1xuICAgICAgICBsZXQgZG9tID0gdGhpcy52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWcucGFuZWxzLm1haW47XG4gICAgICAgIGNvbnN0IGcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBjb25maWcuaWQpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7Y29uZmlnLnh9LCAke2NvbmZpZy55fSlgKTtcbiAgICAgICAgaGVhdG1hcC5yZWRyYXcoZywgeExpc3QsIHlMaXN0LCB7dzogY29uZmlnLncsIGg6IGNvbmZpZy5ofSk7XG4gICAgICAgIGhlYXRtYXAuZHJhd0NvbG9yTGVnZW5kKGRvbSwgdGhpcy5jb25maWcucGFuZWxzLmxlZ2VuZCwgdGlja3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkanVzdCB0aGUgbGF5b3V0IGRpbWVuc2lvbnMgYmFzZWQgb24gdGhlIGFjdHVhbCBkYXRhXG4gICAgICogQHBhcmFtIGxlZ2VuZFBvcyB7U3RyaW5nfSBib3R0b20gb3IgdG9wXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdXBkYXRlQ29uZmlnKGxlZ2VuZFBvcyl7XG4gICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLm9iamVjdHMucm93VHJlZT09PXVuZGVmaW5lZD8xOnRoaXMub2JqZWN0cy5yb3dUcmVlLmxlYXZlcy5sZW5ndGg7XG5cbiAgICAgICAgLy8gdXBkYXRlcyB0aGUgbGVmdCBwYW5lbCdzIGhlaWdodCBiYXNlZCBvbiB0aGUgZGF0YVxuICAgICAgICB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdC5oID0gdGhpcy5jb25maWcuY2VsbC5oICogcm93czwyMD8yMDp0aGlzLmNvbmZpZy5jZWxsLmggKiByb3dzO1xuICAgICAgICB0aGlzLmNvbmZpZy5oICs9IHRoaXMuY29uZmlnLnBhbmVscy5sZWZ0Lmg7XG4gICAgICAgIHRoaXMuY29uZmlnLnBhbmVscy5tYWluLmggPSB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdC5oO1xuICAgICAgICBpZihsZWdlbmRQb3M9PVwiYm90dG9tXCIpIHRoaXMuY29uZmlnLnBhbmVscy5sZWdlbmQueSArPSB0aGlzLmNvbmZpZy5wYW5lbHMubWFpbi5oICsgdGhpcy5jb25maWcucGFuZWxzLm1haW4ueCArIDUwO1xuXG5cbiAgICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5pbXBvcnQge21lYW4sIHF1YW50aWxlLCBkZXZpYXRpb259IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0tlcm5lbF8oc3RhdGlzdGljcylcbi8vIHJlZmVyZW5jZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS2VybmVsX2RlbnNpdHlfZXN0aW1hdGlvblxuZXhwb3J0IGNvbnN0IGtlcm5lbCA9IHtcbiAgICBlcGFuZWNobmlrb3Y6IGZ1bmN0aW9uKHUpe3JldHVybiBNYXRoLmFicyh1KSA8PSAxPyAoMy80KSooMS11KnUpOjA7fSxcbiAgICBnYXVzc2lhbjogZnVuY3Rpb24odSl7cmV0dXJuIDEvTWF0aC5zcXJ0KDIqTWF0aC5QSSkqTWF0aC5leHAoLS41KnUqdSk7fVxufTtcblxuLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vamFzb25kYXZpZXMvc2NpZW5jZS5qcy9ibG9iL21hc3Rlci9zcmMvc3RhdHMvYmFuZHdpZHRoLmpzXG5leHBvcnQgY29uc3Qga2VybmVsQmFuZHdpZHRoID0ge1xuICAgIC8vIEJhbmR3aWR0aCBzZWxlY3RvcnMgZm9yIEdhdXNzaWFuIGtlcm5lbHMuXG4gICAgbnJkOiBmdW5jdGlvbih4KSB7XG4gICAgICAgIGxldCBpcXIgPSBxdWFudGlsZSh4LCAwLjc1KSAtIHF1YW50aWxlKHgsIDAuMjUpO1xuICAgICAgICBsZXQgaCA9IGlxciAvIDEuMzQ7XG4gICAgICAgIHJldHVybiAxLjA2ICogTWF0aC5taW4oZGV2aWF0aW9uKHgpLCBoKSAqIE1hdGgucG93KHgubGVuZ3RoLCAtMS81KTtcbiAgICB9XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ga2VybmVsOiB0aGUga2VybmVsIGZ1bmN0aW9uLCBzdWNoIGFzIGdhdXNzaWFuXG4gKiBAcGFyYW0gWDogbGlzdCBvZiBiaW5zXG4gKiBAcGFyYW0gaDogdGhlIGJhbmR3aWR0aCwgZWl0aGVyIGEgbnVtZXJpY2FsIHZhbHVlIGdpdmVuIGJ5IHRoZSB1c2VyIG9yIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIGZ1bmN0aW9uIGtlcm5lbEJhbmR3aWR0aFxuICogQHJldHVybnMge0Z1bmN0aW9ufTogdGhlIGtlcm5lbCBkZW5zaXR5IGVzdGltYXRvclxuICovXG5leHBvcnQgZnVuY3Rpb24ga2VybmVsRGVuc2l0eUVzdGltYXRvcihrZXJuZWwsIFgsIGgpe1xuICAgIHJldHVybiBmdW5jdGlvbihWKSB7XG4gICAgICAgIC8vIFggaXMgdGhlIGJpbnNcbiAgICAgICAgaWYgKGg9PTApIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihcIkludmFsbGlkIHZhbHVlOiBiYW5kd2lkdGggY2Fubm90IGJlIHplcm9cIik7XG4gICAgICAgICAgICAvLyBoPTAuMTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkJhbmR3aWR0aCBpcyBcIiArIGgpO1xuICAgICAgICByZXR1cm4gWC5tYXAoKHgpID0+IFt4LCBtZWFuKFYsICh2KSA9PiBrZXJuZWwoKHgtdikvaCkpL2hdKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIEtlcm5lbCBkZW5zaXR5IGVzdGltYXRpb24gdXNpbmcgU2NvdHQncyBydWxlIGZvciBlc3RpbWF0aW5nIGJhbmR3aWR0aFxuICogQHBhcmFtIHtsaXN0fSBWOiBpbnB1dCB2YWx1ZXMgXG4gKiBAcGFyYW0ge2xpc3R9IFg6IHBvaW50cyBhdCB3aGljaCB0byBldmFsdWF0ZSB0aGUgZGlzdHJpYnV0aW9uIFxuICogcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vc2NpcHkvc2NpcHkvYmxvYi9tYXN0ZXIvc2NpcHkvc3RhdHMva2RlLnB5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBrZGVTY290dChWLCBYPXVuZGVmaW5lZCl7XG4gICAgLy8gYXNzaWduIHggaWYgdW5kZWZpbmVkXG4gICAgaWYgKFg9PT11bmRlZmluZWQpe1xuICAgICAgICBYID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgLmRvbWFpbihkMy5leHRlbnQoVikpLm5pY2UoKVxuICAgICAgICAgICAgLnRpY2tzKDEwMCk7IC8vIHVzaW5nIGQzIHNjYWxlIGxpbmVhciB0byByZXR1cm4gZXZlbmx5IHNwYWNlZCB0aWNrcywgYnV0IHRoaXMgbWF5IG5vdCBhbHdheXMgcmV0dXJuIDEwMCB2YWx1ZXNcbiAgICB9XG5cbiAgICAvLyB3aGl0ZW5pbmcgZmFjdG9yXG4gICAgY29uc3Qgc2NvdHRzRmFjdG9yID0gTWF0aC5wb3coVi5sZW5ndGgsIC0wLjIpO1xuICAgIGNvbnN0IHdGYWN0b3IgPSAxL2QzLmRldmlhdGlvbihWKS9zY290dHNGYWN0b3I7XG4gICAgY29uc3Qgbm9ybSA9IE1hdGgucG93KDIqTWF0aC5QSSwgLTAuNSkqd0ZhY3Rvci9WLmxlbmd0aDtcblxuICAgIHJldHVybiBYLm1hcCgoeCk9PnsgICAgICBcbiAgICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICAgIFYuZm9yRWFjaCgodik9PntcbiAgICAgICAgICAgIHN1bSArPSBNYXRoLmV4cCgtTWF0aC5wb3coKCh2IC0geCkqd0ZhY3RvciksIDIpIC8gMik7IC8vTWF0aC5leHA6IGVeeFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFt4LCBzdW0qbm9ybV07XG4gICAgfSk7XG59XG5cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qXG5JbnB1dCBkYXRhIHN0cnVjdHVyZTogYSBsaXN0IG9mIGRhdGEgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG5bXG4gICAge1xuICAgICAgICBncm91cDogXCJncm91cDFcIlxuICAgICAgICBsYWJlbDogXCJkYXRhc2V0IDFcIixcbiAgICAgICAgdmFsdWVzOiBbYSBsaXN0IG9mIG51bWVyaWNhbCB2YWx1ZXNdXG4gICAgIH0sXG4gICAgIHtcbiAgICAgICAgZ3JvdXA6IFwiZ3JvdXAxXCJcbiAgICAgICAgbGFiZWw6IFwiZGF0YXNldCAyXCIsXG4gICAgICAgIHZhbHVlczogW2EgbGlzdCBvZiBudW1lcmljYWwgdmFsdWVzXVxuICAgICB9LFxuICAgICB7XG4gICAgICAgIGdyb3VwOiBcImdyb3VwMlwiXG4gICAgICAgIGxhYmVsOiBcImRhdGFzZXQgM1wiLFxuICAgICAgICB2YWx1ZXM6IFthIGxpc3Qgb2YgbnVtZXJpY2FsIHZhbHVlc11cbiAgICAgfVxuXVxuKi9cbmltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjsgXG5cbmltcG9ydCB7ZXh0ZW50LCBtZWRpYW4sIGFzY2VuZGluZywgcXVhbnRpbGUsIG1heH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge25lc3R9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NjYWxlQmFuZCwgc2NhbGVMaW5lYXJ9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHthcmVhfSBmcm9tIFwiZDMtc2hhcGVcIjtcbmltcG9ydCB7YXhpc1RvcCwgYXhpc0JvdHRvbSwgYXhpc0xlZnR9IGZyb20gXCJkMy1heGlzXCI7XG5pbXBvcnQge3NlbGVjdCwgZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7YnJ1c2h9IGZyb20gXCJkMy1icnVzaFwiO1xuaW1wb3J0IHtyYW5kb21Ob3JtYWx9IGZyb20gXCJkMy1yYW5kb21cIjtcblxuaW1wb3J0IHtrZXJuZWxEZW5zaXR5RXN0aW1hdG9yLCBrZXJuZWwsIGtlcm5lbEJhbmR3aWR0aCwga2RlU2NvdHR9IGZyb20gXCIuL2tkZVwiO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSBcIi4vVG9vbHRpcFwiO1xuaW1wb3J0IFRvb2xiYXIgZnJvbSBcIi4vVG9vbGJhclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcm91cGVkVmlvbGluIHtcbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBmb3IgR3JvdXBlZFZpb2xpblxuICAgICAqIEBwYXJhbSBkYXRhIHtMaXN0fTogYSBsaXN0IG9mIG9iamVjdHMgd2l0aCBhdHRyaWJ1dGVzOiBncm91cDoge1N0cmluZ30sIGxhYmVsOiB7U3RyaW5nfSwgdmFsdWVzOiB7TGlzdH0gb2YgbnVtZXJpY2FsIHZhbHVlcywgc2l6ZTogaW50ZWdlciwgb3B0aW9uYWxcbiAgICAgKiBAcGFyYW0gZ3JvdXBJbmZvIHtEaWN0aW9uYXJ5fTogbWV0YWRhdGEgb2YgdGhlIGdyb3VwLCBpbmRleGVkIGJ5IGdyb3VwIElEXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGF0YSwgZ3JvdXBJbmZvID0ge30pe1xuICAgICAgICB0aGlzLl9zYW5pdHlDaGVjayhkYXRhKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5ncm91cEluZm8gPSBncm91cEluZm87XG4gICAgICAgIHRoaXMudG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyByZS1vcmdhbml6ZWQgdGhpcy5kYXRhIGluZGV4ZWQgYnkgZ3JvdXBzXG4gICAgICAgIHRoaXMuZ3JvdXBzID0gbmVzdCgpXG4gICAgICAgICAgICAua2V5KChkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGQuZ3JvdXAgPT09IHVuZGVmaW5lZCkgdGhyb3cgXCJyZXF1aXJlZCBhdHRyaWJ1dGUgZG9lcyBub3QgZXhpc3RcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5ncm91cDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpO1xuICAgIH1cblxuICAgIHNldFlEb21haW4oeURvbWFpbil7XG4gICAgICAgIGlmICh5RG9tYWluPT09dW5kZWZpbmVkIHx8IDAgPT0geURvbWFpbi5sZW5ndGgpe1xuICAgICAgICAgICAgbGV0IGFsbFYgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKChkKSA9PiBhbGxWID0gYWxsVi5jb25jYXQoZC52YWx1ZXMpKTtcbiAgICAgICAgICAgIHlEb21haW4gPSBleHRlbnQoYWxsVik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHlEb21haW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyaW5nIHRoZSBncm91cGVkIHZpb2xpblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkb206IGEgRDMgc2VsZWN0IG9iamVjdCBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGggXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodCBcbiAgICAqIEBwYXJhbSB7QXJyYXl9IHhEb21haW4gXG4gICAgKiBAcGFyYW0ge0FycmF5fSB5RG9tYWluIFxuICAgICogQHBhcmFtIHtPYmplY3R9IHhBeGlzQ29uZmlnIFxuICAgICogQHBhcmFtIHtPYmplY3R9IHN1YlhBeGlzQ29uZmlnIFxuICAgICogQHBhcmFtIHtPYmplY3R9IHlBeGlzQ29uZmlnIFxuICAgICogQHBhcmFtIHtPYmplY3R9IHNpemVBeGlzQ29uZmlnXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNob3dXaGlza2VyIFxuICAgICogQHBhcmFtIHtCb29sZWFufSBzaG93RGl2aWRlciBcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gc2hvd0xlZ2VuZCBcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gc2hvd091dGxpZXJzXG4gICAgKiBAcGFyYW0ge0ludGVnZXJ9IG51bVBvaW50czogbWluIGN1dG9mZiBvZiBkYXRhIHBvaW50cyB0byByZW5kZXIgZGF0YSBhcyBhIHZpb2xpbiBvciBkYXRhIHBvaW50c1xuICAgICogQHBhcmFtIHtTdHJpbmd9IHZDb2xvcjogdmlvbGluIGNvbG9yXG4gICAgKiBAcGFyYW0ge2VudW19IGtkZU9wdGlvbjogZGVmYXVsdCBvciBrZGVTY290dFxuICAgICovXG4gICAgcmVuZGVyKFxuICAgICAgICBkb20sXG4gICAgICAgIHdpZHRoPTUwMCxcbiAgICAgICAgaGVpZ2h0PTM1NyxcbiAgICAgICAgeERvbWFpbj11bmRlZmluZWQsXG4gICAgICAgIHlEb21haW49dW5kZWZpbmVkLFxuICAgICAgICB4QXhpc0NvbmZpZyA9IHtzaG93OiB0cnVlLCBhbmdsZTogMzAsIHBhZGRpbmdJbm5lcjowLjAxLCBwYWRkaW5nT3V0ZXI6IDAuMDEsIHRleHRBbmNob3I6IFwic3RhcnRcIiwgYWRqdXN0SGVpZ2h0OiAwLCBzaG93TGFiZWxzOiB0cnVlLCBzaG93VGlja3M6IHRydWV9LFxuICAgICAgICBzdWJYQXhpc0NvbmZpZyA9IHtzaG93OiB0cnVlLCBhbmdsZTogMCwgcGFkZGluZ0lubmVyOiAwLCBwYWRkaW5nT3V0ZXI6IDAsIHNvcnQ6IGZhbHNlLCBhZGp1c3RIZWlnaHQ6IDV9LFxuICAgICAgICB5QXhpc0NvbmZpZyA9IHtsYWJlbDpcIlkgbGFiZWxcIn0sXG4gICAgICAgIHNpemVBeGlzQ29uZmlnID0ge3Nob3c6IGZhbHNlLCBhbmdsZTogMCwgYWRqdXN0SGVpZ2h0OnVuZGVmaW5lZH0sXG4gICAgICAgIHNob3dXaGlza2VyPWZhbHNlLFxuICAgICAgICBzaG93RGl2aWRlcj1mYWxzZSxcbiAgICAgICAgc2hvd0xlZ2VuZD1mYWxzZSxcbiAgICAgICAgc2hvd091dGxpZXJzPWZhbHNlLFxuICAgICAgICBudW1Qb2ludHM9MCwgLy8gc2hvdWxkbid0IHRoaXMgYmUgYm9vbGVhbj9cbiAgICAgICAgdkNvbG9yPXVuZGVmaW5lZCxcbiAgICAgICAga2RlT3B0aW9uPVwia2RlU2NvdHRcIixcbiAgICApe1xuXG4gICAgICAgIHRoaXMuZG9tID0gZG9tO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICBcbiAgICAgICAgdGhpcy5jb25maWcgPSB7IC8vIGNvbmZpZ3MgZm9yIGF4ZXNcbiAgICAgICAgICAgIHg6IHhBeGlzQ29uZmlnLFxuICAgICAgICAgICAgc3VieDogc3ViWEF4aXNDb25maWcsXG4gICAgICAgICAgICB5OiB5QXhpc0NvbmZpZyxcbiAgICAgICAgICAgIHNpemU6IHNpemVBeGlzQ29uZmlnXG4gICAgICAgIH07XG4gICAgICAgIC8vIHNldCB0aGUgc2NhbGVzXG4gICAgICAgIHRoaXMuc2NhbGUgPSB7XG4gICAgICAgICAgICB4OiBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy53aWR0aF0pXG4gICAgICAgICAgICAgICAgLmRvbWFpbih4RG9tYWlufHx0aGlzLmdyb3Vwcy5tYXAoKGQpID0+IGQua2V5KSlcbiAgICAgICAgICAgICAgICAucGFkZGluZ091dGVyKHRoaXMuY29uZmlnLngucGFkZGluZ091dGVyKVxuICAgICAgICAgICAgICAgIC5wYWRkaW5nSW5uZXIodGhpcy5jb25maWcueC5wYWRkaW5nSW5uZXIpLFxuICAgICAgICAgICAgc3VieDogc2NhbGVCYW5kKCksXG4gICAgICAgICAgICB5OiBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW3RoaXMuaGVpZ2h0LCAwXSlcbiAgICAgICAgICAgICAgICAuZG9tYWluKHRoaXMuc2V0WURvbWFpbih5RG9tYWluKSksXG4gICAgICAgICAgICB6OiBzY2FsZUxpbmVhcigpIC8vIHRoaXMgaXMgdGhlIHZpb2xpbiB3aWR0aCwgdGhlIGRvbWFpbiBhbmQgcmFuZ2UgYXJlIGRldGVybWluZWQgbGF0ZXIgaW5kaXZpZHVhbGx5IGZvciBlYWNoIHZpb2xpblxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNob3cgPSB7XG4gICAgICAgICAgICB3aGlza2VyOiBzaG93V2hpc2tlcixcbiAgICAgICAgICAgIG91dGxpZXJzOiBzaG93T3V0bGllcnMsXG4gICAgICAgICAgICBkaXZpZGVyOiBzaG93RGl2aWRlcixcbiAgICAgICAgICAgIGxlZ2VuZDogc2hvd0xlZ2VuZCxcbiAgICAgICAgICAgIHBvaW50czogbnVtUG9pbnRzXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMua2RlT3B0aW9uID0ga2RlT3B0aW9uO1xuICAgICAgICB0aGlzLnZDb2xvciA9IHZDb2xvcjtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpe1xuICAgICAgICAvLyBmb3IgZWFjaCBncm91cCwgcmVuZGVyIGl0cyB2aW9saW5zXG4gICAgICAgIHRoaXMuZ3JvdXBzLmZvckVhY2goKGcpID0+IHtcbiAgICAgICAgICAgIGcuaW5kZXggPSB0aGlzLnNjYWxlLnguZG9tYWluKCkuaW5kZXhPZihnLmtleSk7XG4gICAgICAgICAgICBsZXQgaW5mbyA9IHRoaXMuZ3JvdXBJbmZvW2cua2V5XTsgLy8gb3B0aW9uYWxcblxuICAgICAgICAgICAgaWYgKGluZm8gIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgLy8gcmVuZGVycyBncm91cCBpbmZvIHN1Y2ggYXMgcC12YWx1ZSwgZ3JvdXAgbmFtZVxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlckdyb3VwSW5mb1RleHQoaW5mbywgZy5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBkZWZpbmUgdGhlIHN1YiBYIGF4aXMgZm9yIHRoZSBncm91cCdzIHZpb2xpbnNcbiAgICAgICAgICAgIGNvbnN0IGdldFN1YlhEb21haW4gPSAoKT0+e1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5zdWJ4LnNvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZy52YWx1ZXMuc29ydCgoYSxiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYS5sYWJlbCA8IGIubGFiZWwpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGEubGFiZWwgPiBiLmxhYmVsKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGcudmFsdWVzLm1hcCgoZCkgPT4gZC5sYWJlbCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zY2FsZS5zdWJ4XG4gICAgICAgICAgICAgICAgLmRvbWFpbihnZXRTdWJYRG9tYWluKCkpXG4gICAgICAgICAgICAgICAgLnJhbmdlKFt0aGlzLnNjYWxlLngoZy5rZXkpLCB0aGlzLnNjYWxlLngoZy5rZXkpICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpXSk7XG5cbiAgICAgICAgICAgIC8vIHJlbmRlciBlYWNoIGdyb3VwJ3MgdmlvbGluc1xuICAgICAgICAgICAgZy52YWx1ZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PSBlbnRyeS52YWx1ZXMubGVuZ3RoKSByZXR1cm47IC8vIG5vIGZ1cnRoZXIgcmVuZGVyaW5nIGlmIHRoaXMgZ3JvdXAgaGFzIG5vIGVudHJpZXNcbiAgICAgICAgICAgICAgICBlbnRyeS52YWx1ZXMgPSBlbnRyeS52YWx1ZXMuc29ydChhc2NlbmRpbmcpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZDb2xvciE9PXVuZGVmaW5lZCkgZW50cnkuY29sb3IgPSB0aGlzLnZDb2xvcjsgLy8gc3BlY2lmeSB0aGUgdmlvbGlucycgY29sb3JzXG4gICAgICAgICAgICAgICAgZy5kb20gPSB0aGlzLl9kcmF3VmlvbGluKGVudHJ5LCBnLmluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBpZiBpbmRpY2F0ZWQsIHNob3cgdGhlIHNpemUgb2YgZWFjaCBlbnRyeVxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLnNpemUuc2hvdykgdGhpcy5fcmVuZGVyU2l6ZUF4aXMoZyk7XG5cbiAgICAgICAgICAgIC8vIGlmIGluZGljYXRlZCwgc2hvdyB0aGUgc3ViLXggYXhpc1xuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLnN1Ynguc2hvdykgdGhpcy5fcmVuZGVyU3ViWEF4aXMoZyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3JlbmRlclhBeGlzKCk7XG4gICAgICAgIHRoaXMuX3JlbmRlcllBeGlzKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBwbG90IG1vdXNlIGV2ZW50c1xuICAgICAgICB0aGlzLmRvbS5vbihcIm1vdXNlb3V0XCIsICgpPT57XG4gICAgICAgICAgICBpZih0aGlzLnRvb2x0aXAgIT09IHVuZGVmaW5lZCkgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIGdyb3VwIGRpdmlkZXJzXG4gICAgICAgIGlmKHRoaXMuc2hvdy5kaXZpZGVyKSB0aGlzLl9hZGRHcm91cERpdmlkZXIoKTtcblxuICAgICAgICAvLyBhZGQgY29sb3IgbGVnZW5kXG4gICAgICAgIGlmICh0aGlzLnNob3cubGVnZW5kKSB0aGlzLl9hZGRMZWdlbmQoKTtcbiAgICB9XG5cbiAgICBhZGRQbG90VGl0bGUoZG9tLCB0aXRsZSl7XG4gICAgICAgIGxldCB4ID0gKHRoaXMuc2NhbGUueC5yYW5nZSgpWzFdLXRoaXMuc2NhbGUueC5yYW5nZSgpWzBdICsgMSkgLzI7XG4gICAgICAgIGxldCB5ID0gKHRoaXMuc2NhbGUueS5yYW5nZSgpWzFdIC0gMTApO1xuICAgICAgICBkb20uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi10aXRsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3h9LCAke3l9KWApXG4gICAgICAgICAgICAudGV4dCh0aXRsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSB0b29sdGlwIG9iamVjdFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgdG9vbHRpcCdzIGRvbSBJRFxuICAgICAqIEByZXR1cm5zIHtUb29sdGlwfVxuICAgICAqL1xuICAgIGNyZWF0ZVRvb2x0aXAoZG9tSWQpe1xuICAgICAgICBpZiAoJChgIyR7ZG9tSWR9YCkubGVuZ3RoID09IDApICQoXCI8ZGl2Lz5cIikuYXR0cihcImlkXCIsIGRvbUlkKS5hcHBlbmRUbygkKFwiYm9keVwiKSk7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IG5ldyBUb29sdGlwKGRvbUlkKTtcbiAgICAgICAgc2VsZWN0KGAjJHtkb21JZH1gKS5jbGFzc2VkKFwidmlvbGluLXRvb2x0aXBcIiwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSB0b29sYmFyIHBhbmVsXG4gICAgICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IHRoZSB0b29sYmFyJ3MgZG9tIElEXG4gICAgICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9XG4gICAgICogQHJldHVybnMge1Rvb2xiYXJ9XG4gICAgICovXG5cbiAgICBjcmVhdGVUb29sYmFyKGRvbUlkLCB0b29sdGlwKXtcbiAgICAgICAgaWYgKHRvb2x0aXAgPT09IHVuZGVmaW5lZCkgdG9vbHRpcCA9IHRoaXMuY3JlYXRlVG9vbHRpcChkb21JZCk7XG4gICAgICAgIHRoaXMudG9vbGJhciA9IG5ldyBUb29sYmFyKGRvbUlkLCB0b29sdGlwKTtcblxuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGJydXNoIHRvIHRoZSBwbG90XG4gICAgICogQHBhcmFtIGRvbSB7RDN9IERvbSBlbGVtZW50XG4gICAgICovXG4gICAgYWRkQnJ1c2goZG9tKXtcbiAgICAgICAgY29uc3QgdGhlQnJ1c2ggPSBicnVzaCgpO1xuICAgICAgICB0aGVCcnVzaC5vbihcImVuZFwiLCAoKT0+e3RoaXMuem9vbShkb20sIHRoZUJydXNoKTt9KTtcbiAgICAgICAgZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJicnVzaFwiKVxuICAgICAgICAgICAgLmNhbGwodGhlQnJ1c2gpO1xuICAgIH1cblxuICAgIHpvb20oZG9tLCB0aGVCcnVzaCl7XG4gICAgICAgIGxldCBzID0gZXZlbnQuc2VsZWN0aW9uLFxuICAgICAgICAgICAgaWRlbFRpbWVvdXQsXG4gICAgICAgICAgICBpZGVsRGVsYXkgPSAzNTA7XG4gICAgICAgIGlmICh0aGVCcnVzaCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghcykge1xuICAgICAgICAgICAgaWYgKCFpZGVsVGltZW91dCkgcmV0dXJuIGlkZWxUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWRlbFRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgfSwgaWRlbERlbGF5KTtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBjdXJyZW50IHNjYWxlcycgZG9tYWlucyBiYXNlZCBvbiB0aGUgYnJ1c2hlZCB3aW5kb3dcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueC5kb21haW4odGhpcy5zY2FsZS54LmRvbWFpbigpLmZpbHRlcigoZCwgaSk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBsb3dCb3VuZCA9IE1hdGguZmxvb3Ioc1swXVswXS90aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwcGVyQm91bmQgPSBNYXRoLmZsb29yKHNbMV1bMF0vdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA+PSBsb3dCb3VuZCAmJiBpIDw9dXBwZXJCb3VuZDtcbiAgICAgICAgICAgIH0pKTsgLy8gVE9ETzogYWRkIGNvbW1lbnRzXG5cbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IE1hdGguZmxvb3IodGhpcy5zY2FsZS55LmludmVydChzWzFdWzFdKSk7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLmZsb29yKHRoaXMuc2NhbGUueS5pbnZlcnQoc1swXVsxXSkpO1xuICAgICAgICAgICAgdGhpcy5zY2FsZS55LmRvbWFpbihbbWluLCBtYXhdKTsgLy8gdG9kbzogZGVidWdcblxuICAgICAgICAgICAgZG9tLnNlbGVjdChcIi5icnVzaFwiKS5jYWxsKHRoZUJydXNoLm1vdmUsIG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gem9vbVxuICAgICAgICBsZXQgdCA9IGRvbS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNzUwKTtcbiAgICAgICAgZG9tLnNlbGVjdChcIi5heGlzLS14XCIpLnRyYW5zaXRpb24odCkuY2FsbCh0aGlzLnhBeGlzKTtcbiAgICAgICAgZG9tLnNlbGVjdChcIi5heGlzLS15XCIpLnRyYW5zaXRpb24odCkuY2FsbCh0aGlzLnlBeGlzKTtcblxuICAgICAgICB0aGlzLmdyb3Vwcy5mb3JFYWNoKChnZyk9PiB7XG4gICAgICAgICAgICBsZXQgZ3JvdXAgPSBnZy5rZXk7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IGdnLnZhbHVlcztcblxuICAgICAgICAgICAgLy8gcmUtZGVmaW5lIHRoZSBzdWJ4J3MgcmFuZ2VcbiAgICAgICAgICAgIHRoaXMuc2NhbGUuc3VieFxuICAgICAgICAgICAgICAgIC5yYW5nZShbdGhpcy5zY2FsZS54KGdyb3VwKSwgdGhpcy5zY2FsZS54KGdyb3VwKSArIHRoaXMuc2NhbGUueC5iYW5kd2lkdGgoKV0pO1xuXG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZW50cnkudmFsdWVzLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBmdXJ0aGVyIHJlbmRlcmluZyBpZiB0aGlzIGdyb3VwIGhhcyBubyBlbnRyaWVzXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZS54LmRvbWFpbigpLmluZGV4T2YoZ3JvdXApO1xuXG4gICAgICAgICAgICAgICAgLy8gcmUtZGVmaW5lIHRoZSBzY2FsZS56J3MgcmFuZ2VcbiAgICAgICAgICAgICAgICB0aGlzLnNjYWxlLnpcbiAgICAgICAgICAgICAgICAgICAgLnJhbmdlKFt0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpLCB0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpICsgdGhpcy5zY2FsZS5zdWJ4LmJhbmR3aWR0aCgpXSk7XG5cbiAgICAgICAgICAgICAgICAvLyByZS1yZW5kZXIgdGhlIHZpb2xpblxuICAgICAgICAgICAgICAgIGNvbnN0IGcgPSBkb20uc2VsZWN0KGAjdmlvbGluJHtnZy5pbmRleH0tJHtlbnRyeS5sYWJlbH1gKTtcbiAgICAgICAgICAgICAgICBnLnNlbGVjdChcIi52aW9saW5cIilcbiAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24odClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGFyZWEoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLngwKChkKSA9PiB0aGlzLnNjYWxlLnooZFsxXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAueDEoKGQpID0+IHRoaXMuc2NhbGUueigtZFsxXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAueSgoZCkgPT4gdGhpcy5zY2FsZS55KGRbMF0pKVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyIHRoZSBib3ggcGxvdFxuICAgICAgICAgICAgICAgIC8vIGludGVycXVhcnRpbGUgcmFuZ2VcbiAgICAgICAgICAgICAgICBjb25zdCBxMSA9IHF1YW50aWxlKGVudHJ5LnZhbHVlcywgMC4yNSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcTMgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuNzUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHogPSAwLjE7XG4gICAgICAgICAgICAgICAgZy5zZWxlY3QoXCIudmlvbGluLWlyXCIpXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCB0aGlzLnNjYWxlLnooLXopKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgdGhpcy5zY2FsZS55KHEzKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBNYXRoLmFicyh0aGlzLnNjYWxlLnooLXopIC0gdGhpcy5zY2FsZS56KHopKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgTWF0aC5hYnModGhpcy5zY2FsZS55KHEzKSAtIHRoaXMuc2NhbGUueShxMSkpKTtcblxuICAgICAgICAgICAgICAgIC8vIHRoZSBtZWRpYW4gbGluZVxuICAgICAgICAgICAgICAgIGNvbnN0IG1lZCA9IG1lZGlhbihlbnRyeS52YWx1ZXMpO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpbi1tZWRpYW5cIilcbiAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24odClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCB0aGlzLnNjYWxlLnooLXopKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIHRoaXMuc2NhbGUueih6KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkobWVkKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5kb20uc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVEYXRhKGRhdGEsIHJlc2V0PWZhbHNlLCBzaG93T3V0bGllcnM9dHJ1ZSl7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZ3JvdXBzID0gbmVzdCgpXG4gICAgICAgICAgICAua2V5KChkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGQuZ3JvdXAgPT09IHVuZGVmaW5lZCkgdGhyb3cgXCJyZXF1aXJlZCBhdHRyaWJ1dGUgZG9lcyBub3QgZXhpc3RcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5ncm91cDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpO1xuICAgICAgICB0aGlzLnVwZGF0ZVlTY2FsZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZVhTY2FsZSgpO1xuICAgICAgICB0aGlzLnNob3cub3V0bGllcnMgPSBzaG93T3V0bGllcnM7XG4gICAgICAgIGlmIChyZXNldCkgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHVwZGF0ZVlTY2FsZSh5TGFiZWw9dW5kZWZpbmVkLCB5RG9tYWluPXVuZGVmaW5lZCwgcmVzZXQ9ZmFsc2UpIHtcbiAgICAgICAgaWYgKHlMYWJlbCAhPT0gdW5kZWZpbmVkKSB0aGlzLmNvbmZpZy55LmxhYmVsID0geUxhYmVsO1xuICAgICAgICB0aGlzLnNjYWxlLnkgPSBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAucmFuZ2VSb3VuZChbdGhpcy5oZWlnaHQsIDBdKVxuICAgICAgICAgICAgLmRvbWFpbih0aGlzLnNldFlEb21haW4oeURvbWFpbikpO1xuICAgICAgICBpZiAocmVzZXQpIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVYU2NhbGUoeERvbWFpbj11bmRlZmluZWQsIHJlc2V0PWZhbHNlKSB7XG4gICAgICAgIHRoaXMuc2NhbGUueCA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAucmFuZ2UoWzAsIHRoaXMud2lkdGhdKVxuICAgICAgICAgICAgLmRvbWFpbih4RG9tYWlufHx0aGlzLmdyb3Vwcy5tYXAoKGQpID0+IGQua2V5KSlcbiAgICAgICAgICAgIC5wYWRkaW5nT3V0ZXIodGhpcy5jb25maWcueC5wYWRkaW5nT3V0ZXIpXG4gICAgICAgICAgICAucGFkZGluZ0lubmVyKHRoaXMuY29uZmlnLngucGFkZGluZ0lubmVyKTtcbiAgICAgICAgaWYocmVzZXQpIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW5kZXIgdGhlIHZpb2xpbiBhbmQgYm94IHBsb3RzXG4gICAgICogQHBhcmFtIGRvbSB7RDMgRE9NfVxuICAgICAqIEBwYXJhbSBlbnRyeSB7T2JqZWN0fSB3aXRoIGF0dHJzOiB2YWx1ZXMsIGxhYmVsXG4gICAgICogQHBhcmFtIGdJbmRleFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2RyYXdWaW9saW4oZW50cnksIGdJbmRleCl7XG4gICAgICAgIGNvbnN0IHJlc2V0WlNjYWxlID0gKHpNYXgpPT57XG4gICAgICAgICAgICB0aGlzLnNjYWxlLnpcbiAgICAgICAgICAgICAgICAuZG9tYWluKFstek1heCwgek1heF0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFt0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpLCB0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpICsgdGhpcy5zY2FsZS5zdWJ4LmJhbmR3aWR0aCgpXSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHZlcnRpY2VzID0gdGhpcy5fZ2VuZXJhdGVWZXJ0aWNlcyhlbnRyeS52YWx1ZXMsIHRoaXMua2RlT3B0aW9uKTtcbiAgICAgICAgLy8gdmlzdWFsIHJlbmRlcmluZ1xuICAgICAgICBjb25zdCB2aW9saW5HID0gdGhpcy5kb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBgdmlvbGluJHtnSW5kZXh9LSR7ZW50cnkubGFiZWx9YClcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tZ1wiKVxuICAgICAgICAgICAgLmRhdHVtKGVudHJ5KTtcbiAgICAgICAgLy8gdmlvbGluIHBsb3QgYW5kIGJveCBjYW4gb25seSBiZSBkcmF3biB3aGVuIHZlcnRpY2VzIGV4aXN0IGFuZCB0aGVyZSBhcmUgbm8gTmFOIHBvaW50c1xuICAgICAgICBpZiAoZW50cnkudmFsdWVzLmxlbmd0aCA+IHRoaXMuc2hvdy5wb2ludHMgJiYgdmVydGljZXMubGVuZ3RoICYmIHRoaXMuX3ZhbGlkVmVydGljZXModmVydGljZXMpKSB7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgeiBzY2FsZSAtLSB0aGUgdmlvbGluIHdpZHRoXG4gICAgICAgICAgICBsZXQgek1heCA9IG1heCh2ZXJ0aWNlcywgKGQpPT5NYXRoLmFicyhkWzFdKSk7IC8vIGZpbmQgdGhlIGFicyh2YWx1ZSkgaW4gdmVydGljZXNcbiAgICAgICAgICAgIHJlc2V0WlNjYWxlKHpNYXgpO1xuXG4gICAgICAgICAgICAvLyBzdGF0aXN0aWNzIG9mIGVudHJ5LnZhbHVlc1xuICAgICAgICAgICAgY29uc3QgcTEgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuMjUpO1xuICAgICAgICAgICAgY29uc3QgcTMgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuNzUpO1xuICAgICAgICAgICAgY29uc3QgaXFyID0gTWF0aC5hYnMocTMtcTEpO1xuICAgICAgICAgICAgY29uc3QgY3V0b2ZmID0gZXh0ZW50KGVudHJ5LnZhbHVlcy5maWx0ZXIoKGQpPT5kPD1xMysoaXFyKjEuNSkpKTtcbiAgICAgICAgICAgIGNvbnN0IHVwcGVyID0gY3V0b2ZmWzFdO1xuICAgICAgICAgICAgY29uc3QgbG93ZXIgPSBjdXRvZmZbMF07XG4gICAgICAgICAgICBjb25zdCBtZWQgPSBtZWRpYW4oZW50cnkudmFsdWVzKTtcblxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyVmlvbGluU2hhcGUodmlvbGluRywgZW50cnksIHZlcnRpY2VzLCBtZWQsIGdJbmRleCUyPT0wKTtcbiAgICAgICAgICAgIGlmIChlbnRyeS5zaG93Qm94cGxvdD09PXVuZGVmaW5lZCB8fCBlbnRyeS5zaG93Qm94cGxvdCkgdGhpcy5fcmVuZGVyQm94UGxvdCh2aW9saW5HLCBlbnRyeSwgbG93ZXIsIHVwcGVyLCBxMSwgcTMsIG1lZCk7XG4gICAgICAgICAgICAvLyBvdXRsaWVyc1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdy5vdXRsaWVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG91dGxpZXJzID0gZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ8bG93ZXJ8fGQ+dXBwZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlckRhdGFEb3RzKHZpb2xpbkcsIHt2YWx1ZXM6b3V0bGllcnMsIGNvbG9yOiBlbnRyeS5jb2xvcn0sIDEpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIGlmIChlbnRyeS5zaG93UG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyRGF0YURvdHModmlvbGluRywgZW50cnksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc2hvdy5wb2ludHM+MCkge1xuICAgICAgICAgICAgLy8gZGVmaW5lIHRoZSB6IHNjYWxlIC0tIHRoZSB2aW9saW4gd2lkdGhcbiAgICAgICAgICAgIGxldCB6TWF4ID0gbWF4KGVudHJ5LnZhbHVlcywgKGQpPT5NYXRoLmFicyhkKSk7IC8vIGZpbmQgdGhlIGFicyh2YWx1ZSkgaW4gZW50cnkudmFsdWVzXG4gICAgICAgICAgICByZXNldFpTY2FsZSh6TWF4KTtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckRhdGFEb3RzKHZpb2xpbkcsIGVudHJ5LCAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmlvbGluRztcbiAgICB9XG5cbiAgICBfcmVuZGVyVmlvbGluU2hhcGUoZywgZW50cnksIHZlcnRpY2VzLCBtZWQsIGlzRXZlbk51bWJlciwgb2RkQ29sb3I9XCIjOTRhOGI4XCIsIGV2ZW5Db2xvcj1cIiM5MGMxYzFcIil7XG4gICAgICAgIGxldCB2aW9saW4gPSBhcmVhKClcbiAgICAgICAgICAgIC54MCgoZCkgPT4gdGhpcy5zY2FsZS56KGVudHJ5LnNob3dIYWxmVmlvbGluPT1cImxlZnRcIj8wOmRbMV0pKVxuICAgICAgICAgICAgLngxKChkKSA9PiB0aGlzLnNjYWxlLnooZW50cnkuc2hvd0hhbGZWaW9saW49PVwicmlnaHRcIj8wOi1kWzFdKSlcbiAgICAgICAgICAgIC55KChkKSA9PiB0aGlzLnNjYWxlLnkoZFswXSkpO1xuICAgICAgICBjb25zdCBnZXRDb2xvciA9ICgpPT57XG4gICAgICAgICAgICBpZiAoZW50cnkuY29sb3IgIT09IHVuZGVmaW5lZCkgcmV0dXJuIGVudHJ5LmNvbG9yO1xuICAgICAgICAgICAgLy8gYWx0ZXJuYXRlIHRoZSBvZGQgYW5kIGV2ZW4gY29sb3JzLCBtYXliZSB3ZSBkb24ndCB3YW50IHRoaXMgZmVhdHVyZVxuICAgICAgICAgICAgaWYoaXNFdmVuTnVtYmVyKSByZXR1cm4gZXZlbkNvbG9yO1xuICAgICAgICAgICAgcmV0dXJuIG9kZENvbG9yO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB2UGF0aCA9IGcuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgLmRhdHVtKHZlcnRpY2VzKVxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIHZpb2xpbilcbiAgICAgICAgICAgIC5jbGFzc2VkKFwidmlvbGluXCIsIHRydWUpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGVudHJ5LmZpbGw/ZW50cnkuZmlsbDpnZXRDb2xvcilcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBlbnRyeS5zdHJva2U/ZW50cnkuc3Ryb2tlOmdldENvbG9yKTtcbiAgICAgICAgLy8gbW91c2UgZXZlbnRzXG4gICAgICAgIGcub24oXCJtb3VzZW92ZXJcIiwgKCk9PntcbiAgICAgICAgICAgIHZQYXRoLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgICAgICAgICAgIGlmKHRoaXMudG9vbHRpcCA9PT0gdW5kZWZpbmVkKSBjb25zb2xlLndhcm4oXCJHcm91cFZpb2xpbiBXYXJuaW5nOiB0b29sdGlwIG5vdCBkZWZpbmVkXCIpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5Lmdyb3VwICsgXCI8YnIvPlwiICtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkubGFiZWwgKyBcIjxici8+XCIgK1xuICAgICAgICAgICAgICAgICAgICBcIk1lZGlhbjogXCIgKyBtZWQudG9QcmVjaXNpb24oNCkgKyBcIjxici8+XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZy5vbihcIm1vdXNlb3V0XCIsICgpPT57XG4gICAgICAgICAgICB2UGF0aC5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfcmVuZGVyQm94UGxvdChnLCBlbnRyeSwgbG93ZXIsIHVwcGVyLCBxMSwgcTMsIG1lZCl7XG4gICAgICAgIC8vIGJveHBsb3RcbiAgICAgICBcbiAgICAgICAgY29uc3QgeiA9IHRoaXMuc2NhbGUuei5kb21haW4oKVsxXS8zO1xuXG4gICAgICAgIGlmKHRoaXMuc2hvdy53aGlza2VyKXtcbiAgICAgICAgICAgIC8vIHRoZSB1cHBlciBhbmQgbG93ZXIgbGltaXRzIG9mIGVudHJ5LnZhbHVlc1xuICAgXG4gICAgICAgICAgICBnLmFwcGVuZChcImxpbmVcIikgLy8gb3IgZG9tP1xuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwid2hpc2tlclwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgdGhpcy5zY2FsZS56KDApKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgdGhpcy5zY2FsZS56KDApKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55KHVwcGVyKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIHRoaXMuc2NhbGUueShsb3dlcikpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGludGVycXVhcnRpbGUgcmFuZ2VcbiAgICAgICAgZy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZW50cnkuc2hvd0hhbGZWaW9saW49PVwicmlnaHRcIj90aGlzLnNjYWxlLnooMCk6dGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCB0aGlzLnNjYWxlLnkocTMpKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBlbnRyeS5zaG93SGFsZlZpb2xpbj09PXVuZGVmaW5lZD9NYXRoLmFicyh0aGlzLnNjYWxlLnooLXopLXRoaXMuc2NhbGUueih6KSk6TWF0aC5hYnModGhpcy5zY2FsZS56KDApLXRoaXMuc2NhbGUueih6KSkpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBNYXRoLmFicyh0aGlzLnNjYWxlLnkocTMpIC0gdGhpcy5zY2FsZS55KHExKSkpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGVudHJ5LmFsdENvbG9yfHxcIiM1NTVmNjZcIilcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAwLjIpO1xuXG4gICAgICAgIC8vIG1lZGlhblxuICAgICAgICBnLmFwcGVuZChcImxpbmVcIikgLy8gdGhlIG1lZGlhbiBsaW5lXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIGVudHJ5LnNob3dIYWxmVmlvbGluPT1cInJpZ2h0XCI/dGhpcy5zY2FsZS56KDApOnRoaXMuc2NhbGUueigteikpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIGVudHJ5LnNob3dIYWxmVmlvbGluPT1cImxlZnRcIj90aGlzLnNjYWxlLnooMCk6dGhpcy5zY2FsZS56KHopKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLW1lZGlhblwiKTtcbiAgICB9XG5cbiAgICBfcmVuZGVyRGF0YURvdHMoZywgZW50cnksIHI9Mil7XG4gICAgICAgIGNvbnN0IHogPSB0aGlzLnNjYWxlLnouZG9tYWluKClbMV07XG4gICAgICAgIGNvbnN0IGppdHRlciA9IHJhbmRvbU5vcm1hbCgwLCB6LzQpO1xuXG4gICAgICAgIGcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1wb2ludHNcIilcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAgICAgICAgIC5kYXRhKGVudHJ5LnZhbHVlcylcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsICgpPT57XG4gICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnNjYWxlLnooZW50cnkuc2hvd0hhbGZWaW9saW49PVwibGVmdFwiPy1NYXRoLmFicyhqaXR0ZXIoKSk6TWF0aC5hYnMoaml0dGVyKCkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKT0+dGhpcy5zY2FsZS55KGQpKVxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIGVudHJ5LmNvbG9yKVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIHIpO1xuICAgIH1cblxuICAgIF9zYW5pdHlDaGVjayhkYXRhKXtcbiAgICAgICAgY29uc3QgYXR0ciA9IFtcImdyb3VwXCIsIFwibGFiZWxcIiwgXCJ2YWx1ZXNcIl07XG5cbiAgICAgICAgZGF0YS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgICAgICBhdHRyLmZvckVhY2goKGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZFthXSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBcIkdyb3VwZWRWaW9saW46IGlucHV0IGRhdGEgZXJyb3IuXCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGlmICgwID09IGQudmFsdWVzLmxlbmd0aCkgdGhyb3cgXCJWaW9saW46IElucHV0IGRhdGEgZXJyb3JcIjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2FkZEdyb3VwRGl2aWRlcigpe1xuICAgICAgICBjb25zdCBncm91cHMgPSB0aGlzLnNjYWxlLnguZG9tYWluKCk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBNYXRoLmFicyh0aGlzLnNjYWxlLngodGhpcy5zY2FsZS54LmRvbWFpbigpWzFdKSAtIHRoaXMuc2NhbGUueCh0aGlzLnNjYWxlLnguZG9tYWluKClbMF0pIC0gdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpKTtcblxuICAgICAgICBjb25zdCBnZXRYID0gKGcsIGkpPT4ge1xuICAgICAgICAgICAgaWYgKGkgIT09IGdyb3Vwcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGUueChnKSArICt0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkgKyAocGFkZGluZy8yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZG9tLnNlbGVjdEFsbChcIi52bGluZVwiKS5kYXRhKGdyb3VwcylcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJ2bGluZVwiLCB0cnVlKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCBnZXRYKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCBnZXRYKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkucmFuZ2UoKVswXSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55LnJhbmdlKClbMV0pXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgKGcsIGkpPT5pIT1ncm91cHMubGVuZ3RoLTE/MTowKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwicmdiKDg2LDk4LDEwNylcIilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMC41KTtcblxuICAgIH1cblxuICAgIF9hZGRMZWdlbmQoKXtcbiAgICAgICAgY29uc3QgbGVnZW5kRyA9IHRoaXMuZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJ2aW9saW5MZWdlbmRcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsIDApXCIpO1xuXG4gICAgICAgIGxlZ2VuZEcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMuc2NhbGUueC5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIC0zNSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgNjAqKHRoaXMuZ3JvdXBzWzBdLnZhbHVlcy5sZW5ndGgpICsgMTApXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAyNClcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCJzaWx2ZXJcIik7XG5cbiAgICAgICAgY29uc3QgbGVnZW5kcyA9IGxlZ2VuZEcuc2VsZWN0QWxsKFwiLnZpb2xpbi1sZWdlbmRcIikuZGF0YSh0aGlzLmdyb3Vwc1swXS52YWx1ZXMpO1xuXG4gICAgICAgIGNvbnN0IGcgPSBsZWdlbmRzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5jbGFzc2VkKFwidmlvbGluLWxlZ2VuZFwiLCB0cnVlKTtcbiAgICAgICAgY29uc3QgdyA9IDEwO1xuICAgICAgICBnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gNSArIDYwKihpKSAgKyB0aGlzLnNjYWxlLngucmFuZ2UoKVswXSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMjgpXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHcpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB3KVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCkgPT4gZC5jb2xvcik7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLWxlZ2VuZC10ZXh0XCIpXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gZC5sYWJlbClcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gMTcgKyA2MCooaSkgKyB0aGlzLnNjYWxlLngucmFuZ2UoKVswXSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMjApO1xuICAgIH1cblxuICAgIF9yZW5kZXJHcm91cEluZm9UZXh0KGluZm8sIGdyb3VwKXtcbiAgICAgICAgY29uc3QgZ3JvdXBJbmZvRG9tID0gdGhpcy5kb20uYXBwZW5kKFwiZ1wiKTtcbiAgICAgICAgY29uc3QgZ3JvdXBMYWJlbHMgPSBncm91cEluZm9Eb20uc2VsZWN0QWxsKFwiLnZpb2xpbi1ncm91cC1sYWJlbFwiKVxuICAgICAgICAgICAgLmRhdGEoW1wicHZhbHVlXCJdKTtcbiAgICAgICAgZ3JvdXBMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJ0ZXh0XCIpIC8vIENvZGUgcmV2aWV3OiBjb25zaWRlciBtb3ZpbmcgdGhpcyBwYXJ0IHRvIHRoZSBlUVRMIGRhc2hib2FyZFxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBkPT1cInB2YWx1ZVwiJiZwYXJzZUZsb2F0KGluZm9bZF0pPD1wYXJzZUZsb2F0KGluZm9bXCJwdmFsdWVUaHJlc2hvbGRcIl0pP1wib3JhbmdlcmVkXCI6XCJTbGF0ZUdyYXlcIjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpLzI7XG4gICAgICAgICAgICAgICAgbGV0IHkgPSB0aGlzLnNjYWxlLnkodGhpcy5zY2FsZS55LmRvbWFpbigpWzBdKSArIDUwOyAvLyB0b2RvOiBhdm9pZCBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7eH0sICR7eX0pYDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gYCR7ZH06ICR7cGFyc2VGbG9hdChwYXJzZUZsb2F0KGluZm9bZF0pLnRvUHJlY2lzaW9uKDMpKS50b0V4cG9uZW50aWFsKCl9YCk7XG4gICAgfVxuXG4gICAgX3JlbmRlclhBeGlzKCl7XG4gICAgICAgIGxldCBidWZmZXIgPSB0aGlzLmNvbmZpZy5zdWJ4LnNob3c/NTU6MDsgLy8gQ29kZSByZXZpZXc6IGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnLng7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5zaG93KXtcbiAgICAgICAgICAgIHRoaXMueEF4aXMgPSBjb25maWcuZGlyZWN0aW9uPT1cInRvcFwiP2F4aXNUb3AodGhpcy5zY2FsZS54KTpheGlzQm90dG9tKHRoaXMuc2NhbGUueCk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLmhpZGVMYWJlbHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLkF4aXMgPSB0aGlzLnhBeGlzLnRpY2tGb3JtYXQoXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnLmhpZGVUaWNrcyl7XG4gICAgICAgICAgICAgICAgdGhpcy5BeGlzID0gdGhpcy54QXhpcy50aWNrU2l6ZSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLXgtYXhpcyBheGlzLS14XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2NvbmZpZy5hZGp1c3RIZWlnaHQhPT11bmRlZmluZWQ/Y29uZmlnLmFkanVzdEhlaWdodDoodGhpcy5oZWlnaHQgKyBidWZmZXIpfSlgKVxuICAgICAgICAgICAgICAgIC5jYWxsKHRoaXMueEF4aXMpIC8vIHNldCB0aWNrRm9ybWF0KFwiXCIpIHRvIHNob3cgdGljayBtYXJrcyB3aXRob3V0IHRleHQgbGFiZWxzXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIGNvbmZpZy50ZXh0QW5jaG9yP2NvbmZpZy50ZXh0QW5jaG9yOlwic3RhcnRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgcm90YXRlKCR7Y29uZmlnLmFuZ2xlfSwgMCwgMTApYCk7XG4gICAgICAgIH0gXG4gICAgfVxuXG4gICAgX3JlbmRlcllBeGlzKHJlc2V0PWZhbHNlKXtcbiAgICAgICAgLy8gYWRkcyB0aGUgeSBBeGlzXG4gICAgICAgIGxldCBidWZmZXIgPSA1O1xuICAgICAgICB0aGlzLnlBeGlzID0gYXhpc0xlZnQodGhpcy5zY2FsZS55KVxuICAgICAgICAgICAgLnRpY2tWYWx1ZXModGhpcy5zY2FsZS55LnRpY2tzKDUpKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChyZXNldCkgdGhpcy5kb20uc2VsZWN0KFwiLnZpb2xpbi15LWF4aXNcIikuZW1wdHkoKS5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5kb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi15LWF4aXMgYXhpcy0teVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgtJHtidWZmZXJ9LCAwKWApXG4gICAgICAgICAgICAuY2FsbCh0aGlzLnlBeGlzKTtcblxuICAgICAgICAvLyBhZGRzIHRoZSB0ZXh0IGxhYmVsIGZvciB0aGUgeSBheGlzXG4gICAgICAgIHRoaXMuZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tYXhpcy1sYWJlbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgtJHtidWZmZXIgKiAyICsgc2VsZWN0KFwiLnZpb2xpbi15LWF4aXNcIikubm9kZSgpLmdldEJCb3goKS53aWR0aH0sICR7dGhpcy5zY2FsZS55LnJhbmdlKClbMF0gKyAodGhpcy5zY2FsZS55LnJhbmdlKClbMV0gLSB0aGlzLnNjYWxlLnkucmFuZ2UoKVswXSkvMn0pIHJvdGF0ZSgtOTApYClcbiAgICAgICAgICAgIC50ZXh0KHRoaXMuY29uZmlnLnkubGFiZWwpO1xuICAgIH1cblxuICAgIF9yZW5kZXJTaXplQXhpcyhnKXtcbiAgICAgICAgbGV0IHNpemVNYXBwZXIgPSB7fTtcbiAgICAgICAgZy52YWx1ZXMuZm9yRWFjaCgoZCkgPT4gc2l6ZU1hcHBlcltkLmxhYmVsXSA9IGAoJHtkLnNpemV8fGQudmFsdWVzLmxlbmd0aH0pYCk7XG4gICAgICAgIGNvbnN0IHNpemVTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAuZG9tYWluKGcudmFsdWVzLm1hcCgoZCkgPT4ge3JldHVybiBkLmxhYmVsO30pKVxuICAgICAgICAgICAgLnJhbmdlUm91bmQoW3RoaXMuc2NhbGUueChnLmtleSksIHRoaXMuc2NhbGUueChnLmtleSkgKyB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCldKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBzaXplQXhpcyA9IGF4aXNCb3R0b20oc2l6ZVNjYWxlKS50aWNrRm9ybWF0KChkKSA9PiB7cmV0dXJuIHNpemVNYXBwZXJbZF07fSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuaGVpZ2h0ICsgMTg7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnLnNpemU7XG4gICAgICAgIGNvbnN0IHNpemVHID0gZy5kb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1zaXplLWF4aXNcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgJHtjb25maWcuYWRqdXN0SGVpZ2h0fHxidWZmZXJ9KWApXG4gICAgICAgICAgICAuY2FsbChzaXplQXhpcyk7XG4gICAgICAgIGlmIChjb25maWcuYW5nbGUgPiAwKSB7XG4gICAgICAgICAgICBzaXplRy5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHJvdGF0ZSgke2NvbmZpZy5hbmdsZX0sIDIsIDEwKWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3JlbmRlclN1YlhBeGlzKGcpe1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZy5zdWJ4O1xuICAgICAgICBjb25zdCBidWZmZXIgPSBjb25maWcuYWRqdXN0SGVpZ2h0P2NvbmZpZy5hZGp1c3RIZWlnaHQ6NTtcbiAgICAgICAgbGV0IHN1YlhBeGlzID0gYXhpc0JvdHRvbSh0aGlzLnNjYWxlLnN1YngpO1xuICAgICAgICBpZiAoY29uZmlnLmhpZGVUaWNrcyl7XG4gICAgICAgICAgICBzdWJYQXhpcyA9IHN1YlhBeGlzLnRpY2tTaXplKDApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN1YnhHID0gZy5kb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1zdWItYXhpc1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke3RoaXMuaGVpZ2h0ICsgYnVmZmVyfSlgKVxuICAgICAgICAgICAgLmNhbGwoc3ViWEF4aXMpO1xuXG4gICAgICAgIGlmIChjb25maWcuYW5nbGUgPiAwKSB7XG4gICAgICAgICAgICBzdWJ4Ry5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHJvdGF0ZSgke2NvbmZpZy5hbmdsZX0sIDIsIDEwKWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2VuZXJhdGUgdmVydGljZXMgZm9yIHRoZSB2aW9saW5cbiAgICAgKiBAcGFyYW0ge0xpc3R9IHZhbHVlczogb2JqZWN0IHdpdGggYXR0cmlidXRlOiB2YWx1ZXMtLSBhIGxpc3Qgb2YgbnVtYmVyc1xuICAgICAqIEBwYXJhbSB7ZW51bX0ga2RlT3B0aW9uOiBkZWZhdWx0IG9yIGtkZVNjb3R0XG4gICAgICogQHJldHVybnMgXG4gICAgICovXG4gICAgX2dlbmVyYXRlVmVydGljZXModmFsdWVzLCBrZGVPcHRpb24pe1xuICAgICAgICBsZXQga2RlID0ga2VybmVsRGVuc2l0eUVzdGltYXRvcihcbiAgICAgICAgICAgIGtlcm5lbC5nYXVzc2lhbixcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueS50aWNrcygxMDApLCAvLyB1c2UgdXAgdG8gMTAwIHZlcnRpY2VzIGFsb25nIHRoZSBZIGF4aXMgKHRvIGNyZWF0ZSB0aGUgdmlvbGluIHBhdGgpXG4gICAgICAgICAgICBrZXJuZWxCYW5kd2lkdGgubnJkKHZhbHVlcykgLy8gZXN0aW1hdGUgdGhlIGJhbmR3aWR0aCBiYXNlZCBvbiB0aGUgZGF0YVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBlRG9tYWluID0gZXh0ZW50KHZhbHVlcyk7IC8vIGdldCB0aGUgbWF4IGFuZCBtaW4gaW4gdmFsdWVzXG4gICAgICAgIGxldCB2ZXJ0aWNlcyA9IGtkZU9wdGlvbj09XCJkZWZhdWx0XCI/a2RlKHZhbHVlcyk6IGtkZVNjb3R0KHZhbHVlcyk7XG4gICAgICAgIHZlcnRpY2VzID0gdmVydGljZXMuZmlsdGVyKChkKT0+e1xuICAgICAgICAgICAgcmV0dXJuIGRbMF0+PWVEb21haW5bMF0mJmRbMF08PWVEb21haW5bMV07XG4gICAgICAgIH0pOyAvLyBmaWx0ZXIgdGhlIHZlcnRpY2VzIHRoYXQgYXJlbid0IGluIHRoZSB2YWx1ZXM7XG4gICAgICAgIHJldHVybiB2ZXJ0aWNlcztcbiAgICB9XG5cbiAgICBfdmFsaWRWZXJ0aWNlcyh2ZXJ0aWNlcykge1xuICAgICAgICBsZXQgdmFscyA9IHZlcnRpY2VzLnJlZHVjZSgoYSwgYik9PmEuY29uY2F0KGIpLCBbXSk7XG4gICAgICAgIGxldCBpbnZhbGlkVmVydGljZXMgPSB2YWxzLmZpbHRlcihkPT5pc05hTihkKSk7XG5cbiAgICAgICAgcmV0dXJuICEoaW52YWxpZFZlcnRpY2VzLmxlbmd0aCk7XG4gICAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zICovXG4vKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5cInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7c2VsZWN0LCBzZWxlY3RBbGx9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7a2V5c30gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7bWVkaWFufSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjtcblxuaW1wb3J0IHtcbiAgICBnZXRHdGV4VXJscyxcbiAgICBwYXJzZU1lZGlhbkV4cHJlc3Npb24sXG4gICAgcGFyc2VHZW5lRXhwcmVzc2lvbkZvclZpb2xpbiwgcGFyc2VUaXNzdWVzLCBwYXJzZUdlbmVzLCBwYXJzZVRpc3N1ZVNpdGVzLFxufSBmcm9tIFwiLi9tb2R1bGVzL2d0ZXhEYXRhUGFyc2VyXCI7XG5cbmltcG9ydCB7XG4gICAgY3JlYXRlVGlzc3VlR3JvdXBNZW51LFxuICAgIHBhcnNlVGlzc3VlR3JvdXBNZW51XG59IGZyb20gXCIuL21vZHVsZXMvZ3RleE1lbnVCdWlsZGVyXCI7XG5cbmltcG9ydCB7Y3JlYXRlVGlzc3VlTWVudX0gZnJvbSBcIi4vbW9kdWxlcy9ndGV4TWVudUJ1aWxkZXJcIjtcbmltcG9ydCB7Y29sb3JDaGFydH0gZnJvbSBcIi4vdXRpbHMvY29sb3ItdXRpbHNcIjtcbmltcG9ydCBEZW5kcm9IZWF0bWFwQ29uZmlnIGZyb20gXCIuL21vZHVsZXMvRGVuZHJvSGVhdG1hcENvbmZpZ1wiO1xuaW1wb3J0IERlbmRyb0hlYXRtYXAgZnJvbSBcIi4vbW9kdWxlcy9EZW5kcm9IZWF0bWFwXCI7XG5pbXBvcnQgR3JvdXBlZFZpb2xpbiBmcm9tIFwiLi9tb2R1bGVzL0dyb3VwZWRWaW9saW5cIjtcbmltcG9ydCB7UmV0cmlldmVBbGxQYWdpbmF0ZWREYXRhLCBSZXRyaWV2ZU5vblBhZ2luYXRlZERhdGEsIFJldHJpZXZlT25lUGFnZX0gZnJvbSBcIi4vdXRpbHMvcGFnaW5hdGlvblwiO1xuXG4vKipcbiAqIENyZWF0ZSB0aGUgdGlzc3VlIChkYXRhc2V0KSBkcm9wZG93biBtZW51IHVzaW5nIHNlbGVjdDJcbiAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgZG9tIElEIG9mIHRoZSBtZW51XG4gKiBAcGFyYW0gdXJsIHtTdHJpbmd9IHRoZSB0aXNzdWUgd2ViIHNlcnZpY2UgdXJsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEYXRhc2V0TWVudShkb21JZCwgdXJsPWdldEd0ZXhVcmxzKCkudGlzc3VlKXtcbiAgICBjcmVhdGVUaXNzdWVNZW51KGRvbUlkLCB1cmwpOyAvLyBjdXJyZW50bHkgZGF0YXNldHMgb25seSBpbmNsdWRlIEdURXggdGlzc3Vlc1xufVxuXG4vKipcbiAqIFJlbmRlciB0b3AgZXhwcmVzc2VkIGdlbmVzIGluIGEgZ2l2ZW4gdGlzc3VlXG4gKiBAcGFyYW0gdGlzc3VlSWRcbiAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgZGVuZHJvaGVhdG1hcCdzIERJViBJRFxuICogQHBhcmFtIHRvb2xiYXJJZCB7U3RyaW5nfSB0aGUgdG9vbCBiYXIgRE9NIElEXG4gKiBAcGFyYW0gaW5mb0lkIHtTdHJpbmd9IHRoZSBtZXNzYWdlIGJveCBET00gSURcbiAqIEBwYXJhbSB1cmxzIHtEaWN0aW9uYXJ5fSBvZiBHVEV4IHdlYiBzZXJ2aWNlcyB1cmxzXG4gKiBAcGFyYW0gZmlsdGVyR2VuZXMge0Jvb2xlYW59IHR1cm4gb24gdGhlIGZpbHRlciBvZiBzcGVjaWFsIGNhdGVnb3JpZXMgb2YgZ2VuZXMgKGUuZy4gbWl0b2Nob25kcmlhbCBnZW5lcylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxhdW5jaFRvcEV4cHJlc3NlZCh0aXNzdWVJZCwgaGVhdG1hcFJvb3RJZCwgdmlvbGluUm9vdElkLCB1cmxzPWdldEd0ZXhVcmxzKCksIGZpbHRlckdlbmVzPXRydWUpe1xuICAgIC8vIGdldHRpbmcgdGhlIHRvcCBleHByZXNzZWQgZ2VuZXMgaW4gdGlzc3VlSWRcbiAgICBjb25zdCB1cmwgPSBmaWx0ZXJHZW5lcz91cmxzLnRvcEluVGlzc3VlRmlsdGVyZWQ6dXJscy50b3BJblRpc3N1ZTtcbiAgICBjb25zdCAkZmlsdGVySW5mb0RpdiA9ICQoXCIjZmlsdGVySW5mb1wiKS5sZW5ndGg9PTA/JChcIjxkaXYvPlwiKS5hdHRyKFwiaWRcIiwgXCJmaWx0ZXJJbmZvXCIpLmFwcGVuZFRvKFwiI21lc3NhZ2VCb3hcIik6JChcIiNmaWx0ZXJJbmZvXCIpO1xuICAgIGlmKGZpbHRlckdlbmVzKSAkZmlsdGVySW5mb0Rpdi5odG1sKFwiTWl0b2Nob25kcmlhbCBnZW5lcyBhcmUgZXhjbHVkZWQuPGJyLz5cIik7XG4gICAgZWxzZSAkZmlsdGVySW5mb0Rpdi5odG1sKFwiTWl0b2Nob25kcmlhbCBnZW5lcyBhcmUgaW5jbHVkZWQuPGJyLz5cIik7XG5cbiAgICBSZXRyaWV2ZU9uZVBhZ2UodXJsKyB0aXNzdWVJZCwgNTAsIDApXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpeyAvLyB0b3AgNTAgZXhwcmVzc2VkIGdlbmVzIGluIHRpc3N1ZUlkXG4gICAgICAgICAgICBjb25zdCB0b3BHZW5lTGlzdCA9IHJlc3VsdHMubWFwKChkKT0+e1xuICAgICAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KFwiZ2VuY29kZUlkXCIpKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJQYXJzZSBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogZ2VuY29kZUlkXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkLmdlbmNvZGVJZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF9zdHlsZVNlbGVjdGVkVGlzc3VlKHRpc3N1ZUlkKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzZWFyY2hCeUlkKGhlYXRtYXBSb290SWQsIHZpb2xpblJvb3RJZCwgdG9wR2VuZUxpc3QsIHVuZGVmaW5lZCwgdXJscywgZmlsdGVyR2VuZXMsIGNhbGxiYWNrLCB0aXNzdWVJZCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9KTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gbGF1bmNoKGZvcm1JZCwgbWVudUlkLCBzdWJtaXRJZCwgaGVhdG1hcFJvb3RJZCwgdmlvbGluUm9vdElkLCB1cmxzPWdldEd0ZXhVcmxzKCksIGNhbGxiYWNrPXVuZGVmaW5lZCl7XG5cbiAgICBSZXRyaWV2ZUFsbFBhZ2luYXRlZERhdGEodXJscy50aXNzdWUpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpeyAvLyByZXRyaWV2ZSBhbGwgdGlzc3VlIChzdWIpc2l0ZXNcbiAgICAgICAgICAgIGNvbnN0IGZvckVxdGwgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCB0aXNzdWVHcm91cHMgPSBwYXJzZVRpc3N1ZVNpdGVzKGRhdGEsIGZvckVxdGwpO1xuICAgICAgICAgICAgY3JlYXRlVGlzc3VlR3JvdXBNZW51KHRpc3N1ZUdyb3VwcywgbWVudUlkKTtcbiAgICAgICAgICAgICQoYCMke3N1Ym1pdElkfWApLmNsaWNrKGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBjYWxsYmFjayBpcyBwcm92aWRlZFxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSBjYWxsYmFjaygpO1xuXG4gICAgICAgICAgICAgICAgLy8gaGlkZSB0aGUgc2VhcmNoIGZvcm0gYWZ0ZXIgdGhlIGVRVEwgdmlvbGluIHBsb3RzIGFyZSByZXBvcnRlZFxuICAgICAgICAgICAgICAgICQoYCMke2Zvcm1JZH1gKS5yZW1vdmVDbGFzcyhcInNob3dcIik7IC8vIGZvciBib290c3RyYXAgNFxuICAgICAgICAgICAgICAgICQoYCMke2Zvcm1JZH1gKS5yZW1vdmVDbGFzcyhcImluXCIpOyAvLyBmb3IgYm9vc3RyYXAgM1xuXG4gICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBpbnB1dCBsaXN0IG9mIGdlbmVzXG4gICAgICAgICAgICAgICAgbGV0IGdsaXN0ID0gJChcIiNnZW5lc1wiKS52YWwoKS5yZXBsYWNlKC8gL2csIFwiXCIpLnJlcGxhY2UoL1xcbi9nLFwiXCIpLnRvVXBwZXJDYXNlKCkuc3BsaXQoXCIsXCIpLmZpbHRlcigoZCk9PmQhPVwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChnbGlzdC5sZW5ndGggPT0gMCl7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiSW5wdXQgRXJyb3I6IEF0IGxlYXN0IG9uZSBnZW5lIG11c3QgYmUgcHJvdmlkZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyhcIkdlbmUgaW5wdXQgZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgaW5wdXQgdGlzc3VlIGxpc3RcbiAgICAgICAgICAgICAgICBsZXQgcXVlcnlUaXNzdWVJZHMgPSBwYXJzZVRpc3N1ZUdyb3VwTWVudSh0aXNzdWVHcm91cHMsIG1lbnVJZCk7XG4gICAgICAgICAgICAgICAgLy8gdGlzc3VlIGlucHV0IGVycm9yLWNoZWNraW5nXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXJ5VGlzc3VlSWRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiSW5wdXQgRXJyb3I6IEF0IGxlYXN0IG9uZSB0aXNzdWUgbXVzdCBiZSBzZWxlY3RlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IFwiVGlzc3VlIGlucHV0IGVycm9yXCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gc2VhcmNoXG4gICAgICAgICAgICAgICAgLy8vLy8vLy8vLyBORVhUIC8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICBzZWFyY2hCeUlkKGhlYXRtYXBSb290SWQsIHZpb2xpblJvb3RJZCwgZ2xpc3QsIHF1ZXJ5VGlzc3VlSWRzLCB1cmxzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9KTtcbn1cbi8qKlxuICogU2VhcmNoIEdlbmUgRXhwcmVzc2lvbiBieSBJRFxuICogQHBhcmFtIGhlYXRtYXBSb290SWQge1N0cmluZ31cbiAqIEBwYXJhbSB2aW9saW5Sb290SWQge1N0cmluZ31cbiAqIEBwYXJhbSBnbGlzdCB7TGlzdH0gb2YgZ2VuZXNcbiAqIEBwYXJhbSB0bGlzdCB7TGlzdH0gb2YgdGlzc3Vlc1xuICogQHBhcmFtIHVybHNcbiAqIEBwYXJhbSBmaWx0ZXJHZW5lcyB7Qm9vbGVhbn0gb3IgdW5kZWZpbmVkIHdoZW4gaXQgaXNuJ3QgYXBwbGljYWJsZVxuICogQHBhcmFtIGNhbGxiYWNrXG4gKiBAcGFyYW0gcVRpc3N1ZSB7U3RyaW5nfTogb25seSBhcHBsaWNhYmxlIGZvciB0aGUgc2VhcmNoIG9mIHRvcCBleHByZXNzZWQgZ2VuZXMgaW4gdGhlIHFUaXNzdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlYXJjaEJ5SWQoaGVhdG1hcFJvb3RJZCwgdmlvbGluUm9vdElkLCBnbGlzdCwgdGxpc3Q9dW5kZWZpbmVkLCB1cmxzPWdldEd0ZXhVcmxzKCksIGZpbHRlckdlbmVzPXVuZGVmaW5lZCwgY2FsbGJhY2s9dW5kZWZpbmVkLCBxVGlzc3VlPXVuZGVmaW5lZCl7XG4gICAgJChcIiNzcGlubmVyXCIpLnNob3coKTtcbiAgICAkKGAjJHtoZWF0bWFwUm9vdElkfWApLmVtcHR5KCk7IC8vIGNsZWFyIHRoZSByb290IERPTSBjb250ZW50XG4gICAgJChgIyR7dmlvbGluUm9vdElkfWApLmVtcHR5KCk7IC8vIGNsZWFyIHRoZSByb290IERPTSBjb250ZW50XG5cbiAgICBjb25zdCBNQVggPSAxMDA7XG4gICAgY29uc3QgJG1lc3NhZ2UgPSAkKFwiPGRpdi8+PGJyLz5cIikuYXR0cihcImNsYXNzXCIsIFwiY29sLXhzLTEyIGNvbC1tZC0xMlwiKS5jc3MoXCJjb2xvclwiLCBcImZpcmVicmlja1wiKS5hcHBlbmRUbyhgIyR7aGVhdG1hcFJvb3RJZH1gKTtcbiAgICBsZXQgbWVzc2FnZSA9IFwiXCI7XG4gICAgaWYgKGdsaXN0Lmxlbmd0aCA+IE1BWCkge1xuICAgICAgICBtZXNzYWdlID0gYFdhcm5pbmc6IFRvbyBtYW55IGdlbmVzLiBJbnB1dCBsaXN0IHRydW5jYXRlZCB0byB0aGUgZmlyc3QgJHtNQVh9LiA8YnIvPmA7XG4gICAgICAgIGdsaXN0ID0gZ2xpc3Quc2xpY2UoMCwgTUFYKTtcbiAgICB9XG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXG4gICAgICAgIFJldHJpZXZlQWxsUGFnaW5hdGVkRGF0YSh1cmxzLnRpc3N1ZSApLCBcbiAgICAgICAgUmV0cmlldmVBbGxQYWdpbmF0ZWREYXRhKHVybHMuZ2VuZUlkK2dsaXN0LmpvaW4oXCImZ2VuZUlkPVwiKSlcbiAgICBdO1xuICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAudGhlbihmdW5jdGlvbihhcmdzKXtcbiAgICAgICAgICAgIGNvbnN0IHRpc3N1ZXMgPSBwYXJzZVRpc3N1ZXMoYXJnc1swXSk7XG4gICAgICAgICAgICAvLyBnZW5lc1xuICAgICAgICAgICAgY29uc3QgZ2VuZXMgPSBwYXJzZUdlbmVzKGFyZ3NbMV0pO1xuICAgICAgICAgICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gX3ZhbGlkYXRlR2VuZXMoaGVhdG1hcFJvb3RJZCwgZ2VuZXMsIGdsaXN0KTtcblxuXG4gICAgICAgICAgICAvLyBnZXQgbWVkaWFuIGV4cHJlc3Npb24gZGF0YSBhbmQgY2x1c3RlcnMgb2YgdGhlIGlucHV0IGdlbmVzIGluIGFsbCB0aXNzdWVzXG4gICAgICAgICAgICBjb25zdCBnUXVlcnkgPSBnZW5lcy5tYXAoKGcpPT5nLmdlbmNvZGVJZCkuam9pbihcIiZnZW5jb2RlSWQ9XCIpO1xuICAgICAgICAgICAgY29uc3QgdFF1ZXJ5ID0gdGxpc3Q9PT11bmRlZmluZWQ/dW5kZWZpbmVkOnRsaXN0LmpvaW4oXCImdGlzc3VlU2l0ZURldGFpbElkPVwiKTtcbiAgICAgICAgICAgIGNvbnN0IGZldGNoVXJsID0gdFF1ZXJ5ID09PSB1bmRlZmluZWQ/IHVybHMubWVkR2VuZUV4cCArIFwiP2dlbmNvZGVJZD1cIiArIGdRdWVyeTogdXJscy5tZWRHZW5lRXhwICsgXCI/Z2VuY29kZUlkPVwiICsgZ1F1ZXJ5ICsgXCImdGlzc3VlU2l0ZURldGFpbElkPVwiICsgdFF1ZXJ5O1xuICAgICAgICAgICAgUmV0cmlldmVOb25QYWdpbmF0ZWREYXRhKGZldGNoVXJsKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGVEYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNzcGlubmVyXCIpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YU1lc3NhZ2UgPSBfdmFsaWRhdGVFeHByZXNzaW9uRGF0YShlRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhTWVzc2FnZSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICRtZXNzYWdlLmh0bWwobWVzc2FnZSArIGRhdGFNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRtZXNzYWdlLmh0bWwobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKioqKiogcmVuZGVyIHRoZSBEZW5kcm9IZWF0bWFwICoqKioqL1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHBhcnNlTWVkaWFuRXhwcmVzc2lvbihlRGF0YSk7IC8vIHRoZSBwYXJzZXIgZGV0ZXJtaW5lcyB0aGUgb3JpZW50YXRpb25zIG9mIHRoZSBoZWF0bWFwXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpZHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdDogaGVhdG1hcFJvb3RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aW9saW46IHZpb2xpblJvb3RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdmc6IGAke2hlYXRtYXBSb290SWR9LXN2Z2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogXCJoZWF0bWFwVG9vbHRpcFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXI6IFwiaGVhdG1hcFRvb2xiYXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZTogXCJoZWF0bWFwQ2xvbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmU6IFwiaGVhdG1hcFNhdmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBcImhlYXRtYXBGaWx0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydDogXCJoZWF0bWFwU29ydFRpc3N1ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHVzdGVyOiBcImhlYXRtYXBDbHVzdGVyVGlzc3VlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgLyoqKioqIGJ1aWxkIGRvbSBjb21wb25lbnRzICoqKioqL1xuICAgICAgICAgICAgICAgICAgICAgICAgW1widG9vbGJhclwiLCBcImNsb25lXCJdLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiPGRpdi8+XCIpLmF0dHIoXCJpZFwiLCBpZHNba2V5XSkuYXBwZW5kVG8oJChgIyR7aWRzLnJvb3R9YCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKioqKiBoZWF0bWFwIHJlbmRlcmluZyAqKioqKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heENlbGxXID0gMjU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW5DZWxsVyA9IDI1O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbFcgPSB0bGlzdD09PXVuZGVmaW5lZD9NYXRoLmNlaWwod2luZG93LmlubmVyV2lkdGgvdGlzc3Vlcy5sZW5ndGgpOk1hdGguY2VpbCh3aW5kb3cuaW5uZXJXaWR0aC90bGlzdC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFcgPSBjZWxsVz5tYXhDZWxsVz9tYXhDZWxsVzooY2VsbFc8bWluQ2VsbFc/bWluQ2VsbFc6Y2VsbFcpOyAvLyB0aGlzIGVuc3VyZXMgYSByZWFzb25hYmxlIGNlbGxXXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZG1hcE1hcmdpbj17dG9wOjUwLCByaWdodDoyNTAsIGJvdHRvbToxNzAsIGxlZnQ6MTB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxlZnRQYW5lbFcgPSAxMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcm9vdFcgPSB0bGlzdD09PXVuZGVmaW5lZD9jZWxsVyAqIHRpc3N1ZXMubGVuZ3RoICsgbGVmdFBhbmVsVyArIGRtYXBNYXJnaW4ucmlnaHQgKyBkbWFwTWFyZ2luLmxlZnQ6Y2VsbFcgKiB0bGlzdC5sZW5ndGggKyBsZWZ0UGFuZWxXICsgZG1hcE1hcmdpbi5yaWdodCArIGRtYXBNYXJnaW4ubGVmdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0gbmV3IERlbmRyb0hlYXRtYXBDb25maWcocm9vdFcsIGxlZnRQYW5lbFcsIDEwMCwgZG1hcE1hcmdpbiwgMTIsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRtYXAgPSBuZXcgRGVuZHJvSGVhdG1hcChlRGF0YS5jbHVzdGVycy50aXNzdWUsIGVEYXRhLmNsdXN0ZXJzLmdlbmUsIGV4cHJlc3Npb24sIFwiWWxHbkJ1XCIsIDIsIGNvbmZpZywgaWRzLnRvb2x0aXApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2VuZXMubGVuZ3RoIDwgMyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG9vIGZldyBnZW5lcyB0byBjbHVzdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG1hcC5yZW5kZXIoaWRzLnJvb3QsIGlkcy5zdmcsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge2RtYXAucmVuZGVyKGlkcy5yb290LCBpZHMuc3ZnKTt9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0cnVjdCBoYW5keSBkYXRhIGxvb2t1cCB0YWJsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB0aXNzdWVzLnJlZHVjZSgoYSwgZCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWQuaGFzT3duUHJvcGVydHkoXCJ0aXNzdWVTaXRlRGV0YWlsSWRcIikpIHRocm93IFwidGlzc3VlIGhhcyBub3QgYXR0ciB0aXNzdWVTaXRlRGV0YWlsSWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW2QudGlzc3VlU2l0ZURldGFpbElkXSA9IGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7fSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdlbmVEaWN0ID0gZG1hcC5kYXRhLmhlYXRtYXAucmVkdWNlKChhLCBkKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZC5oYXNPd25Qcm9wZXJ0eShcImdlbmNvZGVJZFwiKSkgdGhyb3cgXCJnZW5lIGhhcyBubyBhdHRyIGdlbmNvZGVJZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbZC5nZW5jb2RlSWRdPXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZVN5bWJvbDogZC5nZW5lU3ltYm9sLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHt9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLyoqKioqIGN1c3RvbWl6YXRpb24gZm9yIEdURXggZXhwcmVzc2lvbiBoZWF0bWFwICoqKioqL1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGFuZ2Ugcm93IGFuZCBjb2x1bW4gbGFiZWxzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGFuZ2Ugcm93IGxhYmVscyB0byB0aXNzdWUgbmFtZXMgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdChcIiNcIiArIGRtYXAuY29uZmlnLnBhbmVscy5tYWluLmlkKS5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dCgoZCkgPT4gdGlzc3VlRGljdFtkXT09PXVuZGVmaW5lZD9kOnRpc3N1ZURpY3RbZF0udGlzc3VlU2l0ZURldGFpbCk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0KFwiI1wiICsgZG1hcC5jb25maWcucGFuZWxzLm1haW4uaWQpLnNlbGVjdEFsbChcIi5leHAtbWFwLXlsYWJlbFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KChkKSA9PiBnZW5lRGljdFtkXT09PXVuZGVmaW5lZD9kOmdlbmVEaWN0W2RdLmdlbmVTeW1ib2wpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGlzc3VlIGNvbG9yIGJveGVzIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWRkVGlzc3VlQ29sb3JzKGRtYXAsIHRpc3N1ZURpY3QpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYSB0b29sYmFyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWRkVG9vbEJhcihkbWFwLCBpZHMsIHRpc3N1ZURpY3QsIHVybHMsIGZpbHRlckdlbmVzLCBxVGlzc3VlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW91c2UgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9taXplTW91c2VFdmVudHMoZG1hcCwgdGlzc3VlRGljdCwgZ2VuZURpY3QsIHVybHMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2shPSB1bmRlZmluZWQpIGNhbGxiYWNrKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycil7Y29uc29sZS5lcnJvcihlcnIpO30pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKXtjb25zb2xlLmVycm9yKGVycik7fSk7XG59XG5cbmZ1bmN0aW9uIF92YWxpZGF0ZUV4cHJlc3Npb25EYXRhKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSBcIm1lZGlhbkdlbmVFeHByZXNzaW9uXCI7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93IFwiZXhwcmVzc2lvbiBkYXRhIGpzb24gZm9ybWF0IGVycm9yLlwiO1xuICAgIGlmIChkYXRhLmxlbmd0aCA9PSAwKSByZXR1cm4gXCJObyBleHByZXNzaW9uIGRhdGEgZm91bmQuXCI7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3ZhbGlkYXRlR2VuZXMoZG9tSWQsIGdlbmVzLCBpbnB1dCl7XG4gICAgbGV0IG1lc3NhZ2UgPSBcIlwiO1xuXG4gICAgaWYgKGdlbmVzLmxlbmd0aCA9PSAwKSBtZXNzYWdlID0gXCJGYXRhbCBFcnJvcjogdGhlIGdlbmUgbGlzdCBpcyBlbXB0eS48YnIvPlwiO1xuICAgIGVsc2Uge1xuICAgICAgICBpZiAoZ2VuZXMubGVuZ3RoIDwgaW5wdXQubGVuZ3RoKXtcbiAgICAgICAgICAgIGxldCBhbGxJZHMgPSBbXTtcbiAgICAgICAgICAgIGdlbmVzLmZvckVhY2goKGcpPT57XG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZSBhIGxpc3Qgb2YgYWxsIGtub3duIElEc1xuICAgICAgICAgICAgICAgIGFsbElkcy5wdXNoKGcuZ2VuY29kZUlkKTtcbiAgICAgICAgICAgICAgICBhbGxJZHMucHVzaChnLmdlbmVTeW1ib2xVcHBlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBtaXNzaW5nR2VuZXMgPSBpbnB1dC5maWx0ZXIoKGcpPT4hYWxsSWRzLmluY2x1ZGVzKGcudG9Mb3dlckNhc2UoKSkmJiFhbGxJZHMuaW5jbHVkZXMoZy50b1VwcGVyQ2FzZSgpKSk7XG4gICAgICAgICAgICBpZiAobWlzc2luZ0dlbmVzLmxlbmd0aCA+IDApIG1lc3NhZ2UgPSBgV2FybmluZzogTm90IGFsbCBnZW5lcyBhcmUgZm91bmQ6ICR7bWlzc2luZ0dlbmVzLmpvaW4oXCIsXCIpfTxici8+YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbn1cblxuLyoqXG4gKiBGb3IgdG9wIGV4cHJlc3NlZCBxdWVyeSwgaGlnaGxpZ2h0IHRoZSBxdWVyeSB0aXNzdWUgbGFiZWxcbiAqIEBwYXJhbSB0aXNzdWVJZCB7U3RyaW5nfSB0aGUgdGlzc3VlIElEXG4gKiBEZXBlbmRlbmNpZXM6IGV4cHJlc3NNYXAuY3NzXG4gKi9cbmZ1bmN0aW9uIF9zdHlsZVNlbGVjdGVkVGlzc3VlKHRpc3N1ZUlkKXtcbiAgICBzZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIikuZmlsdGVyKChkKT0+ZD09dGlzc3VlSWQpXG4gICAgICAgIC5jbGFzc2VkKFwicXVlcnlcIiwgdHJ1ZSk7XG59XG5cbi8qKlxuICogQWRkcyBHVEV4IHRpc3N1ZSBjb2xvcnMgdG8gdGhlIHRpc3N1ZSBsYWJlbHMgKGNvbHVtbiBuYW1lcyBvZiB0aGUgaGVhdG1hcClcbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuICogQHBhcmFtIHRpc3N1ZURpY3Qge0RpY3Rpb25hcnl9IG9mIEdURXggdGlzc3VlIG9iamVjdHMgaW5kZXhlZCBieSB0aXNzdWVfaWRcbiAqL1xuZnVuY3Rpb24gX2FkZFRpc3N1ZUNvbG9ycyhkbWFwLCB0aXNzdWVEaWN0KXtcblxuICAgIGNvbnN0IGlkID0gZG1hcC5jb25maWcucGFuZWxzLm1haW4uaWQ7XG4gICAgY29uc3QgaGVhdG1hcCA9IGRtYXAub2JqZWN0cy5oZWF0bWFwO1xuXG4gICAgbGV0IGNlbGxzID0gc2VsZWN0KGAjJHtpZH1gKS5zZWxlY3RBbGwoXCIuZXhwLW1hcC14Y29sb3JcIikuZGF0YShoZWF0bWFwLnhMaXN0KTtcbiAgICBsZXQgbGVhdmVzID0gc2VsZWN0KGAjJHtpZH1gKS5zZWxlY3RBbGwoXCIubGVhZi1jb2xvclwiKS5kYXRhKGhlYXRtYXAueExpc3QpO1xuXG4gICAgLy8gdXBkYXRlXG4gICAgY2VsbHMuYXR0cihcInhcIiwgKGQpPT5oZWF0bWFwLnhTY2FsZShkKSlcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGhlYXRtYXAueVNjYWxlLnJhbmdlKClbMV0gKyA1KTtcbiAgICBsZWF2ZXMuYXR0cihcInhcIiwgKGQpPT5oZWF0bWFwLnhTY2FsZShkKSlcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGhlYXRtYXAueVNjYWxlLnJhbmdlKClbMF0gLSAxMCk7XG5cbiAgICAvLyBjcmVhdGUgbmV3IGVsZW1lbnRzXG4gICAgY2VsbHMuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwieFwiLCAoZCk9PmhlYXRtYXAueFNjYWxlKGQpKVxuICAgICAgICAuYXR0cihcInlcIiwgaGVhdG1hcC55U2NhbGUucmFuZ2UoKVsxXSArIDUpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgaGVhdG1hcC54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlYXRtYXAueVNjYWxlLmJhbmR3aWR0aCgpKjAuNSlcbiAgICAgICAgLmNsYXNzZWQoXCJleHAtbWFwLXhjb2xvclwiLCB0cnVlKVxuICAgICAgICAubWVyZ2UoY2VsbHMpXG4gICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpID0+IHRpc3N1ZURpY3RbZF0gPT09IHVuZGVmaW5lZD8gXCIjMDAwMDAwXCI6IGAjJHt0aXNzdWVEaWN0W2RdLmNvbG9ySGV4fWApO1xuXG4gICAgLy8gZXhpdCBhbmQgcmVtb3ZlXG4gICAgY2VsbHMuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaWYgKGRtYXAub2JqZWN0cy5oZWF0bWFwLnlTY2FsZS5kb21haW4oKS5sZW5ndGggPiAxNSl7XG4gICAgICAgIGxlYXZlcy5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCk9PmhlYXRtYXAueFNjYWxlKGQpKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGhlYXRtYXAueVNjYWxlLnJhbmdlKClbMF0gLSAxMClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgaGVhdG1hcC54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWF0bWFwLnlTY2FsZS5iYW5kd2lkdGgoKSowLjUpXG4gICAgICAgICAgICAuY2xhc3NlZChcImxlYWYtY29sb3JcIiwgdHJ1ZSlcbiAgICAgICAgICAgIC5tZXJnZShsZWF2ZXMpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiB0aXNzdWVEaWN0W2RdID09PSB1bmRlZmluZWQ/IFwiIzAwMDAwMFwiOiBgIyR7dGlzc3VlRGljdFtkXS5jb2xvckhleH1gKTtcbiAgICAgICAgbGVhdmVzLmV4aXQoKS5yZW1vdmUoKTtcbiAgICB9XG5cbn1cblxuLyoqXG4gKiBDdXN0b21pemUgdGhlIGRlbmRyb3BIZWF0bWFwIG1vdXNlIGV2ZW50c1xuICogZGVwZW5kZW5jaWVzOiBDU1MgY2xhc3NlcyBmcm9tIGV4cHJlc3NNYXAuY3NzXG4gKiBAcGFyYW0gZG1hcCB7RGVuZHJvSGVhdG1hcH1cbiAqIEBwYXJhbSB0aXNzdWVEaWN0IHtEaWN0aW9uYXJ5fTogdGlzc3VlIG9iamVjdHMgaW5kZXhlZCBieSB0aXNzdWVfaWQsIHdpdGggYXR0cjogdGlzc3VlX25hbWVcbiAqIEBwYXJhbSBnZW5lRGljdCB7RGljdGlvbmFyeX06IGdlbmUgb2JqZWN0cyBpbmRleGVkIGJ5IGdlbmNvZGUgSUQsIHdpdGggYXR0cjogZ2VuZVN5bWJvbFxuICovXG5mdW5jdGlvbiBfY3VzdG9taXplTW91c2VFdmVudHMoZG1hcCwgdGlzc3VlRGljdCwgZ2VuZURpY3QsIHVybHM9Z2V0R3RleFVybHMoKSkge1xuXG4gICAgY29uc3Qgc3ZnID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICBjb25zdCB0b29sdGlwID0gZG1hcC50b29sdGlwO1xuICAgIGRtYXAuZGF0YS5leHRlcm5hbCA9IFtdO1xuICAgIGNvbnN0IGNlbGxNb3VzZW92ZXIgPSBmdW5jdGlvbihkKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gc2VsZWN0KHRoaXMpO1xuICAgICAgICBkbWFwLm9iamVjdHMuaGVhdG1hcC5jZWxsTW91c2VvdmVyKGQsIHN2Zywgc2VsZWN0ZWQpOyAvLyBjYWxsIHRoZSBkZWZhdWx0IGhlYXRtYXAgbW91c2Ugb3ZlciBldmVudCBmaXJzdFxuICAgICAgICBsZXQgdGlzc3VlID0gdGlzc3VlRGljdFtkLnhdPT09dW5kZWZpbmVkP2QueDp0aXNzdWVEaWN0W2QueF0udGlzc3VlU2l0ZURldGFpbDtcbiAgICAgICAgbGV0IGdlbmUgPSBnZW5lRGljdFtkLnldPT09dW5kZWZpbmVkP2QueTpnZW5lRGljdFtkLnldLmdlbmVTeW1ib2w7XG4gICAgICAgIGNvbnN0IHRvb2x0aXBEYXRhID0gW1xuICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5UaXNzdWU8L3NwYW4+OiA8c3BhbiBjbGFzcz1cInRvb2x0aXAtdmFsdWVcIj4ke3Rpc3N1ZX08L3NwYW4+YCxcbiAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cInRvb2x0aXAta2V5XCI+R2VuZTwvc3Bhbj46IDxzcGFuIGNsYXNzPVwidG9vbHRpcC12YWx1ZVwiPiR7Z2VuZX08L3NwYW4+YCxcbiAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cInRvb2x0aXAta2V5XCI+TWVkaWFuIFRQTTwvc3Bhbj46IDxzcGFuIGNsYXNzPVwidG9vbHRpcC12YWx1ZVwiPiR7cGFyc2VGbG9hdChkLmRpc3BsYXlWYWx1ZS50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDQpfTwvc3Bhbj5gXG4gICAgICAgIF07XG4gICAgICAgIHRvb2x0aXAuc2hvdyh0b29sdGlwRGF0YS5qb2luKFwiPGJyLz5cIikpO1xuXG4gICAgfTtcblxuICAgIGNvbnN0IGNlbGxNb3VzZW91dCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoXCIqXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgIHRvb2x0aXAuaGlkZSgpO1xuICAgIH07XG5cbiAgICAvLyBnZW5lIGJveHBsb3QgcHJlcDogYXNzaWduIGEgY29sb3JJbmRleCB0byBlYWNoIGdlbmVcbiAgICBjb25zdCBjb2xvcnMgPSBjb2xvckNoYXJ0KCk7XG4gICAga2V5cyhnZW5lRGljdCkuZm9yRWFjaCgoZCwgaSk9PntnZW5lRGljdFtkXS5jb2xvciA9IGNvbG9yc1tpXTt9KTtcblxuICAgIGNvbnN0IHlsYWJlbENsaWNrID0gZnVuY3Rpb24oZCl7XG4gICAgICAgIGxldCBzID0gc2VsZWN0KHRoaXMpO1xuICAgICAgICBsZXQgYWN0aW9uID0gXCJcIjtcblxuICAgICAgICAvLyB0b2dnbGVzIGNsaWNrL3VuY2xpY2sgZXZlbnRzXG4gICAgICAgIC8vIGlmIHRoZSBET00gaGFzIHRoZSBjbGFzcyBcImNsaWNrZWRcIiwgdGhlbiB1bmNsaWNrIGl0XG4gICAgICAgIGlmIChzLmNsYXNzZWQoXCJjbGlja2VkXCIpKSB7XG4gICAgICAgICAgICBzLmNsYXNzZWQoXCJjbGlja2VkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIGFjdGlvbiA9IFwiZGVsZXRlXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlbHNlIGNsaWNrIGl0XG4gICAgICAgICAgICAvLyBzZWxlY3RBbGwoXCIuY2xpY2tlZFwiKS5jbGFzc2VkKFwiY2xpY2tlZFwiLCBmYWxzZSk7IC8vIGZpcnN0IGNsZWFycyBhbGwgY2xpY2tlZCBsYWJlbHMgaWYgYW55XG4gICAgICAgICAgICBzLmNsYXNzZWQoXCJjbGlja2VkXCIsIHRydWUpOyAvLyBjbGljayB0aGlzIERPTSBlbGVtZW50XG4gICAgICAgICAgICBhY3Rpb24gPSBcImFkZFwiO1xuICAgICAgICB9XG4gICAgICAgIF9yZW5kZXJWaW9saW5QbG90KGFjdGlvbiwgZCwgZ2VuZURpY3QsIHRpc3N1ZURpY3QsIGRtYXAsIHVybHMpO1xuICAgIH07XG5cbiAgICBzdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgY2VsbE1vdXNlb3ZlcilcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgY2VsbE1vdXNlb3V0KTtcblxuICAgIHN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC15bGFiZWxcIilcbiAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgICAub24oXCJjbGlja1wiLCB5bGFiZWxDbGljayk7XG59XG5cbi8qKlxuICogcmVuZGVycyB0aGUgZ2VuZSBleHByZXNzaW9uIHZpb2xpbiBwbG90XG4gKiBAcGFyYW0gYWN0aW9uIHtFTlVNfSBhZGQsIG5ldywgb3IgZGVsZXRlXG4gKiBAcGFyYW0gZ2VuZSB7U3RyaW5nfSBnZW5jb2RlIElEXG4gKiBAcGFyYW0gZ2VuZURpY3Qge0RpY3Rpb25hcnl9IGdlbmNvZGUgSUQgPT4gZ2VuZSBvYmplY3Qgd2l0aCBhdHRyaWJ1dGU6IGluZGV4XG4gKiBAcGFyYW0gdGlzc3VlRGljdCB7RGljdGlvbmFyeX0gdGlzc3VlIG9iamVjdHMgaW5kZXhlZCBieSB0aXNzdWUgSURcbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuICovXG5mdW5jdGlvbiBfcmVuZGVyVmlvbGluUGxvdChhY3Rpb24sIGdlbmUsIGdlbmVEaWN0LCB0aXNzdWVEaWN0LCBkbWFwLCB1cmxzPWdldEd0ZXhVcmxzKCkpIHtcbiAgICAvLyBhY3Rpb25cbiAgICBzd2l0Y2goYWN0aW9uKSB7XG4gICAgY2FzZSBcImRlbGV0ZVwiOiB7XG4gICAgICAgIGRtYXAuZGF0YS5leHRlcm5hbCA9IGRtYXAuZGF0YS5leHRlcm5hbC5maWx0ZXIoKGQpPT5kLmdlbmNvZGVJZCE9Z2VuZSk7XG4gICAgICAgIF9yZW5kZXJWaW9saW5IZWxwZXIoZG1hcC5kYXRhLmV4dGVybmFsLCBkbWFwLCB0aXNzdWVEaWN0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJhZGRcIjoge1xuICAgICAgICBjb25zdCB1cmwgPSB1cmxzLmdlbmVFeHAgKyBnZW5lO1xuICAgICAgICBjb25zdCBjb2xvcnMgPSB7fTtcbiAgICAgICAgY29sb3JzW2dlbmVdID0gZ2VuZURpY3RbZ2VuZV0uY29sb3I7XG4gICAgICAgIGNvbnN0IHRsaXN0ID0gZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLmRvbWFpbigpO1xuICAgICAgICBSZXRyaWV2ZUFsbFBhZ2luYXRlZERhdGEodXJsKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZG1hcC5kYXRhLmV4dGVybmFsID09PSB1bmRlZmluZWQpIGRtYXAuZGF0YS5leHRlcm5hbCA9IFtdO1xuICAgICAgICAgICAgICAgIGRtYXAuZGF0YS5leHRlcm5hbCA9IGRtYXAuZGF0YS5leHRlcm5hbFxuICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHBhcnNlR2VuZUV4cHJlc3Npb25Gb3JWaW9saW4oZCwgdHJ1ZSwgY29sb3JzKSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoZCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbHRlcmluZyB0aGUgdGlzc3VlcyB0aGF0IGFyZW4ndCBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRsaXN0LmluZGV4T2YoZC5ncm91cCkgPiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3JlbmRlclZpb2xpbkhlbHBlcihkbWFwLmRhdGEuZXh0ZXJuYWwsIGRtYXAsIHRpc3N1ZURpY3QpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpe2NvbnNvbGUuZXJyb3IoZXJyKTt9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiYWN0aW9uIG5vdCB1bmRlcnN0b29kLlwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gX3JlbmRlclZpb2xpbkhlbHBlcihkYXRhLCBkbWFwLCB0aXNzdWVEaWN0KXtcbiAgICAvLyBwbG90IGNvbmZpZ3VyYXRpb25zXG4gICAgY29uc3QgaWQgPSB7XG4gICAgICAgIHJvb3Q6IFwidmlvbGluUm9vdFwiLCAvLyB0aGUgcm9vdCA8ZGl2PiBJRFxuICAgICAgICB0b29sdGlwOiBcInZpb2xpblRvb2x0aXBcIixcbiAgICAgICAgdG9vbGJhcjogXCJ2aW9saW5Ub29sYmFyXCIsXG4gICAgICAgIGNsb25lOiBcInZpb2xpbkNsb25lXCIsXG4gICAgICAgIGNoYXJ0OiBcInZpb2xpblBsb3RcIixcbiAgICAgICAgc3ZnOiBcInZpb2xpblN2Z1wiLFxuICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgICBzYXZlOiBcInZpb2xpblNhdmVcIlxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIGVycm9yLWNoZWNraW5nIHRoZSByZXF1aXJlZCBET00gZWxlbWVudHNcbiAgICBjb25zdCByb290SWQgPSBgIyR7aWQucm9vdH1gO1xuICAgIGNvbnN0IHRvb2x0aXBJZCA9IGAjJHtpZC50b29sdGlwfWA7XG4gICAgaWYgKCQocm9vdElkKS5sZW5ndGggPT0gMCkgdGhyb3cgXCJWaW9saW4gUGxvdCBFcnJvcjogcm9vdElkIGRvZXMgbm90IGV4aXN0LlwiO1xuICAgIGlmICgkKHRvb2x0aXBJZCkubGVuZ3RoID09IDApICQoXCI8ZGl2Lz5cIikuYXR0cihcImlkXCIsIGlkLnRvb2x0aXApLmFwcGVuZFRvKCQoXCJib2R5XCIpKTsgLy8gY3JlYXRlIGl0IGlmIG5vdCBhbHJlYWR5IHByZXNlbnQgb24gdGhlIGRlbW8gZG9jdW1lbnRcblxuICAgIC8vIGNsZWFyIHByZXZpb3VzbHkgcmVuZGVyZWQgcGxvdFxuICAgIHNlbGVjdChyb290SWQpLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG5cbiAgICAvLyByZWJ1aWxkIHRoZSBkb20gY29tcG9uZW50cyB3aXRoaW4gdGhlIHJvb3QgZGl2XG4gICAgW1widG9vbGJhclwiLCBcImNoYXJ0XCIsIFwiY2xvbmVcIl0uZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICAkKFwiPGRpdi8+XCIpLmF0dHIoXCJpZFwiLCBpZFtrZXldKS5hcHBlbmRUbygkKHJvb3RJZCkpO1xuICAgIH0pO1xuXG4gICAgLy8gY2hlY2sgaWYgdGhlcmUncyBubyBleHByZXNzaW9uIGRhdGEsIGlmIHNvLCBoaWRlIHRoZSBwbG90IGFuZCByZXR1cm5cbiAgICBjb25zdCBkb25lID0gKCk9PntcbiAgICAgICAgc2VsZWN0KHJvb3RJZCkuc3R5bGUoXCJvcGFjaXR5XCIsIDAuMCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9O1xuICAgIGlmIChkYXRhLmxlbmd0aCA9PSAwKSBkb25lKCk7XG5cbiAgICAvLyBkYXRhIHRyYW5zZm9ybWF0aW9uXG4gICAgbGV0IHRpc3N1ZU9yZGVyID0gZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLmRvbWFpbigpLm1hcCgoZCkgPT4ge3JldHVybiB7aWQ6ZCwgbmFtZTp0aXNzdWVEaWN0W2RdLnRpc3N1ZVNpdGVEZXRhaWx9O30pOyAgICAgLy8gdGlzc3VlT3JkZXIgaXMgYSBsaXN0IG9mIHRpc3N1ZSBvYmplY3RzIHtpZDpkaXNwbGF5IG5hbWV9IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSB4IGF4aXMgb2YgdGhlIGhlYXQgbWFwLlxuICAgIGNvbnN0IGdlbmVzID0gZGF0YS5yZWR1Y2UoKGFyciwgZCk9PnthcnJbZC5sYWJlbF09MTsgcmV0dXJuIGFycjt9LCB7fSk7XG4gICAgY29uc3QgZ0NvdW50cyA9IE9iamVjdC5rZXlzKGdlbmVzKS5sZW5ndGg7XG4gICAgLy8vLyBpZiB0aGVyZSdzIG5vIG1vcmUgZ2VuZXMsIGhpZGUgdGhlIHBsb3QgYW5kIHJldHVyblxuICAgIGlmIChnQ291bnRzID09IDApIGRvbmUoKTtcblxuICAgIC8vIHJlbmRlciB0aGUgdmlvbGluXG4gICAgY29uc3QgdmlvbGluID0gbmV3IEdyb3VwZWRWaW9saW4oZGF0YSk7XG4gICAgY29uc3QgdG9vbHRpcCA9IHZpb2xpbi5jcmVhdGVUb29sdGlwKGlkLnRvb2x0aXApO1xuICAgIGNvbnN0IHRvb2xiYXIgPSB2aW9saW4uY3JlYXRlVG9vbGJhcihpZC50b29sYmFyLCB0b29sdGlwKTtcbiAgICB0b29sYmFyLmNyZWF0ZURvd25sb2FkU3ZnQnV0dG9uKGlkLmJ1dHRvbnMuc2F2ZSwgaWQuc3ZnLCBgJHtpZC5yb290fS1zYXZlLnN2Z2AsIGlkLmNsb25lKTtcblxuICAgIC8vLy8gc2V0IG1hcmdpbnMgYW5kIGRpbWVuc2lvbnNcbiAgICBzZWxlY3Qocm9vdElkKS5zdHlsZShcIm9wYWNpdHlcIiwgMS4wKTsgLy8gbWFrZXMgdGhlIHZpb2xpbiBwbG90IHNlY3Rpb24gdmlzaWJsZVxuICAgIGNvbnN0IG1hcmdpbiA9IF9zZXRWaW9saW5QbG90TWFyZ2lucyg1MCwgNTAsIDE1MCwgZG1hcC5jb25maWcucGFuZWxzLm1haW4ueCk7XG4gICAgbGV0IHdpZHRoID0gMjAgKiBPYmplY3Qua2V5cyhnZW5lcykubGVuZ3RoICogdGlzc3VlT3JkZXIubGVuZ3RoO1xuICAgIHdpZHRoID0gd2lkdGggPCBkbWFwLmNvbmZpZy5wYW5lbHMubWFpbi53PyBkbWFwLmNvbmZpZy5wYW5lbHMubWFpbi53OiB3aWR0aDtcbiAgICBjb25zdCBkaW0gPSBfc2V0VmlvbGluUGxvdERpbWVuc2lvbnMod2lkdGgsIDE1MCwgbWFyZ2luKTtcblxuICAgIGNvbnN0IGRvbSA9IHNlbGVjdChgIyR7aWQuY2hhcnR9YClcbiAgICAgICAgLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIGRpbS5vdXRlcldpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBkaW0ub3V0ZXJIZWlnaHQpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgaWQuc3ZnKVxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke21hcmdpbi50b3B9KWApO1xuXG4gICAgLy8vLyBjb25maWd1cmluZyB0aGUgcGxvdFxuICAgIGNvbnN0IHNob3dEaXZpZGVyID0gZ0NvdW50cyA9PSAxPyBmYWxzZTogdHJ1ZTtcbiAgICBjb25zdCB4Q29uZmlnID0ge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBhbmdsZTogMzAsXG4gICAgICAgIHBhZGRpbmdPdXRlcjogMC4wMSxcbiAgICAgICAgcGFkZGluZ0lubmVyOiAwLjMsXG4gICAgICAgIHRleHRBbmNob3I6IFwic3RhcnRcIixcbiAgICAgICAgYWRqdXN0SGVpZ2h0OiBkaW0uaGVpZ2h0LFxuICAgICAgICBoaWRlTGFiZWxzOiBmYWxzZSxcbiAgICAgICAgaGlkZVRpY2tzOiBmYWxzZVxuICAgIH07XG4gICAgY29uc3Qgc3ViWENvbmZpZyA9IHsgc2hvdzogZmFsc2UgfTtcbiAgICBjb25zdCB5Q29uZmlnID0ge2xhYmVsOiBcImxvZzEwKFRQTSsxKVwifTtcbiAgICB2aW9saW4ucmVuZGVyKFxuICAgICAgICBkb20sXG4gICAgICAgIGRpbS53aWR0aCxcbiAgICAgICAgZGltLmhlaWdodCxcbiAgICAgICAgdGlzc3VlT3JkZXIubWFwKChkKT0+ZC5pZCksXG4gICAgICAgIFtdLFxuICAgICAgICB4Q29uZmlnLFxuICAgICAgICBzdWJYQ29uZmlnLFxuICAgICAgICB5Q29uZmlnLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHRydWUsXG4gICAgICAgIHNob3dEaXZpZGVyLFxuICAgICAgICB0cnVlLFxuICAgICAgICB0cnVlLFxuICAgICAgICAwLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIFwia2RlU2NvdHRcIlxuICAgICk7XG5cbiAgICAvLyBwbG90IGN1c3RvbWl6YXRpb246IFxuICAgIC8vLy8gY2hlY2sgYW5kIGFkanVzdCB0aGUgc3ZnIHdpZHRoXG4gICAgY29uc3QgdmlvbGluTGVnZW5kVyA9IE51bWJlcihkb20uc2VsZWN0KFwiI3Zpb2xpbkxlZ2VuZFwiKS5zZWxlY3QoXCJyZWN0XCIpLmF0dHIoXCJ3aWR0aFwiKSk7XG4gICAgbGV0IHN2Z1cgPSBOdW1iZXIoc2VsZWN0KGAjJHtpZC5jaGFydH1gKS5zZWxlY3QoXCJzdmdcIikuYXR0cihcIndpZHRoXCIpKTtcbiAgICBzdmdXID0gc3ZnVyA8IHZpb2xpbkxlZ2VuZFcgKyAxNTA/dmlvbGluTGVnZW5kVyArIDE1MDpzdmdXO1xuICAgIHNlbGVjdChgIyR7aWQuY2hhcnR9YCkuc2VsZWN0KFwic3ZnXCIpLmF0dHIoXCJ3aWR0aFwiLCBzdmdXKTtcblxuICAgIF9hZGRWaW9saW5UaXNzdWVDb2xvckJhbmQodmlvbGluLCBkb20sIHRpc3N1ZURpY3QsIFwiYm90dG9tXCIpO1xuICAgIF9jaGFuZ2VWaW9saW5YTGFiZWwoZG9tLCB0aXNzdWVEaWN0KTtcbiAgICBfY2hhbmdlVmlvbGluVG9vbHRpcCh2aW9saW4sIHRpc3N1ZURpY3QpO1xufVxuXG4vKipcbiAqIFNldCB0aGUgbWFyZ2lucyBvZiB0aGUgdmlvbGluIHBsb3RcbiAqIEBwYXJhbSB0b3Age0ludGVnZXJ9XG4gKiBAcGFyYW0gcmlnaHQge0ludGVnZXJ9XG4gKiBAcGFyYW0gYm90dG9tIHtpbnRlZ2VyfVxuICogQHBhcmFtIGxlZnQge0ludGVnZXJ9XG4gKiBAcmV0dXJucyB7e3RvcDogbnVtYmVyLCByaWdodDogbnVtYmVyLCBib3R0b206IG51bWJlciwgbGVmdDogbnVtYmVyfX1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9zZXRWaW9saW5QbG90TWFyZ2lucyh0b3A9NTAsIHJpZ2h0PTUwLCBib3R0b209NTAsIGxlZnQ9NTApe1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgIGJvdHRvbTogYm90dG9tLFxuICAgICAgICBsZWZ0OiBsZWZ0XG4gICAgfTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHZpb2xpbiBwbG90XG4gKiBAcGFyYW0gd2lkdGgge0ludGVnZXJ9XG4gKiBAcGFyYW0gaGVpZ2h0IHtJbnRlZ2VyfVxuICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIGF0dHI6IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdFxuICogQHJldHVybnMge3t3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgb3V0ZXJXaWR0aDogbnVtYmVyLCBvdXRlckhlaWdodDogbnVtYmVyfX1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9zZXRWaW9saW5QbG90RGltZW5zaW9ucyh3aWR0aD0xMjAwLCBoZWlnaHQ9MjUwLCBtYXJnaW49dW5kZWZpbmVkKXtcbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBvdXRlcldpZHRoOiB3aWR0aCArIChtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodCksXG4gICAgICAgIG91dGVySGVpZ2h0OiBoZWlnaHQgKyAobWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pXG4gICAgfTtcbn1cblxuLyoqXG4gKiBNb3ZlcyB0aGUgeC1heGlzIGRvd25cbiAqIEBwYXJhbSBkb20ge3N2Z30gU1ZHIHRvIGJlIG1vZGlmaWVkXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfbW92ZVhBeGlzKGRvbSkge1xuICAgIGNvbnN0IHhBeGlzID0gZG9tLnNlbGVjdChcIi52aW9saW4teC1heGlzXCIpO1xuICAgIHhBeGlzLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYCR7eEF4aXMuYXR0cihcInRyYW5zZm9ybVwiKX0gdHJhbnNsYXRlKDAsIDMpYCk7XG59XG5cbmZ1bmN0aW9uIF9hZGRWaW9saW5UaXNzdWVDb2xvckJhbmQocGxvdCwgZG9tLCB0aXNzdWVEaWN0LCBsb2M9XCJ0b3BcIil7XG4gICAgX21vdmVYQXhpcyhkb20pO1xuXG4gICAgLy8gbW92aW5nIHgtYXhpcyB0ZXh0IGRvd24gdG8gbWFrZSBzcGFjZSBmb3IgY29sb3IgYmFuZFxuICAgIGNvbnN0IHhBeGlzVGV4dCA9IGRvbS5zZWxlY3RBbGwoXCIudmlvbGluLXgtYXhpcyB0ZXh0XCIpO1xuICAgIHhBeGlzVGV4dC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgOCkgJHt4QXhpc1RleHQuYXR0cihcInRyYW5zZm9ybVwiKX1gKTtcblxuICAgIC8vLy8vIGFkZCB0aXNzdWUgY29sb3JzXG4gICAgY29uc3QgdGlzc3VlRyA9IGRvbS5hcHBlbmQoXCJnXCIpO1xuXG4gICAgdGlzc3VlRy5zZWxlY3RBbGwoXCIudGNvbG9yXCIpLmRhdGEocGxvdC5zY2FsZS54LmRvbWFpbigpKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuY2xhc3NlZChcInRjb2xvclwiLCB0cnVlKVxuICAgICAgICAuYXR0cihcInhcIiwgKGcpPT5wbG90LnNjYWxlLngoZykgKVxuICAgICAgICAuYXR0cihcInlcIiwgbG9jPT1cInRvcFwiP3Bsb3Quc2NhbGUueS5yYW5nZSgpWzFdOnBsb3Quc2NhbGUueS5yYW5nZSgpWzBdKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCAxNClcIilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBwbG90LnNjYWxlLnguYmFuZHdpZHRoKCkpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDUpXG4gICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAwKVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChnKT0+YCMke3Rpc3N1ZURpY3RbZ10uY29sb3JIZXh9YClcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjcpO1xufVxuXG5mdW5jdGlvbiBfY2hhbmdlVmlvbGluWExhYmVsKGRvbSwgdGlzc3VlRGljdCl7XG4gICAgLyoqKioqIENoYW5nZSByb3cgbGFiZWxzIHRvIHRpc3N1ZSBuYW1lcyAqKioqKi9cbiAgICBkb20uc2VsZWN0KFwiLnZpb2xpbi14LWF4aXNcIikuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAudGV4dCgoZCkgPT4gdGlzc3VlRGljdFtkXT09PXVuZGVmaW5lZD9kOnRpc3N1ZURpY3RbZF0udGlzc3VlU2l0ZURldGFpbCk7XG59XG5cbmZ1bmN0aW9uIF9jaGFuZ2VWaW9saW5Ub29sdGlwKHZpb2xpbiwgdGlzc3VlRGljdCkge1xuICAgIHZpb2xpbi5kb20uc2VsZWN0QWxsKFwiLnZpb2xpbi1nXCIpXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG9vbHRpcERhdGEgPSBbXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5UaXNzdWU8L3NwYW4+OiA8c3BhbiBjbGFzcz1cInRvb2x0aXAtdmFsdWVcIj4ke3Rpc3N1ZURpY3RbZC50aXNzdWVTaXRlRGV0YWlsSWRdLnRpc3N1ZVNpdGVEZXRhaWx9PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5HZW5lPC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHtkLmdlbmVTeW1ib2x9PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5NZWRpYW4gVFBNPC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHttZWRpYW4oZC5kYXRhKS50b1ByZWNpc2lvbig0KX08L3NwYW4+YFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHZpb2xpbi50b29sdGlwLnNob3codG9vbHRpcERhdGEuam9pbihcIjxici8+XCIpKTtcbiAgICAgICAgfSk7XG59XG5cbi8qKlxuICogQWRkIHRoZSB0b29sYmFyXG4gKiBAcGFyYW0gZG1hcCB7RGVuZHJvSGVhdG1hcH1cbiAqIEBwYXJhbSBpZHMge0RpY3Rpb25hcnl9IG9mIGRvbSBJRHMgd2l0aCBidXR0b25zXG4gKiBAcGFyYW0gdGlzc3VlRGljdCB7RGljdGlvbmFyeX0gb2YgdGlzc3VlIG9iamVjdHMgaW5kZXhlZCBieSB0aXNzdWUgSURcbiAqIEBwYXJhbSB1cmxzIHtEaWN0aW9uYXJ5fSBvZiBHVEV4IHdlYiBzZXJ2aWNlIFVSTHNcbiAqIEBwYXJhbSBmaWx0ZXJHZW5lcyB7Qm9vbGVhbn1cbiAqIEBwYXJhbSBxVGlzc3VlIHtTdHJpbmd9IG9mIHVzZXItZGVmaW5lZCBxdWVyeSB0aXNzdWVzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfYWRkVG9vbEJhcihkbWFwLCBpZHMsIHRpc3N1ZURpY3QsIHVybHM9Z2V0R3RleFVybHMoKSwgZmlsdGVyR2VuZXM9dW5kZWZpbmVkLCBxVGlzc3VlPXVuZGVmaW5lZCl7XG4gICAgbGV0IHRvb2xiYXIgPSBkbWFwLmNyZWF0ZVRvb2xiYXIoaWRzLnRvb2xiYXIsIGRtYXAudG9vbHRpcCk7XG4gICAgdG9vbGJhci5jcmVhdGVEb3dubG9hZFN2Z0J1dHRvbihpZHMuYnV0dG9ucy5zYXZlLCBpZHMuc3ZnLCBgJHtpZHMucm9vdH0tc2F2ZS5zdmdgLCBpZHMuY2xvbmUpO1xuXG4gICAgY29uc3QgX19hZGRGaWx0ZXIgPSAoKT0+e1xuICAgICAgICAvLyBzbyBmYXIgdGhpcyBpcyBvbmx5IGFwcGxpY2FibGUgZm9yIHRvcEV4cHJlc3NlZCBnZW5lIGhlYXRtYXBcbiAgICAgICAgY29uc3QgaWQgPSBpZHMuYnV0dG9ucy5maWx0ZXI7XG4gICAgICAgIHRvb2xiYXIuY3JlYXRlQnV0dG9uKGlkLCBcImZhLWZpbHRlclwiKTtcbiAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvLyB0b2dnbGUgdGhlIGFwcGxpZWQgZmlsdGVyXG4gICAgICAgICAgICAgICAgbGF1bmNoVG9wRXhwcmVzc2VkKHFUaXNzdWUsIGlkcy5yb290LCBpZHMudmlvbGluLCB1cmxzLCAhZmlsdGVyR2VuZXMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGlmKGZpbHRlckdlbmVzKSB0b29sYmFyLnRvb2x0aXAuc2hvdyhcIkluY2x1ZGUgTWl0b2Nob25kcmlhbCBHZW5lc1wiKTtcbiAgICAgICAgICAgICAgICBlbHNlIHRvb2xiYXIudG9vbHRpcC5zaG93KFwiRXhjbHVkZSBNaXRvY2hvbmRyaWFsIEdlbmVzXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdG9vbGJhci50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBfX2FkZFNvcnRUaXNzdWVzID0gKCk9PntcbiAgICAgICAgY29uc3QgaWQgPSBpZHMuYnV0dG9ucy5zb3J0O1xuICAgICAgICB0b29sYmFyLmNyZWF0ZUJ1dHRvbihpZCwgXCJmYS1zb3J0LWFscGhhLWRvd25cIik7XG4gICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gaGlkZXMgdGhlIHRpc3N1ZSBkZW5kcm9ncmFtXG4gICAgICAgICAgICAgICAgc2VsZWN0KFwiI1wiICsgZG1hcC5jb25maWcucGFuZWxzLnRvcC5pZCkuc3R5bGUoXCJkaXNwbGF5XCIsIFwiTm9uZVwiKTtcbiAgICAgICAgICAgICAgICAvLyBzb3J0IHRpc3N1ZXNcbiAgICAgICAgICAgICAgICBsZXQgeGxpc3QgPSBkbWFwLm9iamVjdHMuaGVhdG1hcC54TGlzdC5zb3J0KCk7XG4gICAgICAgICAgICAgICAgX3NvcnRUaXNzdWVzKHhsaXN0LCBkbWFwLCB0aXNzdWVEaWN0KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0b29sYmFyLnRvb2x0aXAuc2hvdyhcIlNvcnQgVGlzc3VlcyBBbHBoYWJldGljYWxseVwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHRvb2xiYXIudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBjb25zdCBfX2FkZENsdXN0ZXJUaXNzdWVzID0gKCk9PntcbiAgICAgICAgY29uc3QgaWQgPSBpZHMuYnV0dG9ucy5jbHVzdGVyO1xuICAgICAgICB0b29sYmFyLmNyZWF0ZUJ1dHRvbihpZCwgXCJmYS1jb2RlLWJyYW5jaFwiKTtcbiAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QoXCIjXCIgKyBkbWFwLmNvbmZpZy5wYW5lbHMudG9wLmlkKS5zdHlsZShcImRpc3BsYXlcIiwgXCJCbG9ja1wiKTsgIC8vIHNob3dzIHRoZSB0aXNzdWUgZGVuZHJvZ3JhbVxuICAgICAgICAgICAgICAgIGxldCB4bGlzdCA9IGRtYXAub2JqZWN0cy5jb2x1bW5UcmVlLnhTY2FsZS5kb21haW4oKTtcbiAgICAgICAgICAgICAgICBfc29ydFRpc3N1ZXMoeGxpc3QsIGRtYXAsIHRpc3N1ZURpY3QpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHRvb2xiYXIudG9vbHRpcC5zaG93KFwiQ2x1c3RlciBUaXNzdWVzXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdG9vbGJhci50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKGZpbHRlckdlbmVzICE9PSB1bmRlZmluZWQpIF9fYWRkRmlsdGVyKCk7XG4gICAgX19hZGRTb3J0VGlzc3VlcygpO1xuICAgIF9fYWRkQ2x1c3RlclRpc3N1ZXMoKTtcbn1cblxuLyoqXG4gKiB1cGRhdGUgdGhlIGhlYXRtYXAgYmFzZWQgb24gdGhlIG9yZGVyIG9mIHRoZSB4bGlzdFxuICogZGVwZW5kZW5jaWVzOiBDU1MgY2xhc3NlcyBmcm9tIGV4cHJlc3NNYXAuY3NzXG4gKiBAcGFyYW0geGxpc3Qge0hlYXRtYXAgWExpc3R9XG4gKiBAcGFyYW0gZG1hcCB7RGVuZHJvSGVhdG1hcH1cbiAqIEBwYXJhbSB0aXNzdWVEaWN0IHtEaWN0aW9uYXJ5fSBvZiB0aXNzdWUgb2JqZWN0cyBpbmRleGVkIGJ5IHRpc3N1ZSBJRCB3aXRoIGF0dHIsIHRpc3N1ZV9uYW1lXG4gKi9cbmZ1bmN0aW9uIF9zb3J0VGlzc3VlcyAoeGxpc3QsIGRtYXAsIHRpc3N1ZURpY3Qpe1xuICAgIC8vIGNoZWNrIGlmIHRoZXJlJ3MgYSBxdWVyeSB0aXNzdWUsIGUuZy4gdG9wLWV4cHJlc3NlZCBoZWF0bWFwXG5cbiAgICBsZXQgcUlkID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHFUaXNzdWUgPSBzZWxlY3QoXCIuZXhwLW1hcC14bGFiZWwucXVlcnlcIik7XG4gICAgaWYgKCFxVGlzc3VlLmVtcHR5KCkpIHFJZCA9IHFUaXNzdWUuZGF0dW0oKTtcblxuICAgIC8vIHVwZGF0ZSB0aGUgaGVhdG1hcFxuICAgIGNvbnN0IGRvbSA9IHNlbGVjdChcIiNcIitkbWFwLmNvbmZpZy5wYW5lbHMubWFpbi5pZCk7XG4gICAgY29uc3QgZGltZW5zaW9ucyA9IGRtYXAuY29uZmlnLnBhbmVscy5tYWluO1xuICAgIFxuICAgIGRtYXAub2JqZWN0cy5oZWF0bWFwLnJlZHJhdyhkb20sIHhsaXN0LCBkbWFwLm9iamVjdHMuaGVhdG1hcC55TGlzdCwgZGltZW5zaW9ucyk7XG5cbiAgICAvLyBjaGFuZ2UgdGhlIHRpc3N1ZSBkaXNwbGF5IHRleHQgdG8gdGlzc3VlIG5hbWVzXG4gICAgc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpXG4gICAgICAgIC50ZXh0KChkKSA9PiB0aXNzdWVEaWN0W2RdPT09dW5kZWZpbmVkP2Q6dGlzc3VlRGljdFtkXS50aXNzdWVTaXRlRGV0YWlsKVxuICAgICAgICAuY2xhc3NlZChcInF1ZXJ5XCIsIGZhbHNlKTtcbiAgICBfYWRkVGlzc3VlQ29sb3JzKGRtYXAsIHRpc3N1ZURpY3QpO1xuXG4gICAgLy8gc3R5bGUgdGhlIHF1ZXJ5IHRpc3N1ZSBpZiBmb3VuZFxuICAgIGlmIChxSWQhPT11bmRlZmluZWQpIF9zdHlsZVNlbGVjdGVkVGlzc3VlKHFJZCk7XG5cbiAgICAvLyBoaWRlIHRoZSB2aW9saW4gcGxvdFxuICAgIHNlbGVjdChcIiN2aW9saW5Sb290XCIpLnN0eWxlKFwib3BhY2l0eVwiLCAwLjApO1xuXG4gICAgLy8gZGVzZWxlY3QgZ2VuZXNcbiAgICBzZWxlY3RBbGwoXCIuZXhwLW1hcC15bGFiZWxcIikuY2xhc3NlZChcImNsaWNrZWRcIiwgZmFsc2UpO1xuICAgIGRtYXAuZGF0YS5leHRlcm5hbCA9IHVuZGVmaW5lZDtcblxufVxuXG5leHBvcnQgdmFyIEV4cHJlc3Npb25NYXAgPSB7XG4gICAgY3JlYXRlRGF0YXNldE1lbnU6IGNyZWF0ZURhdGFzZXRNZW51LFxuICAgIGxhdW5jaFRvcEV4cHJlc3NlZDogbGF1bmNoVG9wRXhwcmVzc2VkLFxuICAgIGxhdW5jaDogbGF1bmNoLFxuICAgIHNlYXJjaEJ5SWQ6IHNlYXJjaEJ5SWRcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5cInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7Z2V0R3RleFVybHMsIHBhcnNlVGlzc3Vlc30gZnJvbSBcIi4vZ3RleERhdGFQYXJzZXJcIjtcbmltcG9ydCB7UmV0cmlldmVBbGxQYWdpbmF0ZWREYXRhfSBmcm9tIFwiLi4vdXRpbHMvcGFnaW5hdGlvblwiO1xuLy8gaW1wb3J0ICQgZnJvbSBcImpxdWVyeVwiO1xuXG4vKipcbiAqIENyZWF0ZSB0aGUgdGlzc3VlIChkYXRhc2V0KSBkcm9wZG93biBtZW51IHVzaW5nIHNlbGVjdDJcbiAqIE5PVEU6IGlmIHVzaW5nIHRoaXMgZnVuY3Rpb24sIHlvdSB3aWxsIG5lZWQgdG8gcmVtb3ZlIHRoZSBqcXVlcnkgJCBpbXBvcnQgZnJvbSB3ZWJwYWNrLFxuICogYW5kIHJlbHkgb24ganF1ZXJ5IGltcG9ydGVkIHRocm91Z2ggYSBzY3JpcHQgdGFnIG9uIHRoZSBpbmRleC5odG1sIHBhZ2UuXG4gKiBUaGlzIG9jY3VycyBmb3IgdGhlIFRvcCBFeHByZXNzZWQgR2VuZSB2aXN1YWxpemF0aW9uLlxuICogXG4gKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIGRvbSBJRCBvZiB0aGUgbWVudVxuICogQHBhcmFtIHVybCB7U3RyaW5nfSB0aGUgdGlzc3VlIHdlYiBzZXJ2aWNlIHVybFxuICogZGVwZW5kZW5jeTogc2VsZWN0MlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGlzc3VlTWVudShkb21JZCwgdXJsID0gZ2V0R3RleFVybHMoKS50aXNzdWUpe1xuICAgIFJldHJpZXZlQWxsUGFnaW5hdGVkRGF0YSh1cmwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpe1xuICAgICAgICAgICAgbGV0IHRpc3N1ZXMgPSBwYXJzZVRpc3N1ZXMocmVzdWx0cyk7XG4gICAgICAgICAgICB0aXNzdWVzLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgICAgICAgICBkLmlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgICAgICAgICAgZC50ZXh0ID0gZC50aXNzdWVTaXRlRGV0YWlsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aXNzdWVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICBpZihhLnRpc3N1ZVNpdGVEZXRhaWwgPCBiLnRpc3N1ZVNpdGVEZXRhaWwpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICBpZihhLnRpc3N1ZVNpdGVEZXRhaWwgPiBiLnRpc3N1ZVNpdGVEZXRhaWwpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGV4dGVybmFsIGxpYnJhcnkgZGVwZW5kZW5jeTogc2VsZWN0MlxuICAgICAgICAgICAgJChgIyR7ZG9tSWR9YCkuc2VsZWN0Mih7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiU2VsZWN0IGEgZGF0YSBzZXRcIixcbiAgICAgICAgICAgICAgICBkYXRhOiB0aXNzdWVzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKXtjb25zb2xlLmVycm9yKGVycik7fSk7XG59XG5cbi8qKlxuICogQnVpbGQgdGhlIHR3by1sZXZlbCBjaGVja2JveC1zdHlsZSB0aXNzdWUgbWVudVxuICogZGVwZW5kZW5jaWVzOiB0aXNzdWVHcm91cC5jc3MgY2xhc3Nlc1xuICogQHBhcmFtIGdyb3VwcyB7RGljdGlvbmFyeX0gb2YgbGlzdHMgb2YgdGlzc3VlcyBpbmRleGVkIGJ5IHRoZSBncm91cCBuYW1lLCB0aGlzIGlzIGNyZWF0ZWQgYnkgZ3RleERhdGFQYXJzZXI6cGFyc2VUaXNzdWVTaXRlcygpXG4gKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gPGRpdj4gSURcbiAqIEBwYXJhbSBmb3JFcXRsIHtCb29sZWFufVxuICogQHBhcmFtIGNoZWNrQWxsIHtCb29sZWFufSBXaGV0aGVyIG9yIG5vdCB0byBzdGFydCBhbGwgb3B0aW9ucyBjaGVja2VkXG4gKiBAcGFyYW0gc2VjdGlvbnMge0ludGVnZXJ9IE51bWJlciBvZiBzZWN0aW9ucyB0byBzcGxpdCBtZW51IGludG9cbiAqIERlcGVuZGVuY2llczogalF1ZXJ5LCBCb290c3RyYXAsIHRpc3N1ZUdyb3VwLmNzc1xuICogdG9kbzogYWRkIHJlc2V0IGFuZCBzZWxlY3QgYWxsIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRpc3N1ZUdyb3VwTWVudShncm91cHMsIGRvbUlkLCBmb3JFcXRsPWZhbHNlLCBjaGVja0FsbD1mYWxzZSwgc2VjdGlvbnM9NCl7XG4gICAgY29uc3QgbWFpbkNsYXNzPVwidGlzc3VlLWdyb3VwLW1haW4tbGV2ZWxcIjtcbiAgICBjb25zdCBzdWJDbGFzcyA9IFwidGlzc3VlLWdyb3VwLXN1Yi1sZXZlbFwiO1xuICAgIGNvbnN0IGxhc3RTaXRlQ2xhc3MgPSBcImxhc3Qtc2l0ZVwiO1xuXG4gICAgLy8gZXJhc2UgZXZlcnl0aGluZyBpbiBkb21JZCBpbiBjYXNlIGl0IGlzbid0IGVtcHR5XG4gICAgc2VsZWN0KGAjJHtkb21JZH1gKS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuXG4gICAgLy8gYWRkIGNoZWNrIGFsbCBhbmQgcmVzZXQgb3B0aW9uc1xuICAgIGNvbnN0ICRhbGxUaXNzdWVEaXYgPSAkKFwiPGRpdi8+XCIpLmF0dHIoXCJjbGFzc1wiLCBcImNvbC14cy0xMiBjb2wtbWQtMTJcIikuYXBwZW5kVG8oJChgIyR7ZG9tSWR9YCkpO1xuICAgIGlmIChmb3JFcXRsKXtcbiAgICAgICAgJChgPGxhYmVsIGNsYXNzPSR7bWFpbkNsYXNzfT5gICtcbiAgICAgICAgXCI8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIG5hbWU9XFxcImFsbFRpc3N1ZXNcXFwiIHZhbHVlPVxcXCJyZXNldFxcXCI+IFJlc2V0IFwiICtcbiAgICAgICAgXCI8L2xhYmVsPjxici8+XCIpLmFwcGVuZFRvKCRhbGxUaXNzdWVEaXYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICQoYDxsYWJlbCBjbGFzcz0ke21haW5DbGFzc30+YCArXG4gICAgICAgIFwiPGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiBuYW1lPVxcXCJhbGxUaXNzdWVzXFxcIiB2YWx1ZT1cXFwiYWxsXFxcIj4gQWxsIDwvbGFiZWw+IFwiICtcbiAgICAgICAgYDxsYWJlbCBjbGFzcz0ke21haW5DbGFzc30+YCArXG4gICAgICAgIFwiPGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiBuYW1lPVxcXCJhbGxUaXNzdWVzXFxcIiB2YWx1ZT1cXFwicmVzZXRcXFwiPiBSZXNldCBcIiArXG4gICAgICAgIFwiPC9sYWJlbD48YnIvPlwiKS5hcHBlbmRUbygkYWxsVGlzc3VlRGl2KTtcbiAgICB9XG5cblxuICAgIC8vIGNoZWNrIGFsbCBvciByZXNldCBldmVudHNcbiAgICAkKFwiaW5wdXRbbmFtZT1cXFwiYWxsVGlzc3Vlc1xcXCJdXCIpLmNoYW5nZShmdW5jdGlvbigpe1xuICAgICAgICBsZXQgdmFsID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgc3dpdGNoKHZhbCl7XG4gICAgICAgIGNhc2UgXCJhbGxcIjoge1xuICAgICAgICAgICAgJChcIi50aXNzdWVHcm91cFwiKS5wcm9wKFwiY2hlY2tlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICQoXCIudGlzc3VlU3ViR3JvdXBcIikucHJvcChcImNoZWNrZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwicmVzZXRcIjoge1xuICAgICAgICAgICAgJChcIi50aXNzdWVHcm91cFwiKS5wcm9wKFwiY2hlY2tlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICAkKFwiLnRpc3N1ZVN1Ykdyb3VwXCIpLnByb3AoXCJjaGVja2VkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHNvcnQgdGhlIHRpc3N1ZSBncm91cHMgYWxwaGFiZXRpY2FsbHlcbiAgICBsZXQgZ3JvdXBOYW1lcyA9IE9iamVjdC5rZXlzKGdyb3Vwcykuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAvLyByZWd1bGFyIHNvcnRpbmcsIGV4Y2VwdCB0aGF0ICdCcmFpbicgZ3JvdXAgd2lsbCBhbHdheXMgYmUgZmlyc3RcbiAgICAgICAgaWYgKGEgPT0gXCJCcmFpblwiKSByZXR1cm4gLTE7XG4gICAgICAgIGlmIChiID09IFwiQnJhaW5cIikgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYikgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYSA+IGIpIHJldHVybiAxO1xuICAgIH0pO1xuXG4gICAgLy8gZGV0ZXJtaW5lIHRoZSB0b3RhbCBudW1iZXIgb2Ygcm93cyAobWFpbiB0aXNzdWUgc2l0ZXMgYW5kIHN1YnNpdGVzKVxuICAgIGxldCByb3dzID0gT2JqZWN0LmtleXMoZ3JvdXBzKS5yZWR1Y2UoKGEsYik9PntcbiAgICAgICAgaWYgKGdyb3Vwc1tiXS5sZW5ndGg+MSkgcmV0dXJuIGErMStncm91cHNbYl0ubGVuZ3RoO1xuICAgICAgICBlbHNlIHJldHVybiBhK2dyb3Vwc1tiXS5sZW5ndGg7XG4gICAgfSwgMCk7XG5cbiAgICBsZXQgcm93c1BlclNlY3Rpb24gPSBNYXRoLmNlaWwocm93cy9zZWN0aW9ucyk7XG4gICAgbGV0IHJvd3NSZW1haW4gPSByb3dzICUgc2VjdGlvbnM7XG5cbiAgICAvLyBCb290c3RyYXAgZ3JpZFxuICAgIGNvbnN0IGJvb3RzdHJhcEdyaWRzID0gMTI7XG4gICAgbGV0IGNvbFNpemUgPSBNYXRoLmZsb29yKGJvb3RzdHJhcEdyaWRzL3NlY3Rpb25zKTsgLy8gZm9yIGJvb3RzdHJhcCBncmlkXG4gICAgY29uc3Qgc2VjdGlvbkRvbXMgPSByYW5nZSgwLCBzZWN0aW9ucykubWFwKGQ9PntcbiAgICAgICAgcmV0dXJuICQoYDxkaXYgaWQ9XCJzZWN0aW9uJHtkfVwiIGNsYXNzPVwiY29sLXhzLTEyIGNvbC1tZC0ke2NvbFNpemV9XCI+YCkuYXBwZW5kVG8oJChgIyR7ZG9tSWR9YCkpO1xuICAgIH0pO1xuXG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCBjdXJyU2VjdGlvbiA9IDA7XG4gICAgZ3JvdXBOYW1lcy5mb3JFYWNoKChnbmFtZSk9PntcbiAgICAgICAgbGV0IHNpdGVzID0gZ3JvdXBzW2duYW1lXTsgLy8gYSBsaXN0IG9mIHNpdGUgb2JqZWN0cyB3aXRoIGF0dHI6IG5hbWUgYW5kIGlkXG4gICAgICAgIGNvbnN0IGdJZCA9IGduYW1lLnJlcGxhY2UoLyAvZywgXCJfXCIpOyAvLyByZXBsYWNlIHRoZSBzcGFjZXMgd2l0aCBkYXNoZXMgdG8gY3JlYXRlIGEgZ3JvdXAgPERPTT4gaWRcbiAgICAgICAgLy8gZmlndXJlIG91dCB3aGljaCBkb20gc2VjdGlvbiB0byBhcHBlbmQgdGhpcyB0aXNzdWUgc2l0ZVxuICAgICAgICBsZXQgZ3JvdXBMZW4gPSBzaXRlcy5sZW5ndGg7XG4gICAgICAgIGdyb3VwTGVuID0gZ3JvdXBMZW4gPT0gMSA/IGdyb3VwTGVuIDogZ3JvdXBMZW4rMTsgLy8gKzEgdG8gYWNjb3VudCBmb3Igc2l0ZSBuYW1lXG4gICAgICAgIC8vIG1vdmUgdG8gbmV3IHNlY3Rpb24gaWYgZW5vdWdoIHJvd3MgYXJlIGluIHRoZSBjdXJyZW50IHNlY3Rpb25cbiAgICAgICAgaWYgKGNvdW50ZXIgIT0gMCAmJiBncm91cExlbiArIGNvdW50ZXIgPiByb3dzUGVyU2VjdGlvbiArIHJvd3NSZW1haW4pIHtcbiAgICAgICAgICAgIGNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgaWYgKHNlY3Rpb25Eb21zLmxlbmd0aCAhPSBjdXJyU2VjdGlvbiArIDEpe1xuICAgICAgICAgICAgICAgIGN1cnJTZWN0aW9uICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY291bnRlciArPSBncm91cExlbjtcbiAgICAgICAgbGV0ICRjdXJyZW50RG9tID0gc2VjdGlvbkRvbXNbY3VyclNlY3Rpb25dO1xuICAgICAgICBpZiAoJGN1cnJlbnREb209PT11bmRlZmluZWQpIGNvbnNvbGUuZXJyb3IoYCR7Z25hbWV9IGhhcyBubyBkZWZpbmVkIHNlc3Npb25gKTtcbiAgICAgICAgLy8gY3JlYXRlIHRoZSA8bGFiZWw+IGZvciB0aGUgdGlzc3VlIGdyb3VwXG4gICAgICAgICQoYDxsYWJlbCBjbGFzcz0ke21haW5DbGFzc30+YCtcbiAgICAgICAgICAgIGA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCIke2dJZH1cIiBjbGFzcz1cInRpc3N1ZUdyb3VwXCI+IGAgK1xuICAgICAgICAgICAgYDxzcGFuPiR7Z25hbWV9PC9zcGFuPmAgK1xuICAgICAgICAgICAgXCI8L2xhYmVsPjxici8+XCIpLmFwcGVuZFRvKCRjdXJyZW50RG9tKTtcblxuICAgICAgICAvLyB0aXNzdWUgc2l0ZXMgaW4gdGhlIGdyb3VwXG4gICAgICAgIGlmIChzaXRlcy5sZW5ndGggPiAxKXtcbiAgICAgICAgICAgIC8vIHNvcnQgc2l0ZXMgYWxwaGFiZXRpY2FsbHlcbiAgICAgICAgICAgIHNpdGVzLnNvcnQoKGEsIGIpPT57XG4gICAgICAgICAgICAgICAgaWYgKGEuaWQgPiBiLmlkKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICBpZiAoYS5pZCA8IGIuaWQpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24oc2l0ZSwgaSl7XG4gICAgICAgICAgICAgICAgICAgIGxldCAkc2l0ZURvbSA9ICQoYDxsYWJlbCBjbGFzcz0ke3N1YkNsYXNzfT5gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiJHtzaXRlLmlkfVwiIGNsYXNzPVwidGlzc3VlU3ViR3JvdXBcIj4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA8c3Bhbj4ke3NpdGUubmFtZX08L3NwYW4+YCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiPC9sYWJlbD48YnIvPlwiKS5hcHBlbmRUbygkY3VycmVudERvbSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IHNpdGVzLmxlbmd0aCAtMSkgJHNpdGVEb20uYWRkQ2xhc3MobGFzdFNpdGVDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICRzaXRlRG9tLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiaW5wdXRbbmFtZT1cXFwiYWxsVGlzc3Vlc1xcXCJdXCIpLnByb3AoXCJjaGVja2VkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjdXN0b20gY2xpY2sgZXZlbnQgZm9yIHRoZSB0b3AtbGV2ZWwgdGlzc3VlczogdG9nZ2xlIHRoZSBjaGVjayBib3hlc1xuICAgICAgICAkKFwiI1wiICsgZ0lkKS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICAgICAgJChcImlucHV0W25hbWU9XFxcImFsbFRpc3N1ZXNcXFwiXVwiKS5wcm9wKFwiY2hlY2tlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoJChcIiNcIiArIGdJZCkuaXMoXCI6Y2hlY2tlZFwiKSkge1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGdyb3VwIGlzIGNoZWNrZWQsIGNoZWNrIGFsbCBpdHMgdGlzc3Vlc1xuICAgICAgICAgICAgICAgIHNpdGVzLmZvckVhY2goZnVuY3Rpb24gKHNpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiaWRcIiA9PSBzaXRlLmlkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICQoXCIjXCIgKyBzaXRlLmlkKS5wcm9wKFwiY2hlY2tlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGdyb3VwIGlzIHVuY2hlY2tlZCwgdW4tY2hlY2sgYWxsIGl0cyB0aXNzdWVzXG4gICAgICAgICAgICAgICAgc2l0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc2l0ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJpZFwiID09IHNpdGUuaWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNcIiArIHNpdGUuaWQpLnByb3AoXCJjaGVja2VkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKGNoZWNrQWxsKSB7XG4gICAgICAgICQoXCJpbnB1dFtuYW1lPVxcXCJhbGxUaXNzdWVzXFxcIl1bdmFsdWU9XFxcImFsbFxcXCJdXCIpLnByb3AoXCJjaGVja2VkXCIsIHRydWUpO1xuICAgICAgICAkKFwiLnRpc3N1ZUdyb3VwXCIpLnByb3AoXCJjaGVja2VkXCIsIHRydWUpO1xuICAgICAgICAkKFwiLnRpc3N1ZVN1Ykdyb3VwXCIpLnByb3AoXCJjaGVja2VkXCIsIHRydWUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdHdvLWxldmVsIGNoZWNrYm94LXN0eWxlIHRpc3N1ZSBtZW51XG4gKiBAcGFyYW0gZ3JvdXBzIHtEaWN0aW9uYXJ5fSBvZiBsaXN0cyBvZiB0aXNzdWVzIGluZGV4ZWQgYnkgdGhlIGdyb3VwIG5hbWUsIHRoaXMgaXMgY3JlYXRlZCBieSBndGV4RGF0YVBhcnNlcjpwYXJzZVRpc3N1ZVNpdGVzKClcbiAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSA8ZGl2PiBJRFxuICogQHBhcmFtIHVzZU5hbWVzIHtCb29sZWFufSBXaGV0aGVyIHRvIHJldHVybiB0aXNzdWUgaWRzIG9yIHRpc3N1ZSBuYW1lc1xuICogRGVwZW5kZW5jaWVzOiBqUXVlcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlR3JvdXBNZW51KGdyb3VwcywgZG9tSWQsIHVzZU5hbWVzPWZhbHNlKXtcbiAgICBsZXQgcXVlcnlUaXNzdWVzID0gW107XG4gICAgJChgIyR7ZG9tSWR9YCkuZmluZChcIjppbnB1dFwiKS5lYWNoKGZ1bmN0aW9uKCl7IC8vIHVzaW5nIGpRdWVyeSB0byBwYXJzZSBlYWNoIGlucHV0IGl0ZW1cbiAgICAgICAgaWYgKCAkKHRoaXMpLmlzKFwiOmNoZWNrZWRcIikpIHsgLy8gdGhlIGpRdWVyeSB3YXkgdG8gZmV0Y2ggYSBjaGVja2VkIHRpc3N1ZVxuICAgICAgICAgICAgY29uc3QgaWQgPSAkKHRoaXMpLmF0dHIoXCJpZFwiKTtcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKFwidGlzc3VlR3JvdXBcIikpe1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaW5wdXQgaXRlbSBpcyBhIHRpc3N1ZSBncm91cFxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgdGlzc3VlIGdyb3VwIGlzIGEgc2luZ2xlLXNpdGUgZ3JvdXAgdXNpbmcgdGhlIHRpc3N1ZUdyb3VwcyBkaWN0aW9uYXJ5XG4gICAgICAgICAgICAgICAgLy8gaWYgc28sIGFkZCB0aGUgc2luZ2xlIHNpdGUgdG8gdGhlIHF1ZXJ5IGxpc3RcbiAgICAgICAgICAgICAgICBsZXQgZ3JvdXBOYW1lID0gaWQucmVwbGFjZSgvXy9nLCBcIiBcIik7IC8vIGZpcnN0IGNvbnZlcnQgdGhlIElEIGJhY2sgdG8gZ3JvdXAgbmFtZVxuICAgICAgICAgICAgICAgIGlmIChncm91cHNbZ3JvdXBOYW1lXS5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB1c2VOYW1lcz9xdWVyeVRpc3N1ZXMucHVzaChncm91cHNbZ3JvdXBOYW1lXVswXS5uYW1lKSA6IHF1ZXJ5VGlzc3Vlcy5wdXNoKGdyb3Vwc1tncm91cE5hbWVdWzBdLmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNleyAvLyB0aGlzIGlucHV0IGl0ZW0gaXMgYSB0aXNzdWUgc2l0ZVxuICAgICAgICAgICAgICAgIHVzZU5hbWVzP3F1ZXJ5VGlzc3Vlcy5wdXNoKCQoJCh0aGlzKS5zaWJsaW5ncygpWzBdKS50ZXh0KCkpOnF1ZXJ5VGlzc3Vlcy5wdXNoKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBxdWVyeVRpc3N1ZXMuZmlsdGVyKChkKT0+ZCE9PXVuZGVmaW5lZCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXApIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufVxuIl0sIm5hbWVzIjpbInhodG1sIiwibmFtZXNwYWNlcyIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJuYW1lc3BhY2UiLCJuYW1lIiwicHJlZml4IiwiaSIsImluZGV4T2YiLCJzbGljZSIsImhhc093blByb3BlcnR5Iiwic3BhY2UiLCJsb2NhbCIsImNyZWF0b3JJbmhlcml0IiwiZG9jdW1lbnQiLCJ0aGlzIiwib3duZXJEb2N1bWVudCIsInVyaSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdG9yRml4ZWQiLCJmdWxsbmFtZSIsImNyZWF0b3IiLCJub25lIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiZW1wdHkiLCJzZWxlY3RvckFsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXRjaGVyIiwibWF0Y2hlcyIsInNwYXJzZSIsInVwZGF0ZSIsIkFycmF5IiwibGVuZ3RoIiwiRW50ZXJOb2RlIiwicGFyZW50IiwiZGF0dW0iLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJjaGlsZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJrZXlQcmVmaXgiLCJiaW5kSW5kZXgiLCJncm91cCIsImVudGVyIiwiZXhpdCIsImRhdGEiLCJub2RlIiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJjYWxsIiwiYXNjZW5kaW5nIiwiYSIsImIiLCJOYU4iLCJhdHRyUmVtb3ZlIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0clJlbW92ZU5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJhdHRyQ29uc3RhbnQiLCJ2YWx1ZSIsInNldEF0dHJpYnV0ZSIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJ2IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJhdHRyRnVuY3Rpb25OUyIsImRlZmF1bHRWaWV3Iiwic3R5bGVSZW1vdmUiLCJzdHlsZSIsInJlbW92ZVByb3BlcnR5Iiwic3R5bGVDb25zdGFudCIsInByaW9yaXR5Iiwic2V0UHJvcGVydHkiLCJzdHlsZUZ1bmN0aW9uIiwic3R5bGVWYWx1ZSIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRDb21wdXRlZFN0eWxlIiwicHJvcGVydHlSZW1vdmUiLCJwcm9wZXJ0eUNvbnN0YW50IiwicHJvcGVydHlGdW5jdGlvbiIsImNsYXNzQXJyYXkiLCJzdHJpbmciLCJ0cmltIiwic3BsaXQiLCJjbGFzc0xpc3QiLCJDbGFzc0xpc3QiLCJfbm9kZSIsIl9uYW1lcyIsImdldEF0dHJpYnV0ZSIsImNsYXNzZWRBZGQiLCJuYW1lcyIsImxpc3QiLCJuIiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsInJlbW92ZSIsImNsYXNzZWRUcnVlIiwiY2xhc3NlZEZhbHNlIiwiY2xhc3NlZEZ1bmN0aW9uIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwidGV4dENvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsImh0bWxDb25zdGFudCIsImh0bWxGdW5jdGlvbiIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwiY29uc3RhbnROdWxsIiwicmVtb3ZlQ2hpbGQiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93IiwiY2xvbmUiLCJjbG9uZU5vZGUiLCJzZWxlY3Rpb25fY2xvbmVEZWVwIiwicHVzaCIsImpvaW4iLCJzcGxpY2UiLCJjb250YWlucyIsImZpbHRlckV2ZW50cyIsImV2ZW50IiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImluZGV4IiwiY29udGV4dExpc3RlbmVyIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsImV2ZW50MCIsIm9uUmVtb3ZlIiwidHlwZW5hbWUiLCJvbiIsIl9fb24iLCJvIiwiaiIsIm0iLCJ0eXBlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhcHR1cmUiLCJvbkFkZCIsIndyYXAiLCJkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJwYXJhbXMiLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJkaXNwYXRjaENvbnN0YW50IiwiZGlzcGF0Y2hGdW5jdGlvbiIsInJvb3QiLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic2VsZWN0aW9uIiwic2VsZWN0Iiwic291cmNlRXZlbnQiLCJzb3VyY2UiLCJjdXJyZW50IiwicG9pbnQiLCJvd25lclNWR0VsZW1lbnQiLCJjcmVhdGVTVkdQb2ludCIsIngiLCJjbGllbnRYIiwieSIsImNsaWVudFkiLCJtYXRyaXhUcmFuc2Zvcm0iLCJnZXRTY3JlZW5DVE0iLCJpbnZlcnNlIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJjbGllbnRMZWZ0IiwidG9wIiwiY2xpZW50VG9wIiwibW91c2UiLCJjaGFuZ2VkVG91Y2hlcyIsInNlbGVjdEFsbCIsInN1Ymdyb3VwcyIsInN1Ym5vZGUiLCJzdWJncm91cCIsImZpbHRlciIsIm1hdGNoIiwic2l6ZSIsImVhY2giLCJiaW5kIiwiY29uc3RhbnQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJwcmV2aW91cyIsImkwIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsIm1hcCIsIm9uZW50ZXIiLCJvbnVwZGF0ZSIsIm9uZXhpdCIsImFwcGVuZCIsIm1lcmdlIiwib3JkZXIiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJNYXRoIiwibWluIiwibWVyZ2VzIiwiZ3JvdXAwIiwiZ3JvdXAxIiwic29ydCIsImNvbXBhcmUiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJjYWxsYmFjayIsIm5vZGVzIiwiYXR0ciIsImdldEF0dHJpYnV0ZU5TIiwicHJvcGVydHkiLCJjbGFzc2VkIiwidGV4dCIsImh0bWwiLCJjcmVhdGUiLCJpbnNlcnQiLCJiZWZvcmUiLCJkZWVwIiwidCIsInR5cGVuYW1lcyIsInBhcnNlVHlwZW5hbWVzIiwiZGlzcGF0Y2giLCJNYXAiLCJvYmplY3QiLCJmIiwic2V0IiwiaXNBcnJheSIsIm5lc3QiLCJzb3J0VmFsdWVzIiwicm9sbHVwIiwia2V5cyIsInNvcnRLZXlzIiwiYXJyYXkiLCJkZXB0aCIsImNyZWF0ZVJlc3VsdCIsInNldFJlc3VsdCIsInZhbHVlcyIsInZhbHVlc0J5S2V5IiwicmVzdWx0IiwiZ2V0IiwiZW50cmllcyIsInNvcnRLZXkiLCJrIiwiY3JlYXRlT2JqZWN0Iiwic2V0T2JqZWN0IiwiY3JlYXRlTWFwIiwic2V0TWFwIiwiU2V0IiwiaGFzIiwiY2xlYXIiLCJwcm90byIsImFzY2VuZGluZ0Jpc2VjdCIsImxvIiwiaGkiLCJtaWQiLCJyaWdodCIsImJpc2VjdFJpZ2h0IiwibnVtYmVyJDIiLCJkZXZpYXRpb24iLCJ2YWx1ZW9mIiwiZGVsdGEiLCJtZWFuIiwic3VtIiwiaXNOYU4iLCJudW1iZXIiLCJ2YXJpYW5jZSIsInNxcnQiLCJleHRlbnQiLCJtYXgiLCJyYW5nZSIsInN0YXJ0Iiwic3RvcCIsInN0ZXAiLCJjZWlsIiwiZTEwIiwiZTUiLCJlMiIsInRpY2tJbmNyZW1lbnQiLCJjb3VudCIsInBvd2VyIiwiZmxvb3IiLCJsb2ciLCJMTjEwIiwiZXJyb3IiLCJwb3ciLCJxdWFudGlsZSIsInAiLCJ2YWx1ZTAiLCJtZWRpYW4iLCJudW1iZXJzIiwiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3IiwiRXJyb3IiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJmbGF0IiwiY29uY2F0IiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJvYmoiLCJub2RlVHlwZSIsIml0ZW0iLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJkb2MiLCJ2YWwiLCJzY3JpcHQiLCJoZWFkIiwidG9UeXBlIiwidmVyc2lvbiIsInJodG1sU3VmZml4IiwialF1ZXJ5IiwiY29udGV4dCIsImZuIiwiaW5pdCIsImlzQXJyYXlMaWtlIiwibm9kZU5hbWUiLCJlbGVtIiwidG9Mb3dlckNhc2UiLCJqcXVlcnkiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJwcmV2T2JqZWN0IiwiZmlyc3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiZW5kIiwiZXh0ZW5kIiwib3B0aW9ucyIsImNvcHkiLCJjb3B5SXNBcnJheSIsInRhcmdldCIsImlzUGxhaW5PYmplY3QiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJtc2ciLCJub29wIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwibm9kZVZhbHVlIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJpc1hNTERvYyIsImRvY0VsZW0iLCJ0ZXN0Iiwic2Vjb25kIiwiaW52ZXJ0IiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJndWlkIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfaSIsInBvcCIsIndoaXRlc3BhY2UiLCJydHJpbUNTUyIsIlJlZ0V4cCIsImJ1cCIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJlc2NhcGVTZWxlY3RvciIsInNlbCIsInByZWZlcnJlZERvYyIsInB1c2hOYXRpdmUiLCJFeHByIiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJib29sZWFucyIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwicmNvbW1hIiwicmxlYWRpbmdDb21iaW5hdG9yIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlIiwibm9uSGV4IiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJzZXREb2N1bWVudCIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsImNoaWxkTm9kZXMiLCJlIiwiZWxzIiwiZmluZCIsInNlZWQiLCJuaWQiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJleGVjIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b2tlbml6ZSIsInRvU2VsZWN0b3IiLCJxc2FFcnJvciIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJzdWJXaW5kb3ciLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY3NzSGFzIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsImNsYXNzTmFtZSIsImlucHV0Iiwic29ydERldGFjaGVkIiwiZXhwciIsImVsZW1lbnRzIiwibWF0Y2hlc1NlbGVjdG9yIiwiYXR0ckhhbmRsZSIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwiZXhwZWN0ZWROb2RlTmFtZSIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJ1c2VDYWNoZSIsImRpZmYiLCJsYXN0Q2hpbGQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJub3QiLCJjb21waWxlIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwiZm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiX21hdGNoSW5kZXhlcyIsImx0IiwiZ3QiLCJudGgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInBhcnNlT25seSIsInRva2VucyIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwibWF0Y2hlck91dCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZmlsdGVycyIsInVuaXF1ZSIsImdldFRleHQiLCJpc1hNTCIsInNlbGVjdG9ycyIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsImN1ciIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwiXyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJoYW5kbGVyIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93IiwiVHlwZUVycm9yIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJyZWplY3RXaXRoIiwiZ2V0RXJyb3JIb29rIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInByaW1hcnkiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJhc3luY0Vycm9yIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwic3RhY2siLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJfa2V5Iiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJhdHRycyIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJ1bnNoaWZ0Iiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsInRtcCIsImRlZmVyIiwicG51bSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsImRpc3BsYXkiLCJjc3MiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwiaGlkZSIsInRvZ2dsZSIsImRpdiIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaGVja0Nsb25lIiwibm9DbG9uZUNoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJvcHRpb24iLCJ3cmFwTWFwIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJvcHRncm91cCIsInJodG1sIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJpZ25vcmVkIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJvZmYiLCJsZXZlcmFnZU5hdGl2ZSIsImlzU2V0dXAiLCJzYXZlZCIsImlzVHJpZ2dlciIsImRlbGVnYXRlVHlwZSIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwidHJpZ2dlciIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0Iiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50IiwiZW51bWVyYWJsZSIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJwcm9wcyIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJjdHJsS2V5IiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwiYmx1ciIsImZvY3VzTWFwcGVkSGFuZGxlciIsImRvY3VtZW50TW9kZSIsInNpbXVsYXRlIiwiYXR0YWNoZXMiLCJkYXRhSG9sZGVyIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJwcmVwZW5kIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJybnVtbm9ucHgiLCJyY3VzdG9tUHJvcCIsImdldFN0eWxlcyIsIm9wZW5lciIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImlzQ3VzdG9tUHJvcCIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJvdW5kIiwicGFyc2VGbG9hdCIsInJlbGlhYmxlVHJEaW1lbnNpb25zVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwibWFyZ2luRGVsdGEiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlU2xpY2UiLCJjb2x1bW5Db3VudCIsImZsZXhHcm93IiwiZmxleFNocmluayIsImdyaWRBcmVhIiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3RhcnQiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTdGFydCIsImxpbmVIZWlnaHQiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsIm9yaWdOYW1lIiwiaXNGaW5pdGUiLCJzY3JvbGxib3hTaXplQnVnZ3kiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwiZm9yIiwiY2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzTmFtZXMiLCJjdXJWYWx1ZSIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsInJxdWVyeSIsInBhcnNlWE1MIiwicGFyc2VyRXJyb3JFbGVtIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInRyaWdnZXJIYW5kbGVyIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInMiLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwicnRyaW0iLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsImdldEd0ZXhVcmxzIiwiZGF0YXNldElkIiwic2luZ2xlQ2VsbEV4cHJlc3Npb24iLCJzaW5nbGVDZWxsRXhwcmVzc2lvblN1bW1hcnkiLCJkeW5lcXRsIiwic25wIiwidmFyaWFudElkIiwiZXhvbkV4cCIsInRyYW5zY3JpcHRFeHAiLCJqdW5jdGlvbkV4cCIsInRyYW5zY3JpcHQiLCJleG9uIiwiZ2VuZU1vZGVsIiwiZ2VuZU1vZGVsVW5maWx0ZXJlZCIsImdlbmVFeHAiLCJtZWRHZW5lRXhwIiwidG9wSW5UaXNzdWVGaWx0ZXJlZCIsInRvcEluVGlzc3VlIiwiZ2VuZUlkIiwidGlzc3VlIiwic2FtcGxlIiwicm5hc2VxQ3JhbSIsIndnc0NyYW0iLCJkeW5zcXRsIiwiZmNCaWxsaW5nIiwiZmNXb3JrU3BhY2UiLCJmY1BvcnRhbFdvcmtTcGFjZSIsInBhcnNlVGlzc3VlcyIsImZvckVhY2giLCJSZXRyaWV2ZUFsbFBhZ2luYXRlZERhdGEiLCJCYXNlVVJMIiwicGFnZVNpemUiLCJyZXRyaWV2ZWREYXRhIiwicGFnZU51bWJlciIsInJlcXVlc3RVUkwiLCJnZW5lcmF0ZVVSTCIsImZldGNoIiwicGFnaW5nX2luZm8iLCJudW1iZXJPZlBhZ2VzIiwicmVxdWVzdEJ5UGFnZSIsInBhZ2VzIiwiaW5jbHVkZXMiLCJpbml0UmFuZ2UiLCJkb21haW4iLCJpbml0SW50ZXJwb2xhdG9yIiwiaW50ZXJwb2xhdG9yIiwiaW1wbGljaXQiLCJvcmRpbmFsIiwidW5rbm93biIsImJhbmQiLCJiYW5kd2lkdGgiLCJvcmRpbmFsUmFuZ2UiLCJwYWRkaW5nSW5uZXIiLCJwYWRkaW5nT3V0ZXIiLCJhbGlnbiIsInJlc2NhbGUiLCJzZXF1ZW5jZSIsInJhbmdlUm91bmQiLCJkZWZpbmUiLCJkZWZpbml0aW9uIiwiQ29sb3IiLCJkYXJrZXIiLCJicmlnaHRlciIsInJlSSIsInJlTiIsInJlUCIsInJlSGV4IiwicmVSZ2JJbnRlZ2VyIiwicmVSZ2JQZXJjZW50IiwicmVSZ2JhSW50ZWdlciIsInJlUmdiYVBlcmNlbnQiLCJyZUhzbFBlcmNlbnQiLCJyZUhzbGFQZXJjZW50IiwibmFtZWQiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImNvbG9yX2Zvcm1hdEhleCIsInJnYiIsImZvcm1hdEhleCIsImNvbG9yX2Zvcm1hdFJnYiIsImZvcm1hdFJnYiIsImNvbG9yIiwiZm9ybWF0IiwicmdibiIsIlJnYiIsInJnYmEiLCJoc2xhIiwiciIsImciLCJyZ2JfZm9ybWF0SGV4IiwiaGV4IiwicmdiX2Zvcm1hdFJnYiIsImgiLCJIc2wiLCJoc2xDb252ZXJ0IiwiaHNsMnJnYiIsIm0yIiwiY29uc3RhbnQkMyIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwiY2hhbm5lbHMiLCJhc3NpZ24iLCJkaXNwbGF5YWJsZSIsImZvcm1hdEhzbCIsImludGVycG9sYXRlUmdiIiwicmdiR2FtbWEiLCJjb2xvclJnYiIsInNwbGluZSIsInJnYkJhc2lzIiwidjEiLCJ2MiIsInYwIiwidjMiLCJ0MSIsInQyIiwidDMiLCJiYXNpcyIsImNvbG9ycyIsIm51bWJlckFycmF5IiwiYyIsImdlbmVyaWNBcnJheSIsIm5iIiwibmEiLCJkYXRlIiwic2V0VGltZSIsImludGVycG9sYXRlTnVtYmVyIiwicmVBIiwicmVCIiwiaW50ZXJwb2xhdGVTdHJpbmciLCJhbSIsImJtIiwiYnMiLCJiaSIsImxhc3RJbmRleCIsInEiLCJ6ZXJvIiwiaW50ZXJwb2xhdGUkMSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiRGF0YVZpZXciLCJpc051bWJlckFycmF5IiwidmFsdWVPZiIsImludGVycG9sYXRlUm91bmQiLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwiZGVncmVlcyIsImlkZW50aXR5IiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJyb3RhdGUiLCJza2V3WCIsInNjYWxlWCIsInNjYWxlWSIsImRlY29tcG9zZSIsImF0YW4yIiwiYXRhbiIsImludGVycG9sYXRlVHJhbnNmb3JtIiwicHhDb21tYSIsInB4UGFyZW4iLCJkZWdQYXJlbiIsInhhIiwieWEiLCJ4YiIsInliIiwidHJhbnNsYXRlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MiLCJ0cmFuc2Zvcm0iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsIm1hdHJpeCIsIm51bWJlciQxIiwibm9ybWFsaXplIiwiY2xhbXBlciIsImJpbWFwIiwiaW50ZXJwb2xhdGUiLCJkMCIsImQxIiwicjAiLCJyMSIsInBvbHltYXAiLCJiaXNlY3QiLCJjb250aW51b3VzIiwidW50cmFuc2Zvcm0iLCJwaWVjZXdpc2UiLCJvdXRwdXQiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiY2xhbXAiLCJ1IiwidHJhbnNmb3JtZXIiLCJmb3JtYXREZWNpbWFsUGFydHMiLCJ0b0V4cG9uZW50aWFsIiwiY29lZmZpY2llbnQiLCJleHBvbmVudCIsImFicyIsInByZWZpeEV4cG9uZW50IiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwic2lnbiIsInN5bWJvbCIsImNvbW1hIiwicHJlY2lzaW9uIiwiZm9ybWF0Um91bmRlZCIsImZvcm1hdFR5cGVzIiwidG9GaXhlZCIsInRvTG9jYWxlU3RyaW5nIiwidG9QcmVjaXNpb24iLCJYIiwiaWRlbnRpdHkkMSIsImxvY2FsZSIsImZvcm1hdFByZWZpeCIsInByZWZpeGVzIiwiZm9ybWF0TG9jYWxlIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJOdW1iZXIiLCJzdWJzdHJpbmciLCJjdXJyZW5jeVByZWZpeCIsImN1cnJlbmN5IiwiY3VycmVuY3lTdWZmaXgiLCJkZWNpbWFsIiwibnVtZXJhbHMiLCJmb3JtYXROdW1lcmFscyIsIm1pbnVzIiwibmFuIiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJvdXQiLCJmb3JtYXRUcmltIiwiSW5maW5pdHkiLCJ0aWNrRm9ybWF0Iiwic3RlcDAiLCJzdGVwMSIsInRpY2tTdGVwIiwicHJlY2lzaW9uUHJlZml4IiwicHJlY2lzaW9uUm91bmQiLCJwcmVjaXNpb25GaXhlZCIsImxpbmVhcmlzaCIsInRpY2tzIiwibmljZSIsInNlcXVlbnRpYWwiLCJ0MCIsImsxMCIsIngwIiwieDEiLCJyYW1wIiwic2NoZW1lIiwiaW50ZXJwb2xhdGVSZ2JCYXNpcyIsIlBpWUciLCJQdU9yIiwiUmRCdSIsIlJkR3kiLCJSZFlsQnUiLCJCdUduIiwiT3JSZCIsIlB1QnUiLCJZbEduQnUiLCJCbHVlcyIsIkdyZWVucyIsIkdyZXlzIiwiUHVycGxlcyIsIlJlZHMiLCJPcmFuZ2VzIiwiY29sb3JDaGFydCIsInNodWZmbGUiLCJjb3VudGVyIiwic2h1ZmZsZUNvbG9ycyIsInNldENvbG9yU2NhbGUiLCJkbWluIiwiZG1heCIsInNjYWxlU2VxdWVudGlhbCIsImludGVycG9sYXRvcnMiLCJkM0Nocm9tYXRpYyIsIkdyYXlzIiwiYWxlcnQiLCJnZXRDb2xvckludGVycG9sYXRvciIsIkRlbmRyb0hlYXRtYXBDb25maWciLCJyb290VyIsImlubmVyV2lkdGgiLCJsZWZ0UGFuZWxXIiwidG9wUGFuZWxIIiwiYm90dG9tIiwiY2VsbEgiLCJhZGp1c3QiLCJsZWZ0VHJlZVBhbmVsIiwiY2VsbCIsInRvcFRyZWVQYW5lbCIsImhlYXRtYXBQYW5lbCIsImxlZ2VuZFBhbmVsIiwicGFuZWxzIiwibWFpbiIsImxlZ2VuZCIsImNyZWF0ZVN2ZyIsInN2Z0lkIiwiY2hlY2tEb21JZCIsImhpZXJhcmNoeSIsImNoaWxkcyIsIk5vZGUiLCJ2YWx1ZWQiLCJkZWZhdWx0Q2hpbGRyZW4iLCJlYWNoQmVmb3JlIiwiY29tcHV0ZUhlaWdodCIsImNvcHlEYXRhIiwiZWFjaEFmdGVyIiwicGF0aCIsImFuY2VzdG9yIiwiYU5vZGVzIiwiYW5jZXN0b3JzIiwiYk5vZGVzIiwibGVhc3RDb21tb25BbmNlc3RvciIsImRlc2NlbmRhbnRzIiwibGVhdmVzIiwibGlua3MiLCJlcHNpbG9uIiwiY2VudGVyIiwiZW50ZXJpbmciLCJfX2F4aXMiLCJheGlzIiwib3JpZW50IiwidGlja0FyZ3VtZW50cyIsInRpY2tWYWx1ZXMiLCJ0aWNrU2l6ZUlubmVyIiwidGlja1NpemVPdXRlciIsInRpY2tQYWRkaW5nIiwic3BhY2luZyIsInJhbmdlMCIsInJhbmdlMSIsInRpY2tFeGl0IiwidGlja0VudGVyIiwibGluZSIsInRyYW5zaXRpb24iLCJ0aWNrU2l6ZSIsImF4aXNCb3R0b20iLCJheGlzTGVmdCIsIkRlbmRyb2dyYW0iLCJuZXdpY2siLCJvcmllbnRhdGlvbiIsInBvc3RvcmRlciIsInRyZWUiLCJzdWJ0cmVlIiwiYnJhbmNoc2V0IiwicGFyc2VOZXdpY2siLCJ4U2NhbGUiLCJ5U2NhbGUiLCJkcmF3IiwiZG9tIiwiX3NldFhTY2FsZSIsIl9zZXRZU2NhbGUiLCJfZHJhd0hUcmVlIiwiX2RyYXdWVHJlZSIsInNldFkiLCJyZWR1Y2UiLCJzZXRYIiwiX2dldEJyYW5jaExlbmd0aFRvUm9vdCIsIl9zb3J0Tm9kZXNCeUxldmVsIiwiaW5vZGVzIiwiX2dldE1heEJyYW5jaExlbmd0aCIsIl9hc3NpZ25Qb3N0b3JkZXIiLCJzY2FsZUxpbmVhciIsInNjYWxlQmFuZCIsIlRvb2xiYXIiLCJkb21JZCIsInRvb2x0aXAiLCJ2ZXJ0aWNhbCIsImJ0bkNsYXNzZXMiLCJiYXIiLCJjcmVhdGVEb3dubG9hZFN2Z0J1dHRvbiIsIm91dGZpbGVOYW1lIiwiY2xvbmVJZCIsImljb24iLCJjcmVhdGVCdXR0b24iLCJkb3dubG9hZFN2ZyIsImNyZWF0ZVJlc2V0QnV0dG9uIiwiJGJ1dHRvbiIsInN0YXJ0c1dpdGgiLCJhdHRhY2hUb29sdGlwIiwiZmlsZU5hbWUiLCJzdmdPYmoiLCIkc3ZnQ29weSIsInVzZWQiLCJzaGVldHMiLCJzdHlsZVNoZWV0cyIsImNzc1J1bGVzIiwicnVsZXMiLCJydWxlIiwic2VsZWN0b3JUZXh0IiwicGFyc2VDc3NTdHlsZXMiLCJzdmdIdG1sIiwic3ZnQmxvYiIsIkJsb2IiLCJzYXZlQXMiLCJEaXNwYXRjaCIsIm5vZXZlbnQkMSIsIlQiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwiZnJhbWUiLCJwb2tlRGVsYXkiLCJjbG9ja0xhc3QiLCJjbG9ja05vdyIsImNsb2NrU2tldyIsImNsb2NrIiwicGVyZm9ybWFuY2UiLCJzZXRGcmFtZSIsImNsZWFyTm93IiwiVGltZXIiLCJfY2FsbCIsIl90aW1lIiwicmVzdGFydCIsIndha2UiLCJ0aW1lckZsdXNoIiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZWxhcHNlZCIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiQ1JFQVRFRCIsIlNDSEVEVUxFRCIsIlNUQVJUSU5HIiwiU1RBUlRFRCIsIlJVTk5JTkciLCJFTkRJTkciLCJFTkRFRCIsInRpbWluZyIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsImVhc2UiLCJpbnRlcnJ1cHQiLCJ0d2VlblJlbW92ZSIsInR3ZWVuMCIsInR3ZWVuMSIsInR3ZWVuRnVuY3Rpb24iLCJ0d2VlblZhbHVlIiwiX2lkIiwidmFsdWUxIiwic3RyaW5nMDAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcxIiwic3RyaW5nMCIsInN0cmluZzEwIiwiYXR0clR3ZWVuTlMiLCJhdHRySW50ZXJwb2xhdGVOUyIsIl92YWx1ZSIsImF0dHJUd2VlbiIsImF0dHJJbnRlcnBvbGF0ZSIsImRlbGF5RnVuY3Rpb24iLCJkZWxheUNvbnN0YW50IiwiZHVyYXRpb25GdW5jdGlvbiIsImR1cmF0aW9uQ29uc3RhbnQiLCJUcmFuc2l0aW9uIiwiX25hbWUiLCJuZXdJZCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJpbmhlcml0IiwiaWQwIiwiaWQxIiwib24wIiwib24xIiwic2l0IiwiZXZlcnkiLCJvbkZ1bmN0aW9uIiwic3R5bGVUd2VlbiIsInN0eWxlTnVsbCIsImxpc3RlbmVyMCIsInN0eWxlTWF5YmVSZW1vdmUiLCJzdHlsZUludGVycG9sYXRlIiwidGV4dFR3ZWVuIiwidGV4dEludGVycG9sYXRlIiwicmVtb3ZlRnVuY3Rpb24iLCJlYXNlQ29uc3RhbnQiLCJQcm9taXNlIiwiY2FuY2VsIiwiZGVmYXVsdFRpbWluZyIsImNvbnN0YW50JDEiLCJCcnVzaEV2ZW50Iiwibm9wcm9wYWdhdGlvbiIsIm5vZXZlbnQiLCJNT0RFX0RSQUciLCJNT0RFX1NQQUNFIiwiTU9ERV9IQU5ETEUiLCJNT0RFX0NFTlRFUiIsIm51bWJlcjEiLCJudW1iZXIyIiwidG91Y2hlciIsInRvdWNoIiwiaGFuZGxlcyIsInh5IiwiWSIsIlhZIiwiY3Vyc29ycyIsIm92ZXJsYXkiLCJudyIsIm5lIiwic2UiLCJzdyIsImZsaXBYIiwiZmxpcFkiLCJzaWduc1giLCJzaWduc1kiLCJkZWZhdWx0RmlsdGVyIiwiZGVmYXVsdEV4dGVudCIsImhhc0F0dHJpYnV0ZSIsInZpZXdCb3giLCJkZWZhdWx0VG91Y2hhYmxlIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJfX2JydXNoIiwiYnJ1c2giLCJkaW0iLCJ0b3VjaGVuZGluZyIsInRvdWNoYWJsZSIsImxpc3RlbmVycyIsImhhbmRsZVNpemUiLCJpbml0aWFsaXplIiwicmVkcmF3Iiwic3RhcnRlZCIsInRvdWNobW92ZWQiLCJ0b3VjaGVuZGVkIiwiZW1pdHRlciIsImNsZWFuIiwiZW1pdCIsIkVtaXR0ZXIiLCJ3MCIsIncxIiwibjAiLCJuMSIsImUwIiwiZTEiLCJzMCIsInMxIiwibW92aW5nIiwibG9ja1giLCJsb2NrWSIsIm1vZGUiLCJzaWduWCIsInNpZ25ZIiwiVyIsIk4iLCJFIiwiUyIsImR4IiwiZHkiLCJzaGlmdGluZyIsInBvaW50ZXIiLCJwb2ludDAiLCJiZWZvcmVzdGFydCIsIm1vdmVkIiwiZW5kZWQiLCJrZXlkb3duZWQiLCJrZXl1cHBlZCIsIl9fbm9zZWxlY3QiLCJNb3pVc2VyU2VsZWN0IiwiZHJhZ0Rpc2FibGUiLCJwb2ludDEiLCJtb3ZlIiwibm9jbGljayIsImRyYWdFbmFibGUiLCJzZWxlY3Rpb24wIiwic2VsZWN0aW9uMSIsInN0YXJ0aW5nIiwiY3VzdG9tRXZlbnQiLCJrZXlNb2RpZmllcnMiLCJwaSIsInRhdSIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwiZGVmYXVsdFNvdXJjZSIsIm1vdmVUbyIsImNsb3NlUGF0aCIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJ5MSIsImJlemllckN1cnZlVG8iLCJ4MiIsInkyIiwiYXJjVG8iLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3Iiwic2luIiwiY3ciLCJkYSIsInNvdXJjZVJhbmRvbVVuaWZvcm0iLCJyYW5kb21Vbmlmb3JtIiwicmFuZG9tTm9ybWFsIiwic291cmNlUmFuZG9tTm9ybWFsIiwibXUiLCJzaWdtYSIsInNvdXJjZVJhbmRvbUxvZ05vcm1hbCIsInJhbmRvbUxvZ05vcm1hbCIsIm5vcm1hbCIsImV4cCIsImlyd2luSGFsbCIsInNvdXJjZVJhbmRvbUlyd2luSGFsbCIsInJhbmRvbUlyd2luSGFsbCIsIkxpbmVhciIsImN1cnZlTGluZWFyIiwiYXJlYSIsInBvaW50WCIsInBvaW50WSIsImRlZmluZWQiLCJjdXJ2ZSIsImJ1ZmZlciIsImRlZmluZWQwIiwieDB6IiwieTB6IiwiYXJlYVN0YXJ0IiwibGluZVN0YXJ0IiwibGluZUVuZCIsImFyZWFFbmQiLCJhcmVhbGluZSIsImxpbmVYMCIsImxpbmVZMCIsImxpbmVZMSIsImxpbmVYMSIsIlJlZEJsYWNrVHJlZSIsIlJlZEJsYWNrTm9kZSIsIlUiLCJDIiwiTCIsIlIiLCJQIiwiUmVkQmxhY2tSb3RhdGVMZWZ0IiwiUmVkQmxhY2tSb3RhdGVSaWdodCIsIlJlZEJsYWNrRmlyc3QiLCJjcmVhdGVFZGdlIiwiZWRnZSIsImVkZ2VzIiwic2V0RWRnZUVuZCIsImNlbGxzIiwiaGFsZmVkZ2VzIiwiY3JlYXRlQm9yZGVyRWRnZSIsInZlcnRleCIsImNsaXBFZGdlIiwiYXgiLCJheSIsImNvbm5lY3RFZGdlIiwiZm0iLCJmYiIsImx4IiwibHkiLCJyeCIsInJ5IiwiZnkiLCJjZWxsSGFsZmVkZ2VBbmdsZSIsInNpdGUiLCJ2YSIsInZiIiwiY2VsbEhhbGZlZGdlU3RhcnQiLCJjZWxsSGFsZmVkZ2VFbmQiLCJzb3VyY2VSYW5kb21CYXRlcyIsInJhbmRvbUJhdGVzIiwic291cmNlUmFuZG9tRXhwb25lbnRpYWwiLCJyYW5kb21FeHBvbmVudGlhbCIsImxhbWJkYSIsIl9saW5lIiwiX3BvaW50IiwiZ3JhbmRwYSIsInVuY2xlIiwiZmlyc3RDaXJjbGUiLCJjaXJjbGVQb29sIiwiQ2lyY2xlIiwiY3kiLCJhdHRhY2hDaXJjbGUiLCJsQXJjIiwickFyYyIsImxTaXRlIiwiY1NpdGUiLCJyU2l0ZSIsImJ4IiwiYnkiLCJjeCIsImVwc2lsb24yIiwiaGEiLCJoYyIsImNpcmNsZSIsImNpcmNsZXMiLCJkZXRhY2hDaXJjbGUiLCJiZWFjaFBvb2wiLCJCZWFjaCIsImNyZWF0ZUJlYWNoIiwiYmVhY2giLCJkZXRhY2hCZWFjaCIsImJlYWNoZXMiLCJyZW1vdmVCZWFjaCIsImRpc2FwcGVhcmluZyIsImlBcmMiLCJuQXJjcyIsImFkZEJlYWNoIiwiZHhsIiwiZHhyIiwiZGlyZWN0cml4IiwibGVmdEJyZWFrUG9pbnQiLCJyaWdodEJyZWFrUG9pbnQiLCJjcmVhdGVDZWxsIiwibmV3QXJjIiwiaGIiLCJyZm9jeCIsInJmb2N5IiwicGJ5MiIsImxmb2N4IiwibGZvY3kiLCJwbGJ5MiIsImhsIiwiYWJ5MiIsImxleGljb2dyYXBoaWMiLCJEaWFncmFtIiwic2l0ZXMiLCJzb3J0Q2VsbEhhbGZlZGdlcyIsImNsaXBFZGdlcyIsImlDZWxsIiwiaUhhbGZlZGdlIiwibkhhbGZlZGdlcyIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwibkNlbGxzIiwiY292ZXIiLCJkMiIsImRjIiwidjAwIiwidjAxIiwidjExIiwidjEwIiwiY2xpcENlbGxzIiwiVHJhbnNmb3JtIiwicG9seWdvbnMiLCJwb2x5Z29uIiwidHJpYW5nbGVzIiwicmFkaXVzIiwiX2ZvdW5kIiwidngiLCJ2eSIsImFwcGx5WCIsImFwcGx5WSIsImludmVydFgiLCJpbnZlcnRZIiwicmVzY2FsZVgiLCJyZXNjYWxlWSIsIlRvb2x0aXAiLCJ2ZXJib3NlIiwiaW5mbyIsImVkaXQiLCJkMyIsIkhlYXRtYXAiLCJ1c2VMb2ciLCJsb2dCYXNlIiwiY29sb3JTY2hlbWUiLCJ0b29sdGlwSWQiLCJ0b29sdGlwQ3NzQ2xhc3MiLCJudWxsQ29sb3IiLCJjb2xvclNjYWxlIiwieExpc3QiLCJ5TGlzdCIsInRvb2xiYXIiLCJjcmVhdGVUb29sYmFyIiwiZHJhd0NvbG9yTGVnZW5kIiwibGVnZW5kQ29uZmlnIiwidGl0bGUiLCJjb25maWciLCJkaXZlcmdpbmciLCJkaW1lbnNpb25zIiwiYW5nbGUiLCJ1c2VOdWxsQ29sb3IiLCJjb2x1bW5MYWJlbFBvc0FkanVzdCIsInlsYWJlbFBsYWNlbWVudCIsIl9zZXRDb2xvclNjYWxlIiwieExhYmVscyIsImNlbGxNb3VzZW92ZXIiLCJjZWxsTW91c2VvdXQiLCJfbG9nIiwic3Ryb2tlIiwicm93Q2xhc3MiLCJjb2xDbGFzcyIsImRpc3BsYXlWYWx1ZSIsIm5ld0xpc3QiLCJEZW5kcm9IZWF0bWFwIiwiY29sdW1uVHJlZSIsInJvd1RyZWUiLCJoZWF0bWFwRGF0YSIsImhlYXRtYXAiLCJleHRlcm5hbCIsIm9iamVjdHMiLCJ2aXN1YWxDb21wb25lbnRzIiwicmVuZGVyIiwic2hvd0NvbHVtblRyZWUiLCJzaG93Um93VHJlZSIsImxlZ2VuZFBvcyIsInhsaXN0IiwieWxpc3QiLCJfdXBkYXRlQ29uZmlnIiwiX3JlbmRlclRyZWUiLCJfcmVuZGVySGVhdG1hcCIsImRpcmVjdGlvbiIsImxhYmVsQ2xhc3MiLCJpZHMiLCJsYWJlbCIsInJvd3MiLCJrZXJuZWwiLCJrZXJuZWxCYW5kd2lkdGgiLCJHcm91cGVkVmlvbGluIiwiZ3JvdXBJbmZvIiwiX3Nhbml0eUNoZWNrIiwic2V0WURvbWFpbiIsInlEb21haW4iLCJhbGxWIiwieERvbWFpbiIsInhBeGlzQ29uZmlnIiwidGV4dEFuY2hvciIsImFkanVzdEhlaWdodCIsInNob3dMYWJlbHMiLCJzaG93VGlja3MiLCJzdWJYQXhpc0NvbmZpZyIsInlBeGlzQ29uZmlnIiwic2l6ZUF4aXNDb25maWciLCJzaG93V2hpc2tlciIsInNob3dEaXZpZGVyIiwic2hvd0xlZ2VuZCIsInNob3dPdXRsaWVycyIsIm51bVBvaW50cyIsInZDb2xvciIsImtkZU9wdGlvbiIsInN1YngiLCJ6Iiwid2hpc2tlciIsIm91dGxpZXJzIiwiZGl2aWRlciIsInBvaW50cyIsIl9yZW5kZXJHcm91cEluZm9UZXh0IiwiZ2V0U3ViWERvbWFpbiIsImVudHJ5IiwiX2RyYXdWaW9saW4iLCJfcmVuZGVyU2l6ZUF4aXMiLCJfcmVuZGVyU3ViWEF4aXMiLCJfcmVuZGVyWEF4aXMiLCJfcmVuZGVyWUF4aXMiLCJfYWRkR3JvdXBEaXZpZGVyIiwiX2FkZExlZ2VuZCIsImFkZFBsb3RUaXRsZSIsImNyZWF0ZVRvb2x0aXAiLCJhZGRCcnVzaCIsInRoZUJydXNoIiwiaWRlbFRpbWVvdXQiLCJsb3dCb3VuZCIsInVwcGVyQm91bmQiLCJ4QXhpcyIsInlBeGlzIiwiZ2ciLCJxMSIsInEzIiwibWVkIiwidXBkYXRlRGF0YSIsInVwZGF0ZVlTY2FsZSIsInVwZGF0ZVhTY2FsZSIsInlMYWJlbCIsImdJbmRleCIsInJlc2V0WlNjYWxlIiwiek1heCIsInZlcnRpY2VzIiwiX2dlbmVyYXRlVmVydGljZXMiLCJ2aW9saW5HIiwiX3ZhbGlkVmVydGljZXMiLCJpcXIiLCJjdXRvZmYiLCJ1cHBlciIsIl9yZW5kZXJWaW9saW5TaGFwZSIsInNob3dCb3hwbG90IiwiX3JlbmRlckJveFBsb3QiLCJfcmVuZGVyRGF0YURvdHMiLCJzaG93UG9pbnRzIiwiaXNFdmVuTnVtYmVyIiwib2RkQ29sb3IiLCJldmVuQ29sb3IiLCJ2aW9saW4iLCJzaG93SGFsZlZpb2xpbiIsImdldENvbG9yIiwidlBhdGgiLCJhbHRDb2xvciIsImppdHRlciIsImdldFgiLCJsZWdlbmRHIiwiaGlkZUxhYmVscyIsIkF4aXMiLCJoaWRlVGlja3MiLCJnZXRCQm94Iiwic2l6ZU1hcHBlciIsInNpemVBeGlzIiwic2l6ZUciLCJzdWJYQXhpcyIsInN1YnhHIiwia2RlIiwiViIsImtlcm5lbERlbnNpdHlFc3RpbWF0b3IiLCJlRG9tYWluIiwic2NvdHRzRmFjdG9yIiwid0ZhY3RvciIsIm5vcm0iLCJrZGVTY290dCIsImNyZWF0ZURhdGFzZXRNZW51IiwidGlzc3VlcyIsInRpc3N1ZVNpdGVEZXRhaWxJZCIsInRpc3N1ZVNpdGVEZXRhaWwiLCJzZWxlY3QyIiwicGxhY2Vob2xkZXIiLCJjcmVhdGVUaXNzdWVNZW51IiwibGF1bmNoVG9wRXhwcmVzc2VkIiwidGlzc3VlSWQiLCJoZWF0bWFwUm9vdElkIiwidmlvbGluUm9vdElkIiwidXJscyIsImZpbHRlckdlbmVzIiwiJGZpbHRlckluZm9EaXYiLCJSZXRyaWV2ZU9uZVBhZ2UiLCJ0b3BHZW5lTGlzdCIsImdlbmNvZGVJZCIsInNlYXJjaEJ5SWQiLCJfc3R5bGVTZWxlY3RlZFRpc3N1ZSIsImxhdW5jaCIsImZvcm1JZCIsIm1lbnVJZCIsInN1Ym1pdElkIiwidGlzc3VlR3JvdXBzIiwiZm9yRXF0bCIsImludmFsaWRUaXNzdWVzIiwicm5hU2VxQW5kR2Vub3R5cGVTYW1wbGVDb3VudCIsImdyb3VwTmFtZSIsInRpc3N1ZVNpdGUiLCJwYXJzZVRpc3N1ZVNpdGVzIiwiY2hlY2tBbGwiLCJzZWN0aW9ucyIsIm1haW5DbGFzcyIsIiRhbGxUaXNzdWVEaXYiLCJjaGFuZ2UiLCJncm91cE5hbWVzIiwicm93c1BlclNlY3Rpb24iLCJyb3dzUmVtYWluIiwiY29sU2l6ZSIsInNlY3Rpb25Eb21zIiwiY3VyclNlY3Rpb24iLCJnbmFtZSIsImdJZCIsImdyb3VwTGVuIiwiJGN1cnJlbnREb20iLCIkc2l0ZURvbSIsImNyZWF0ZVRpc3N1ZUdyb3VwTWVudSIsImdsaXN0IiwicXVlcnlUaXNzdWVJZHMiLCJ1c2VOYW1lcyIsInF1ZXJ5VGlzc3VlcyIsInBhcnNlVGlzc3VlR3JvdXBNZW51IiwidGxpc3QiLCJxVGlzc3VlIiwiJG1lc3NhZ2UiLCJwcm9taXNlcyIsImFsbCIsImdlbmVzIiwic2luZ2xlIiwiZmlsdGVyZWQiLCJnZW5lU3ltYm9sVXBwZXIiLCJwYXJzZUdlbmVzIiwiYWxsSWRzIiwibWlzc2luZ0dlbmVzIiwiX3ZhbGlkYXRlR2VuZXMiLCJnUXVlcnkiLCJ0UXVlcnkiLCJSZXRyaWV2ZU5vblBhZ2luYXRlZERhdGEiLCJlRGF0YSIsImRhdGFNZXNzYWdlIiwiX3ZhbGlkYXRlRXhwcmVzc2lvbkRhdGEiLCJleHByZXNzaW9uIiwicGFyc2VNZWRpYW5FeHByZXNzaW9uIiwic2F2ZSIsImNsdXN0ZXIiLCJtYXhDZWxsVyIsIm1pbkNlbGxXIiwiY2VsbFciLCJkbWFwTWFyZ2luIiwiZG1hcCIsImNsdXN0ZXJzIiwiZ2VuZSIsInRpc3N1ZURpY3QiLCJnZW5lRGljdCIsImdlbmVTeW1ib2wiLCJfYWRkVGlzc3VlQ29sb3JzIiwiX19hZGRGaWx0ZXIiLCJfX2FkZFNvcnRUaXNzdWVzIiwiX3NvcnRUaXNzdWVzIiwiX19hZGRDbHVzdGVyVGlzc3VlcyIsIl9hZGRUb29sQmFyIiwidG9vbHRpcERhdGEiLCJ5bGFiZWxDbGljayIsImFjdGlvbiIsIl9yZW5kZXJWaW9saW5IZWxwZXIiLCJkZCIsImxvZzEwIiwicGFyc2VHZW5lRXhwcmVzc2lvbkZvclZpb2xpbiIsIl9yZW5kZXJWaW9saW5QbG90IiwiX2N1c3RvbWl6ZU1vdXNlRXZlbnRzIiwiY29sb3JIZXgiLCJjaGFydCIsInJvb3RJZCIsInRpc3N1ZU9yZGVyIiwiZ0NvdW50cyIsIl9zZXRWaW9saW5QbG90TWFyZ2lucyIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsIl9zZXRWaW9saW5QbG90RGltZW5zaW9ucyIsInhDb25maWciLCJ2aW9saW5MZWdlbmRXIiwic3ZnVyIsInBsb3QiLCJsb2MiLCJfbW92ZVhBeGlzIiwieEF4aXNUZXh0IiwidGlzc3VlRyIsIl9hZGRWaW9saW5UaXNzdWVDb2xvckJhbmQiLCJfY2hhbmdlVmlvbGluWExhYmVsIiwiX2NoYW5nZVZpb2xpblRvb2x0aXAiLCJxSWQiLCJFeHByZXNzaW9uTWFwIl0sIm1hcHBpbmdzIjoibVNBQU8sSUFBSUEsRUFBUSwrQkFFSkMsRUFBQSxDQUNiQyxJQUFLLDZCQUNMRixNQUFPQSxFQUNQRyxNQUFPLCtCQUNQQyxJQUFLLHVDQUNMQyxNQUFPLGlDQ0xNLFNBQVFDLEVBQUNDLEdBQ3RCLElBQUlDLEVBQVNELEdBQVEsR0FBSUUsRUFBSUQsRUFBT0UsUUFBUSxLQUU1QyxPQURJRCxHQUFLLEdBQXFDLFdBQS9CRCxFQUFTRCxFQUFLSSxNQUFNLEVBQUdGLE1BQWlCRixFQUFPQSxFQUFLSSxNQUFNRixFQUFJLElBQ3RFUixFQUFXVyxlQUFlSixHQUFVLENBQUNLLE1BQU9aLEVBQVdPLEdBQVNNLE1BQU9QLEdBQVFBLENBQ3hGLENDSEEsU0FBU1EsRUFBZVIsR0FDdEIsT0FBTyxXQUNMLElBQUlTLEVBQVdDLEtBQUtDLGNBQ2hCQyxFQUFNRixLQUFLRyxhQUNmLE9BQU9ELElBQVFuQixHQUFTZ0IsRUFBU0ssZ0JBQWdCRCxlQUFpQnBCLEVBQzVEZ0IsRUFBU00sY0FBY2YsR0FDdkJTLEVBQVNPLGdCQUFnQkosRUFBS1osRUFDeEMsQ0FDQSxDQUVBLFNBQVNpQixFQUFhQyxHQUNwQixPQUFPLFdBQ0wsT0FBT1IsS0FBS0MsY0FBY0ss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RUFBSzFOLE9BQU85ZSxPQUFPQyxLQUV0Q3VzQixFQUFLbk0sUUFBUUYsUUFBUS9SLE9BQU81SyxFQUFLbWQsRUFBTzZMLEVBQUtuTSxRQUFRRixRQUFRM0IsTUFBT1EsR0FHcEV6bEUsR0FBVSxtQkFDTDRDLE1BQU10RixRQUFzQnVPLElBQWhCdW5FLEVBQVc5MUUsR0FBZUEsRUFBRTgxRSxFQUFXOTFFLEdBQUcrd0UsbUJBQ3REMXJFLFFBQVEsU0FBUyxHQUN0QjR3RSxHQUFpQk4sRUFBTUcsUUFHYnZuRSxJQUFONnBFLEdBQWlCdEcsR0FBcUJzRyxHQUcxQ2gzRSxHQUFPLGVBQWVwRyxNQUFNLFVBQVcsR0FHdkMwSCxHQUFVLG1CQUFtQjJDLFFBQVEsV0FBVyxHQUNoRHN3RSxFQUFLejhFLEtBQUtxd0UsY0FBV2g3RCxDQUV6QixDQUVPLElBQUk4cEUsR0FBZ0IsQ0FDdkJ6SCxrQkFBbUJBLEdBQ25CTyxtQkFBb0JBLEdBQ3BCWSxPQUFRQSxHQUNSRixXQUFZQSIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswLDEsMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLDYyLDY1LDY2LDY3LDY4LDY5LDcwLDcxLDcyLDczLDc0LDc1LDc2LDc3LDc4LDc5LDgwLDgxLDgyLDgzLDg0LDg1LDg2LDg3LDg4LDg5LDkwLDkxLDkyLDkzLDk0LDk1LDk2LDk3LDk4LDk5LDEwMCwxMDEsMTAyLDEwMywxMDQsMTA1LDEwNiwxMDcsMTA4LDEwOSwxMTAsMTExLDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTIzLDEyNSwxMjgsMTI5LDEzMCwxMzEsMTMyLDEzMywxMzQsMTM1LDEzNiwxMzcsMTM4LDEzOSwxNDAsMTQxLDE0MiwxNDcsMTQ4LDE0OSwxNTAsMTUxLDE1MiwxNTMsMTU0LDE1NSwxNTYsMTU3LDE1OCwxNTksMTYwLDE2MSwxNjIsMTYzLDE2NCwxNjUsMTY2LDE2NywxNjgsMTY5LDE3MCwxNzEsMTcyLDE3MywxNzQsMTc1LDE3NiwxNzcsMTc4LDE3OSwxODAsMTgxLDE4MiwxODMsMTg0LDE4NSwxODYsMTg3LDE4OCwxODksMTkwLDE5MSwxOTIsMTkzLDE5NCwxOTUsMTk2LDE5NywxOTgsMTk5LDIwMCwyMDEsMjAyLDIwMywyMTFdfQ==
