!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("file-saver")):"function"==typeof define&&define.amd?define(["exports","file-saver"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).TranscriptBrowser={},t.saveAs)}(this,(function(t,e){"use strict";var n="http://www.w3.org/1999/xhtml",r={svg:"http://www.w3.org/2000/svg",xhtml:n,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function i(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),r.hasOwnProperty(e)?{space:r[e],local:t}:t}function o(t){return function(){var e=this.ownerDocument,r=this.namespaceURI;return r===n&&e.documentElement.namespaceURI===n?e.createElement(t):e.createElementNS(r,t)}}function a(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function s(t){var e=i(t);return(e.local?a:o)(e)}function l(){}function c(t){return null==t?l:function(){return this.querySelector(t)}}function u(){return[]}function f(t){return null==t?u:function(){return this.querySelectorAll(t)}}function h(t){return function(){return this.matches(t)}}function d(t){return new Array(t.length)}function p(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}p.prototype={constructor:p,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var g="$";function m(t,e,n,r,i,o){for(var a,s=0,l=e.length,c=o.length;s<c;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new p(t,o[s]);for(;s<l;++s)(a=e[s])&&(i[s]=a)}function v(t,e,n,r,i,o,a){var s,l,c,u={},f=e.length,h=o.length,d=new Array(f);for(s=0;s<f;++s)(l=e[s])&&(d[s]=c=g+a.call(l,l.__data__,s,e),c in u?i[s]=l:u[c]=l);for(s=0;s<h;++s)(l=u[c=g+a.call(t,o[s],s,o)])?(r[s]=l,l.__data__=o[s],u[c]=null):n[s]=new p(t,o[s]);for(s=0;s<f;++s)(l=e[s])&&u[d[s]]===l&&(i[s]=l)}function y(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function b(t){return function(){this.removeAttribute(t)}}function x(t){return function(){this.removeAttributeNS(t.space,t.local)}}function w(t,e){return function(){this.setAttribute(t,e)}}function _(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function S(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function E(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function k(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function T(t){return function(){this.style.removeProperty(t)}}function A(t,e,n){return function(){this.style.setProperty(t,e,n)}}function C(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function N(t,e){return t.style.getPropertyValue(e)||k(t).getComputedStyle(t,null).getPropertyValue(e)}function M(t){return function(){delete this[t]}}function j(t,e){return function(){this[t]=e}}function D(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function I(t){return t.trim().split(/^|\s+/)}function L(t){return t.classList||new P(t)}function P(t){this._node=t,this._names=I(t.getAttribute("class")||"")}function q(t,e){for(var n=L(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function O(t,e){for(var n=L(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function R(t){return function(){q(this,t)}}function H(t){return function(){O(this,t)}}function B(t,e){return function(){(e.apply(this,arguments)?q:O)(this,t)}}function F(){this.textContent=""}function W(t){return function(){this.textContent=t}}function X(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function U(){this.innerHTML=""}function z(t){return function(){this.innerHTML=t}}function V(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Y(){this.nextSibling&&this.parentNode.appendChild(this)}function G(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function J(){return null}function Q(){var t=this.parentNode;t&&t.removeChild(this)}function K(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Z(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}P.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var tt={},et=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(tt={mouseenter:"mouseover",mouseleave:"mouseout"}));function nt(t,e,n){return t=rt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function rt(t,e,n){return function(r){var i=et;et=r;try{t.call(this,this.__data__,e,n)}finally{et=i}}}function it(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function ot(t,e,n){var r=tt.hasOwnProperty(t.type)?nt:rt;return function(i,o,a){var s,l=this.__on,c=r(e,o,a);if(l)for(var u=0,f=l.length;u<f;++u)if((s=l[u]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=c,s.capture=n),void(s.value=e);this.addEventListener(t.type,c,n),s={type:t.type,name:t.name,value:e,listener:c,capture:n},l?l.push(s):this.__on=[s]}}function at(t,e,n){var r=k(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function st(t,e){return function(){return at(this,t,e)}}function lt(t,e){return function(){return at(this,t,e.apply(this,arguments))}}var ct=[null];function ut(t,e){this._groups=t,this._parents=e}function ft(){return new ut([[document.documentElement]],ct)}function ht(t){return"string"==typeof t?new ut([[document.querySelector(t)]],[document.documentElement]):new ut([[t]],ct)}function dt(t){return"string"==typeof t?new ut([document.querySelectorAll(t)],[document.documentElement]):new ut([null==t?[]:t],ct)}function pt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}ut.prototype=ft.prototype={constructor:ut,select:function(t){"function"!=typeof t&&(t=c(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],l=s.length,u=r[i]=new Array(l),f=0;f<l;++f)(o=s[f])&&(a=t.call(o,o.__data__,f,s))&&("__data__"in o&&(a.__data__=o.__data__),u[f]=a);return new ut(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=f(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],l=s.length,c=0;c<l;++c)(a=s[c])&&(r.push(t.call(a,a.__data__,c,s)),i.push(a));return new ut(r,i)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],c=0;c<s;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&l.push(o);return new ut(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var n=e?v:m,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var o=i.length,a=new Array(o),s=new Array(o),l=new Array(o),c=0;c<o;++c){var u=r[c],f=i[c],h=f.length,d=t.call(u,u&&u.__data__,c,r),p=d.length,g=s[c]=new Array(p),y=a[c]=new Array(p);n(u,f,g,y,l[c]=new Array(h),d,e);for(var b,x,w=0,_=0;w<p;++w)if(b=g[w]){for(w>=_&&(_=w+1);!(x=y[_])&&++_<p;);b._next=x||null}}return(a=new ut(a,r))._enter=s,a._exit=l,a},enter:function(){return new ut(this._enter||this._groups.map(d),this._parents)},exit:function(){return new ut(this._exit||this._groups.map(d),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,c=e[s],u=n[s],f=c.length,h=a[s]=new Array(f),d=0;d<f;++d)(l=c[d]||u[d])&&(h[d]=l);for(;s<r;++s)a[s]=e[s];return new ut(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=y);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],l=s.length,c=i[o]=new Array(l),u=0;u<l;++u)(a=s[u])&&(c[u]=a);c.sort(e)}return new ut(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=i(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?x:b:"function"==typeof e?n.local?E:S:n.local?_:w)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?T:"function"==typeof e?C:A)(t,e,null==n?"":n)):N(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?M:"function"==typeof e?D:j)(t,e)):this.node()[t]},classed:function(t,e){var n=I(t+"");if(arguments.length<2){for(var r=L(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?B:e?R:H)(n,e))},text:function(t){return arguments.length?this.each(null==t?F:("function"==typeof t?X:W)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?U:("function"==typeof t?V:z)(t)):this.node().innerHTML},raise:function(){return this.each(Y)},lower:function(){return this.each(G)},append:function(t){var e="function"==typeof t?t:s(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:s(t),r=null==e?J:"function"==typeof e?e:c(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Q)},clone:function(t){return this.select(t?Z:K)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?ot:it,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var l,c=0,u=s.length;c<u;++c)for(r=0,l=s[c];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?lt:st)(t,e))}};var gt,mt,vt=(1===(gt=pt).length&&(mt=gt,gt=function(t,e){return pt(mt(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;gt(t[i],e)<0?n=i+1:r=i}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;gt(t[i],e)>0?r=i:n=i+1}return n}}),yt=vt.right;var bt=Math.sqrt(50),xt=Math.sqrt(10),wt=Math.sqrt(2);function _t(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=bt?10:o>=xt?5:o>=wt?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=bt?10:o>=xt?5:o>=wt?2:1)}function St(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r}function Et(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&r>n&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&r>n&&(r=n);return r}function kt(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Tt(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}var At="$";function Ct(){}function Nt(t,e){var n=new Ct;if(t instanceof Ct)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}function Mt(){var t,e,n,r=[],i=[];function o(n,i,a,s){if(i>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var l,c,u,f=-1,h=n.length,d=r[i++],p=Nt(),g=a();++f<h;)(u=p.get(l=d(c=n[f])+""))?u.push(c):p.set(l,[c]);return p.each((function(t,e){s(g,e,o(t,i,a,s))})),g}function a(t,n){if(++n>r.length)return t;var o,s=i[n-1];return null!=e&&n>=r.length?o=t.entries():(o=[],t.each((function(t,e){o.push({key:e,values:a(t,n)})}))),null!=s?o.sort((function(t,e){return s(t.key,e.key)})):o}return n={object:function(t){return o(t,0,jt,Dt)},map:function(t){return o(t,0,It,Lt)},entries:function(t){return a(o(t,0,It,Lt),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return i[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function jt(){return{}}function Dt(t,e,n){t[e]=n}function It(){return Nt()}function Lt(t,e,n){t.set(e,n)}function $t(){}Ct.prototype=Nt.prototype={constructor:Ct,has:function(t){return At+t in this},get:function(t){return this[At+t]},set:function(t,e){return this[At+t]=e,this},remove:function(t){var e=At+t;return e in this&&delete this[e]},clear:function(){for(var t in this)t[0]===At&&delete this[t]},keys:function(){var t=[];for(var e in this)e[0]===At&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)e[0]===At&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)e[0]===At&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)e[0]===At&&++t;return t},empty:function(){for(var t in this)if(t[0]===At)return!1;return!0},each:function(t){for(var e in this)e[0]===At&&t(this[e],e.slice(1),this)}};var Pt=Nt.prototype;$t.prototype={constructor:$t,has:Pt.has,add:function(t){return this[At+(t+="")]=t,this},remove:Pt.remove,clear:Pt.clear,values:Pt.keys,size:Pt.size,empty:Pt.empty,each:Pt.each};var qt=Array.prototype,Ot=qt.map,Rt=qt.slice,Ht={name:"implicit"};function Bt(){var t=Nt(),e=[],n=[],r=Ht;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==Ht)return r;t.set(o,a=e.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=Nt();for(var r,o,a=-1,s=n.length;++a<s;)t.has(o=(r=n[a])+"")||t.set(o,e.push(r));return i},i.range=function(t){return arguments.length?(n=Rt.call(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Bt(e,n).unknown(r)},kt.apply(i,arguments),i}function Ft(){var t,e,n=Bt().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,s=0,l=0,c=.5;function u(){var n=r().length,u=o[1]<o[0],f=o[u-0],h=o[1-u];t=(h-f)/Math.max(1,n-s+2*l),a&&(t=Math.floor(t)),f+=(h-f-t*(n-s))*c,e=t*(1-s),a&&(f=Math.round(f),e=Math.round(e));var d=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o}(n).map((function(e){return f+t*e}));return i(u?d.reverse():d)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),u()):r()},n.range=function(t){return arguments.length?(o=[+t[0],+t[1]],u()):o.slice()},n.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,u()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,u()):a},n.padding=function(t){return arguments.length?(s=Math.min(1,l=+t),u()):s},n.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),u()):s},n.paddingOuter=function(t){return arguments.length?(l=+t,u()):l},n.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),u()):c},n.copy=function(){return Ft(r(),o).round(a).paddingInner(s).paddingOuter(l).align(c)},kt.apply(u(),arguments)}function Wt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Xt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Ut(){}var zt=.7,Vt=1/zt,Yt="\\s*([+-]?\\d+)\\s*",Gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Jt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Qt=/^#([0-9a-f]{3,8})$/,Kt=new RegExp("^rgb\\("+[Yt,Yt,Yt]+"\\)$"),Zt=new RegExp("^rgb\\("+[Jt,Jt,Jt]+"\\)$"),te=new RegExp("^rgba\\("+[Yt,Yt,Yt,Gt]+"\\)$"),ee=new RegExp("^rgba\\("+[Jt,Jt,Jt,Gt]+"\\)$"),ne=new RegExp("^hsl\\("+[Gt,Jt,Jt]+"\\)$"),re=new RegExp("^hsla\\("+[Gt,Jt,Jt,Gt]+"\\)$"),ie={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function oe(){return this.rgb().formatHex()}function ae(){return this.rgb().formatRgb()}function se(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Qt.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?le(e):3===n?new fe(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?ce(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?ce(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=Kt.exec(t))?new fe(e[1],e[2],e[3],1):(e=Zt.exec(t))?new fe(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=te.exec(t))?ce(e[1],e[2],e[3],e[4]):(e=ee.exec(t))?ce(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ne.exec(t))?ge(e[1],e[2]/100,e[3]/100,1):(e=re.exec(t))?ge(e[1],e[2]/100,e[3]/100,e[4]):ie.hasOwnProperty(t)?le(ie[t]):"transparent"===t?new fe(NaN,NaN,NaN,0):null}function le(t){return new fe(t>>16&255,t>>8&255,255&t,1)}function ce(t,e,n,r){return r<=0&&(t=e=n=NaN),new fe(t,e,n,r)}function ue(t,e,n,r){return 1===arguments.length?((i=t)instanceof Ut||(i=se(i)),i?new fe((i=i.rgb()).r,i.g,i.b,i.opacity):new fe):new fe(t,e,n,null==r?1:r);var i}function fe(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function he(){return"#"+pe(this.r)+pe(this.g)+pe(this.b)}function de(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function pe(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function ge(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ve(t,e,n,r)}function me(t){if(t instanceof ve)return new ve(t.h,t.s,t.l,t.opacity);if(t instanceof Ut||(t=se(t)),!t)return new ve;if(t instanceof ve)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,l=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=l<.5?o+i:2-o-i,a*=60):s=l>0&&l<1?0:a,new ve(a,s,l,t.opacity)}function ve(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function ye(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function be(t){return function(){return t}}function xe(t){return 1==(t=+t)?we:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):be(isNaN(e)?n:e)}}function we(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):be(isNaN(t)?e:t)}Wt(Ut,se,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:oe,formatHex:oe,formatHsl:function(){return me(this).formatHsl()},formatRgb:ae,toString:ae}),Wt(fe,ue,Xt(Ut,{brighter:function(t){return t=null==t?Vt:Math.pow(Vt,t),new fe(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?zt:Math.pow(zt,t),new fe(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:he,formatHex:he,formatRgb:de,toString:de})),Wt(ve,(function(t,e,n,r){return 1===arguments.length?me(t):new ve(t,e,n,null==r?1:r)}),Xt(Ut,{brighter:function(t){return t=null==t?Vt:Math.pow(Vt,t),new ve(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?zt:Math.pow(zt,t),new ve(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new fe(ye(t>=240?t-240:t+120,i,r),ye(t,i,r),ye(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var _e=function t(e){var n=xe(e);function r(t,e){var r=n((t=ue(t)).r,(e=ue(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=we(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);var Se,Ee=(Se=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return function(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}((n-r/e)*e,a,i,o,s)}},function(t){var e,n,r=t.length,i=new Array(r),o=new Array(r),a=new Array(r);for(e=0;e<r;++e)n=ue(t[e]),i[e]=n.r||0,o[e]=n.g||0,a[e]=n.b||0;return i=Se(i),o=Se(o),a=Se(a),n.opacity=1,function(t){return n.r=i(t),n.g=o(t),n.b=a(t),n+""}});function ke(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}}function Te(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Ie(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}function Ae(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Ce(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Ne(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ie(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}var Me=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,je=new RegExp(Me.source,"g");function De(t,e){var n,r,i,o=Me.lastIndex=je.lastIndex=0,a=-1,s=[],l=[];for(t+="",e+="";(n=Me.exec(t))&&(r=je.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,l.push({i:a,x:Ce(n,r)})),o=je.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)s[(n=l[r]).i]=n.x(t);return s.join("")})}function Ie(t,e){var n,r=typeof e;return null==e||"boolean"===r?be(e):("number"===r?Ce:"string"===r?(n=se(e))?(e=n,_e):De:e instanceof se?_e:e instanceof Date?Ae:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?ke:Array.isArray(e)?Te:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Ne:Ce)(t,e)}function Le(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var $e,Pe,qe,Oe,Re=180/Math.PI,He={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Be(t,e,n,r,i,o){var a,s,l;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),t*r<e*n&&(t=-t,e=-e,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Re,skewX:Math.atan(l)*Re,scaleX:a,scaleY:s}}function Fe(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],l=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var l=a.push("translate(",null,e,null,n);s.push({i:l-4,x:Ce(t,i)},{i:l-2,x:Ce(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ce(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,l),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ce(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,l),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Ce(t,n)},{i:s-2,x:Ce(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,l),o=a=null,function(t){for(var e,n=-1,r=l.length;++n<r;)s[(e=l[n]).i]=e.x(t);return s.join("")}}}var We=Fe((function(t){return"none"===t?He:($e||($e=document.createElement("DIV"),Pe=document.documentElement,qe=document.defaultView),$e.style.transform=t,t=qe.getComputedStyle(Pe.appendChild($e),null).getPropertyValue("transform"),Pe.removeChild($e),Be(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Xe=Fe((function(t){return null==t?He:(Oe||(Oe=document.createElementNS("http://www.w3.org/2000/svg","g")),Oe.setAttribute("transform",t),(t=Oe.transform.baseVal.consolidate())?Be((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):He)}),", ",")",")");function Ue(t){return+t}var ze=[0,1];function Ve(t){return t}function Ye(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function Ge(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function Je(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=Ye(i,r),o=n(a,o)):(r=Ye(r,i),o=n(o,a)),function(t){return o(r(t))}}function Qe(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=Ye(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=yt(t,e,1,r)-1;return o[n](i[n](e))}}function Ke(t,e){return function(){var t,e,n,r,i,o,a=ze,s=ze,l=Ie,c=Ve;function u(){return r=Math.min(a.length,s.length)>2?Qe:Je,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,l)))(t(c(e)))}return f.invert=function(n){return c(e((o||(o=r(s,a.map(t),Ce)))(n)))},f.domain=function(t){return arguments.length?(a=Ot.call(t,Ue),c===Ve||(c=Ge(a)),u()):a.slice()},f.range=function(t){return arguments.length?(s=Rt.call(t),u()):s.slice()},f.rangeRound=function(t){return s=Rt.call(t),l=Le,u()},f.clamp=function(t){return arguments.length?(c=t?Ge(a):Ve,f):c!==Ve},f.interpolate=function(t){return arguments.length?(l=t,u()):l},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,u()}}()(t,e)}function Ze(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function tn(t){return(t=Ze(Math.abs(t)))?t[1]:NaN}var en,nn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function rn(t){if(!(e=nn.exec(t)))throw new Error("invalid format: "+t);var e;return new on({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function on(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function an(t,e){var n=Ze(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}rn.prototype=on.prototype,on.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var sn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return an(100*t,e)},r:an,s:function(t,e){var n=Ze(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(en=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ze(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function ln(t){return t}var cn,un,fn,hn=Array.prototype.map,dn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function pn(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?ln:(e=hn.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],l=0;i>0&&s>0&&(l+s+1>r&&(s=Math.max(1,r-l)),o.push(t.substring(i-=s,i+s)),!((l+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?ln:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(hn.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"-":t.minus+"",u=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=rn(t)).fill,n=t.align,f=t.sign,h=t.symbol,d=t.zero,p=t.width,g=t.comma,m=t.precision,v=t.trim,y=t.type;"n"===y?(g=!0,y="g"):sn[y]||(void 0===m&&(m=12),v=!0,y="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",x="$"===h?o:/[%p]/.test(y)?l:"",w=sn[y],_=/[defgprs%]/.test(y);function S(t){var i,o,l,h=b,S=x;if("c"===y)S=w(t)+S,t="";else{var E=(t=+t)<0||1/t<0;if(t=isNaN(t)?u:w(Math.abs(t),m),v&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),E&&0==+t&&"+"!==f&&(E=!1),h=(E?"("===f?f:c:"-"===f||"("===f?"":f)+h,S=("s"===y?dn[8+en/3]:"")+S+(E&&"("===f?")":""),_)for(i=-1,o=t.length;++i<o;)if(48>(l=t.charCodeAt(i))||l>57){S=(46===l?a+t.slice(i+1):t.slice(i))+S,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var k=h.length+t.length+S.length,T=k<p?new Array(p-k+1).join(e):"";switch(g&&d&&(t=r(T+t,T.length?p-S.length:1/0),T=""),n){case"<":t=h+t+S+T;break;case"=":t=h+T+t+S;break;case"^":t=T.slice(0,k=T.length>>1)+h+t+S+T.slice(k);break;default:t=T+h+t+S}return s(t)}return m=void 0===m?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),S.toString=function(){return t+""},S}return{format:f,formatPrefix:function(t,e){var n=f(((t=rn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(tn(e)/3))),i=Math.pow(10,-r),o=dn[8+r/3];return function(t){return n(i*t)+o}}}}function gn(t,e,n,r){var i,o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=bt?i*=10:o>=xt?i*=5:o>=wt&&(i*=2),e<t?-i:i}(t,e,n);switch((r=rn(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(tn(e)/3)))-tn(Math.abs(t)))}(o,a))||(r.precision=i),fn(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,tn(e)-tn(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-tn(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return un(r)}function mn(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=_t(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return gn(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],l=i[a];return l<s&&(r=s,s=l,l=r,r=o,o=a,a=r),(r=_t(s,l,n))>0?r=_t(s=Math.floor(s/r)*r,l=Math.ceil(l/r)*r,n):r<0&&(r=_t(s=Math.ceil(s*r)/r,l=Math.floor(l*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(l/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(l*r)/r,e(i)),t},t}function vn(){var t=Ke(Ve,Ve);return t.copy=function(){return e=t,vn().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown());var e},kt.apply(t,arguments),mn(t)}function yn(){var t=mn(function(){var t,e,n,r,i,o=0,a=1,s=Ve,l=!1;function c(e){return isNaN(e=+e)?i:s(0===n?.5:(e=(r(e)-t)*n,l?Math.max(0,Math.min(1,e)):e))}return c.domain=function(i){return arguments.length?(t=r(o=+i[0]),e=r(a=+i[1]),n=t===e?0:1/(e-t),c):[o,a]},c.clamp=function(t){return arguments.length?(l=!!t,c):l},c.interpolator=function(t){return arguments.length?(s=t,c):s},c.unknown=function(t){return arguments.length?(i=t,c):i},function(i){return r=i,t=i(o),e=i(a),n=t===e?0:1/(e-t),c}}()(Ve));return t.copy=function(){return e=t,yn().domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown());var e},Tt.apply(t,arguments)}function bn(t){return["start","end"].forEach((e=>{if(!t[0].hasOwnProperty(e))throw"Parsing Error: Required json attribute is missing: "+e})),t.map((t=>(t.chromStart=t.start,t.chromEnd=t.end,t)))}function xn(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}function wn(t){return Ee(t[t.length-1])}cn=pn({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),un=cn.format,fn=cn.formatPrefix;var _n=wn(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(xn)),Sn=wn(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(xn)),En=wn(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(xn)),kn=wn(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(xn)),Tn=wn(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(xn)),An=wn(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(xn)),Cn=wn(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(xn)),Nn=wn(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(xn)),Mn=wn(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(xn)),jn=wn(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(xn)),Dn=wn(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(xn)),In=wn(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(xn)),Ln=wn(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(xn)),$n=wn(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(xn)),Pn=wn(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(xn));function qn(t,e="YlGnBu",n=void 0,r=void 0,i=!1){t=t.filter((t=>isFinite(t))),r=void 0===r?St(t):r,n=void 0===n?Et(t):n;const o=yn(function(t){const e={BuGn:An,OrRd:Cn,PuBu:Nn,YlGnBu:Mn,Blues:jn,Oranges:Pn,Greens:Dn,Purples:Ln,Reds:$n,Greys:In,Grays:In,RdBu:En,RdGy:kn,PiYG:_n,PuOr:Sn,RdYlBu:Tn};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return i?o.domain([r,n]):o.domain([n,r]),o}function On(t,e,n,r,i,o=10,a=10,s={h:10,w:40},l="h",c=!1){let u=[];if(c){let t=[...Array(o+1).keys()],e=n.domain()[1]/o;u=t.map((t=>t*e)),u=u.concat(t.filter((t=>0!=t)).map((t=>0-t*e))).sort(((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN))}else{let t=[...Array(o+1).keys()],e=n.domain()[1]/o;u=t.map((t=>t*e))}const f=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(u).enter().append("g").classed("legend",!0);"h"==l?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",s.h).attr("transform",`translate(${r.x}, ${r.y})`),f.append("rect").attr("x",((t,e)=>s.w*e)).attr("y",5).attr("width",s.w).attr("height",s.h).style("fill",n),f.append("text").attr("class","color-legend").text((t=>i?(Math.pow(a,t)-1).toPrecision(2):t.toPrecision(2))).attr("x",((t,e)=>s.w*e)).attr("y",0).style("font-size",10)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+s.h*u.length})rotate(90)`),f.append("rect").attr("x",0).attr("y",((t,e)=>s.h*e)).attr("width",s.w).attr("height",s.h).style("fill",n),f.append("text").attr("class","color-legend").text((t=>i?(Math.pow(a,t)-1).toPrecision(2):t.toPrecision(2))).attr("x",15).attr("y",((t,e)=>s.h*e+s.h/2)))}class Rn{constructor(t=window.innerWidth,e=100,n=100,r={top:50,right:250,bottom:170,left:10},i=12,o=10){this.margin=r,this.rootW=t,this.leftTreePanel={x:r.left,y:r.top+n,h:void 0,w:e-o,id:"leftTree"},this.cell={w:void 0,h:i},this.topTreePanel={x:r.left+e,y:r.top,h:n-o,w:this.rootW-(r.left+e+r.right),id:"topTree"},this.heatmapPanel={x:r.left+e,y:r.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:r.left+e,y:0,h:r.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function Hn(t,e,n,r,i=void 0){return function(t){if(ht(`#${t}`).empty()){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}(t),void 0===i&&(i=`${t}-svg`),void 0===r&&(r={top:0,left:0}),ht("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",i).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}function Bn(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function Fn(t,e){var n,r,i,o,a,s=new zn(t),l=+t.value&&(s.value=t.value),c=[s];for(null==e&&(e=Wn);n=c.pop();)if(l&&(n.value=+n.data.value),(i=e(n.data))&&(a=i.length))for(n.children=new Array(a),o=a-1;o>=0;--o)c.push(r=n.children[o]=new zn(i[o])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(Un)}function Wn(t){return t.children}function Xn(t){t.data=t.data.data}function Un(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function zn(t){this.data=t,this.depth=this.height=0,this.parent=null}zn.prototype=Fn.prototype={constructor:zn,count:function(){return this.eachAfter(Bn)},each:function(t){var e,n,r,i,o=this,a=[o];do{for(e=a.reverse(),a=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(t){for(var e,n,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return Fn(this).eachBefore(Xn)}};var Vn=Array.prototype.slice;function Yn(t){return t}var Gn=1,Jn=2,Qn=3,Kn=4,Zn=1e-6;function tr(t){return"translate("+(t+.5)+",0)"}function er(t){return"translate(0,"+(t+.5)+")"}function nr(t){return function(e){return+t(e)}}function rr(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function ir(){return!this.__axis}function or(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,l=t===Gn||t===Kn?-1:1,c=t===Kn||t===Jn?"x":"y",u=t===Gn||t===Qn?tr:er;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,d=null==i?e.tickFormat?e.tickFormat.apply(e,n):Yn:i,p=Math.max(o,0)+s,g=e.range(),m=+g[0]+.5,v=+g[g.length-1]+.5,y=(e.bandwidth?rr:nr)(e.copy()),b=f.selection?f.selection():f,x=b.selectAll(".domain").data([null]),w=b.selectAll(".tick").data(h,e).order(),_=w.exit(),S=w.enter().append("g").attr("class","tick"),E=w.select("line"),k=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(S),E=E.merge(S.append("line").attr("stroke","currentColor").attr(c+"2",l*o)),k=k.merge(S.append("text").attr("fill","currentColor").attr(c,l*p).attr("dy",t===Gn?"0em":t===Qn?"0.71em":"0.32em")),f!==b&&(x=x.transition(f),w=w.transition(f),E=E.transition(f),k=k.transition(f),_=_.transition(f).attr("opacity",Zn).attr("transform",(function(t){return isFinite(t=y(t))?u(t):this.getAttribute("transform")})),S.attr("opacity",Zn).attr("transform",(function(t){var e=this.parentNode.__axis;return u(e&&isFinite(e=e(t))?e:y(t))}))),_.remove(),x.attr("d",t===Kn||t==Jn?a?"M"+l*a+","+m+"H0.5V"+v+"H"+l*a:"M0.5,"+m+"V"+v:a?"M"+m+","+l*a+"V0.5H"+v+"V"+l*a:"M"+m+",0.5H"+v),w.attr("opacity",1).attr("transform",(function(t){return u(y(t))})),E.attr(c+"2",l*o),k.attr(c,l*p).text(d),b.filter(ir).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Jn?"start":t===Kn?"end":"middle"),b.each((function(){this.__axis=y}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=Vn.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:Vn.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:Vn.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f}class ar{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=Fn(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),i=0;i<r.length;i++){var o=r[i],a={};switch(o){case"(":n.branchset=[a],e.push(n),n=a;break;case",":e[e.length-1].branchset.push(a),n=a;break;case")":n=e.pop();break;case":":break;default:var s=r[i-1];")"==s||"("==s||","==s?n.name=o:":"==s&&(n.length=parseFloat(o))}}return n}(t),(t=>t.branchset)).sum((t=>t.branchset?0:1)).sort(((t,e)=>t.value-e.value||t.data.length-e.data.length)),this.leaves=this.root.leaves().sort(((t,e)=>t.value-e.value||pt(t.data.length,e.data.length))),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce(((t,e)=>t+e.y),0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach((t=>{n(t),e(t)})),t.selectAll(".branch").data(r).enter().append("line").attr("x1",(t=>t.x)).attr("x2",(t=>t.data.length?t.x-this.xScale(t.data.length):t.x)).attr("y1",(t=>t.y+this.yScale.bandwidth()/2)).attr("y2",(t=>t.y+this.yScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1);const i=this.root.descendants().filter((t=>t.height)).sort(((t,e)=>e.height-t.height));var o;t.selectAll(".arm").data(i).enter().append("line").attr("x1",(t=>t.x)).attr("x2",(t=>t.x)).attr("y1",(t=>t.children[0].y+this.yScale.bandwidth()/2)).attr("y2",(t=>t.children[1].y+this.yScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(i).enter().append("circle").attr("cx",(t=>t.x)).attr("cy",(t=>t.y+this.yScale.bandwidth()/2)).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(){ht(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call((o=this.xScale,or(Qn,o)).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort(((t,e)=>t.height-e.height||pt(t.data.length,e.data.length)))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce(((t,e)=>t+e.x),0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach((t=>{e(t),n(t)})),t.selectAll(".branch").data(r).enter().append("line").attr("y1",(t=>t.y)).attr("y2",(t=>t.data.length?t.y-this.yScale(t.data.length):t.y)).attr("x1",(t=>t.x+this.xScale.bandwidth()/2)).attr("x2",(t=>t.x+this.xScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1);const i=this.root.descendants().filter((t=>t.height)).sort(((t,e)=>e.height-t.height));var o;t.selectAll(".arm").data(i).enter().append("line").attr("y1",(t=>t.y)).attr("y2",(t=>t.y)).attr("x1",(t=>t.children[0].x+this.xScale.bandwidth()/2)).attr("x2",(t=>t.children[1].x+this.xScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(i).enter().append("circle").attr("cx",(t=>t.x+this.xScale.bandwidth()/2)).attr("cy",(t=>t.y)).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(){ht(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").call((o=this.yScale,or(Kn,o)).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce(((t,e)=>e.data.length?t+e.data.length:t),0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=vn().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),this.xScale=Ft().domain(this.postorder.map((t=>t.data.name))).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),this.yScale=Ft().domain(this.postorder.map((t=>t.data.name))).range([0,this.height]).padding(.05)):this.yScale=vn().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}var sr="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function lr(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var cr={exports:{}};
/*!
   * jQuery JavaScript Library v3.7.1
   * https://jquery.com/
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2023-08-28T13:37Z
   */!function(t){!function(e,n){t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}}("undefined"!=typeof window?window:sr,(function(t,e){var n=[],r=Object.getPrototypeOf,i=n.slice,o=n.flat?function(t){return n.flat.call(t)}:function(t){return n.concat.apply([],t)},a=n.push,s=n.indexOf,l={},c=l.toString,u=l.hasOwnProperty,f=u.toString,h=f.call(Object),d={},p=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},g=function(t){return null!=t&&t===t.window},m=t.document,v={type:!0,src:!0,nonce:!0,noModule:!0};function y(t,e,n){var r,i,o=(n=n||m).createElement("script");if(o.text=t,e)for(r in v)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function b(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?l[c.call(t)]||"object":typeof t}var x="3.7.1",w=/HTML$/i,_=function(t,e){return new _.fn.init(t,e)};function S(t){var e=!!t&&"length"in t&&t.length,n=b(t);return!p(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function E(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}_.fn=_.prototype={jquery:x,constructor:_,length:0,toArray:function(){return i.call(this)},get:function(t){return null==t?i.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=_.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return _.each(this,t)},map:function(t){return this.pushStack(_.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(i.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(_.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(_.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:n.sort,splice:n.splice},_.extend=_.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||p(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(c&&r&&(_.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||_.isPlainObject(n)?n:{},i=!1,a[e]=_.extend(c,o,r)):void 0!==r&&(a[e]=r));return a},_.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==c.call(t))&&(!(e=r(t))||"function"==typeof(n=u.call(e,"constructor")&&e.constructor)&&f.call(n)===h)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){y(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,r=0;if(S(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},text:function(t){var e,n="",r=0,i=t.nodeType;if(!i)for(;e=t[r++];)n+=_.text(e);return 1===i||11===i?t.textContent:9===i?t.documentElement.textContent:3===i||4===i?t.nodeValue:n},makeArray:function(t,e){var n=e||[];return null!=t&&(S(Object(t))?_.merge(n,"string"==typeof t?[t]:t):a.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:s.call(e,t,n)},isXMLDoc:function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!w.test(e||n&&n.nodeName||"HTML")},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,a=0,s=[];if(S(t))for(r=t.length;a<r;a++)null!=(i=e(t[a],a,n))&&s.push(i);else for(a in t)null!=(i=e(t[a],a,n))&&s.push(i);return o(s)},guid:1,support:d}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=n[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){l["[object "+e+"]"]=e.toLowerCase()}));var k=n.pop,T=n.sort,A=n.splice,C="[\\x20\\t\\r\\n\\f]",N=new RegExp("^"+C+"+|((?:^|[^\\\\])(?:\\\\.)*)"+C+"+$","g");_.contains=function(t,e){var n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(t.contains?t.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))};var M=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function j(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}_.escapeSelector=function(t){return(t+"").replace(M,j)};var D=m,I=a;!function(){var e,r,o,a,l,c,f,h,p,g,m=I,v=_.expando,y=0,b=0,x=tt(),w=tt(),S=tt(),M=tt(),j=function(t,e){return t===e&&(l=!0),0},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",$="(?:\\\\[\\da-fA-F]{1,6}"+C+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",P="\\["+C+"*("+$+")(?:"+C+"*([*^$|!~]?=)"+C+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+$+"))|)"+C+"*\\]",q=":("+$+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",O=new RegExp(C+"+","g"),R=new RegExp("^"+C+"*,"+C+"*"),H=new RegExp("^"+C+"*([>+~]|"+C+")"+C+"*"),B=new RegExp(C+"|>"),F=new RegExp(q),W=new RegExp("^"+$+"$"),X={ID:new RegExp("^#("+$+")"),CLASS:new RegExp("^\\.("+$+")"),TAG:new RegExp("^("+$+"|[*])"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+C+"*(even|odd|(([+-]|)(\\d*)n|)"+C+"*(?:([+-]|)"+C+"*(\\d+)|))"+C+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+C+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+C+"*((?:-\\d)?\\d*)"+C+"*\\)|)(?=[^-]|$)","i")},U=/^(?:input|select|textarea|button)$/i,z=/^h\d$/i,V=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Y=/[+~]/,G=new RegExp("\\\\[\\da-fA-F]{1,6}"+C+"?|\\\\([^\\r\\n\\f])","g"),J=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},Q=function(){lt()},K=ht((function(t){return!0===t.disabled&&E(t,"fieldset")}),{dir:"parentNode",next:"legend"});try{m.apply(n=i.call(D.childNodes),D.childNodes),n[D.childNodes.length].nodeType}catch(t){m={apply:function(t,e){I.apply(t,i.call(e))},call:function(t){I.apply(t,i.call(arguments,1))}}}function Z(t,e,n,r){var i,o,a,s,l,u,f,g=e&&e.ownerDocument,y=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==y&&9!==y&&11!==y)return n;if(!r&&(lt(e),e=e||c,h)){if(11!==y&&(l=V.exec(t)))if(i=l[1]){if(9===y){if(!(a=e.getElementById(i)))return n;if(a.id===i)return m.call(n,a),n}else if(g&&(a=g.getElementById(i))&&Z.contains(e,a)&&a.id===i)return m.call(n,a),n}else{if(l[2])return m.apply(n,e.getElementsByTagName(t)),n;if((i=l[3])&&e.getElementsByClassName)return m.apply(n,e.getElementsByClassName(i)),n}if(!(M[t+" "]||p&&p.test(t))){if(f=t,g=e,1===y&&(B.test(t)||H.test(t))){for((g=Y.test(t)&&st(e.parentNode)||e)==e&&d.scope||((s=e.getAttribute("id"))?s=_.escapeSelector(s):e.setAttribute("id",s=v)),o=(u=ut(t)).length;o--;)u[o]=(s?"#"+s:":scope")+" "+ft(u[o]);f=u.join(",")}try{return m.apply(n,g.querySelectorAll(f)),n}catch(e){M(t,!0)}finally{s===v&&e.removeAttribute("id")}}}return yt(t.replace(N,"$1"),e,n,r)}function tt(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function et(t){return t[v]=!0,t}function nt(t){var e=c.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function rt(t){return function(e){return E(e,"input")&&e.type===t}}function it(t){return function(e){return(E(e,"input")||E(e,"button"))&&e.type===t}}function ot(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&K(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function at(t){return et((function(e){return e=+e,et((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function st(t){return t&&void 0!==t.getElementsByTagName&&t}function lt(t){var e,n=t?t.ownerDocument||t:D;return n!=c&&9===n.nodeType&&n.documentElement?(f=(c=n).documentElement,h=!_.isXMLDoc(c),g=f.matches||f.webkitMatchesSelector||f.msMatchesSelector,f.msMatchesSelector&&D!=c&&(e=c.defaultView)&&e.top!==e&&e.addEventListener("unload",Q),d.getById=nt((function(t){return f.appendChild(t).id=_.expando,!c.getElementsByName||!c.getElementsByName(_.expando).length})),d.disconnectedMatch=nt((function(t){return g.call(t,"*")})),d.scope=nt((function(){return c.querySelectorAll(":scope")})),d.cssHas=nt((function(){try{return c.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),d.getById?(r.filter.ID=function(t){var e=t.replace(G,J);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(G,J);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):e.querySelectorAll(t)},r.find.CLASS=function(t,e){if(void 0!==e.getElementsByClassName&&h)return e.getElementsByClassName(t)},p=[],nt((function(t){var e;f.appendChild(t).innerHTML="<a id='"+v+"' href='' disabled='disabled'></a><select id='"+v+"-\r\\' disabled='disabled'><option selected=''></option></select>",t.querySelectorAll("[selected]").length||p.push("\\["+C+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+v+"-]").length||p.push("~="),t.querySelectorAll("a#"+v+"+*").length||p.push(".#.+[+~]"),t.querySelectorAll(":checked").length||p.push(":checked"),(e=c.createElement("input")).setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),(e=c.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||p.push("\\["+C+"*name"+C+"*="+C+"*(?:''|\"\")")})),d.cssHas||p.push(":has"),p=p.length&&new RegExp(p.join("|")),j=function(t,e){if(t===e)return l=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!d.sortDetached&&e.compareDocumentPosition(t)===n?t===c||t.ownerDocument==D&&Z.contains(D,t)?-1:e===c||e.ownerDocument==D&&Z.contains(D,e)?1:a?s.call(a,t)-s.call(a,e):0:4&n?-1:1)},c):c}for(e in Z.matches=function(t,e){return Z(t,null,null,e)},Z.matchesSelector=function(t,e){if(lt(t),h&&!M[e+" "]&&(!p||!p.test(e)))try{var n=g.call(t,e);if(n||d.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){M(e,!0)}return Z(e,c,null,[t]).length>0},Z.contains=function(t,e){return(t.ownerDocument||t)!=c&&lt(t),_.contains(t,e)},Z.attr=function(t,e){(t.ownerDocument||t)!=c&&lt(t);var n=r.attrHandle[e.toLowerCase()],i=n&&u.call(r.attrHandle,e.toLowerCase())?n(t,e,!h):void 0;return void 0!==i?i:t.getAttribute(e)},Z.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},_.uniqueSort=function(t){var e,n=[],r=0,o=0;if(l=!d.sortStable,a=!d.sortStable&&i.call(t,0),T.call(t,j),l){for(;e=t[o++];)e===t[o]&&(r=n.push(o));for(;r--;)A.call(t,n[r],1)}return a=null,t},_.fn.uniqueSort=function(){return this.pushStack(_.uniqueSort(i.apply(this)))},r=_.expr={cacheLength:50,createPseudo:et,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(G,J),t[3]=(t[3]||t[4]||t[5]||"").replace(G,J),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||Z.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&Z.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&F.test(n)&&(e=ut(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(G,J).toLowerCase();return"*"===t?function(){return!0}:function(t){return E(t,e)}},CLASS:function(t){var e=x[t+" "];return e||(e=new RegExp("(^|"+C+")"+t+"("+C+"|$)"))&&x(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=Z.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(O," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,l){var c,u,f,h,d,p=o!==a?"nextSibling":"previousSibling",g=e.parentNode,m=s&&e.nodeName.toLowerCase(),b=!l&&!s,x=!1;if(g){if(o){for(;p;){for(f=e;f=f[p];)if(s?E(f,m):1===f.nodeType)return!1;d=p="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?g.firstChild:g.lastChild],a&&b){for(x=(h=(c=(u=g[v]||(g[v]={}))[t]||[])[0]===y&&c[1])&&c[2],f=h&&g.childNodes[h];f=++h&&f&&f[p]||(x=h=0)||d.pop();)if(1===f.nodeType&&++x&&f===e){u[t]=[y,h,x];break}}else if(b&&(x=h=(c=(u=e[v]||(e[v]={}))[t]||[])[0]===y&&c[1]),!1===x)for(;(f=++h&&f&&f[p]||(x=h=0)||d.pop())&&(!(s?E(f,m):1===f.nodeType)||!++x||(b&&((u=f[v]||(f[v]={}))[t]=[y,x]),f!==e)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||Z.error("unsupported pseudo: "+t);return i[v]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?et((function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=s.call(t,o[a])]=!(n[r]=o[a])})):function(t){return i(t,0,n)}):i}},pseudos:{not:et((function(t){var e=[],n=[],r=vt(t.replace(N,"$1"));return r[v]?et((function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:et((function(t){return function(e){return Z(t,e).length>0}})),contains:et((function(t){return t=t.replace(G,J),function(e){return(e.textContent||_.text(e)).indexOf(t)>-1}})),lang:et((function(t){return W.test(t||"")||Z.error("unsupported lang: "+t),t=t.replace(G,J).toLowerCase(),function(e){var n;do{if(n=h?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===function(){try{return c.activeElement}catch(t){}}()&&c.hasFocus()&&!!(t.type||t.href||~t.tabIndex)},enabled:ot(!1),disabled:ot(!0),checked:function(t){return E(t,"input")&&!!t.checked||E(t,"option")&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return z.test(t.nodeName)},input:function(t){return U.test(t.nodeName)},button:function(t){return E(t,"input")&&"button"===t.type||E(t,"button")},text:function(t){var e;return E(t,"input")&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:at((function(){return[0]})),last:at((function(t,e){return[e-1]})),eq:at((function(t,e,n){return[n<0?n+e:n]})),even:at((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:at((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:at((function(t,e,n){var r;for(r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:at((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=rt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=it(e);function ct(){}function ut(t,e){var n,i,o,a,s,l,c,u=w[t+" "];if(u)return e?0:u.slice(0);for(s=t,l=[],c=r.preFilter;s;){for(a in n&&!(i=R.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),n=!1,(i=H.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(N," ")}),s=s.slice(n.length)),r.filter)!(i=X[a].exec(s))||c[a]&&!(i=c[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?Z.error(t):w(t,l).slice(0)}function ft(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function ht(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=b++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,l){var c,u,f=[y,s];if(l){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,l))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(u=e[v]||(e[v]={}),i&&E(e,i))e=e[r]||e;else{if((c=u[o])&&c[0]===y&&c[1]===s)return f[2]=c[2];if(u[o]=f,f[2]=t(e,n,l))return!0}return!1}}function dt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function pt(t,e,n,r,i){for(var o,a=[],s=0,l=t.length,c=null!=e;s<l;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),c&&e.push(s)));return a}function gt(t,e,n,r,i,o){return r&&!r[v]&&(r=gt(r)),i&&!i[v]&&(i=gt(i,o)),et((function(o,a,l,c){var u,f,h,d,p=[],g=[],v=a.length,y=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)Z(t,e[r],n);return n}(e||"*",l.nodeType?[l]:l,[]),b=!t||!o&&e?y:pt(y,p,t,l,c);if(n?n(b,d=i||(o?t:v||r)?[]:a,l,c):d=b,r)for(u=pt(d,g),r(u,[],l,c),f=u.length;f--;)(h=u[f])&&(d[g[f]]=!(b[g[f]]=h));if(o){if(i||t){if(i){for(u=[],f=d.length;f--;)(h=d[f])&&u.push(b[f]=h);i(null,d=[],u,c)}for(f=d.length;f--;)(h=d[f])&&(u=i?s.call(o,h):p[f])>-1&&(o[u]=!(a[u]=h))}}else d=pt(d===a?d.splice(v,d.length):d),i?i(null,a,d,c):m.apply(a,d)}))}function mt(t){for(var e,n,i,a=t.length,l=r.relative[t[0].type],c=l||r.relative[" "],u=l?1:0,f=ht((function(t){return t===e}),c,!0),h=ht((function(t){return s.call(e,t)>-1}),c,!0),d=[function(t,n,r){var i=!l&&(r||n!=o)||((e=n).nodeType?f(t,n,r):h(t,n,r));return e=null,i}];u<a;u++)if(n=r.relative[t[u].type])d=[ht(dt(d),n)];else{if((n=r.filter[t[u].type].apply(null,t[u].matches))[v]){for(i=++u;i<a&&!r.relative[t[i].type];i++);return gt(u>1&&dt(d),u>1&&ft(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(N,"$1"),n,u<i&&mt(t.slice(u,i)),i<a&&mt(t=t.slice(i)),i<a&&ft(t))}d.push(n)}return dt(d)}function vt(t,e){var n,i=[],a=[],s=S[t+" "];if(!s){for(e||(e=ut(t)),n=e.length;n--;)(s=mt(e[n]))[v]?i.push(s):a.push(s);s=S(t,function(t,e){var n=e.length>0,i=t.length>0,a=function(a,s,l,u,f){var d,p,g,v=0,b="0",x=a&&[],w=[],S=o,E=a||i&&r.find.TAG("*",f),T=y+=null==S?1:Math.random()||.1,A=E.length;for(f&&(o=s==c||s||f);b!==A&&null!=(d=E[b]);b++){if(i&&d){for(p=0,s||d.ownerDocument==c||(lt(d),l=!h);g=t[p++];)if(g(d,s||c,l)){m.call(u,d);break}f&&(y=T)}n&&((d=!g&&d)&&v--,a&&x.push(d))}if(v+=b,n&&b!==v){for(p=0;g=e[p++];)g(x,w,s,l);if(a){if(v>0)for(;b--;)x[b]||w[b]||(w[b]=k.call(u));w=pt(w)}m.apply(u,w),f&&!a&&w.length>0&&v+e.length>1&&_.uniqueSort(u)}return f&&(y=T,o=S),x};return n?et(a):a}(a,i)),s.selector=t}return s}function yt(t,e,n,i){var o,a,s,l,c,u="function"==typeof t&&t,f=!i&&ut(t=u.selector||t);if(n=n||[],1===f.length){if((a=f[0]=f[0].slice(0)).length>2&&"ID"===(s=a[0]).type&&9===e.nodeType&&h&&r.relative[a[1].type]){if(!(e=(r.find.ID(s.matches[0].replace(G,J),e)||[])[0]))return n;u&&(e=e.parentNode),t=t.slice(a.shift().value.length)}for(o=X.needsContext.test(t)?0:a.length;o--&&(s=a[o],!r.relative[l=s.type]);)if((c=r.find[l])&&(i=c(s.matches[0].replace(G,J),Y.test(a[0].type)&&st(e.parentNode)||e))){if(a.splice(o,1),!(t=i.length&&ft(a)))return m.apply(n,i),n;break}}return(u||vt(t,f))(i,e,!h,n,!e||Y.test(t)&&st(e.parentNode)||e),n}ct.prototype=r.filters=r.pseudos,r.setFilters=new ct,d.sortStable=v.split("").sort(j).join("")===v,lt(),d.sortDetached=nt((function(t){return 1&t.compareDocumentPosition(c.createElement("fieldset"))})),_.find=Z,_.expr[":"]=_.expr.pseudos,_.unique=_.uniqueSort,Z.compile=vt,Z.select=yt,Z.setDocument=lt,Z.tokenize=ut,Z.escape=_.escapeSelector,Z.getText=_.text,Z.isXML=_.isXMLDoc,Z.selectors=_.expr,Z.support=_.support,Z.uniqueSort=_.uniqueSort}();var L=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&_(t).is(n))break;r.push(t)}return r},$=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},P=_.expr.match.needsContext,q=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(t,e,n){return p(e)?_.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?_.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?_.grep(t,(function(t){return s.call(e,t)>-1!==n})):_.filter(e,t,n)}_.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?_.find.matchesSelector(r,t)?[r]:[]:_.find.matches(t,_.grep(e,(function(t){return 1===t.nodeType})))},_.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(_(t).filter((function(){for(e=0;e<r;e++)if(_.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)_.find(t,i[e],n);return r>1?_.uniqueSort(n):n},filter:function(t){return this.pushStack(O(this,t||[],!1))},not:function(t){return this.pushStack(O(this,t||[],!0))},is:function(t){return!!O(this,"string"==typeof t&&P.test(t)?_(t):t||[],!1).length}});var R,H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,B=_.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||R,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:H.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof _?e[0]:e,_.merge(this,_.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:m,!0)),q.test(r[1])&&_.isPlainObject(e))for(r in e)p(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=m.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):p(t)?void 0!==n.ready?n.ready(t):t(_):_.makeArray(t,this)};B.prototype=_.fn,R=_(m);var F=/^(?:parents|prev(?:Until|All))/,W={children:!0,contents:!0,next:!0,prev:!0};function X(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}_.fn.extend({has:function(t){var e=_(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(_.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&_(t);if(!P.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&_.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?_.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?s.call(_(t),this[0]):s.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),_.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return L(t,"parentNode")},parentsUntil:function(t,e,n){return L(t,"parentNode",n)},next:function(t){return X(t,"nextSibling")},prev:function(t){return X(t,"previousSibling")},nextAll:function(t){return L(t,"nextSibling")},prevAll:function(t){return L(t,"previousSibling")},nextUntil:function(t,e,n){return L(t,"nextSibling",n)},prevUntil:function(t,e,n){return L(t,"previousSibling",n)},siblings:function(t){return $((t.parentNode||{}).firstChild,t)},children:function(t){return $(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(E(t,"template")&&(t=t.content||t),_.merge([],t.childNodes))}},(function(t,e){_.fn[t]=function(n,r){var i=_.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=_.filter(r,i)),this.length>1&&(W[t]||_.uniqueSort(i),F.test(t)&&i.reverse()),this.pushStack(i)}}));var U=/[^\x20\t\r\n\f]+/g;function z(t){return t}function V(t){throw t}function Y(t,e,n,r){var i;try{t&&p(i=t.promise)?i.call(t).done(e).fail(n):t&&p(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}_.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return _.each(t.match(U)||[],(function(t,n){e[n]=!0})),e}(t):_.extend({},t);var e,n,r,i,o=[],a=[],s=-1,l=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){_.each(n,(function(n,r){p(r)?t.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==b(r)&&e(r)}))}(arguments),n&&!e&&l()),this},remove:function(){return _.each(arguments,(function(t,e){for(var n;(n=_.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?_.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},_.extend({Deferred:function(e){var n=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return _.Deferred((function(e){_.each(n,(function(n,r){var i=p(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&p(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(e,r,i){var o=0;function a(e,n,r,i){return function(){var s=this,l=arguments,c=function(){var t,c;if(!(e<o)){if((t=r.apply(s,l))===n.promise())throw new TypeError("Thenable self-resolution");c=t&&("object"==typeof t||"function"==typeof t)&&t.then,p(c)?i?c.call(t,a(o,n,z,i),a(o,n,V,i)):(o++,c.call(t,a(o,n,z,i),a(o,n,V,i),a(o,n,z,n.notifyWith))):(r!==z&&(s=void 0,l=[t]),(i||n.resolveWith)(s,l))}},u=i?c:function(){try{c()}catch(t){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(t,u.error),e+1>=o&&(r!==V&&(s=void 0,l=[t]),n.rejectWith(s,l))}};e?u():(_.Deferred.getErrorHook?u.error=_.Deferred.getErrorHook():_.Deferred.getStackHook&&(u.error=_.Deferred.getStackHook()),t.setTimeout(u))}}return _.Deferred((function(t){n[0][3].add(a(0,t,p(i)?i:z,t.notifyWith)),n[1][3].add(a(0,t,p(e)?e:z)),n[2][3].add(a(0,t,p(r)?r:V))})).promise()},promise:function(t){return null!=t?_.extend(t,i):i}},o={};return _.each(n,(function(t,e){var a=e[2],s=e[5];i[e[1]]=a.add,s&&a.add((function(){r=s}),n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),a.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),o=i.call(arguments),a=_.Deferred(),s=function(t){return function(n){r[t]=this,o[t]=arguments.length>1?i.call(arguments):n,--e||a.resolveWith(r,o)}};if(e<=1&&(Y(t,a.done(s(n)).resolve,a.reject,!e),"pending"===a.state()||p(o[n]&&o[n].then)))return a.then();for(;n--;)Y(o[n],s(n),a.reject);return a.promise()}});var G=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&G.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},_.readyException=function(e){t.setTimeout((function(){throw e}))};var J=_.Deferred();function Q(){m.removeEventListener("DOMContentLoaded",Q),t.removeEventListener("load",Q),_.ready()}_.fn.ready=function(t){return J.then(t).catch((function(t){_.readyException(t)})),this},_.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--_.readyWait:_.isReady)||(_.isReady=!0,!0!==t&&--_.readyWait>0||J.resolveWith(m,[_]))}}),_.ready.then=J.then,"complete"===m.readyState||"loading"!==m.readyState&&!m.documentElement.doScroll?t.setTimeout(_.ready):(m.addEventListener("DOMContentLoaded",Q),t.addEventListener("load",Q));var K=function(t,e,n,r,i,o,a){var s=0,l=t.length,c=null==n;if("object"===b(n))for(s in i=!0,n)K(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,p(r)||(a=!0),c&&(a?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(_(t),n)})),e))for(;s<l;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:c?e.call(t):l?e(t[0],n):o},Z=/^-ms-/,tt=/-([a-z])/g;function et(t,e){return e.toUpperCase()}function nt(t){return t.replace(Z,"ms-").replace(tt,et)}var rt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function it(){this.expando=_.expando+it.uid++}it.uid=1,it.prototype={cache:function(t){var e=t[this.expando];return e||(e={},rt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[nt(e)]=n;else for(r in e)i[nt(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][nt(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(nt):(e=nt(e))in r?[e]:e.match(U)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||_.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!_.isEmptyObject(e)}};var ot=new it,at=new it,st=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,lt=/[A-Z]/g;function ct(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(lt,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:st.test(t)?JSON.parse(t):t)}(n)}catch(t){}at.set(t,e,n)}else n=void 0;return n}_.extend({hasData:function(t){return at.hasData(t)||ot.hasData(t)},data:function(t,e,n){return at.access(t,e,n)},removeData:function(t,e){at.remove(t,e)},_data:function(t,e,n){return ot.access(t,e,n)},_removeData:function(t,e){ot.remove(t,e)}}),_.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=at.get(o),1===o.nodeType&&!ot.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=nt(r.slice(5)),ct(o,r,i[r]));ot.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){at.set(this,t)})):K(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=at.get(o,t))||void 0!==(n=ct(o,t))?n:void 0;this.each((function(){at.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){at.remove(this,t)}))}}),_.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=ot.get(t,e),n&&(!r||Array.isArray(n)?r=ot.access(t,e,_.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=_.queue(t,e),r=n.length,i=n.shift(),o=_._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){_.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return ot.get(t,n)||ot.access(t,n,{empty:_.Callbacks("once memory").add((function(){ot.remove(t,[e+"queue",n])}))})}}),_.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?_.queue(this[0],t):void 0===e?this:this.each((function(){var n=_.queue(this,t,e);_._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&_.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){_.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=_.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=ot.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var ut=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ft=new RegExp("^(?:([+-])=|)("+ut+")([a-z%]*)$","i"),ht=["Top","Right","Bottom","Left"],dt=m.documentElement,pt=function(t){return _.contains(t.ownerDocument,t)},gt={composed:!0};dt.getRootNode&&(pt=function(t){return _.contains(t.ownerDocument,t)||t.getRootNode(gt)===t.ownerDocument});var mt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&pt(t)&&"none"===_.css(t,"display")};function vt(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return _.css(t,e,"")},l=s(),c=n&&n[3]||(_.cssNumber[e]?"":"px"),u=t.nodeType&&(_.cssNumber[e]||"px"!==c&&+l)&&ft.exec(_.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)_.style(t,e,u+c),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),u/=o;u*=2,_.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,i=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=u,r.end=i)),i}var yt={};function bt(t){var e,n=t.ownerDocument,r=t.nodeName,i=yt[r];return i||(e=n.body.appendChild(n.createElement(r)),i=_.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),yt[r]=i,i)}function xt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=ot.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&mt(r)&&(i[o]=bt(r))):"none"!==n&&(i[o]="none",ot.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}_.fn.extend({show:function(){return xt(this,!0)},hide:function(){return xt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){mt(this)?_(this).show():_(this).hide()}))}});var wt,_t,St=/^(?:checkbox|radio)$/i,Et=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,kt=/^$|^module$|\/(?:java|ecma)script/i;wt=m.createDocumentFragment().appendChild(m.createElement("div")),(_t=m.createElement("input")).setAttribute("type","radio"),_t.setAttribute("checked","checked"),_t.setAttribute("name","t"),wt.appendChild(_t),d.checkClone=wt.cloneNode(!0).cloneNode(!0).lastChild.checked,wt.innerHTML="<textarea>x</textarea>",d.noCloneChecked=!!wt.cloneNode(!0).lastChild.defaultValue,wt.innerHTML="<option></option>",d.option=!!wt.lastChild;var Tt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function At(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&E(t,e)?_.merge([t],n):n}function Ct(t,e){for(var n=0,r=t.length;n<r;n++)ot.set(t[n],"globalEval",!e||ot.get(e[n],"globalEval"))}Tt.tbody=Tt.tfoot=Tt.colgroup=Tt.caption=Tt.thead,Tt.th=Tt.td,d.option||(Tt.optgroup=Tt.option=[1,"<select multiple='multiple'>","</select>"]);var Nt=/<|&#?\w+;/;function Mt(t,e,n,r,i){for(var o,a,s,l,c,u,f=e.createDocumentFragment(),h=[],d=0,p=t.length;d<p;d++)if((o=t[d])||0===o)if("object"===b(o))_.merge(h,o.nodeType?[o]:o);else if(Nt.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(Et.exec(o)||["",""])[1].toLowerCase(),l=Tt[s]||Tt._default,a.innerHTML=l[1]+_.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;_.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",d=0;o=h[d++];)if(r&&_.inArray(o,r)>-1)i&&i.push(o);else if(c=pt(o),a=At(f.appendChild(o),"script"),c&&Ct(a),n)for(u=0;o=a[u++];)kt.test(o.type||"")&&n.push(o);return f}var jt=/^([^.]*)(?:\.(.+)|)/;function Dt(){return!0}function It(){return!1}function Lt(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)Lt(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=It;else if(!i)return t;return 1===o&&(a=i,i=function(t){return _().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=_.guid++)),t.each((function(){_.event.add(this,e,i,r,n)}))}function $t(t,e,n){n?(ot.set(t,e,!1),_.event.add(t,e,{namespace:!1,handler:function(t){var n,r=ot.get(this,e);if(1&t.isTrigger&&this[e]){if(r)(_.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=i.call(arguments),ot.set(this,e,r),this[e](),n=ot.get(this,e),ot.set(this,e,!1),r!==n)return t.stopImmediatePropagation(),t.preventDefault(),n}else r&&(ot.set(this,e,_.event.trigger(r[0],r.slice(1),this)),t.stopPropagation(),t.isImmediatePropagationStopped=Dt)}})):void 0===ot.get(t,e)&&_.event.add(t,e,Dt)}_.event={global:{},add:function(t,e,n,r,i){var o,a,s,l,c,u,f,h,d,p,g,m=ot.get(t);if(rt(t))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&_.find.matchesSelector(dt,i),n.guid||(n.guid=_.guid++),(l=m.events)||(l=m.events=Object.create(null)),(a=m.handle)||(a=m.handle=function(e){return void 0!==_&&_.event.triggered!==e.type?_.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(U)||[""]).length;c--;)d=g=(s=jt.exec(e[c])||[])[1],p=(s[2]||"").split(".").sort(),d&&(f=_.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=_.event.special[d]||{},u=_.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&_.expr.match.needsContext.test(i),namespace:p.join(".")},o),(h=l[d])||((h=l[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,p,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,u):h.push(u),_.event.global[d]=!0)},remove:function(t,e,n,r,i){var o,a,s,l,c,u,f,h,d,p,g,m=ot.hasData(t)&&ot.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(U)||[""]).length;c--;)if(d=g=(s=jt.exec(e[c])||[])[1],p=(s[2]||"").split(".").sort(),d){for(f=_.event.special[d]||{},h=l[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)u=h[o],!i&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(h.splice(o,1),u.selector&&h.delegateCount--,f.remove&&f.remove.call(t,u));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,p,m.handle)||_.removeEvent(t,d,m.handle),delete l[d])}else for(d in l)_.event.remove(t,d+e[c],n,r,!0);_.isEmptyObject(l)&&ot.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=new Array(arguments.length),l=_.event.fix(t),c=(ot.get(this,"events")||Object.create(null))[l.type]||[],u=_.event.special[l.type]||{};for(s[0]=l,e=1;e<arguments.length;e++)s[e]=arguments[e];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(a=_.event.handlers.call(this,l,c),e=0;(i=a[e++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(r=((_.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,r,i,o,a,s=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?_(i,this).index(c)>-1:_.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,l<e.length&&s.push({elem:c,handlers:e.slice(l)}),s},addProp:function(t,e){Object.defineProperty(_.Event.prototype,t,{enumerable:!0,configurable:!0,get:p(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[_.expando]?t:new _.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return St.test(e.type)&&e.click&&E(e,"input")&&$t(e,"click",!0),!1},trigger:function(t){var e=this||t;return St.test(e.type)&&e.click&&E(e,"input")&&$t(e,"click"),!0},_default:function(t){var e=t.target;return St.test(e.type)&&e.click&&E(e,"input")&&ot.get(e,"click")||E(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},_.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},_.Event=function(t,e){if(!(this instanceof _.Event))return new _.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Dt:It,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&_.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:It,isPropagationStopped:It,isImmediatePropagationStopped:It,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Dt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Dt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Dt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},_.event.addProp),_.each({focus:"focusin",blur:"focusout"},(function(t,e){function n(t){if(m.documentMode){var n=ot.get(this,"handle"),r=_.event.fix(t);r.type="focusin"===t.type?"focus":"blur",r.isSimulated=!0,n(t),r.target===r.currentTarget&&n(r)}else _.event.simulate(e,t.target,_.event.fix(t))}_.event.special[t]={setup:function(){var r;if($t(this,t,!0),!m.documentMode)return!1;(r=ot.get(this,e))||this.addEventListener(e,n),ot.set(this,e,(r||0)+1)},trigger:function(){return $t(this,t),!0},teardown:function(){var t;if(!m.documentMode)return!1;(t=ot.get(this,e)-1)?ot.set(this,e,t):(this.removeEventListener(e,n),ot.remove(this,e))},_default:function(e){return ot.get(e.target,t)},delegateType:e},_.event.special[e]={setup:function(){var r=this.ownerDocument||this.document||this,i=m.documentMode?this:r,o=ot.get(i,e);o||(m.documentMode?this.addEventListener(e,n):r.addEventListener(t,n,!0)),ot.set(i,e,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=m.documentMode?this:r,o=ot.get(i,e)-1;o?ot.set(i,e,o):(m.documentMode?this.removeEventListener(e,n):r.removeEventListener(t,n,!0),ot.remove(i,e))}}})),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){_.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||_.contains(this,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}})),_.fn.extend({on:function(t,e,n,r){return Lt(this,t,e,n,r)},one:function(t,e,n,r){return Lt(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,_(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=It),this.each((function(){_.event.remove(this,t,n,e)}))}});var Pt=/<script|<style|<link/i,qt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ot=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Rt(t,e){return E(t,"table")&&E(11!==e.nodeType?e:e.firstChild,"tr")&&_(t).children("tbody")[0]||t}function Ht(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Bt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ft(t,e){var n,r,i,o,a,s;if(1===e.nodeType){if(ot.hasData(t)&&(s=ot.get(t).events))for(i in ot.remove(e,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)_.event.add(e,i,s[i][n]);at.hasData(t)&&(o=at.access(t),a=_.extend({},o),at.set(e,a))}}function Wt(t,e){var n=e.nodeName.toLowerCase();"input"===n&&St.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Xt(t,e,n,r){e=o(e);var i,a,s,l,c,u,f=0,h=t.length,g=h-1,m=e[0],v=p(m);if(v||h>1&&"string"==typeof m&&!d.checkClone&&qt.test(m))return t.each((function(i){var o=t.eq(i);v&&(e[0]=m.call(this,i,o.html())),Xt(o,e,n,r)}));if(h&&(a=(i=Mt(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=a),a||r)){for(l=(s=_.map(At(i,"script"),Ht)).length;f<h;f++)c=i,f!==g&&(c=_.clone(c,!0,!0),l&&_.merge(s,At(c,"script"))),n.call(t[f],c,f);if(l)for(u=s[s.length-1].ownerDocument,_.map(s,Bt),f=0;f<l;f++)c=s[f],kt.test(c.type||"")&&!ot.access(c,"globalEval")&&_.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?_._evalUrl&&!c.noModule&&_._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):y(c.textContent.replace(Ot,""),c,u))}return t}function Ut(t,e,n){for(var r,i=e?_.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||_.cleanData(At(r)),r.parentNode&&(n&&pt(r)&&Ct(At(r,"script")),r.parentNode.removeChild(r));return t}_.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),l=pt(t);if(!(d.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||_.isXMLDoc(t)))for(a=At(s),r=0,i=(o=At(t)).length;r<i;r++)Wt(o[r],a[r]);if(e)if(n)for(o=o||At(t),a=a||At(s),r=0,i=o.length;r<i;r++)Ft(o[r],a[r]);else Ft(t,s);return(a=At(s,"script")).length>0&&Ct(a,!l&&At(t,"script")),s},cleanData:function(t){for(var e,n,r,i=_.event.special,o=0;void 0!==(n=t[o]);o++)if(rt(n)){if(e=n[ot.expando]){if(e.events)for(r in e.events)i[r]?_.event.remove(n,r):_.removeEvent(n,r,e.handle);n[ot.expando]=void 0}n[at.expando]&&(n[at.expando]=void 0)}}}),_.fn.extend({detach:function(t){return Ut(this,t,!0)},remove:function(t){return Ut(this,t)},text:function(t){return K(this,(function(t){return void 0===t?_.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Xt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Rt(this,t).appendChild(t)}))},prepend:function(){return Xt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Rt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Xt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Xt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(_.cleanData(At(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return _.clone(this,t,e)}))},html:function(t){return K(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Pt.test(t)&&!Tt[(Et.exec(t)||["",""])[1].toLowerCase()]){t=_.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(_.cleanData(At(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Xt(this,arguments,(function(e){var n=this.parentNode;_.inArray(this,t)<0&&(_.cleanData(At(this)),n&&n.replaceChild(e,this))}),t)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){_.fn[t]=function(t){for(var n,r=[],i=_(t),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),_(i[s])[e](n),a.apply(r,n.get());return this.pushStack(r)}}));var zt=new RegExp("^("+ut+")(?!px)[a-z%]+$","i"),Vt=/^--/,Yt=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Gt=function(t,e,n){var r,i,o={};for(i in e)o[i]=t.style[i],t.style[i]=e[i];for(i in r=n.call(t),e)t.style[i]=o[i];return r},Jt=new RegExp(ht.join("|"),"i");function Qt(t,e,n){var r,i,o,a,s=Vt.test(e),l=t.style;return(n=n||Yt(t))&&(a=n.getPropertyValue(e)||n[e],s&&a&&(a=a.replace(N,"$1")||void 0),""!==a||pt(t)||(a=_.style(t,e)),!d.pixelBoxStyles()&&zt.test(a)&&Jt.test(e)&&(r=l.width,i=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=i,l.maxWidth=o)),void 0!==a?a+"":a}function Kt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",dt.appendChild(c).appendChild(u);var e=t.getComputedStyle(u);r="1%"!==e.top,l=12===n(e.marginLeft),u.style.right="60%",a=36===n(e.right),i=36===n(e.width),u.style.position="absolute",o=12===n(u.offsetWidth/3),dt.removeChild(c),u=null}}function n(t){return Math.round(parseFloat(t))}var r,i,o,a,s,l,c=m.createElement("div"),u=m.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",d.clearCloneStyle="content-box"===u.style.backgroundClip,_.extend(d,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,n,r,i;return null==s&&(e=m.createElement("table"),n=m.createElement("tr"),r=m.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",n.style.cssText="box-sizing:content-box;border:1px solid",n.style.height="1px",r.style.height="9px",r.style.display="block",dt.appendChild(e).appendChild(n).appendChild(r),i=t.getComputedStyle(n),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===n.offsetHeight,dt.removeChild(e)),s}}))}();var Zt=["Webkit","Moz","ms"],te=m.createElement("div").style,ee={};function ne(t){var e=_.cssProps[t]||ee[t];return e||(t in te?t:ee[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Zt.length;n--;)if((t=Zt[n]+e)in te)return t}(t)||t)}var re=/^(none|table(?!-c[ea]).+)/,ie={position:"absolute",visibility:"hidden",display:"block"},oe={letterSpacing:"0",fontWeight:"400"};function ae(t,e,n){var r=ft.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function se(t,e,n,r,i,o){var a="width"===e?1:0,s=0,l=0,c=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(c+=_.css(t,n+ht[a],!0,i)),r?("content"===n&&(l-=_.css(t,"padding"+ht[a],!0,i)),"margin"!==n&&(l-=_.css(t,"border"+ht[a]+"Width",!0,i))):(l+=_.css(t,"padding"+ht[a],!0,i),"padding"!==n?l+=_.css(t,"border"+ht[a]+"Width",!0,i):s+=_.css(t,"border"+ht[a]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-s-.5))||0),l+c}function le(t,e,n){var r=Yt(t),i=(!d.boxSizingReliable()||n)&&"border-box"===_.css(t,"boxSizing",!1,r),o=i,a=Qt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(zt.test(a)){if(!n)return a;a="auto"}return(!d.boxSizingReliable()&&i||!d.reliableTrDimensions()&&E(t,"tr")||"auto"===a||!parseFloat(a)&&"inline"===_.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===_.css(t,"boxSizing",!1,r),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+se(t,e,n||(i?"border":"content"),o,r,a)+"px"}function ce(t,e,n,r,i){return new ce.prototype.init(t,e,n,r,i)}_.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Qt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=nt(e),l=Vt.test(e),c=t.style;if(l||(e=ne(s)),a=_.cssHooks[e]||_.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:c[e];"string"===(o=typeof n)&&(i=ft.exec(n))&&i[1]&&(n=vt(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(_.cssNumber[s]?"":"px")),d.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,r){var i,o,a,s=nt(e);return Vt.test(e)||(e=ne(s)),(a=_.cssHooks[e]||_.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=Qt(t,e,r)),"normal"===i&&e in oe&&(i=oe[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),_.each(["height","width"],(function(t,e){_.cssHooks[e]={get:function(t,n,r){if(n)return!re.test(_.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?le(t,e,r):Gt(t,ie,(function(){return le(t,e,r)}))},set:function(t,n,r){var i,o=Yt(t),a=!d.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===_.css(t,"boxSizing",!1,o),l=r?se(t,e,r,s,o):0;return s&&a&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-se(t,e,"border",!1,o)-.5)),l&&(i=ft.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=_.css(t,e)),ae(0,n,l)}}})),_.cssHooks.marginLeft=Kt(d.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Qt(t,"marginLeft"))||t.getBoundingClientRect().left-Gt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),_.each({margin:"",padding:"",border:"Width"},(function(t,e){_.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ht[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(_.cssHooks[t+e].set=ae)})),_.fn.extend({css:function(t,e){return K(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Yt(t),i=e.length;a<i;a++)o[e[a]]=_.css(t,e[a],!1,r);return o}return void 0!==n?_.style(t,e,n):_.css(t,e)}),t,e,arguments.length>1)}}),_.Tween=ce,ce.prototype={constructor:ce,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||_.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(_.cssNumber[n]?"":"px")},cur:function(){var t=ce.propHooks[this.prop];return t&&t.get?t.get(this):ce.propHooks._default.get(this)},run:function(t){var e,n=ce.propHooks[this.prop];return this.options.duration?this.pos=e=_.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ce.propHooks._default.set(this),this}},ce.prototype.init.prototype=ce.prototype,ce.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=_.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){_.fx.step[t.prop]?_.fx.step[t.prop](t):1!==t.elem.nodeType||!_.cssHooks[t.prop]&&null==t.elem.style[ne(t.prop)]?t.elem[t.prop]=t.now:_.style(t.elem,t.prop,t.now+t.unit)}}},ce.propHooks.scrollTop=ce.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},_.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},_.fx=ce.prototype.init,_.fx.step={};var ue,fe,he=/^(?:toggle|show|hide)$/,de=/queueHooks$/;function pe(){fe&&(!1===m.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(pe):t.setTimeout(pe,_.fx.interval),_.fx.tick())}function ge(){return t.setTimeout((function(){ue=void 0})),ue=Date.now()}function me(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ht[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function ve(t,e,n){for(var r,i=(ye.tweeners[e]||[]).concat(ye.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function ye(t,e,n){var r,i,o=0,a=ye.prefilters.length,s=_.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var e=ue||ge(),n=Math.max(0,c.startTime+c.duration-e),r=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(r);return s.notifyWith(t,[c,r,n]),r<1&&a?n:(a||s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c]),!1)},c=s.promise({elem:t,props:_.extend({},e),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},n),originalProperties:e,originalOptions:n,startTime:ue||ge(),duration:n.duration,tweens:[],createTween:function(e,n){var r=_.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,r=e?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return e?(s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c,e])):s.rejectWith(t,[c,e]),this}}),u=c.props;for(!function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=nt(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=_.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(u,c.opts.specialEasing);o<a;o++)if(r=ye.prefilters[o].call(c,t,u,c.opts))return p(r.stop)&&(_._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return _.map(u,ve,c),p(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),_.fx.timer(_.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}_.Animation=_.extend(ye,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return vt(n.elem,t,ft.exec(e),n),n}]},tweener:function(t,e){p(t)?(e=t,t=["*"]):t=t.match(U);for(var n,r=0,i=t.length;r<i;r++)n=t[r],ye.tweeners[n]=ye.tweeners[n]||[],ye.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,l,c,u,f="width"in e||"height"in e,h=this,d={},p=t.style,g=t.nodeType&&mt(t),m=ot.get(t,"fxshow");for(r in n.queue||(null==(a=_._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,_.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],he.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;g=!0}d[r]=m&&m[r]||_.style(t,r)}if((l=!_.isEmptyObject(e))||!_.isEmptyObject(d))for(r in f&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=ot.get(t,"display")),"none"===(u=_.css(t,"display"))&&(c?u=c:(xt([t],!0),c=t.style.display||c,u=_.css(t,"display"),xt([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===_.css(t,"float")&&(l||(h.done((function(){p.display=c})),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,d)l||(m?"hidden"in m&&(g=m.hidden):m=ot.access(t,"fxshow",{display:c}),o&&(m.hidden=!g),g&&xt([t],!0),h.done((function(){for(r in g||xt([t]),ot.remove(t,"fxshow"),d)_.style(t,r,d[r])}))),l=ve(g?m[r]:0,r,h),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ye.prefilters.unshift(t):ye.prefilters.push(t)}}),_.speed=function(t,e,n){var r=t&&"object"==typeof t?_.extend({},t):{complete:n||!n&&e||p(t)&&t,duration:t,easing:n&&e||e&&!p(e)&&e};return _.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in _.fx.speeds?r.duration=_.fx.speeds[r.duration]:r.duration=_.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){p(r.old)&&r.old.call(this),r.queue&&_.dequeue(this,r.queue)},r},_.fn.extend({fadeTo:function(t,e,n,r){return this.filter(mt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=_.isEmptyObject(t),o=_.speed(e,n,r),a=function(){var e=ye(this,_.extend({},t),o);(i||ot.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=_.timers,a=ot.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&de.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||_.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=ot.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=_.timers,a=r?r.length:0;for(n.finish=!0,_.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),_.each(["toggle","show","hide"],(function(t,e){var n=_.fn[e];_.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(me(e,!0),t,r,i)}})),_.each({slideDown:me("show"),slideUp:me("hide"),slideToggle:me("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){_.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),_.timers=[],_.fx.tick=function(){var t,e=0,n=_.timers;for(ue=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||_.fx.stop(),ue=void 0},_.fx.timer=function(t){_.timers.push(t),_.fx.start()},_.fx.interval=13,_.fx.start=function(){fe||(fe=!0,pe())},_.fx.stop=function(){fe=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(e,n){return e=_.fx&&_.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,r){var i=t.setTimeout(n,e);r.stop=function(){t.clearTimeout(i)}}))},function(){var t=m.createElement("input"),e=m.createElement("select").appendChild(m.createElement("option"));t.type="checkbox",d.checkOn=""!==t.value,d.optSelected=e.selected,(t=m.createElement("input")).value="t",t.type="radio",d.radioValue="t"===t.value}();var be,xe=_.expr.attrHandle;_.fn.extend({attr:function(t,e){return K(this,_.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){_.removeAttr(this,t)}))}}),_.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?_.prop(t,e,n):(1===o&&_.isXMLDoc(t)||(i=_.attrHooks[e.toLowerCase()]||(_.expr.match.bool.test(e)?be:void 0)),void 0!==n?null===n?void _.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=_.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!d.radioValue&&"radio"===e&&E(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(U);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),be={set:function(t,e,n){return!1===e?_.removeAttr(t,n):t.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=xe[e]||_.find.attr;xe[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=xe[a],xe[a]=i,i=null!=n(t,e,r)?a:null,xe[a]=o),i}}));var we=/^(?:input|select|textarea|button)$/i,_e=/^(?:a|area)$/i;function Se(t){return(t.match(U)||[]).join(" ")}function Ee(t){return t.getAttribute&&t.getAttribute("class")||""}function ke(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(U)||[]}_.fn.extend({prop:function(t,e){return K(this,_.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[_.propFix[t]||t]}))}}),_.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&_.isXMLDoc(t)||(e=_.propFix[e]||e,i=_.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=_.find.attr(t,"tabindex");return e?parseInt(e,10):we.test(t.nodeName)||_e.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),d.optSelected||(_.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){_.propFix[this.toLowerCase()]=this})),_.fn.extend({addClass:function(t){var e,n,r,i,o,a;return p(t)?this.each((function(e){_(this).addClass(t.call(this,e,Ee(this)))})):(e=ke(t)).length?this.each((function(){if(r=Ee(this),n=1===this.nodeType&&" "+Se(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=Se(n),r!==a&&this.setAttribute("class",a)}})):this},removeClass:function(t){var e,n,r,i,o,a;return p(t)?this.each((function(e){_(this).removeClass(t.call(this,e,Ee(this)))})):arguments.length?(e=ke(t)).length?this.each((function(){if(r=Ee(this),n=1===this.nodeType&&" "+Se(r)+" "){for(o=0;o<e.length;o++)for(i=e[o];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");a=Se(n),r!==a&&this.setAttribute("class",a)}})):this:this.attr("class","")},toggleClass:function(t,e){var n,r,i,o,a=typeof t,s="string"===a||Array.isArray(t);return p(t)?this.each((function(n){_(this).toggleClass(t.call(this,n,Ee(this),e),e)})):"boolean"==typeof e&&s?e?this.addClass(t):this.removeClass(t):(n=ke(t),this.each((function(){if(s)for(o=_(this),i=0;i<n.length;i++)r=n[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==a||((r=Ee(this))&&ot.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":ot.get(this,"__className__")||""))})))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+Se(Ee(n))+" ").indexOf(e)>-1)return!0;return!1}});var Te=/\r/g;_.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=p(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,_(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=_.map(i,(function(t){return null==t?"":t+""}))),(e=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=_.valHooks[i.type]||_.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Te,""):null==n?"":n:void 0}}),_.extend({valHooks:{option:{get:function(t){var e=_.find.attr(t,"value");return null!=e?e:Se(_.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!E(n.parentNode,"optgroup"))){if(e=_(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=_.makeArray(e),a=i.length;a--;)((r=i[a]).selected=_.inArray(_.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),_.each(["radio","checkbox"],(function(){_.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=_.inArray(_(t).val(),e)>-1}},d.checkOn||(_.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}));var Ae=t.location,Ce={guid:Date.now()},Ne=/\?/;_.parseXML=function(e){var n,r;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){}return r=n&&n.getElementsByTagName("parsererror")[0],n&&!r||_.error("Invalid XML: "+(r?_.map(r.childNodes,(function(t){return t.textContent})).join("\n"):e)),n};var Me=/^(?:focusinfocus|focusoutblur)$/,je=function(t){t.stopPropagation()};_.extend(_.event,{trigger:function(e,n,r,i){var o,a,s,l,c,f,h,d,v=[r||m],y=u.call(e,"type")?e.type:e,b=u.call(e,"namespace")?e.namespace.split("."):[];if(a=d=s=r=r||m,3!==r.nodeType&&8!==r.nodeType&&!Me.test(y+_.event.triggered)&&(y.indexOf(".")>-1&&(b=y.split("."),y=b.shift(),b.sort()),c=y.indexOf(":")<0&&"on"+y,(e=e[_.expando]?e:new _.Event(y,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=b.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),n=null==n?[e]:_.makeArray(n,[e]),h=_.event.special[y]||{},i||!h.trigger||!1!==h.trigger.apply(r,n))){if(!i&&!h.noBubble&&!g(r)){for(l=h.delegateType||y,Me.test(l+y)||(a=a.parentNode);a;a=a.parentNode)v.push(a),s=a;s===(r.ownerDocument||m)&&v.push(s.defaultView||s.parentWindow||t)}for(o=0;(a=v[o++])&&!e.isPropagationStopped();)d=a,e.type=o>1?l:h.bindType||y,(f=(ot.get(a,"events")||Object.create(null))[e.type]&&ot.get(a,"handle"))&&f.apply(a,n),(f=c&&a[c])&&f.apply&&rt(a)&&(e.result=f.apply(a,n),!1===e.result&&e.preventDefault());return e.type=y,i||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(v.pop(),n)||!rt(r)||c&&p(r[y])&&!g(r)&&((s=r[c])&&(r[c]=null),_.event.triggered=y,e.isPropagationStopped()&&d.addEventListener(y,je),r[y](),e.isPropagationStopped()&&d.removeEventListener(y,je),_.event.triggered=void 0,s&&(r[c]=s)),e.result}},simulate:function(t,e,n){var r=_.extend(new _.Event,n,{type:t,isSimulated:!0});_.event.trigger(r,null,e)}}),_.fn.extend({trigger:function(t,e){return this.each((function(){_.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return _.event.trigger(t,e,n,!0)}});var De=/\[\]$/,Ie=/\r?\n/g,Le=/^(?:submit|button|image|reset|file)$/i,$e=/^(?:input|select|textarea|keygen)/i;function Pe(t,e,n,r){var i;if(Array.isArray(e))_.each(e,(function(e,i){n||De.test(t)?r(t,i):Pe(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==b(e))r(t,e);else for(i in e)Pe(t+"["+i+"]",e[i],n,r)}_.param=function(t,e){var n,r=[],i=function(t,e){var n=p(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!_.isPlainObject(t))_.each(t,(function(){i(this.name,this.value)}));else for(n in t)Pe(n,t[n],e,i);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=_.prop(this,"elements");return t?_.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!_(this).is(":disabled")&&$e.test(this.nodeName)&&!Le.test(t)&&(this.checked||!St.test(t))})).map((function(t,e){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,(function(t){return{name:e.name,value:t.replace(Ie,"\r\n")}})):{name:e.name,value:n.replace(Ie,"\r\n")}})).get()}});var qe=/%20/g,Oe=/#.*$/,Re=/([?&])_=[^&]*/,He=/^(.*?):[ \t]*([^\r\n]*)$/gm,Be=/^(?:GET|HEAD)$/,Fe=/^\/\//,We={},Xe={},Ue="*/".concat("*"),ze=m.createElement("a");function Ve(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(U)||[];if(p(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Ye(t,e,n,r){var i={},o=t===Xe;function a(s){var l;return i[s]=!0,_.each(t[s]||[],(function(t,s){var c=s(e,n,r);return"string"!=typeof c||o||i[c]?o?!(l=c):void 0:(e.dataTypes.unshift(c),a(c),!1)})),l}return a(e.dataTypes[0])||!i["*"]&&a("*")}function Ge(t,e){var n,r,i=_.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&_.extend(!0,t,r),t}ze.href=Ae.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ae.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ae.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ue,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ge(Ge(t,_.ajaxSettings),e):Ge(_.ajaxSettings,t)},ajaxPrefilter:Ve(We),ajaxTransport:Ve(Xe),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var r,i,o,a,s,l,c,u,f,h,d=_.ajaxSetup({},n),p=d.context||d,g=d.context&&(p.nodeType||p.jquery)?_(p):_.event,v=_.Deferred(),y=_.Callbacks("once memory"),b=d.statusCode||{},x={},w={},S="canceled",E={readyState:0,getResponseHeader:function(t){var e;if(c){if(!a)for(a={};e=He.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==c&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)E.always(t[E.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||S;return r&&r.abort(e),k(0,e),this}};if(v.promise(E),d.url=((e||d.url||Ae.href)+"").replace(Fe,Ae.protocol+"//"),d.type=n.method||n.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(U)||[""],null==d.crossDomain){l=m.createElement("a");try{l.href=d.url,l.href=l.href,d.crossDomain=ze.protocol+"//"+ze.host!=l.protocol+"//"+l.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=_.param(d.data,d.traditional)),Ye(We,d,n,E),c)return E;for(f in(u=_.event&&d.global)&&0==_.active++&&_.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Be.test(d.type),i=d.url.replace(Oe,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(qe,"+")):(h=d.url.slice(i.length),d.data&&(d.processData||"string"==typeof d.data)&&(i+=(Ne.test(i)?"&":"?")+d.data,delete d.data),!1===d.cache&&(i=i.replace(Re,"$1"),h=(Ne.test(i)?"&":"?")+"_="+Ce.guid+++h),d.url=i+h),d.ifModified&&(_.lastModified[i]&&E.setRequestHeader("If-Modified-Since",_.lastModified[i]),_.etag[i]&&E.setRequestHeader("If-None-Match",_.etag[i])),(d.data&&d.hasContent&&!1!==d.contentType||n.contentType)&&E.setRequestHeader("Content-Type",d.contentType),E.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Ue+"; q=0.01":""):d.accepts["*"]),d.headers)E.setRequestHeader(f,d.headers[f]);if(d.beforeSend&&(!1===d.beforeSend.call(p,E,d)||c))return E.abort();if(S="abort",y.add(d.complete),E.done(d.success),E.fail(d.error),r=Ye(Xe,d,n,E)){if(E.readyState=1,u&&g.trigger("ajaxSend",[E,d]),c)return E;d.async&&d.timeout>0&&(s=t.setTimeout((function(){E.abort("timeout")}),d.timeout));try{c=!1,r.send(x,k)}catch(t){if(c)throw t;k(-1,t)}}else k(-1,"No Transport");function k(e,n,a,l){var f,h,m,x,w,S=n;c||(c=!0,s&&t.clearTimeout(s),r=void 0,o=l||"",E.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(x=function(t,e,n){for(var r,i,o,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||t.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(d,E,a)),!f&&_.inArray("script",d.dataTypes)>-1&&_.inArray("json",d.dataTypes)<0&&(d.converters["text script"]=function(){}),x=function(t,e,n,r){var i,o,a,s,l,c={},u=t.dataTypes.slice();if(u[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(i in c)if((s=i.split(" "))[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(d,x,E,f),f?(d.ifModified&&((w=E.getResponseHeader("Last-Modified"))&&(_.lastModified[i]=w),(w=E.getResponseHeader("etag"))&&(_.etag[i]=w)),204===e||"HEAD"===d.type?S="nocontent":304===e?S="notmodified":(S=x.state,h=x.data,f=!(m=x.error))):(m=S,!e&&S||(S="error",e<0&&(e=0))),E.status=e,E.statusText=(n||S)+"",f?v.resolveWith(p,[h,S,E]):v.rejectWith(p,[E,S,m]),E.statusCode(b),b=void 0,u&&g.trigger(f?"ajaxSuccess":"ajaxError",[E,d,f?h:m]),y.fireWith(p,[E,S]),u&&(g.trigger("ajaxComplete",[E,d]),--_.active||_.event.trigger("ajaxStop")))}return E},getJSON:function(t,e,n){return _.get(t,e,n,"json")},getScript:function(t,e){return _.get(t,void 0,e,"script")}}),_.each(["get","post"],(function(t,e){_[e]=function(t,n,r,i){return p(n)&&(i=i||r,r=n,n=void 0),_.ajax(_.extend({url:t,type:e,dataType:i,data:n,success:r},_.isPlainObject(t)&&t))}})),_.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),_._evalUrl=function(t,e,n){return _.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){_.globalEval(t,e,n)}})},_.fn.extend({wrapAll:function(t){var e;return this[0]&&(p(t)&&(t=t.call(this[0])),e=_(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return p(t)?this.each((function(e){_(this).wrapInner(t.call(this,e))})):this.each((function(){var e=_(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=p(t);return this.each((function(n){_(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){_(this).replaceWith(this.childNodes)})),this}}),_.expr.pseudos.hidden=function(t){return!_.expr.pseudos.visible(t)},_.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var Je={0:200,1223:204},Qe=_.ajaxSettings.xhr();d.cors=!!Qe&&"withCredentials"in Qe,d.ajax=Qe=!!Qe,_.ajaxTransport((function(e){var n,r;if(d.cors||Qe&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);n=function(t){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Je[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&t.setTimeout((function(){n&&r()}))},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}})),_.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return _.globalEval(t),t}}}),_.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),_.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=_("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),m.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Ke,Ze=[],tn=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ze.pop()||_.expando+"_"+Ce.guid++;return this[t]=!0,t}}),_.ajaxPrefilter("json jsonp",(function(e,n,r){var i,o,a,s=!1!==e.jsonp&&(tn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&tn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=p(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(tn,"$1"+i):!1!==e.jsonp&&(e.url+=(Ne.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||_.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=t[i],t[i]=function(){a=arguments},r.always((function(){void 0===o?_(t).removeProp(i):t[i]=o,e[i]&&(e.jsonpCallback=n.jsonpCallback,Ze.push(i)),a&&p(o)&&o(a[0]),a=o=void 0})),"script"})),d.createHTMLDocument=((Ke=m.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ke.childNodes.length),_.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(d.createHTMLDocument?((r=(e=m.implementation.createHTMLDocument("")).createElement("base")).href=m.location.href,e.head.appendChild(r)):e=m),o=!n&&[],(i=q.exec(t))?[e.createElement(i[1])]:(i=Mt([t],e,o),o&&o.length&&_(o).remove(),_.merge([],i.childNodes)));var r,i,o},_.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=Se(t.slice(s)),t=t.slice(0,s)),p(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&_.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?_("<div>").append(_.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},_.expr.pseudos.animated=function(t){return _.grep(_.timers,(function(e){return t===e.elem})).length},_.offset={setOffset:function(t,e,n){var r,i,o,a,s,l,c=_.css(t,"position"),u=_(t),f={};"static"===c&&(t.style.position="relative"),s=u.offset(),o=_.css(t,"top"),l=_.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(a=(r=u.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),p(e)&&(e=e.call(t,n,_.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+i),"using"in e?e.using.call(t,f):u.css(f)}},_.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){_.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===_.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===_.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=_(t).offset()).top+=_.css(t,"borderTopWidth",!0),i.left+=_.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-_.css(r,"marginTop",!0),left:e.left-i.left-_.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===_.css(t,"position");)t=t.offsetParent;return t||dt}))}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;_.fn[t]=function(r){return K(this,(function(t,r,i){var o;if(g(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),_.each(["top","left"],(function(t,e){_.cssHooks[e]=Kt(d.pixelPosition,(function(t,n){if(n)return n=Qt(t,e),zt.test(n)?_(t).position()[e]+"px":n}))})),_.each({Height:"height",Width:"width"},(function(t,e){_.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){_.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return K(this,(function(e,n,i){var o;return g(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?_.css(e,n,s):_.style(e,n,i,s)}),e,a?i:void 0,a)}}))})),_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){_.fn[e]=function(t){return this.on(e,t)}})),_.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.on("mouseenter",t).on("mouseleave",e||t)}}),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){_.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var en=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;_.proxy=function(t,e){var n,r,o;if("string"==typeof e&&(n=t[e],e=t,t=n),p(t))return r=i.call(arguments,2),o=function(){return t.apply(e||this,r.concat(i.call(arguments)))},o.guid=t.guid=t.guid||_.guid++,o},_.holdReady=function(t){t?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=E,_.isFunction=p,_.isWindow=g,_.camelCase=nt,_.type=b,_.now=Date.now,_.isNumeric=function(t){var e=_.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},_.trim=function(t){return null==t?"":(t+"").replace(en,"$1")};var nn=t.jQuery,rn=t.$;return _.noConflict=function(e){return t.$===_&&(t.$=rn),e&&t.jQuery===_&&(t.jQuery=nn),_},void 0===e&&(t.jQuery=t.$=_),_}))}(cr);var ur=lr(cr.exports);class fr{constructor(t,e=void 0,n=!1){ur(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=ur("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,i="fa-download"){this.createButton(t,i),ht(`#${t}`).on("click",(()=>{this.downloadSvg(e,n,r)})).on("mouseover",(()=>{this.tooltip.show("Download the plot")})).on("mouseout",(()=>{this.tooltip.hide()}))}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n),ht(`#${t}`).on("click",e).on("mouseover",(()=>{this.tooltip.show("Reset the scales")})).on("mouseout",(()=>{this.tooltip.hide()}))}createButton(t,e="fa-download",n="need to define",r=void 0){const i=ur("<a/>").attr("id",t).addClass("btn btn-default btn-light btn-sm").appendTo(this.bar);return e.startsWith("fa-")?ur("<i/>").addClass(`fa ${e}`).appendTo(i):i.text(e),this.buttons[t]=i,"foo"!=t&&ht(`#${t}`).on("click",(()=>{void 0===r?alert("need to define the click event"):r()})).on("mouseover",(()=>{this.tooltip.show(n)})).on("mouseout",(()=>{this.tooltip.hide()})),i}attachTooltip(t){this.tooltip=t}downloadSvg(t,n,r){console.log(t,n,r);let i=ur(ur(ur(""+("#"+t)))[0]),o=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),a=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var i=n[r].cssRules,o=0;o<i.length;o++){var a=i[o];if(void 0!==a.style){var s,l=void 0===a.selectorText?a.selectorText:a.selectorText.replace(`#${t[0].id} `,"");try{s=ur(t).find(l)}catch(t){s=[]}s.length>0&&(e+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var c=document.createElement("style");return c.setAttribute("type","text/css"),c.innerHTML="<![CDATA[\n"+e+"\n]]>",c}(i.get());o.prepend(a),ur("#"+r).html("").hide();let s=ur(`#${r}`).append(o).html(),l=new Blob([s],{type:"image/svg+xml"});e.saveAs(l,n),ur(`#${r}`).html("").hide()}}var hr={value:function(){}};function dr(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new pr(r)}function pr(t){this._=t}function gr(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function mr(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=hr,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}pr.prototype=dr.prototype={constructor:pr,on:function(t,e){var n,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<s;)if(n=(t=o[a]).type)i[n]=mr(i[n],t.name,e);else if(null==e)for(n in i)i[n]=mr(i[n],t.name,null);return this}for(;++a<s;)if((n=(t=o[a]).type)&&(n=gr(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new pr(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var vr,yr,br=0,xr=0,wr=0,_r=1e3,Sr=0,Er=0,kr=0,Tr="object"==typeof performance&&performance.now?performance:Date,Ar="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Cr(){return Er||(Ar(Nr),Er=Tr.now()+kr)}function Nr(){Er=0}function Mr(){this._call=this._time=this._next=null}function jr(t,e,n){var r=new Mr;return r.restart(t,e,n),r}function Dr(){Er=(Sr=Tr.now())+kr,br=xr=0;try{!function(){Cr(),++br;for(var t,e=vr;e;)(t=Er-e._time)>=0&&e._call.call(null,t),e=e._next;--br}()}finally{br=0,function(){var t,e,n=vr,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:vr=e);yr=t,Lr(r)}(),Er=0}}function Ir(){var t=Tr.now(),e=t-Sr;e>_r&&(kr-=e,Sr=t)}function Lr(t){br||(xr&&(xr=clearTimeout(xr)),t-Er>24?(t<1/0&&(xr=setTimeout(Dr,t-Tr.now()-kr)),wr&&(wr=clearInterval(wr))):(wr||(Sr=Tr.now(),wr=setInterval(Ir,_r)),br=1,Ar(Dr)))}function $r(t,e,n){var r=new Mr;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r}Mr.prototype=jr.prototype={constructor:Mr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Cr():+n)+(null==e?0:+e),this._next||yr===this||(yr?yr._next=this:vr=this,yr=this),this._call=t,this._time=n,Lr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Lr())}};var Pr=dr("start","end","cancel","interrupt"),qr=[],Or=0,Rr=1,Hr=2,Br=3,Fr=4,Wr=5,Xr=6;function Ur(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(t){n.state=Rr,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)}function a(o){var c,u,f,h;if(n.state!==Rr)return l();for(c in i)if((h=i[c]).name===n.name){if(h.state===Br)return $r(a);h.state===Fr?(h.state=Xr,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<e&&(h.state=Xr,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[c])}if($r((function(){n.state===Br&&(n.state=Fr,n.timer.restart(s,n.delay,n.time),s(o))})),n.state=Hr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Hr){for(n.state=Br,r=new Array(f=n.tween.length),c=0,u=-1;c<f;++c)(h=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++u]=h);r.length=u+1}}function s(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=Wr,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===Wr&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var r in n.state=Xr,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=jr(o,0,n.time)}(t,n,{name:e,index:r,group:i,on:Pr,tween:qr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Or})}function zr(t,e){var n=Yr(t,e);if(n.state>Or)throw new Error("too late; already scheduled");return n}function Vr(t,e){var n=Yr(t,e);if(n.state>Br)throw new Error("too late; already running");return n}function Yr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Gr(t,e){var n,r;return function(){var i=Vr(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function Jr(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Vr(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},l=0,c=i.length;l<c;++l)if(i[l].name===e){i[l]=s;break}l===c&&i.push(s)}o.tween=i}}function Qr(t,e,n){var r=t._id;return t.each((function(){var t=Vr(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Yr(t,r).value[e]}}function Kr(t,e){var n;return("number"==typeof e?Ce:e instanceof se?_e:(n=se(e))?(e=n,_e):De)(t,e)}function Zr(t){return function(){this.removeAttribute(t)}}function ti(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ei(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function ni(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function ri(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttribute(t))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttribute(t)}}function ii(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttributeNS(t.space,t.local)}}function oi(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,i)),n}return i._value=e,i}function ai(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,i)),n}return i._value=e,i}function si(t,e){return function(){zr(this,t).delay=+e.apply(this,arguments)}}function li(t,e){return e=+e,function(){zr(this,t).delay=e}}function ci(t,e){return function(){Vr(this,t).duration=+e.apply(this,arguments)}}function ui(t,e){return e=+e,function(){Vr(this,t).duration=e}}var fi=ft.prototype.constructor;function hi(t){return function(){this.style.removeProperty(t)}}var di=0;function pi(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function gi(){return++di}var mi=ft.prototype;pi.prototype={constructor:pi,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=c(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,l,u=r[a],f=u.length,h=o[a]=new Array(f),d=0;d<f;++d)(s=u[d])&&(l=t.call(s,s.__data__,d,u))&&("__data__"in s&&(l.__data__=s.__data__),h[d]=l,Ur(h[d],e,n,d,h,Yr(s,n)));return new pi(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=f(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var l,c=r[s],u=c.length,h=0;h<u;++h)if(l=c[h]){for(var d,p=t.call(l,l.__data__,h,c),g=Yr(l,n),m=0,v=p.length;m<v;++m)(d=p[m])&&Ur(d,e,n,m,p,g);o.push(p),a.push(l)}return new pi(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],c=0;c<s;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&l.push(o);return new pi(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,c=e[s],u=n[s],f=c.length,h=a[s]=new Array(f),d=0;d<f;++d)(l=c[d]||u[d])&&(h[d]=l);for(;s<r;++s)a[s]=e[s];return new pi(a,this._parents,this._name,this._id)},selection:function(){return new fi(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=gi(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,c=0;c<l;++c)if(a=s[c]){var u=Yr(a,e);Ur(a,t,n,c,s,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new pi(r,this._parents,t,n)},call:mi.call,nodes:mi.nodes,node:mi.node,size:mi.size,empty:mi.empty,each:mi.each,on:function(t,e){var n=this._id;return arguments.length<2?Yr(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?zr:Vr;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}(n,t,e))},attr:function(t,e){var n=i(t),r="transform"===n?Xe:Kr;return this.attrTween(t,"function"==typeof e?(n.local?ii:ri)(n,r,Qr(this,"attr."+t,e)):null==e?(n.local?ti:Zr)(n):(n.local?ni:ei)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=i(t);return this.tween(n,(r.local?oi:ai)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?We:Kr;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=N(this,t),a=(this.style.removeProperty(t),N(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,hi(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=N(this,t),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(t),l=s=N(this,t)),a===l?null:a===r&&l===i?o:(i=l,o=e(r=a,s))}}(t,r,Qr(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var l=Vr(this,t),c=l.on,u=null==l.value[a]?o||(o=hi(e)):void 0;c===n&&i===u||(r=(n=c).copy()).on(s,i=u),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=N(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,o,n)),r}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Qr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Yr(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?Gr:Jr)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?si:li)(e,t)):Yr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?ci:ui)(e,t)):Yr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Vr(this,t).ease=e}}(e,t)):Yr(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},l={value:function(){0==--i&&o()}};n.each((function(){var n=Vr(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(l)),n.on=e}))}))}};var vi={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function yi(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return vi.time=Cr(),vi;return n}ft.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>Hr&&n.state<Wr,n.state=Xr,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},ft.prototype.transition=function(t){var e,n;t instanceof pi?(e=t._id,t=t._name):(e=gi(),(n=vi).time=Cr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,c=0;c<l;++c)(a=s[c])&&Ur(a,t,e,c,s,n||yi(a,e));return new pi(r,this._parents,t,e)};var bi=Math.PI,xi=2*bi,wi=1e-6,_i=xi-wi;function Si(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ei(){return new Si}function ki(){return Math.random()}Si.prototype=Ei.prototype={constructor:Si,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,l=r-e,c=o-t,u=a-e,f=c*c+u*u;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>wi)if(Math.abs(u*s-l*c)>wi&&i){var h=n-o,d=r-a,p=s*s+l*l,g=h*h+d*d,m=Math.sqrt(p),v=Math.sqrt(f),y=i*Math.tan((bi-Math.acos((p+f-g)/(2*m*v)))/2),b=y/v,x=y/m;Math.abs(b-1)>wi&&(this._+="L"+(t+b*c)+","+(e+b*u)),this._+="A"+i+","+i+",0,0,"+ +(u*h>c*d)+","+(this._x1=t+x*s)+","+(this._y1=e+x*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),l=t+a,c=e+s,u=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+c:(Math.abs(this._x1-l)>wi||Math.abs(this._y1-c)>wi)&&(this._+="L"+l+","+c),n&&(f<0&&(f=f%xi+xi),f>_i?this._+="A"+n+","+n+",0,1,"+u+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+u+","+(this._x1=l)+","+(this._y1=c):f>wi&&(this._+="A"+n+","+n+",0,"+ +(f>=bi)+","+u+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}},function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(ki);var Ti=function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(ki);!function t(e){function n(){var t=Ti.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(ki);var Ai=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(ki);function Ci(t){return function(){return t}}function Ni(t){this._context=t}function Mi(t){return new Ni(t)}function ji(t){return t[0]}function Di(t){return t[1]}function Ii(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Li(t,e){this._context=t,this._k=(1-e)/6}!function t(e){function n(t){var n=Ai.source(e)(t);return function(){return n()/t}}return n.source=t,n}(ki),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(ki),Ni.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},Li.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ii(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Ii(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var $i=function t(e){function n(t){return new Li(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Pi(){this._=null}function qi(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Oi(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Ri(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Hi(t){for(;t.L;)t=t.L;return t}function Bi(t,e,n,r){var i=[null,null],o=fo.push(i)-1;return i.left=t,i.right=e,n&&Wi(i,t,e,n),r&&Wi(i,e,t,r),co[t.index].halfedges.push(o),co[e.index].halfedges.push(o),i}function Fi(t,e,n){var r=[e,n];return r.left=t,r}function Wi(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Xi(t,e,n,r,i){var o,a=t[0],s=t[1],l=a[0],c=a[1],u=0,f=1,h=s[0]-l,d=s[1]-c;if(o=e-l,h||!(o>0)){if(o/=h,h<0){if(o<u)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>u&&(u=o)}if(o=r-l,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>u&&(u=o)}else if(h>0){if(o<u)return;o<f&&(f=o)}if(o=n-c,d||!(o>0)){if(o/=d,d<0){if(o<u)return;o<f&&(f=o)}else if(d>0){if(o>f)return;o>u&&(u=o)}if(o=i-c,d||!(o<0)){if(o/=d,d<0){if(o>f)return;o>u&&(u=o)}else if(d>0){if(o<u)return;o<f&&(f=o)}return!(u>0||f<1)||(u>0&&(t[0]=[l+u*h,c+u*d]),f<1&&(t[1]=[l+f*h,c+f*d]),!0)}}}}}function Ui(t,e,n,r,i){var o=t[1];if(o)return!0;var a,s,l=t[0],c=t.left,u=t.right,f=c[0],h=c[1],d=u[0],p=u[1],g=(f+d)/2,m=(h+p)/2;if(p===h){if(g<e||g>=r)return;if(f>d){if(l){if(l[1]>=i)return}else l=[g,n];o=[g,i]}else{if(l){if(l[1]<n)return}else l=[g,i];o=[g,n]}}else if(s=m-(a=(f-d)/(p-h))*g,a<-1||a>1)if(f>d){if(l){if(l[1]>=i)return}else l=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(l){if(l[1]<n)return}else l=[(i-s)/a,i];o=[(n-s)/a,n]}else if(h<p){if(l){if(l[0]>=r)return}else l=[e,a*e+s];o=[r,a*r+s]}else{if(l){if(l[0]<e)return}else l=[r,a*r+s];o=[e,a*e+s]}return t[0]=l,t[1]=o,!0}function zi(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Vi(t,e){return e[+(e.left!==t.site)]}function Yi(t,e){return e[+(e.left===t.site)]}Pi.prototype={constructor:Pi,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Hi(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Oi(this,n),n=(t=n).U),n.C=!1,r.C=!0,Ri(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Ri(this,n),n=(t=n).U),n.C=!1,r.C=!0,Oi(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Hi(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Oi(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Ri(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Oi(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Ri(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Oi(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Ri(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Gi,Ji=[];function Qi(){qi(this),this.x=this.y=this.arc=this.site=this.cy=null}function Ki(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],s=i[1],l=r[0]-a,c=r[1]-s,u=o[0]-a,f=o[1]-s,h=2*(l*f-c*u);if(!(h>=-po)){var d=l*l+c*c,p=u*u+f*f,g=(f*d-c*p)/h,m=(l*p-u*d)/h,v=Ji.pop()||new Qi;v.arc=t,v.site=i,v.x=g+a,v.y=(v.cy=m+s)+Math.sqrt(g*g+m*m),t.circle=v;for(var y=null,b=uo._;b;)if(v.y<b.y||v.y===b.y&&v.x<=b.x){if(!b.L){y=b.P;break}b=b.L}else{if(!b.R){y=b;break}b=b.R}uo.insert(y,v),y||(Gi=v)}}}}function Zi(t){var e=t.circle;e&&(e.P||(Gi=e.N),uo.remove(e),Ji.push(e),qi(e),t.circle=null)}var to=[];function eo(){qi(this),this.edge=this.site=this.circle=null}function no(t){var e=to.pop()||new eo;return e.site=t,e}function ro(t){Zi(t),lo.remove(t),to.push(t),qi(t)}function io(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,s=[t];ro(t);for(var l=o;l.circle&&Math.abs(n-l.circle.x)<ho&&Math.abs(r-l.circle.cy)<ho;)o=l.P,s.unshift(l),ro(l),l=o;s.unshift(l),Zi(l);for(var c=a;c.circle&&Math.abs(n-c.circle.x)<ho&&Math.abs(r-c.circle.cy)<ho;)a=c.N,s.push(c),ro(c),c=a;s.push(c),Zi(c);var u,f=s.length;for(u=1;u<f;++u)c=s[u],l=s[u-1],Wi(c.edge,l.site,c.site,i);l=s[0],(c=s[f-1]).edge=Bi(l.site,c.site,null,i),Ki(l),Ki(c)}function oo(t){for(var e,n,r,i,o=t[0],a=t[1],s=lo._;s;)if((r=ao(s,a)-o)>ho)s=s.L;else{if(!((i=o-so(s,a))>ho)){r>-ho?(e=s.P,n=s):i>-ho?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){co[t.index]={site:t,halfedges:[]}}(t);var l=no(t);if(lo.insert(e,l),e||n){if(e===n)return Zi(e),n=no(e.site),lo.insert(l,n),l.edge=n.edge=Bi(e.site,l.site),Ki(e),void Ki(n);if(n){Zi(e),Zi(n);var c=e.site,u=c[0],f=c[1],h=t[0]-u,d=t[1]-f,p=n.site,g=p[0]-u,m=p[1]-f,v=2*(h*m-d*g),y=h*h+d*d,b=g*g+m*m,x=[(m*y-d*b)/v+u,(h*b-g*y)/v+f];Wi(n.edge,c,p,x),l.edge=Bi(c,t,null,x),n.edge=Bi(t,p,null,x),Ki(e),Ki(n)}else l.edge=Bi(e.site,l.site)}}function ao(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(n=a.site)[0],l=n[1],c=l-e;if(!c)return s;var u=s-r,f=1/o-1/c,h=u/c;return f?(-h+Math.sqrt(h*h-2*f*(u*u/(-2*c)-l+c/2+i-o/2)))/f+r:(r+s)/2}function so(t,e){var n=t.N;if(n)return ao(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var lo,co,uo,fo,ho=1e-6,po=1e-12;function go(t,e){return e[1]-t[1]||e[0]-t[0]}function mo(t,e){var n,r,i,o=t.sort(go).pop();for(fo=[],co=new Array(t.length),lo=new Pi,uo=new Pi;;)if(i=Gi,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(oo(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;io(i.arc)}if(function(){for(var t,e,n,r,i=0,o=co.length;i<o;++i)if((t=co[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=zi(t,fo[e[n]]);for(a.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[a[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var a=+e[0][0],s=+e[0][1],l=+e[1][0],c=+e[1][1];!function(t,e,n,r){for(var i,o=fo.length;o--;)Ui(i=fo[o],t,e,n,r)&&Xi(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>ho||Math.abs(i[0][1]-i[1][1])>ho)||delete fo[o]}(a,s,l,c),function(t,e,n,r){var i,o,a,s,l,c,u,f,h,d,p,g,m=co.length,v=!0;for(i=0;i<m;++i)if(o=co[i]){for(a=o.site,s=(l=o.halfedges).length;s--;)fo[l[s]]||l.splice(s,1);for(s=0,c=l.length;s<c;)p=(d=Yi(o,fo[l[s]]))[0],g=d[1],f=(u=Vi(o,fo[l[++s%c]]))[0],h=u[1],(Math.abs(p-f)>ho||Math.abs(g-h)>ho)&&(l.splice(s,0,fo.push(Fi(a,d,Math.abs(p-t)<ho&&r-g>ho?[t,Math.abs(f-t)<ho?h:r]:Math.abs(g-r)<ho&&n-p>ho?[Math.abs(h-r)<ho?f:n,r]:Math.abs(p-n)<ho&&g-e>ho?[n,Math.abs(f-n)<ho?h:e]:Math.abs(g-e)<ho&&p-t>ho?[Math.abs(h-e)<ho?f:t,e]:null))-1),++c);c&&(v=!1)}if(v){var y,b,x,w=1/0;for(i=0,v=null;i<m;++i)(o=co[i])&&(x=(y=(a=o.site)[0]-t)*y+(b=a[1]-e)*b)<w&&(w=x,v=o);if(v){var _=[t,e],S=[t,r],E=[n,r],k=[n,e];v.halfedges.push(fo.push(Fi(a=v.site,_,S))-1,fo.push(Fi(a,S,E))-1,fo.push(Fi(a,E,k))-1,fo.push(Fi(a,k,_))-1)}}for(i=0;i<m;++i)(o=co[i])&&(o.halfedges.length||delete co[i])}(a,s,l,c)}this.edges=fo,this.cells=co,lo=uo=fo=co=null}function vo(t,e,n){this.k=t,this.x=e,this.y=n}mo.prototype={constructor:mo,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return Vi(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,l,c,u=n.site,f=-1,h=e[i[o-1]],d=h.left===u?h.right:h.left;++f<o;)a=d,d=(h=e[i[f]]).left===u?h.right:h.left,a&&d&&r<a.index&&r<d.index&&(l=a,c=d,((s=u)[0]-c[0])*(l[1]-s[1])-(s[0]-l[0])*(c[1]-s[1])<0)&&t.push([u.data,a.data,d.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var l=t-i.site[0],c=e-i.site[1],u=l*l+c*c;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var l=t-s[0],c=e-s[1],f=l*l+c*c;f<u&&(u=f,a=s.index)}}))}while(null!==a);return o._found=r,null==n||u<=n*n?i.site:null}},vo.prototype={constructor:vo,scale:function(t){return 1===t?this:new vo(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new vo(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},vo.prototype;class yo{constructor(t,e=!1,n=30,r=-40,i=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),ht("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){ht("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=et.pageX,e=et.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY,ht("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){ht("#"+this.id).html(t)}}class bo{constructor(t,e=!0,n=10,r="YlGnBu",i=2,o="heatmapTooltip",a="heatmap-tooltip"){this.data=t,this.useLog=e,this.logBase=n,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=i,this.colorScheme=r,ht(`#${o}`).empty()&&ht("body").append("div").attr("id",o),this.tooltip=new yo(o),ht(`#${o}`).classed(a,!0),this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new fr(t,e),this.toolbar}drawColorLegend(t,e={x:0,y:0},n=5){On(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.logBase)}redraw(t,e,n,r={w:1e3,h:1e3},i=30){this._setXScale(r.w,e),this._setYScale(r.h,n),this.draw(t,r,i)}draw(t,e={w:1e3,h:600},n=30,r=!1,i=null,o=0,a="right"){void 0===this.xList&&this._setXScale(e.w),void 0===this.yList&&this._setYScale(e.h),void 0===this.colorScale&&this._setColorScale(o);const s=t.selectAll(".exp-map-xlabel").data(this.xList),l=null==i?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+i;s.attr("transform",(t=>`translate(${this.xScale(t)+5}, ${l}) rotate(${n})`)),s.enter().append("text").attr("class",((t,e)=>`exp-map-xlabel x${e}`)).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").style("font-size",this.xScale.bandwidth()>12?12:this.xScale.bandwidth()).attr("transform",(t=>`translate(${this.xScale(t)+5}, ${l}) rotate(${n})`)).merge(s).text((t=>t)),s.exit().remove(),t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text((t=>t)).attr("x","left"==a?this.xScale.range()[0]-5:this.xScale.range()[1]+5).attr("y",(t=>this.yScale(t)+this.yScale.bandwidth()/2)).style("font-size",this.yScale.bandwidth()).attr("class",((t,e)=>`exp-map-ylabel y${e}`)).attr("text-anchor","left"==a?"end":"start").style("cursor","default").on("click",(t=>{alert(`${t} is clicked. To be implemented`)})).on("mouseover",(function(){ht(this).classed("normal",!1).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).classed("normal",!0).classed("highlighted",!1)}));const c=t.selectAll(".exp-map-cell").data(this.data,(t=>t.value));c.attr("x",(t=>this.xScale(t.x))).attr("y",(t=>this.yScale(t.y))).attr("row",(t=>`x${this.xList.indexOf(t.x)}`)).attr("col",(t=>`y${this.yList.indexOf(t.y)}`));const u=this;c.enter().append("rect").attr("row",(t=>`x${this.xList.indexOf(t.x)}`)).attr("col",(t=>`y${this.yList.indexOf(t.y)}`)).attr("x",(t=>this.xScale(t.x))).attr("y",(t=>this.yScale(t.y))).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",(function(e){const n=ht(this);u.cellMouseover(e,t,n)})).on("mouseout",(function(){u.cellMouseout(t)})).merge(c).style("fill",(t=>t.color?t.color:(r&&0==t.value&&console.info(t),!r||0!=t.value&&null!==t.value&&void 0!==t.value?this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value):"#ffffff"))).style("stroke",(t=>r&&0==t.value?"lightgrey":t.stroke?t.stroke:"none")).style("stroke",(t=>r&&0==t.value||t.stroke?1:0)),c.exit().remove()}cellMouseout(t){t.selectAll("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(t,e,n){const r=n.attr("row"),i=n.attr("col");e.selectAll(".exp-map-xlabel").filter(`.${r}`).classed("highlighted",!0),e.selectAll(".exp-map-ylabel").filter(`.${i}`).classed("highlighted",!0),n.classed("highlighted",!0);const o=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue;this.tooltip.show(`Column: ${t.x} <br/> Row: ${t.y}<br/> Value: ${o}`)}_setXScale(t,e=void 0){this.xList=void 0!==e?e:Mt().key((t=>t.x)).entries(this.data).map((t=>t.key)),this.xScale=Ft().domain(this.xList).range([0,t]).padding(.05)}_setYScale(t,e){this.yList=void 0!==e?e:Mt().key((t=>t.y)).entries(this.data).map((t=>t.key)),this.yScale=Ft().domain(this.yList).range([0,t]).padding(.05)}_setColorScale(t=0){let e=this.useLog,n=this.data.map((t=>e?this._log(t.value):t.value));this.colorScale=qn(n,this.colorScheme,t)}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class xo{constructor(t,e,n,r="YlGnBu",i=2,o=new Rn,a="dmapTooltip",s=!0,l=10,c=""){this.config=o.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new ar(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new ar(this.data.rowTree,"h"),heatmap:new bo(this.data.heatmap,s,l,r,i,a)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.title=c,this.toolbar=void 0,this.tooltip=this.objects.heatmap.tooltip}createToolbar(t,e){return this.toolbar=new fr(t,e),this.toolbar}render(t,e,n=!0,r=!0,i="top",o=5){let a,s;this._updateConfig(i),this.visualComponents.svg=Hn(t,this.config.w,this.config.h,this.config.margin,e),n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),a=this.objects.columnTree.xScale.domain()),r&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),s=this.objects.rowTree.yScale.domain()),""!=this.title&&ht(`#${t}-svg`).append("text").attr("x",0).attr("y",20).text(this.title),this._renderHeatmap(this.objects.heatmap,a,s,o)}_renderTree(t,e,n){let r=this.visualComponents.svg;const i="row"==t?".exp-map-ylabel":".exp-map-xlabel",o=r.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`);e.draw(o,n.w,n.h);return o.selectAll(".dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",6).attr("fill","red");let e=t.leaves().map((t=>t.data.name));r.selectAll(i).filter((t=>e.includes(t))).classed("highlighted",!0),r.selectAll(".leaf-color").filter((t=>e.includes(t))).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).attr("r",2).attr("fill","#333"),r.selectAll(i).classed("highlighted",!1),r.selectAll(".leaf-color").classed("highlighted",!1)})),o}_renderHeatmap(t,e,n,r=5){let i=this.visualComponents.svg;const o=this.config.panels.main,a=i.append("g").attr("id",o.id).attr("transform",`translate(${o.x}, ${o.y})`);t.redraw(a,e,n,{w:o.w,h:o.h}),t.drawColorLegend(i,this.config.panels.legend,r)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}class wo{constructor(t,e,n,r,i=!1,o=1e3,a=0){this.gene=t,this.exons=e,"+"==this.gene.strand?this.exons.sort(((t,e)=>Number(t.exonNumber)-Number(e.exonNumber))):this.exons.sort(((t,e)=>Number(e.exonNumber)-Number(t.exonNumber))),this.exonsCurated=n.sort(((t,e)=>Number(t.exonNumber)-Number(e.exonNumber))),this.junctions=r.sort(((t,e)=>t.junctionId<e.junctionId?-1:t.junctionId>e.junctionId?1:0)),this.isIsoform=i,this.maxIntronLength=o,this.intronLength=0,this.minExonWidth=a,this.nullColor="#DDDDDD"}changeTextlabel(t,e){t.selectAll("#modelInfo").text(e)}addData(t,e,n,r,i){void 0!==e&&t.selectAll(".junc").style("fill",(n=>{const i=e.filter((t=>t.junctionId==n.junctionId))[0],o=0==i.value?this.nullColor:r(i.value);return t.selectAll(".junc-curve").filter(`.junc${n.junctionId}`).style("stroke",o),o})),t.selectAll(".exon-curated").style("fill",(t=>{const e=n.filter((e=>e.exonId==t.exonId))[0];if(void 0===e)throw`${t.exonId} has no data`;return 0==e.value?this.nullColor:i(e.value)}))}render(t,e){this.setXscale(e.w);const n=e.h/2;if(this.exons.forEach(((t,e)=>{t.x=0==e?0:this.exons[e-1].x+this.exons[e-1].w+this.xScale(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)})),this.exonsCurated.forEach(((t,e)=>{if(t.oriExon=this._findExon(t.chromStart)||this._findExon(t.chromEnd),void 0!==t.oriExon){if(Number(t.oriExon.chromStart)==Number(t.chromStart))t.x=t.oriExon.x;else{const e=Number(t.chromStart)-Number(t.oriExon.chromStart)+1;t.x=t.oriExon.x+this.xScale(e)}void 0===t.length&&(t.length=Number(t.chromEnd)-Number(t.chromStart)+1),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}else console.warn(`${this.gene.transcriptId}-${t.exonId} can't map to full gene model`)})),this.isIsoform)t.append("line").attr("x1",this.exonsCurated[0].x).attr("x2",this.exonsCurated[this.exonsCurated.length-1].x).attr("y1",n+7.5).attr("y2",n+7.5).classed("intron",!0);else{this.junctions=this.junctions.filter((t=>(t.startExon=this._findExon(t.chromStart),t.endExon=this._findExon(t.chromEnd),void 0!==t.startExon&&void 0!==t.endExon))),this.junctions.sort(((t,e)=>+t.chromStart<+e.chromStart?-1:+t.chromStart>+e.chromStart?1:+t.chromEnd<+e.chromEnd?-1:+t.chromEnd>+e.chromEnd?1:0)),this.junctions.forEach(((t,e)=>{t.displayName=`Junction ${e+1}`;const r=Number(t.chromStart)-Number(t.startExon.chromStart)+1,i=Number(t.chromEnd)-Number(t.endExon.chromStart)+1;t.startX=t.startExon.x+this.xScale(r),t.endX=t.endExon.x+this.xScale(i),t.cx=t.startX+(t.endX-t.startX+1)/2,t.cy=n-15*(Math.abs(Number(t.endExon.exonNumber)-Number(t.startExon.exonNumber))+.5),t.cy<0&&(t.cy=0)}));const e=this.junctions.reduce(((t,e)=>(t[e.displayName]=1+t[e.displayName]||1,t)),{});this.junctions.forEach((t=>{e[t.displayName]>1&&(t.cy-=15*Math.random())}));const r=function(){var t=ji,e=Di,n=Ci(!0),r=null,i=Mi,o=null;function a(a){var s,l,c,u=a.length,f=!1;for(null==r&&(o=i(c=Ei())),s=0;s<=u;++s)!(s<u&&n(l=a[s],s,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(l,s,a),+e(l,s,a));if(c)return o=null,c+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:Ci(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:Ci(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:Ci(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().x((t=>t.x)).y((t=>t.y)).curve($i);this.junctions.forEach(((e,i)=>{t.append("path").datum([{x:e.startX,y:n},{x:e.cx,y:e.cy},{x:e.endX,y:n}]).attr("class",`junc-curve junc${e.junctionId}`).attr("d",r).style("stroke","#92bcc9")}));const i=t.selectAll(".junc").data(this.junctions);i.attr("cx",(t=>t.cx)),i.attr("cy",(t=>t.cy)),i.enter().append("circle").attr("class",(t=>`junc junc${t.junctionId}`)).attr("cx",(t=>t.cx)).attr("cy",(t=>t.cy)).merge(i).attr("r",4).style("fill","rgb(86, 98, 107)");const o=t.selectAll(".exon").data(this.exons);o.attr("x",(t=>t.x)),o.attr("y",n),o.enter().append("rect").attr("class",(t=>`exon exon${t.exonNumber}`)).attr("y",n).attr("rx",2).attr("ry",2).attr("width",(t=>t.w)).attr("height",15).attr("x",(t=>t.x)).merge(o).style("cursor","default"),t.append("text").attr("id","modelInfo").attr("text-anchor","end").attr("x",this.xScale(0)).attr("y",n-10).style("font-size",12).text("Gene Model")}const r=t.selectAll(".exon-curated").data(this.exonsCurated);r.attr("x",(t=>t.x)),r.attr("y",n),r.enter().append("rect").attr("class",(t=>this.isIsoform?"exon-curated":`exon-curated exon-curated${t.exonNumber}`)).attr("y",n).attr("width",(t=>t.w)).attr("height",15).attr("x",(t=>t.x)).merge(r).style("fill","#eee").style("cursor","default"),"left"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabel").attr("text-anchor","end").attr("x",this.xScale.range()[0]-5).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId),"right"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabelRight").attr("text-anchor","start").attr("x",this.xScale.range()[1]+50).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId)}setXscale(t){this.exons.sort(((t,e)=>Number(t.chromStart)<Number(e.chromStart)?-1:Number(t.chromStart)>Number(e.chromStart)?1:0));let e=0;this.exons.forEach(((t,n)=>{if(t.length=Number(t.chromEnd)-Number(t.chromStart)+1,0==n)e+=t.length;else{let r=this.exons[n-1];t.intronLength=Number(t.chromStart)-Number(r.chromEnd)+1,e+=t.length+(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength)}}));const n=[0,e],r=[0,t];this.xScale=vn().domain(n).range(r)}setXscaleFixIntron(t){this.exons.forEach((t=>{t.length=Number(t.chromEnd)-Number(t.chromStart)+1}));const e=St(this.exons,(t=>t.length)),n=[0,e*this.exons.length],r=[0,t];this.xScale=vn().domain(n).range(r);const i=this.xScale.invert(this.minExonWidth),o=function(t,e){var n,r=t.length,i=-1,o=0;if(null==e)for(;++i<r;)(n=+t[i])&&(o+=n);else for(;++i<r;)(n=+e(t[i],i,t))&&(o+=n);return o}(this.exons,(t=>t.length>i?t.length:i));this.intronLength=(e*this.exons.length-o)/(this.exons.length-1)}_findExon(t){t=Number(t);const e=this.exons.filter((e=>Number(e.chromStart)-1<=t&&Number(e.chromEnd)+1>=t));return 1==e.length?e[0]:0==e.length?void console.warn("No exon found for: "+t):void console.warn("More than one exons found for: "+t)}}class _o{constructor(t,e,n,r){this.isoforms=t,this.isoformExons=e,this.modelExons=n,this.visualDom=void 0,this.config=r,this.nullColor="#DDDDDD"}showData(t,e,n,r,i=!0){if(i){t.sort(((t,e)=>-(t.displayValue-e.displayValue)));const e=t.map((t=>t.transcriptId));this.sortTracks(e)}t.forEach((t=>{this.visualDom.select(`#${t.transcriptId.replace(".","_")}`).selectAll(".exon-curated").style("fill",0==t.value?this.nullColor:e(t.value))})),this.visualDom.select(".lollipopGraph").remove();const o=this.visualDom.append("g").classed("lollipopGraph",!0).attr("transform","translate(-100, 13)"),a=o.selectAll(".lollipop").data(t).enter().append("g").classed("lollipop",!0);var s;a.append("line").attr("x1",0).attr("y1",(t=>this.yScale(t.transcriptId))).attr("y2",(t=>this.yScale(t.transcriptId))).style("stroke",(t=>0==t.value?this.nullColor:e(t.value))).style("stroke-width",2).transition().duration(1e3).attr("x2",(t=>0==t.value?0:n(t.value))),a.append("circle").attr("cx",0).attr("cy",(t=>this.yScale(t.transcriptId))).attr("r",5).style("fill",(t=>0==t.value?this.nullColor:e(t.value))).transition().duration(1e3).attr("cx",(t=>n(t.value))),o.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call((s=n,or(Gn,s)).ticks(3)),o.append("text").attr("id","lolliLabel").attr("x",0).attr("y",-40).attr("text-anchor","end").style("font-size",9).text("TPM"),o.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call(function(t){return or(Jn,t)}(this.yScale).tickValues([])),o.append("text").attr("id","lolliLabel").attr("x",10).attr("y",-20).text(`Transcript Expression in ${r}`).attr("text-anchor","start").style("font-size","12px")}sortTracks(t){this.setYscale(this.config.h,t),this.render(!0)}render(t=!1,e=void 0,n="left",r=1e3){if(void 0===e&&void 0===this.visualDom)throw"Fatal Error: must provide a dom element";void 0===e?e=this.visualDom:this.visualDom=e,void 0===this.yScale&&this.setYscale(this.config.h);const i=e.selectAll(".isotrack").data(this.isoforms.map((t=>t.transcriptId)));i.transition().duration(r).attr("transform",(t=>`translate(0, ${this.yScale(t)})`)),i.enter().append("g").attr("id",(t=>t.replace(".","_"))).attr("class","isotrack").attr("transform",(t=>"translate(0, 0)")).transition().duration(r/2).attr("transform",(t=>`translate(0, ${this.yScale(t)})`)),t||this._renderModels(this.config.w,n)}_renderModels(t,e="left"){this.isoforms.forEach((n=>{let r=void 0===this.modelExons||null===this.modelExons?this.isoformExons[n.transcriptId]:this.modelExons;const i=new wo(n,r,this.isoformExons[n.transcriptId],[],!0),o=ht(`#${n.transcriptId.replace(".","_")}`);i.render(o,{w:t,h:this.yScale.bandwidth(),labelOn:e})}))}setYscale(t,e=void 0){void 0===e&&(e=this.isoforms.map((t=>t.transcriptId))),this.yScale=Ft().domain(e).range([0,t]).padding(.05)}}async function So(t,e=250){let n,r=[],i=0;do{const o=ko(t,i,e);n=await fetch(o).then((t=>t.json())),r=r.concat(n.data),i+=1}while(i<n.paging_info.numberOfPages);return r}async function Eo(t){return await fetch(t).then((t=>t.json()))}function ko(t,e,n=250){let r;const i="page="+e;r=t.includes("?")?t+"&"+i:t+"?"+i;return r=r+"&"+("itemsPerPage="+n),r}function To(t,e,n,r=function(){const t="http://gtexportal.org/api/v2/",e="gtex_v8";return{singleCellExpression:t+"expression/singleNucleusGeneExpression?datasetId=gtex_snrnaseq_pilot&gencodeId=",singleCellExpressionSummary:t+"expression/singleNucleusGeneExpressionSummary",dyneqtl:t+"association/dyneqtl",snp:t+"dataset/variant?snpId=",variantId:t+"dataset/variant?variantId=",exonExp:t+"expression/clusteredMedianExonExpression?gencodeId=",transcriptExp:t+"expression/clusteredMedianTranscriptExpression?gencodeId=",junctionExp:t+"expression/clusteredMedianJunctionExpression?gencodeId=",transcript:t+`reference/transcript?datasetId=${e}&gencodeId=`,exon:t+`reference/exon?datasetId=${e}&gencodeId=`,geneModel:t+"dataset/collapsedGeneModelExon?gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?gencodeId=",geneExp:t+"expression/geneExpression?gencodeId=",medGeneExp:t+"expression/clusteredMedianGeneExpression",topInTissueFiltered:t+"expression/topExpressedGene?filterMtGene=true&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?&filterMtGene=false&tissueSiteDetailId=",geneId:t+"reference/gene?geneId=",tissue:t+"dataset/tissueSiteDetail",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",dynsqtl:t+"association/dynsqtl",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){So(r.geneId+e).then((function(i){const o=function(t,e=!1,n=null){if(0==t.length)throw alert("No gene is found"),"Fatal Error: gene(s) not found";if(e){if(null===n)throw"Please provide a gene ID for search results validation";if(t.length>1){let e=t.filter((t=>t.geneSymbolUpper==n.toUpperCase()||t.gencodeId==n.toUpperCase()));if(e.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";if(0==e.length)throw alert("No gene is found with "+n),"Fatal Error: gene not found";t=e}return t[0]}return t}(i,!0,e),a=o.gencodeId,s=[So(r.tissue),So(r.geneModelUnfiltered+a),So(r.geneModel+a),So(r.transcript+a),Eo(r.junctionExp+a),Eo(r.exonExp+a),Eo(r.transcriptExp+a),So(r.exon+a)];Promise.all(s).then((function(e){const r=(h=e[0],["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach((t=>{if(!h[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t})),h),i=bn(e[1]),a=bn(e[2]),s=function(t){return["transcriptId","start","end"].forEach((e=>{if(!t[0].hasOwnProperty(e))throw"Parsing Error: required json attribute is missing: "+e})),t.sort(((t,e)=>-(Math.abs(t.end-t.start)+1-(Math.abs(e.end-e.start)+1))))}(e[3]),l=function(t){return t.reduce(((t,e)=>(["transcriptId","chromosome","start","end","exonNumber","exonId"].forEach((t=>{if(!e.hasOwnProperty(t))throw console.error(e),"Parsing Error: required json attribute is missing: "+t})),void 0===t[e.transcriptId]&&(t[e.transcriptId]=[]),e.chrom=e.chromosome,e.chromStart=e.start,e.chromEnd=e.end,t[e.transcriptId].push(e),t)),{})}(e[7]),c=function(t){const e="medianJunctionExpression";if(!t.hasOwnProperty(e))throw"Parsing Error: parseJunctions input error. "+e;return 0==t[e].length?(console.warn("There is no junction entry"),[]):(["tissueSiteDetailId","junctionId"].forEach((n=>{if(!t[e][0].hasOwnProperty(n))throw console.error(t[0]),"Parsing Error: required junction attribute is missing: "+n})),t[e].filter((t=>"Liver"==t.tissueSiteDetailId)).map((t=>{let e=t.junctionId.split("_");return{chrom:e[0],chromStart:e[1],chromEnd:e[2],junctionId:t.junctionId}})))}(e[4]),u=function(t){const e="medianJunctionExpression";if(!t.hasOwnProperty(e))throw"parseJunctionExpression input error";const n=t[e];if(void 0!==n&&0!=n.length)return n.forEach((t=>{["tissueSiteDetailId","junctionId","median","gencodeId"].forEach((e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsingr Error: parseJunctionExpression attr not found: "+e}));let e=t.median,n=t.tissueSiteDetailId;t.tissueId=n,t.id=t.gencodeId,t.x=t.junctionId,t.y=n,t.value=Number(e),t.displayValue=Number(e)})),n.sort(((t,e)=>t.junctionId>e.junctionId?1:t.junctionId<e.junctionId?-1:0));console.warn("No junction data found")}(e[4]),f=function(t,e){const n=e.reduce(((t,e)=>(t[e.exonId]=e,t)),{}),r="medianExonExpression";if(!t.hasOwnProperty(r))throw"parseExonExpression input error";const i=t[r];return["median","exonId","tissueSiteDetailId"].forEach((t=>{if(!i[0].hasOwnProperty(t))throw"Fatal Error: parseExonExpression attr not found: "+t})),i.forEach((t=>{const e=n[t.exonId];["end","start"].forEach((t=>{if(!e.hasOwnProperty(t))throw"Fatal Error: parseExonExpression position attr not found: "+t})),t.l=e.end-e.start+1,t.value=Number(t.median)/t.l,t.displayValue=Number(t.median)/t.l,t.x=t.exonId,t.y=t.tissueSiteDetailId,t.id=t.gencodeId,t.chromStart=e.start,t.chromEnd=e.end,t.unit="median "+t.unit+" per base",t.tissueId=t.tissueSiteDetailId})),i.sort(((t,e)=>t.chromStart<e.chromStart?-1:t.chromStart>e.chromStart?1:0))}(e[5],a);var h;let d,p,g,m,v=function(t){const e="medianTranscriptExpression";if(!t.hasOwnProperty(e))throw"Parsing Error: parseTranscriptExpression input error";return t[e].forEach((t=>{["median","transcriptId","tissueSiteDetailId","gencodeId"].forEach((e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: required transcipt attribute is missing: "+e})),t.value=Number(t.median),t.displayValue=Number(t.median),t.x=t.transcriptId,t.y=t.tissueSiteDetailId,t.id=t.gencodeId,t.tissueId=t.tissueSiteDetailId})),t[e]}(e[6]);c.length>=0&&void 0!==u&&(g=qn(u.map((t=>Math.log10(t.value+1))),"Reds",0)),d=qn(f.map((t=>Math.log2(t.value+1))),"Blues",0),p=qn(v.map((t=>Math.log10(t.value+1))),"Purples",0);const y={root:n,svg:`${n}-svg`,tooltip:"isoformTooltip",toolbar:"isoformToolbar",clone:"isoformClone",buttons:{save:"isoformSave"}};["toolbar","clone"].forEach((t=>{$("<div/>").attr("id",y[t]).appendTo($(`#${y.root}`))}));const b=`${o.geneSymbol}: ${o.gencodeId} ${o.description}`,x=$(`#${n}`).innerWidth()||window.innerWidth;switch(t){case"isoformTransposed":{const t=new Rn(x,150,100,{top:60,right:350,bottom:200,left:50},12,10);["tissue","transcript"].forEach((t=>{if(!e[6].clusters.hasOwnProperty(t))throw console.error(e[6].clusters),"Parse Error: Required cluster attribute is missing: "+t}));let n=e[6].clusters.tissue,r=e[6].clusters.transcript,i=function(t){const e="medianTranscriptExpression";if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: parseTranscriptExpressionTranspose input error.";return t[e].forEach((t=>{["median","transcriptId","tissueSiteDetailId","gencodeId"].forEach((e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: Required transcript attribute is missing: "+e}));const e=t.median,n=t.tissueSiteDetailId;t.value=Number(e),t.displayValue=Number(e),t.y=t.transcriptId,t.x=n,t.id=t.gencodeId,t.tissueId=n})),t[e]}(e[6]);if(m=new xo(n,r,i,"Purples",5,t,y.tooltip,!0,10,`Isoform Expression of ${b}`),m.render(y.root,y.svg,!0,!0,top,5),!r.startsWith("Not enough data")){const t=m.objects.rowTree.yScale.domain();s.sort(((e,n)=>t.indexOf(e.transcriptId)<t.indexOf(n.transcriptId)?-1:t.indexOf(e.transcriptId)>t.indexOf(n.transcriptId)?1:0))}break}case"junction":{if(0==c.length){$(`#${n}`).text("This gene has no junctions available.");break}const t=new Rn(x,150,0,{top:60,right:350,bottom:200,left:50},12,10);let r=e[4].clusters.tissue;m=new xo(void 0,r,u,"Reds",5,t,y.tooltip,!0,10,`Junction Expression of ${b}`),m.render(y.root,y.svg,!1,!0,top,5);break}case"exon":{const t=new Rn(x,150,0,{top:60,right:350,bottom:200,left:50},12,10);let n=e[5].clusters.tissue;m=new xo(void 0,n,f,"Blues",5,t,y.tooltip,!0,2,`Exon Expression of ${b}`),m.render(y.root,y.svg,!1,!0,top,5);break}default:throw"Input type is not recognized"}$("#spinner").hide();const w=t.startsWith("isoform")?60:80,_={x:m.config.panels.main.x,y:m.config.panels.main.h+m.config.panels.main.y+w,w:m.config.panels.main.w,h:100},S={x:_.x,y:_.y+_.h,w:_.w,h:20*s.length,labelOn:"left"};let E=+ht(`#${y.svg}`).attr("height")+_.h+S.h;t.startsWith("isoform")||(E=E<1200?1200:E),ht(`#${y.svg}`).attr("height",E);const k=new wo(o,i,a,c),T=m.visualComponents.svg.append("g").attr("id","geneModel").attr("transform",`translate(${_.x}, ${_.y})`);t.startsWith("isoform")||k.render(T,_);const A=new _o(s,l,i,S),C=m.visualComponents.svg.append("g").attr("transform",`translate(${S.x}, ${S.y})`),N=t.startsWith("isoform")?"both":"left";switch(A.render(!1,C,N),t.startsWith("isoform")||function(t,e,n){const r=t.visualComponents.svg;let i=t.objects.heatmap.xScale.range()[1]+50;const o=30,a=50;On("Exon read counts per base",r.select("#geneModel"),n,{x:i,y:o},!0,5,2,{h:20,w:10},"v"),i+=a,void 0!==e&&On("Junction read counts",r.select("#geneModel"),e,{x:i,y:o},!0,5,10,{h:20,w:10},"v")}(m,g,d),function(t,e){let n=t.createToolbar(e.toolbar,t.tooltip);n.createDownloadSvgButton(e.buttons.save,e.svg,`${e.root}-save.svg`,e.clone)}(m,y),t){case"isoformTransposed":!function(t,e,n,r,i,o,a,s,l){const c=e.visualComponents.svg,u=t.reduce(((t,e)=>(t[e.tissueSiteDetailId]=e,t)),{}),f=e.tooltip;c.selectAll(".exp-map-xlabel").text((t=>void 0!==u[t]?u[t].tissueSiteDetail:t)).style("cursor","pointer"),c.select("#heatmap").selectAll(".exp-map-xcolor").data(e.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",(t=>e.objects.heatmap.xScale(t))).attr("y",e.objects.heatmap.yScale.range()[1]+5).attr("width",e.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("exp-map-xcolor",!0).style("fill",(t=>`#${u[t].colorHex}`)),e.objects.heatmap.yScale.domain().length>15&&c.select("#heatmap").selectAll(".leaf-color").data(e.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",(t=>e.objects.heatmap.xScale(t))).attr("y",e.objects.heatmap.yScale.range()[0]-10).attr("width",e.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("leaf-color",!0).style("fill",(t=>`#${u[t].colorHex}`));c.selectAll(".exp-map-xlabel").on("mouseover",(function(){ht(this).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).classed("highlighted",!1)})).on("click",(function(t){c.selectAll(".exp-map-xlabel").classed("clicked",!1),ht(this).classed("clicked",!0);const e=t;void 0!==a&&a.filter((t=>t.tissueSiteDetailId==e)),s.filter((t=>t.tissueSiteDetailId==e));const r=vn().domain([Et(l.map((t=>t.value))),St(l.map((t=>t.value)))]).range([0,-100]),i=l.filter((t=>t.tissueSiteDetailId==e)),f=!1;n.showData(i,o,r,u[e].tissueSiteDetail,f)})),c.selectAll(".exp-map-cell").on("mouseover",(function(t){const n=ht(this);e.objects.heatmap.cellMouseover(t,c,n);const r=void 0===u[t.x]?t.x:u[t.x].tissueSiteDetail,i=parseFloat(t.displayValue.toExponential()).toPrecision(3),o=[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${r}</span>`,`<span class="tooltip-key">Isoform</span>: <span class="tooltip-value">${t.transcriptId}</span>`,`<span class="tooltip-key">${t.unit.charAt(0).toUpperCase()+t.unit.slice(1)}</span>: <span class="tooltip-value">${i}</span>`];f.show(o.join("<br/>"));const a=t.transcriptId.replace(".","_");c.select(`#${a}`).selectAll(".exon-curated").classed("highlighted",!0),c.select(`#${a}`).selectAll(".intron").classed("highlighted",!0)})).on("mouseout",(function(t){c.selectAll("*").classed("highlighted",!1),f.hide()})),c.selectAll(".exp-map-ylabel").on("mouseover",(function(t){ht(this).classed("highlighted",!0);const e=t.replace(".","_");c.select(`#${e}`).selectAll(".exon-curated").classed("highlighted",!0),c.select(`#${e}`).selectAll(".intron").classed("highlighted",!0)})).on("mouseout",(function(){ht(this).classed("highlighted",!1),c.selectAll(".exon-curated").classed("highlighted",!1),c.selectAll(".intron").classed("highlighted",!1)})).on("click",(function(){}))}(r,m,A,0,0,p,u,f,v),No(m);break;case"junction":if(0==c.length)break;Ao(r,k,m,A,g,d,p,u,f,v),function(t,e,n){const r=n.visualComponents.svg,i=n.tooltip,o=t.reduce(((t,e)=>(t[e.tissueSiteDetailId]=e,t)),{});r.selectAll(".exp-map-cell").on("mouseover",(function(t){const a=ht(this);n.objects.heatmap.cellMouseover(t,r,a);const s=void 0===o[t.y]?t.x:o[t.y].tissueSiteDetail,l=e.junctions.filter((e=>e.junctionId==t.x&&!e.filtered))[0],c=parseFloat(t.displayValue.toExponential()).toPrecision(3),u=[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${s}</span>`,`<span class="tooltip-key">Junction</span>: <span class="tooltip-value">${l.displayName}</span>`,`<span class="tooltip-key">Start</span>: <span class="tooltip-value">${l.chromStart}</span>`,`<span class="tooltip-key">End</span>: <span class="tooltip-value">${l.chromEnd}</span>`,`<span class="tooltip-key">Exon length</span>: <span class="tooltip-value">${Number(l.chromEnd)-Number(l.chromStart)+1} bp</span>`,`<span class="tooltip-key">${t.unit.charAt(0).toUpperCase()+t.unit.slice(1)}</span>: <span class="tooltip-value">${c}</span>`];i.show(u.join("<br/>")),r.selectAll(`.junc${l.junctionId}`).classed("highlighted",!0),void 0!==l&&(r.selectAll(`.exon${l.startExon.exonNumber}`).classed("highlighted",!0),r.selectAll(`.exon${l.endExon.exonNumber}`).classed("highlighted",!0))})).on("mouseout",(function(t){r.selectAll("*").classed("highlighted",!1),i.hide()})),r.selectAll(".exp-map-xlabel").each((function(){const t=ht(this),n=t.text();t.attr("id",`${n}`),t.classed(`junc${n}`,!0);const r=e.junctions.filter((t=>t.junctionId==`${n}`&&!t.filtered))[0];void 0!==r&&t.text(r.displayName)})).on("mouseover",(function(){const t=ht(this).attr("id");ht(this).classed("highlighted",!0),r.selectAll(`.junc${t}`).classed("highlighted",!0);const n=e.junctions.filter((e=>e.junctionId==t&&!e.filtered))[0];void 0!==n&&(r.selectAll(`.exon${n.startExon.exonNumber}`).classed("highlighted",!0),r.selectAll(`.exon${n.endExon.exonNumber}`).classed("highlighted",!0))})).on("mouseout",(function(){ht(this).classed("highlighted",!1),dt(".junc").classed("highlighted",!1),dt(".junc-curve").classed("highlighted",!1),r.selectAll(".exon").classed("highlighted",!1)}))}(r,k,m),Co(r,k,m),No(m);break;case"exon":Ao(r,k,m,A,g,d,p,u,f,v),function(t,e,n){const r=n.visualComponents.svg,i=n.tooltip,o=t.reduce(((t,e)=>(t[e.tissueSiteDetailId]=e,t)),{});r.selectAll(".exp-map-cell").on("mouseover",(function(t){const e=ht(this);n.objects.heatmap.cellMouseover(t,r,e);const a=void 0===o[t.y]?t.x:o[t.y].tissueSiteDetail,s=parseFloat(t.displayValue.toExponential()).toPrecision(3),l=[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${a}</span>`,`<span class="tooltip-key">Exon</span>: <span class="tooltip-value">${t.exonId}</span>`,`<span class="tooltip-key">Start</span>: <span class="tooltip-value">${t.chromStart}</span>`,`<span class="tooltip-key">End</span>: <span class="tooltip-value">${t.chromEnd}</span>`,`<span class="tooltip-key">Exon length</span>: <span class="tooltip-value">${Number(t.chromEnd)-Number(t.chromStart)+1} bp</span>`,`<span class="tooltip-key">${t.unit.charAt(0).toUpperCase()+t.unit.slice(1)}</span>: <span class="tooltip-value">${s}</span>`];i.show(l.join("<br/>"));const c=t.exonId.split("_")[1];r.selectAll(`.exon-curated${c}`).classed("highlighted",!0)})).on("mouseout",(function(t){r.selectAll("*").classed("highlighted",!1),i.hide()})),r.selectAll(".exp-map-xlabel").each((function(t){const e=t.split("_")[1];ht(this).text(`Exon ${e}`)})).on("mouseover",(function(t){ht(this).classed("highlighted",!0);const e=t.split("_")[1];r.selectAll(`.exon-curated${e}`).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).classed("highlighted",!1),r.selectAll(".exon-curated").classed("highlighted",!1)}))}(r,0,m),Co(r,k,m),No(m);break;default:throw"unrecognized type"}})).catch((function(t){console.error(t),$("#spinner").hide()}))})).catch((function(t){console.error(t),$("#spinner").hide()}))}function Ao(t,e,n,r,i,o,a,s,l,c){const u=n.visualComponents.svg,f=t.reduce(((t,e)=>(t[e.tissueSiteDetailId]=e,t)),{});u.selectAll(".exp-map-ylabel").text((t=>void 0!==f[t]?f[t].tissueSiteDetail:t)).style("cursor","pointer").attr("x",n.objects.heatmap.xScale.range()[1]+15),u.select("#heatmap").selectAll(".exp-map-ycolor").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[1]+5).attr("y",(t=>n.objects.heatmap.yScale(t))).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("exp-map-ycolor",!0).style("fill",(t=>`#${f[t].colorHex}`)),n.objects.heatmap.xScale.domain().length>15&&u.select("#heatmap").selectAll(".leaf-color").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[0]-5).attr("y",(t=>n.objects.heatmap.yScale(t))).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("leaf-color",!0).style("fill",(t=>`#${f[t].colorHex}`)),u.selectAll(".exp-map-ylabel").on("mouseover",(function(){ht(this).classed("highlighted",!0)})).on("click",(function(t){u.selectAll(".exp-map-ylabel").classed("clicked",!1),ht(this).classed("clicked",!0);const n=t;let h;void 0!==s&&(h=s.filter((t=>t.tissueSiteDetailId==n)));const d=l.filter((t=>t.tissueSiteDetailId==n));e.addData(u.select("#geneModel"),h,d,i,o);const p=vn().domain([Et(c.map((t=>t.value))),St(c.map((t=>t.value)))]).range([0,-100]),g=c.filter((t=>t.tissueSiteDetailId==n));r.showData(g,a,p,f[n].tissueSiteDetail)}))}function Co(t,e,n){const r=n.visualComponents.svg,i=n.tooltip,o=r.select("#geneModel");t.reduce(((t,e)=>(t[e.tissueSiteDetailId]=e,t)),{}),r.selectAll(".junc").on("mouseover",(function(t){dt(`.junc${t.junctionId}`).classed("highlighted",!0);const e=[`<span class="tooltip-head">${t.displayName}</span>`,`<span class="tooltip-key">ID</span>: <span class="tooltip-value">${t.junctionId}</span>`,`<span class="tooltip-key">Junction length</span>: <span class="tooltip-value">${Number(t.chromEnd)-Number(t.chromStart)+1} bp</span>`];i.show(e.join("<br/>")),void 0!==t.startExon&&(o.selectAll(".exon").filter(`.exon${t.startExon.exonNumber}`).classed("highlighted",!0),o.selectAll(".exon").filter(`.exon${t.endExon.exonNumber}`).classed("highlighted",!0)),o.select(`.junc${t.junctionId}`).classed("highlighted",!0).classed("normal",!1)})).on("mouseout",(function(t){dt(`.junc${t.junctionId}`).classed("highlighted",!1),o.selectAll(".exon").classed("highlighted",!1),o.selectAll(".xLabel").classed("highlighted",!1).classed("normal",!0),i.hide()})),o.selectAll(".exon-curated").on("mouseover",(function(t){ht(this).classed("highlighted",!0);const e=[`<span class="tooltip-head">Exon ${t.exonNumber}</span>`,`<span class="tooltip-key">Start</span>: <span class="tooltip-value">${t.chromStart}</span>`,`<span class="tooltip-key">End</span>: <span class="tooltip-value">${t.chromEnd}</span>`,`<span class="tooltip-key">Exon length</span>: <span class="tooltip-value">${Number(t.chromEnd)-Number(t.chromStart)+1} bp</span>`];i.show(e.join("<br/>"))})).on("mouseout",(function(t){ht(this).classed("highlighted",!1),i.hide()}))}function No(t){const e=t.visualComponents.svg,n=t.tooltip;e.selectAll(".isotrack").selectAll(".exon-curated").on("mouseover",(function(t){ht(this).classed("highlighted",!0);const e=[`<span class="tooltip-head">Exon ${t.exonNumber}</span>`,`<span class="tooltip-key">Start</span>: <span class="tooltip-value">${t.chromStart}</span>`,`<span class="tooltip-key">End</span>: <span class="tooltip-value">${t.chromEnd}</span>`,`<span class="tooltip-key">Exon length</span>: <span class="tooltip-value">${Number(t.chromEnd)-Number(t.chromStart)+1} bp</span>`];n.show(e.join("<br/>"))})).on("mouseout",(function(){ht(this).classed("highlighted",!1),e.selectAll(".exon-curated").classed("highlighted",!1),n.hide()}))}var Mo={render:To};t.TranscriptBrowser=Mo,t.render=To}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
