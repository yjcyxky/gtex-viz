!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("file-saver")):"function"==typeof define&&define.amd?define(["exports","file-saver"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).TranscriptBrowser={},t.saveAs)}(this,(function(t,e){"use strict";var n="http://www.w3.org/1999/xhtml",r={svg:"http://www.w3.org/2000/svg",xhtml:n,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function i(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),r.hasOwnProperty(e)?{space:r[e],local:t}:t}function o(t){return function(){var e=this.ownerDocument,r=this.namespaceURI;return r===n&&e.documentElement.namespaceURI===n?e.createElement(t):e.createElementNS(r,t)}}function a(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function s(t){var e=i(t);return(e.local?a:o)(e)}function l(){}function c(t){return null==t?l:function(){return this.querySelector(t)}}function u(){return[]}function f(t){return null==t?u:function(){return this.querySelectorAll(t)}}function h(t){return function(){return this.matches(t)}}function d(t){return new Array(t.length)}function p(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}p.prototype={constructor:p,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var g="$";function m(t,e,n,r,i,o){for(var a,s=0,l=e.length,c=o.length;s<c;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new p(t,o[s]);for(;s<l;++s)(a=e[s])&&(i[s]=a)}function v(t,e,n,r,i,o,a){var s,l,c,u={},f=e.length,h=o.length,d=new Array(f);for(s=0;s<f;++s)(l=e[s])&&(d[s]=c=g+a.call(l,l.__data__,s,e),c in u?i[s]=l:u[c]=l);for(s=0;s<h;++s)(l=u[c=g+a.call(t,o[s],s,o)])?(r[s]=l,l.__data__=o[s],u[c]=null):n[s]=new p(t,o[s]);for(s=0;s<f;++s)(l=e[s])&&u[d[s]]===l&&(i[s]=l)}function y(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function b(t){return function(){this.removeAttribute(t)}}function x(t){return function(){this.removeAttributeNS(t.space,t.local)}}function w(t,e){return function(){this.setAttribute(t,e)}}function _(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function S(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function E(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function k(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function T(t){return function(){this.style.removeProperty(t)}}function A(t,e,n){return function(){this.style.setProperty(t,e,n)}}function C(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function N(t,e){return t.style.getPropertyValue(e)||k(t).getComputedStyle(t,null).getPropertyValue(e)}function M(t){return function(){delete this[t]}}function j(t,e){return function(){this[t]=e}}function D(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function I(t){return t.trim().split(/^|\s+/)}function L(t){return t.classList||new P(t)}function P(t){this._node=t,this._names=I(t.getAttribute("class")||"")}function q(t,e){for(var n=L(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function O(t,e){for(var n=L(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function R(t){return function(){q(this,t)}}function H(t){return function(){O(this,t)}}function B(t,e){return function(){(e.apply(this,arguments)?q:O)(this,t)}}function F(){this.textContent=""}function W(t){return function(){this.textContent=t}}function X(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function U(){this.innerHTML=""}function z(t){return function(){this.innerHTML=t}}function V(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Y(){this.nextSibling&&this.parentNode.appendChild(this)}function G(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function J(){return null}function Q(){var t=this.parentNode;t&&t.removeChild(this)}function K(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Z(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}P.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var tt={},et=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(tt={mouseenter:"mouseover",mouseleave:"mouseout"}));function nt(t,e,n){return t=rt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function rt(t,e,n){return function(r){var i=et;et=r;try{t.call(this,this.__data__,e,n)}finally{et=i}}}function it(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function ot(t,e,n){var r=tt.hasOwnProperty(t.type)?nt:rt;return function(i,o,a){var s,l=this.__on,c=r(e,o,a);if(l)for(var u=0,f=l.length;u<f;++u)if((s=l[u]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=c,s.capture=n),void(s.value=e);this.addEventListener(t.type,c,n),s={type:t.type,name:t.name,value:e,listener:c,capture:n},l?l.push(s):this.__on=[s]}}function at(t,e,n){var r=k(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function st(t,e){return function(){return at(this,t,e)}}function lt(t,e){return function(){return at(this,t,e.apply(this,arguments))}}var ct=[null];function ut(t,e){this._groups=t,this._parents=e}function ft(){return new ut([[document.documentElement]],ct)}function ht(t){return"string"==typeof t?new ut([[document.querySelector(t)]],[document.documentElement]):new ut([[t]],ct)}function dt(t){return"string"==typeof t?new ut([document.querySelectorAll(t)],[document.documentElement]):new ut([null==t?[]:t],ct)}function pt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}ut.prototype=ft.prototype={constructor:ut,select:function(t){"function"!=typeof t&&(t=c(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],l=s.length,u=r[i]=new Array(l),f=0;f<l;++f)(o=s[f])&&(a=t.call(o,o.__data__,f,s))&&("__data__"in o&&(a.__data__=o.__data__),u[f]=a);return new ut(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=f(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],l=s.length,c=0;c<l;++c)(a=s[c])&&(r.push(t.call(a,a.__data__,c,s)),i.push(a));return new ut(r,i)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],c=0;c<s;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&l.push(o);return new ut(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var n=e?v:m,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var o=i.length,a=new Array(o),s=new Array(o),l=new Array(o),c=0;c<o;++c){var u=r[c],f=i[c],h=f.length,d=t.call(u,u&&u.__data__,c,r),p=d.length,g=s[c]=new Array(p),y=a[c]=new Array(p);n(u,f,g,y,l[c]=new Array(h),d,e);for(var b,x,w=0,_=0;w<p;++w)if(b=g[w]){for(w>=_&&(_=w+1);!(x=y[_])&&++_<p;);b._next=x||null}}return(a=new ut(a,r))._enter=s,a._exit=l,a},enter:function(){return new ut(this._enter||this._groups.map(d),this._parents)},exit:function(){return new ut(this._exit||this._groups.map(d),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,c=e[s],u=n[s],f=c.length,h=a[s]=new Array(f),d=0;d<f;++d)(l=c[d]||u[d])&&(h[d]=l);for(;s<r;++s)a[s]=e[s];return new ut(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=y);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],l=s.length,c=i[o]=new Array(l),u=0;u<l;++u)(a=s[u])&&(c[u]=a);c.sort(e)}return new ut(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=i(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?x:b:"function"==typeof e?n.local?E:S:n.local?_:w)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?T:"function"==typeof e?C:A)(t,e,null==n?"":n)):N(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?M:"function"==typeof e?D:j)(t,e)):this.node()[t]},classed:function(t,e){var n=I(t+"");if(arguments.length<2){for(var r=L(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?B:e?R:H)(n,e))},text:function(t){return arguments.length?this.each(null==t?F:("function"==typeof t?X:W)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?U:("function"==typeof t?V:z)(t)):this.node().innerHTML},raise:function(){return this.each(Y)},lower:function(){return this.each(G)},append:function(t){var e="function"==typeof t?t:s(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:s(t),r=null==e?J:"function"==typeof e?e:c(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Q)},clone:function(t){return this.select(t?Z:K)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?ot:it,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var l,c=0,u=s.length;c<u;++c)for(r=0,l=s[c];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?lt:st)(t,e))}};var gt,mt,vt=(1===(gt=pt).length&&(mt=gt,gt=function(t,e){return pt(mt(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;gt(t[i],e)<0?n=i+1:r=i}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;gt(t[i],e)>0?r=i:n=i+1}return n}}),yt=vt.right;var bt=Math.sqrt(50),xt=Math.sqrt(10),wt=Math.sqrt(2);function _t(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=bt?10:o>=xt?5:o>=wt?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=bt?10:o>=xt?5:o>=wt?2:1)}function St(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r}function Et(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&r>n&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&r>n&&(r=n);return r}function kt(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Tt(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}var At="$";function Ct(){}function Nt(t,e){var n=new Ct;if(t instanceof Ct)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}function Mt(){var t,e,n,r=[],i=[];function o(n,i,a,s){if(i>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var l,c,u,f=-1,h=n.length,d=r[i++],p=Nt(),g=a();++f<h;)(u=p.get(l=d(c=n[f])+""))?u.push(c):p.set(l,[c]);return p.each((function(t,e){s(g,e,o(t,i,a,s))})),g}function a(t,n){if(++n>r.length)return t;var o,s=i[n-1];return null!=e&&n>=r.length?o=t.entries():(o=[],t.each((function(t,e){o.push({key:e,values:a(t,n)})}))),null!=s?o.sort((function(t,e){return s(t.key,e.key)})):o}return n={object:function(t){return o(t,0,jt,Dt)},map:function(t){return o(t,0,It,Lt)},entries:function(t){return a(o(t,0,It,Lt),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return i[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function jt(){return{}}function Dt(t,e,n){t[e]=n}function It(){return Nt()}function Lt(t,e,n){t.set(e,n)}function $t(){}Ct.prototype=Nt.prototype={constructor:Ct,has:function(t){return At+t in this},get:function(t){return this[At+t]},set:function(t,e){return this[At+t]=e,this},remove:function(t){var e=At+t;return e in this&&delete this[e]},clear:function(){for(var t in this)t[0]===At&&delete this[t]},keys:function(){var t=[];for(var e in this)e[0]===At&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)e[0]===At&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)e[0]===At&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)e[0]===At&&++t;return t},empty:function(){for(var t in this)if(t[0]===At)return!1;return!0},each:function(t){for(var e in this)e[0]===At&&t(this[e],e.slice(1),this)}};var Pt=Nt.prototype;$t.prototype={constructor:$t,has:Pt.has,add:function(t){return this[At+(t+="")]=t,this},remove:Pt.remove,clear:Pt.clear,values:Pt.keys,size:Pt.size,empty:Pt.empty,each:Pt.each};var qt=Array.prototype,Ot=qt.map,Rt=qt.slice,Ht={name:"implicit"};function Bt(){var t=Nt(),e=[],n=[],r=Ht;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==Ht)return r;t.set(o,a=e.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=Nt();for(var r,o,a=-1,s=n.length;++a<s;)t.has(o=(r=n[a])+"")||t.set(o,e.push(r));return i},i.range=function(t){return arguments.length?(n=Rt.call(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Bt(e,n).unknown(r)},kt.apply(i,arguments),i}function Ft(){var t,e,n=Bt().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,s=0,l=0,c=.5;function u(){var n=r().length,u=o[1]<o[0],f=o[u-0],h=o[1-u];t=(h-f)/Math.max(1,n-s+2*l),a&&(t=Math.floor(t)),f+=(h-f-t*(n-s))*c,e=t*(1-s),a&&(f=Math.round(f),e=Math.round(e));var d=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o}(n).map((function(e){return f+t*e}));return i(u?d.reverse():d)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),u()):r()},n.range=function(t){return arguments.length?(o=[+t[0],+t[1]],u()):o.slice()},n.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,u()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,u()):a},n.padding=function(t){return arguments.length?(s=Math.min(1,l=+t),u()):s},n.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),u()):s},n.paddingOuter=function(t){return arguments.length?(l=+t,u()):l},n.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),u()):c},n.copy=function(){return Ft(r(),o).round(a).paddingInner(s).paddingOuter(l).align(c)},kt.apply(u(),arguments)}function Wt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Xt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Ut(){}var zt=.7,Vt=1/zt,Yt="\\s*([+-]?\\d+)\\s*",Gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Jt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Qt=/^#([0-9a-f]{3,8})$/,Kt=new RegExp("^rgb\\("+[Yt,Yt,Yt]+"\\)$"),Zt=new RegExp("^rgb\\("+[Jt,Jt,Jt]+"\\)$"),te=new RegExp("^rgba\\("+[Yt,Yt,Yt,Gt]+"\\)$"),ee=new RegExp("^rgba\\("+[Jt,Jt,Jt,Gt]+"\\)$"),ne=new RegExp("^hsl\\("+[Gt,Jt,Jt]+"\\)$"),re=new RegExp("^hsla\\("+[Gt,Jt,Jt,Gt]+"\\)$"),ie={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function oe(){return this.rgb().formatHex()}function ae(){return this.rgb().formatRgb()}function se(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Qt.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?le(e):3===n?new fe(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?ce(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?ce(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=Kt.exec(t))?new fe(e[1],e[2],e[3],1):(e=Zt.exec(t))?new fe(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=te.exec(t))?ce(e[1],e[2],e[3],e[4]):(e=ee.exec(t))?ce(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ne.exec(t))?ge(e[1],e[2]/100,e[3]/100,1):(e=re.exec(t))?ge(e[1],e[2]/100,e[3]/100,e[4]):ie.hasOwnProperty(t)?le(ie[t]):"transparent"===t?new fe(NaN,NaN,NaN,0):null}function le(t){return new fe(t>>16&255,t>>8&255,255&t,1)}function ce(t,e,n,r){return r<=0&&(t=e=n=NaN),new fe(t,e,n,r)}function ue(t,e,n,r){return 1===arguments.length?((i=t)instanceof Ut||(i=se(i)),i?new fe((i=i.rgb()).r,i.g,i.b,i.opacity):new fe):new fe(t,e,n,null==r?1:r);var i}function fe(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function he(){return"#"+pe(this.r)+pe(this.g)+pe(this.b)}function de(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function pe(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function ge(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ve(t,e,n,r)}function me(t){if(t instanceof ve)return new ve(t.h,t.s,t.l,t.opacity);if(t instanceof Ut||(t=se(t)),!t)return new ve;if(t instanceof ve)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,l=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=l<.5?o+i:2-o-i,a*=60):s=l>0&&l<1?0:a,new ve(a,s,l,t.opacity)}function ve(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function ye(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function be(t){return function(){return t}}function xe(t){return 1==(t=+t)?we:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):be(isNaN(e)?n:e)}}function we(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):be(isNaN(t)?e:t)}Wt(Ut,se,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:oe,formatHex:oe,formatHsl:function(){return me(this).formatHsl()},formatRgb:ae,toString:ae}),Wt(fe,ue,Xt(Ut,{brighter:function(t){return t=null==t?Vt:Math.pow(Vt,t),new fe(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?zt:Math.pow(zt,t),new fe(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:he,formatHex:he,formatRgb:de,toString:de})),Wt(ve,(function(t,e,n,r){return 1===arguments.length?me(t):new ve(t,e,n,null==r?1:r)}),Xt(Ut,{brighter:function(t){return t=null==t?Vt:Math.pow(Vt,t),new ve(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?zt:Math.pow(zt,t),new ve(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new fe(ye(t>=240?t-240:t+120,i,r),ye(t,i,r),ye(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var _e=function t(e){var n=xe(e);function r(t,e){var r=n((t=ue(t)).r,(e=ue(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=we(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);var Se,Ee=(Se=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return function(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}((n-r/e)*e,a,i,o,s)}},function(t){var e,n,r=t.length,i=new Array(r),o=new Array(r),a=new Array(r);for(e=0;e<r;++e)n=ue(t[e]),i[e]=n.r||0,o[e]=n.g||0,a[e]=n.b||0;return i=Se(i),o=Se(o),a=Se(a),n.opacity=1,function(t){return n.r=i(t),n.g=o(t),n.b=a(t),n+""}});function ke(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}}function Te(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Ie(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}function Ae(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Ce(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Ne(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ie(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}var Me=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,je=new RegExp(Me.source,"g");function De(t,e){var n,r,i,o=Me.lastIndex=je.lastIndex=0,a=-1,s=[],l=[];for(t+="",e+="";(n=Me.exec(t))&&(r=je.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,l.push({i:a,x:Ce(n,r)})),o=je.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)s[(n=l[r]).i]=n.x(t);return s.join("")})}function Ie(t,e){var n,r=typeof e;return null==e||"boolean"===r?be(e):("number"===r?Ce:"string"===r?(n=se(e))?(e=n,_e):De:e instanceof se?_e:e instanceof Date?Ae:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?ke:Array.isArray(e)?Te:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Ne:Ce)(t,e)}function Le(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var $e,Pe,qe,Oe,Re=180/Math.PI,He={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Be(t,e,n,r,i,o){var a,s,l;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),t*r<e*n&&(t=-t,e=-e,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Re,skewX:Math.atan(l)*Re,scaleX:a,scaleY:s}}function Fe(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],l=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var l=a.push("translate(",null,e,null,n);s.push({i:l-4,x:Ce(t,i)},{i:l-2,x:Ce(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,l),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ce(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,l),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ce(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,l),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Ce(t,n)},{i:s-2,x:Ce(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,l),o=a=null,function(t){for(var e,n=-1,r=l.length;++n<r;)s[(e=l[n]).i]=e.x(t);return s.join("")}}}var We=Fe((function(t){return"none"===t?He:($e||($e=document.createElement("DIV"),Pe=document.documentElement,qe=document.defaultView),$e.style.transform=t,t=qe.getComputedStyle(Pe.appendChild($e),null).getPropertyValue("transform"),Pe.removeChild($e),Be(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Xe=Fe((function(t){return null==t?He:(Oe||(Oe=document.createElementNS("http://www.w3.org/2000/svg","g")),Oe.setAttribute("transform",t),(t=Oe.transform.baseVal.consolidate())?Be((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):He)}),", ",")",")");function Ue(t){return+t}var ze=[0,1];function Ve(t){return t}function Ye(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function Ge(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function Je(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=Ye(i,r),o=n(a,o)):(r=Ye(r,i),o=n(o,a)),function(t){return o(r(t))}}function Qe(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=Ye(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=yt(t,e,1,r)-1;return o[n](i[n](e))}}function Ke(t,e){return function(){var t,e,n,r,i,o,a=ze,s=ze,l=Ie,c=Ve;function u(){return r=Math.min(a.length,s.length)>2?Qe:Je,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,l)))(t(c(e)))}return f.invert=function(n){return c(e((o||(o=r(s,a.map(t),Ce)))(n)))},f.domain=function(t){return arguments.length?(a=Ot.call(t,Ue),c===Ve||(c=Ge(a)),u()):a.slice()},f.range=function(t){return arguments.length?(s=Rt.call(t),u()):s.slice()},f.rangeRound=function(t){return s=Rt.call(t),l=Le,u()},f.clamp=function(t){return arguments.length?(c=t?Ge(a):Ve,f):c!==Ve},f.interpolate=function(t){return arguments.length?(l=t,u()):l},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,u()}}()(t,e)}function Ze(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function tn(t){return(t=Ze(Math.abs(t)))?t[1]:NaN}var en,nn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function rn(t){if(!(e=nn.exec(t)))throw new Error("invalid format: "+t);var e;return new on({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function on(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function an(t,e){var n=Ze(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}rn.prototype=on.prototype,on.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var sn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return an(100*t,e)},r:an,s:function(t,e){var n=Ze(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(en=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ze(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function ln(t){return t}var cn,un,fn,hn=Array.prototype.map,dn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function pn(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?ln:(e=hn.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],l=0;i>0&&s>0&&(l+s+1>r&&(s=Math.max(1,r-l)),o.push(t.substring(i-=s,i+s)),!((l+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?ln:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(hn.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"-":t.minus+"",u=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=rn(t)).fill,n=t.align,f=t.sign,h=t.symbol,d=t.zero,p=t.width,g=t.comma,m=t.precision,v=t.trim,y=t.type;"n"===y?(g=!0,y="g"):sn[y]||(void 0===m&&(m=12),v=!0,y="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",x="$"===h?o:/[%p]/.test(y)?l:"",w=sn[y],_=/[defgprs%]/.test(y);function S(t){var i,o,l,h=b,S=x;if("c"===y)S=w(t)+S,t="";else{var E=(t=+t)<0||1/t<0;if(t=isNaN(t)?u:w(Math.abs(t),m),v&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),E&&0==+t&&"+"!==f&&(E=!1),h=(E?"("===f?f:c:"-"===f||"("===f?"":f)+h,S=("s"===y?dn[8+en/3]:"")+S+(E&&"("===f?")":""),_)for(i=-1,o=t.length;++i<o;)if(48>(l=t.charCodeAt(i))||l>57){S=(46===l?a+t.slice(i+1):t.slice(i))+S,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var k=h.length+t.length+S.length,T=k<p?new Array(p-k+1).join(e):"";switch(g&&d&&(t=r(T+t,T.length?p-S.length:1/0),T=""),n){case"<":t=h+t+S+T;break;case"=":t=h+T+t+S;break;case"^":t=T.slice(0,k=T.length>>1)+h+t+S+T.slice(k);break;default:t=T+h+t+S}return s(t)}return m=void 0===m?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),S.toString=function(){return t+""},S}return{format:f,formatPrefix:function(t,e){var n=f(((t=rn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(tn(e)/3))),i=Math.pow(10,-r),o=dn[8+r/3];return function(t){return n(i*t)+o}}}}function gn(t,e,n,r){var i,o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=bt?i*=10:o>=xt?i*=5:o>=wt&&(i*=2),e<t?-i:i}(t,e,n);switch((r=rn(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(tn(e)/3)))-tn(Math.abs(t)))}(o,a))||(r.precision=i),fn(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,tn(e)-tn(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-tn(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return un(r)}function mn(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=_t(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return gn(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],l=i[a];return l<s&&(r=s,s=l,l=r,r=o,o=a,a=r),(r=_t(s,l,n))>0?r=_t(s=Math.floor(s/r)*r,l=Math.ceil(l/r)*r,n):r<0&&(r=_t(s=Math.ceil(s*r)/r,l=Math.floor(l*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(l/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(l*r)/r,e(i)),t},t}function vn(){var t=Ke(Ve,Ve);return t.copy=function(){return e=t,vn().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown());var e},kt.apply(t,arguments),mn(t)}function yn(){var t=mn(function(){var t,e,n,r,i,o=0,a=1,s=Ve,l=!1;function c(e){return isNaN(e=+e)?i:s(0===n?.5:(e=(r(e)-t)*n,l?Math.max(0,Math.min(1,e)):e))}return c.domain=function(i){return arguments.length?(t=r(o=+i[0]),e=r(a=+i[1]),n=t===e?0:1/(e-t),c):[o,a]},c.clamp=function(t){return arguments.length?(l=!!t,c):l},c.interpolator=function(t){return arguments.length?(s=t,c):s},c.unknown=function(t){return arguments.length?(i=t,c):i},function(i){return r=i,t=i(o),e=i(a),n=t===e?0:1/(e-t),c}}()(Ve));return t.copy=function(){return e=t,yn().domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown());var e},Tt.apply(t,arguments)}function bn(t){return["start","end"].forEach((e=>{if(!t[0].hasOwnProperty(e))throw"Parsing Error: Required json attribute is missing: "+e})),t.map((t=>(t.chromStart=t.start,t.chromEnd=t.end,t)))}function xn(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}function wn(t){return Ee(t[t.length-1])}cn=pn({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),un=cn.format,fn=cn.formatPrefix;var _n=wn(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(xn)),Sn=wn(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(xn)),En=wn(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(xn)),kn=wn(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(xn)),Tn=wn(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(xn)),An=wn(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(xn)),Cn=wn(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(xn)),Nn=wn(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(xn)),Mn=wn(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(xn)),jn=wn(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(xn)),Dn=wn(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(xn)),In=wn(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(xn)),Ln=wn(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(xn)),$n=wn(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(xn)),Pn=wn(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(xn));function qn(t,e="YlGnBu",n=void 0,r=void 0,i=!1){t=t.filter((t=>isFinite(t))),r=void 0===r?St(t):r,n=void 0===n?Et(t):n;const o=yn(function(t){const e={BuGn:An,OrRd:Cn,PuBu:Nn,YlGnBu:Mn,Blues:jn,Oranges:Pn,Greens:Dn,Purples:Ln,Reds:$n,Greys:In,Grays:In,RdBu:En,RdGy:kn,PiYG:_n,PuOr:Sn,RdYlBu:Tn};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return i?o.domain([r,n]):o.domain([n,r]),o}function On(t,e,n,r,i,o=10,a=10,s={h:10,w:40},l="h",c=!1){let u=[];if(c){let t=[...Array(o+1).keys()],e=n.domain()[1]/o;u=t.map((t=>t*e)),u=u.concat(t.filter((t=>0!=t)).map((t=>0-t*e))).sort(((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN))}else{let t=[...Array(o+1).keys()],e=n.domain()[1]/o;u=t.map((t=>t*e))}const f=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(u).enter().append("g").classed("legend",!0);"h"==l?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",s.h).attr("transform",`translate(${r.x}, ${r.y})`),f.append("rect").attr("x",((t,e)=>s.w*e)).attr("y",5).attr("width",s.w).attr("height",s.h).style("fill",n),f.append("text").attr("class","color-legend").text((t=>i?(Math.pow(a,t)-1).toPrecision(2):t.toPrecision(2))).attr("x",((t,e)=>s.w*e)).attr("y",0).style("font-size",10)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+s.h*u.length})rotate(90)`),f.append("rect").attr("x",0).attr("y",((t,e)=>s.h*e)).attr("width",s.w).attr("height",s.h).style("fill",n),f.append("text").attr("class","color-legend").text((t=>i?(Math.pow(a,t)-1).toPrecision(2):t.toPrecision(2))).attr("x",15).attr("y",((t,e)=>s.h*e+s.h/2)))}class Rn{constructor(t=window.innerWidth,e=100,n=100,r={top:50,right:250,bottom:170,left:10},i=12,o=10){this.margin=r,this.rootW=t,this.leftTreePanel={x:r.left,y:r.top+n,h:void 0,w:e-o,id:"leftTree"},this.cell={w:void 0,h:i},this.topTreePanel={x:r.left+e,y:r.top,h:n-o,w:this.rootW-(r.left+e+r.right),id:"topTree"},this.heatmapPanel={x:r.left+e,y:r.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:r.left+e,y:0,h:r.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function Hn(t,e,n,r,i=void 0){return function(t){if(ht(`#${t}`).empty()){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}(t),void 0===i&&(i=`${t}-svg`),void 0===r&&(r={top:0,left:0}),ht("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",i).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}function Bn(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function Fn(t,e){var n,r,i,o,a,s=new zn(t),l=+t.value&&(s.value=t.value),c=[s];for(null==e&&(e=Wn);n=c.pop();)if(l&&(n.value=+n.data.value),(i=e(n.data))&&(a=i.length))for(n.children=new Array(a),o=a-1;o>=0;--o)c.push(r=n.children[o]=new zn(i[o])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(Un)}function Wn(t){return t.children}function Xn(t){t.data=t.data.data}function Un(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function zn(t){this.data=t,this.depth=this.height=0,this.parent=null}zn.prototype=Fn.prototype={constructor:zn,count:function(){return this.eachAfter(Bn)},each:function(t){var e,n,r,i,o=this,a=[o];do{for(e=a.reverse(),a=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)a.push(n[r])}while(a.length);return this},eachAfter:function(t){for(var e,n,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return Fn(this).eachBefore(Xn)}};var Vn=Array.prototype.slice;function Yn(t){return t}var Gn=1,Jn=2,Qn=3,Kn=4,Zn=1e-6;function tr(t){return"translate("+(t+.5)+",0)"}function er(t){return"translate(0,"+(t+.5)+")"}function nr(t){return function(e){return+t(e)}}function rr(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function ir(){return!this.__axis}function or(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,l=t===Gn||t===Kn?-1:1,c=t===Kn||t===Jn?"x":"y",u=t===Gn||t===Qn?tr:er;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,d=null==i?e.tickFormat?e.tickFormat.apply(e,n):Yn:i,p=Math.max(o,0)+s,g=e.range(),m=+g[0]+.5,v=+g[g.length-1]+.5,y=(e.bandwidth?rr:nr)(e.copy()),b=f.selection?f.selection():f,x=b.selectAll(".domain").data([null]),w=b.selectAll(".tick").data(h,e).order(),_=w.exit(),S=w.enter().append("g").attr("class","tick"),E=w.select("line"),k=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(S),E=E.merge(S.append("line").attr("stroke","currentColor").attr(c+"2",l*o)),k=k.merge(S.append("text").attr("fill","currentColor").attr(c,l*p).attr("dy",t===Gn?"0em":t===Qn?"0.71em":"0.32em")),f!==b&&(x=x.transition(f),w=w.transition(f),E=E.transition(f),k=k.transition(f),_=_.transition(f).attr("opacity",Zn).attr("transform",(function(t){return isFinite(t=y(t))?u(t):this.getAttribute("transform")})),S.attr("opacity",Zn).attr("transform",(function(t){var e=this.parentNode.__axis;return u(e&&isFinite(e=e(t))?e:y(t))}))),_.remove(),x.attr("d",t===Kn||t==Jn?a?"M"+l*a+","+m+"H0.5V"+v+"H"+l*a:"M0.5,"+m+"V"+v:a?"M"+m+","+l*a+"V0.5H"+v+"V"+l*a:"M"+m+",0.5H"+v),w.attr("opacity",1).attr("transform",(function(t){return u(y(t))})),E.attr(c+"2",l*o),k.attr(c,l*p).text(d),b.filter(ir).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Jn?"start":t===Kn?"end":"middle"),b.each((function(){this.__axis=y}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=Vn.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:Vn.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:Vn.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f}class ar{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=Fn(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),i=0;i<r.length;i++){var o=r[i],a={};switch(o){case"(":n.branchset=[a],e.push(n),n=a;break;case",":e[e.length-1].branchset.push(a),n=a;break;case")":n=e.pop();break;case":":break;default:var s=r[i-1];")"==s||"("==s||","==s?n.name=o:":"==s&&(n.length=parseFloat(o))}}return n}(t),(t=>t.branchset)).sum((t=>t.branchset?0:1)).sort(((t,e)=>t.value-e.value||t.data.length-e.data.length)),this.leaves=this.root.leaves().sort(((t,e)=>t.value-e.value||pt(t.data.length,e.data.length))),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce(((t,e)=>t+e.y),0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach((t=>{n(t),e(t)})),t.selectAll(".branch").data(r).enter().append("line").attr("x1",(t=>t.x)).attr("x2",(t=>t.data.length?t.x-this.xScale(t.data.length):t.x)).attr("y1",(t=>t.y+this.yScale.bandwidth()/2)).attr("y2",(t=>t.y+this.yScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1);const i=this.root.descendants().filter((t=>t.height)).sort(((t,e)=>e.height-t.height));var o;t.selectAll(".arm").data(i).enter().append("line").attr("x1",(t=>t.x)).attr("x2",(t=>t.x)).attr("y1",(t=>t.children[0].y+this.yScale.bandwidth()/2)).attr("y2",(t=>t.children[1].y+this.yScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(i).enter().append("circle").attr("cx",(t=>t.x)).attr("cy",(t=>t.y+this.yScale.bandwidth()/2)).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(){ht(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call((o=this.xScale,or(Qn,o)).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort(((t,e)=>t.height-e.height||pt(t.data.length,e.data.length)))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce(((t,e)=>t+e.x),0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach((t=>{e(t),n(t)})),t.selectAll(".branch").data(r).enter().append("line").attr("y1",(t=>t.y)).attr("y2",(t=>t.data.length?t.y-this.yScale(t.data.length):t.y)).attr("x1",(t=>t.x+this.xScale.bandwidth()/2)).attr("x2",(t=>t.x+this.xScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1);const i=this.root.descendants().filter((t=>t.height)).sort(((t,e)=>e.height-t.height));var o;t.selectAll(".arm").data(i).enter().append("line").attr("y1",(t=>t.y)).attr("y2",(t=>t.y)).attr("x1",(t=>t.children[0].x+this.xScale.bandwidth()/2)).attr("x2",(t=>t.children[1].x+this.xScale.bandwidth()/2)).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(i).enter().append("circle").attr("cx",(t=>t.x+this.xScale.bandwidth()/2)).attr("cy",(t=>t.y)).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(){ht(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").call((o=this.yScale,or(Kn,o)).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce(((t,e)=>e.data.length?t+e.data.length:t),0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=vn().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),this.xScale=Ft().domain(this.postorder.map((t=>t.data.name))).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),this.yScale=Ft().domain(this.postorder.map((t=>t.data.name))).range([0,this.height]).padding(.05)):this.yScale=vn().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}var sr="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function lr(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var cr={exports:{}};
/*!
   * jQuery JavaScript Library v3.7.1
   * https://jquery.com/
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2023-08-28T13:37Z
   */!function(t){!function(e,n){t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}}("undefined"!=typeof window?window:sr,(function(t,e){var n=[],r=Object.getPrototypeOf,i=n.slice,o=n.flat?function(t){return n.flat.call(t)}:function(t){return n.concat.apply([],t)},a=n.push,s=n.indexOf,l={},c=l.toString,u=l.hasOwnProperty,f=u.toString,h=f.call(Object),d={},p=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},g=function(t){return null!=t&&t===t.window},m=t.document,v={type:!0,src:!0,nonce:!0,noModule:!0};function y(t,e,n){var r,i,o=(n=n||m).createElement("script");if(o.text=t,e)for(r in v)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function b(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?l[c.call(t)]||"object":typeof t}var x="3.7.1",w=/HTML$/i,_=function(t,e){return new _.fn.init(t,e)};function S(t){var e=!!t&&"length"in t&&t.length,n=b(t);return!p(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function E(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}_.fn=_.prototype={jquery:x,constructor:_,length:0,toArray:function(){return i.call(this)},get:function(t){return null==t?i.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=_.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return _.each(this,t)},map:function(t){return this.pushStack(_.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(i.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(_.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(_.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:n.sort,splice:n.splice},_.extend=_.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||p(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(c&&r&&(_.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||_.isPlainObject(n)?n:{},i=!1,a[e]=_.extend(c,o,r)):void 0!==r&&(a[e]=r));return a},_.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==c.call(t))&&(!(e=r(t))||"function"==typeof(n=u.call(e,"constructor")&&e.constructor)&&f.call(n)===h)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){y(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,r=0;if(S(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},text:function(t){var e,n="",r=0,i=t.nodeType;if(!i)for(;e=t[r++];)n+=_.text(e);return 1===i||11===i?t.textContent:9===i?t.documentElement.textContent:3===i||4===i?t.nodeValue:n},makeArray:function(t,e){var n=e||[];return null!=t&&(S(Object(t))?_.merge(n,"string"==typeof t?[t]:t):a.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:s.call(e,t,n)},isXMLDoc:function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!w.test(e||n&&n.nodeName||"HTML")},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,a=0,s=[];if(S(t))for(r=t.length;a<r;a++)null!=(i=e(t[a],a,n))&&s.push(i);else for(a in t)null!=(i=e(t[a],a,n))&&s.push(i);return o(s)},guid:1,support:d}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=n[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){l["[object "+e+"]"]=e.toLowerCase()}));var k=n.pop,T=n.sort,A=n.splice,C="[\\x20\\t\\r\\n\\f]",N=new RegExp("^"+C+"+|((?:^|[^\\\\])(?:\\\\.)*)"+C+"+$","g");_.contains=function(t,e){var n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(t.contains?t.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))};var M=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function j(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}_.escapeSelector=function(t){return(t+"").replace(M,j)};var D=m,I=a;!function(){var e,r,o,a,l,c,f,h,p,g,m=I,v=_.expando,y=0,b=0,x=tt(),w=tt(),S=tt(),M=tt(),j=function(t,e){return t===e&&(l=!0),0},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",$="(?:\\\\[\\da-fA-F]{1,6}"+C+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",P="\\["+C+"*("+$+")(?:"+C+"*([*^$|!~]?=)"+C+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+$+"))|)"+C+"*\\]",q=":("+$+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",O=new RegExp(C+"+","g"),R=new RegExp("^"+C+"*,"+C+"*"),H=new RegExp("^"+C+"*([>+~]|"+C+")"+C+"*"),B=new RegExp(C+"|>"),F=new RegExp(q),W=new RegExp("^"+$+"$"),X={ID:new RegExp("^#("+$+")"),CLASS:new RegExp("^\\.("+$+")"),TAG:new RegExp("^("+$+"|[*])"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+C+"*(even|odd|(([+-]|)(\\d*)n|)"+C+"*(?:([+-]|)"+C+"*(\\d+)|))"+C+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+C+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+C+"*((?:-\\d)?\\d*)"+C+"*\\)|)(?=[^-]|$)","i")},U=/^(?:input|select|textarea|button)$/i,z=/^h\d$/i,V=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Y=/[+~]/,G=new RegExp("\\\\[\\da-fA-F]{1,6}"+C+"?|\\\\([^\\r\\n\\f])","g"),J=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},Q=function(){lt()},K=ht((function(t){return!0===t.disabled&&E(t,"fieldset")}),{dir:"parentNode",next:"legend"});try{m.apply(n=i.call(D.childNodes),D.childNodes),n[D.childNodes.length].nodeType}catch(t){m={apply:function(t,e){I.apply(t,i.call(e))},call:function(t){I.apply(t,i.call(arguments,1))}}}function Z(t,e,n,r){var i,o,a,s,l,u,f,g=e&&e.ownerDocument,y=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==y&&9!==y&&11!==y)return n;if(!r&&(lt(e),e=e||c,h)){if(11!==y&&(l=V.exec(t)))if(i=l[1]){if(9===y){if(!(a=e.getElementById(i)))return n;if(a.id===i)return m.call(n,a),n}else if(g&&(a=g.getElementById(i))&&Z.contains(e,a)&&a.id===i)return m.call(n,a),n}else{if(l[2])return m.apply(n,e.getElementsByTagName(t)),n;if((i=l[3])&&e.getElementsByClassName)return m.apply(n,e.getElementsByClassName(i)),n}if(!(M[t+" "]||p&&p.test(t))){if(f=t,g=e,1===y&&(B.test(t)||H.test(t))){for((g=Y.test(t)&&st(e.parentNode)||e)==e&&d.scope||((s=e.getAttribute("id"))?s=_.escapeSelector(s):e.setAttribute("id",s=v)),o=(u=ut(t)).length;o--;)u[o]=(s?"#"+s:":scope")+" "+ft(u[o]);f=u.join(",")}try{return m.apply(n,g.querySelectorAll(f)),n}catch(e){M(t,!0)}finally{s===v&&e.removeAttribute("id")}}}return yt(t.replace(N,"$1"),e,n,r)}function tt(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function et(t){return t[v]=!0,t}function nt(t){var e=c.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function rt(t){return function(e){return E(e,"input")&&e.type===t}}function it(t){return function(e){return(E(e,"input")||E(e,"button"))&&e.type===t}}function ot(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&K(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function at(t){return et((function(e){return e=+e,et((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function st(t){return t&&void 0!==t.getElementsByTagName&&t}function lt(t){var e,n=t?t.ownerDocument||t:D;return n!=c&&9===n.nodeType&&n.documentElement?(f=(c=n).documentElement,h=!_.isXMLDoc(c),g=f.matches||f.webkitMatchesSelector||f.msMatchesSelector,f.msMatchesSelector&&D!=c&&(e=c.defaultView)&&e.top!==e&&e.addEventListener("unload",Q),d.getById=nt((function(t){return f.appendChild(t).id=_.expando,!c.getElementsByName||!c.getElementsByName(_.expando).length})),d.disconnectedMatch=nt((function(t){return g.call(t,"*")})),d.scope=nt((function(){return c.querySelectorAll(":scope")})),d.cssHas=nt((function(){try{return c.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),d.getById?(r.filter.ID=function(t){var e=t.replace(G,J);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(G,J);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):e.querySelectorAll(t)},r.find.CLASS=function(t,e){if(void 0!==e.getElementsByClassName&&h)return e.getElementsByClassName(t)},p=[],nt((function(t){var e;f.appendChild(t).innerHTML="<a id='"+v+"' href='' disabled='disabled'></a><select id='"+v+"-\r\\' disabled='disabled'><option selected=''></option></select>",t.querySelectorAll("[selected]").length||p.push("\\["+C+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+v+"-]").length||p.push("~="),t.querySelectorAll("a#"+v+"+*").length||p.push(".#.+[+~]"),t.querySelectorAll(":checked").length||p.push(":checked"),(e=c.createElement("input")).setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),(e=c.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||p.push("\\["+C+"*name"+C+"*="+C+"*(?:''|\"\")")})),d.cssHas||p.push(":has"),p=p.length&&new RegExp(p.join("|")),j=function(t,e){if(t===e)return l=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!d.sortDetached&&e.compareDocumentPosition(t)===n?t===c||t.ownerDocument==D&&Z.contains(D,t)?-1:e===c||e.ownerDocument==D&&Z.contains(D,e)?1:a?s.call(a,t)-s.call(a,e):0:4&n?-1:1)},c):c}for(e in Z.matches=function(t,e){return Z(t,null,null,e)},Z.matchesSelector=function(t,e){if(lt(t),h&&!M[e+" "]&&(!p||!p.test(e)))try{var n=g.call(t,e);if(n||d.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){M(e,!0)}return Z(e,c,null,[t]).length>0},Z.contains=function(t,e){return(t.ownerDocument||t)!=c&&lt(t),_.contains(t,e)},Z.attr=function(t,e){(t.ownerDocument||t)!=c&&lt(t);var n=r.attrHandle[e.toLowerCase()],i=n&&u.call(r.attrHandle,e.toLowerCase())?n(t,e,!h):void 0;return void 0!==i?i:t.getAttribute(e)},Z.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},_.uniqueSort=function(t){var e,n=[],r=0,o=0;if(l=!d.sortStable,a=!d.sortStable&&i.call(t,0),T.call(t,j),l){for(;e=t[o++];)e===t[o]&&(r=n.push(o));for(;r--;)A.call(t,n[r],1)}return a=null,t},_.fn.uniqueSort=function(){return this.pushStack(_.uniqueSort(i.apply(this)))},r=_.expr={cacheLength:50,createPseudo:et,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(G,J),t[3]=(t[3]||t[4]||t[5]||"").replace(G,J),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||Z.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&Z.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&F.test(n)&&(e=ut(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(G,J).toLowerCase();return"*"===t?function(){return!0}:function(t){return E(t,e)}},CLASS:function(t){var e=x[t+" "];return e||(e=new RegExp("(^|"+C+")"+t+"("+C+"|$)"))&&x(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=Z.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(O," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,l){var c,u,f,h,d,p=o!==a?"nextSibling":"previousSibling",g=e.parentNode,m=s&&e.nodeName.toLowerCase(),b=!l&&!s,x=!1;if(g){if(o){for(;p;){for(f=e;f=f[p];)if(s?E(f,m):1===f.nodeType)return!1;d=p="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?g.firstChild:g.lastChild],a&&b){for(x=(h=(c=(u=g[v]||(g[v]={}))[t]||[])[0]===y&&c[1])&&c[2],f=h&&g.childNodes[h];f=++h&&f&&f[p]||(x=h=0)||d.pop();)if(1===f.nodeType&&++x&&f===e){u[t]=[y,h,x];break}}else if(b&&(x=h=(c=(u=e[v]||(e[v]={}))[t]||[])[0]===y&&c[1]),!1===x)for(;(f=++h&&f&&f[p]||(x=h=0)||d.pop())&&(!(s?E(f,m):1===f.nodeType)||!++x||(b&&((u=f[v]||(f[v]={}))[t]=[y,x]),f!==e)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||Z.error("unsupported pseudo: "+t);return i[v]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?et((function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=s.call(t,o[a])]=!(n[r]=o[a])})):function(t){return i(t,0,n)}):i}},pseudos:{not:et((function(t){var e=[],n=[],r=vt(t.replace(N,"$1"));return r[v]?et((function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:et((function(t){return function(e){return Z(t,e).length>0}})),contains:et((function(t){return t=t.replace(G,J),function(e){return(e.textContent||_.text(e)).indexOf(t)>-1}})),lang:et((function(t){return W.test(t||"")||Z.error("unsupported lang: "+t),t=t.replace(G,J).toLowerCase(),function(e){var n;do{if(n=h?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===function(){try{return c.activeElement}catch(t){}}()&&c.hasFocus()&&!!(t.type||t.href||~t.tabIndex)},enabled:ot(!1),disabled:ot(!0),checked:function(t){return E(t,"input")&&!!t.checked||E(t,"option")&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return z.test(t.nodeName)},input:function(t){return U.test(t.nodeName)},button:function(t){return E(t,"input")&&"button"===t.type||E(t,"button")},text:function(t){var e;return E(t,"input")&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:at((function(){return[0]})),last:at((function(t,e){return[e-1]})),eq:at((function(t,e,n){return[n<0?n+e:n]})),even:at((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:at((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:at((function(t,e,n){var r;for(r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:at((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=rt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=it(e);function ct(){}function ut(t,e){var n,i,o,a,s,l,c,u=w[t+" "];if(u)return e?0:u.slice(0);for(s=t,l=[],c=r.preFilter;s;){for(a in n&&!(i=R.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),n=!1,(i=H.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(N," ")}),s=s.slice(n.length)),r.filter)!(i=X[a].exec(s))||c[a]&&!(i=c[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?Z.error(t):w(t,l).slice(0)}function ft(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function ht(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=b++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,l){var c,u,f=[y,s];if(l){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,l))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(u=e[v]||(e[v]={}),i&&E(e,i))e=e[r]||e;else{if((c=u[o])&&c[0]===y&&c[1]===s)return f[2]=c[2];if(u[o]=f,f[2]=t(e,n,l))return!0}return!1}}function dt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function pt(t,e,n,r,i){for(var o,a=[],s=0,l=t.length,c=null!=e;s<l;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),c&&e.push(s)));return a}function gt(t,e,n,r,i,o){return r&&!r[v]&&(r=gt(r)),i&&!i[v]&&(i=gt(i,o)),et((function(o,a,l,c){var u,f,h,d,p=[],g=[],v=a.length,y=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)Z(t,e[r],n);return n}(e||"*",l.nodeType?[l]:l,[]),b=!t||!o&&e?y:pt(y,p,t,l,c);if(n?n(b,d=i||(o?t:v||r)?[]:a,l,c):d=b,r)for(u=pt(d,g),r(u,[],l,c),f=u.length;f--;)(h=u[f])&&(d[g[f]]=!(b[g[f]]=h));if(o){if(i||t){if(i){for(u=[],f=d.length;f--;)(h=d[f])&&u.push(b[f]=h);i(null,d=[],u,c)}for(f=d.length;f--;)(h=d[f])&&(u=i?s.call(o,h):p[f])>-1&&(o[u]=!(a[u]=h))}}else d=pt(d===a?d.splice(v,d.length):d),i?i(null,a,d,c):m.apply(a,d)}))}function mt(t){for(var e,n,i,a=t.length,l=r.relative[t[0].type],c=l||r.relative[" "],u=l?1:0,f=ht((function(t){return t===e}),c,!0),h=ht((function(t){return s.call(e,t)>-1}),c,!0),d=[function(t,n,r){var i=!l&&(r||n!=o)||((e=n).nodeType?f(t,n,r):h(t,n,r));return e=null,i}];u<a;u++)if(n=r.relative[t[u].type])d=[ht(dt(d),n)];else{if((n=r.filter[t[u].type].apply(null,t[u].matches))[v]){for(i=++u;i<a&&!r.relative[t[i].type];i++);return gt(u>1&&dt(d),u>1&&ft(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(N,"$1"),n,u<i&&mt(t.slice(u,i)),i<a&&mt(t=t.slice(i)),i<a&&ft(t))}d.push(n)}return dt(d)}function vt(t,e){var n,i=[],a=[],s=S[t+" "];if(!s){for(e||(e=ut(t)),n=e.length;n--;)(s=mt(e[n]))[v]?i.push(s):a.push(s);s=S(t,function(t,e){var n=e.length>0,i=t.length>0,a=function(a,s,l,u,f){var d,p,g,v=0,b="0",x=a&&[],w=[],S=o,E=a||i&&r.find.TAG("*",f),T=y+=null==S?1:Math.random()||.1,A=E.length;for(f&&(o=s==c||s||f);b!==A&&null!=(d=E[b]);b++){if(i&&d){for(p=0,s||d.ownerDocument==c||(lt(d),l=!h);g=t[p++];)if(g(d,s||c,l)){m.call(u,d);break}f&&(y=T)}n&&((d=!g&&d)&&v--,a&&x.push(d))}if(v+=b,n&&b!==v){for(p=0;g=e[p++];)g(x,w,s,l);if(a){if(v>0)for(;b--;)x[b]||w[b]||(w[b]=k.call(u));w=pt(w)}m.apply(u,w),f&&!a&&w.length>0&&v+e.length>1&&_.uniqueSort(u)}return f&&(y=T,o=S),x};return n?et(a):a}(a,i)),s.selector=t}return s}function yt(t,e,n,i){var o,a,s,l,c,u="function"==typeof t&&t,f=!i&&ut(t=u.selector||t);if(n=n||[],1===f.length){if((a=f[0]=f[0].slice(0)).length>2&&"ID"===(s=a[0]).type&&9===e.nodeType&&h&&r.relative[a[1].type]){if(!(e=(r.find.ID(s.matches[0].replace(G,J),e)||[])[0]))return n;u&&(e=e.parentNode),t=t.slice(a.shift().value.length)}for(o=X.needsContext.test(t)?0:a.length;o--&&(s=a[o],!r.relative[l=s.type]);)if((c=r.find[l])&&(i=c(s.matches[0].replace(G,J),Y.test(a[0].type)&&st(e.parentNode)||e))){if(a.splice(o,1),!(t=i.length&&ft(a)))return m.apply(n,i),n;break}}return(u||vt(t,f))(i,e,!h,n,!e||Y.test(t)&&st(e.parentNode)||e),n}ct.prototype=r.filters=r.pseudos,r.setFilters=new ct,d.sortStable=v.split("").sort(j).join("")===v,lt(),d.sortDetached=nt((function(t){return 1&t.compareDocumentPosition(c.createElement("fieldset"))})),_.find=Z,_.expr[":"]=_.expr.pseudos,_.unique=_.uniqueSort,Z.compile=vt,Z.select=yt,Z.setDocument=lt,Z.tokenize=ut,Z.escape=_.escapeSelector,Z.getText=_.text,Z.isXML=_.isXMLDoc,Z.selectors=_.expr,Z.support=_.support,Z.uniqueSort=_.uniqueSort}();var L=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&_(t).is(n))break;r.push(t)}return r},$=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},P=_.expr.match.needsContext,q=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(t,e,n){return p(e)?_.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?_.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?_.grep(t,(function(t){return s.call(e,t)>-1!==n})):_.filter(e,t,n)}_.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?_.find.matchesSelector(r,t)?[r]:[]:_.find.matches(t,_.grep(e,(function(t){return 1===t.nodeType})))},_.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(_(t).filter((function(){for(e=0;e<r;e++)if(_.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)_.find(t,i[e],n);return r>1?_.uniqueSort(n):n},filter:function(t){return this.pushStack(O(this,t||[],!1))},not:function(t){return this.pushStack(O(this,t||[],!0))},is:function(t){return!!O(this,"string"==typeof t&&P.test(t)?_(t):t||[],!1).length}});var R,H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,B=_.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||R,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:H.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof _?e[0]:e,_.merge(this,_.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:m,!0)),q.test(r[1])&&_.isPlainObject(e))for(r in e)p(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=m.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):p(t)?void 0!==n.ready?n.ready(t):t(_):_.makeArray(t,this)};B.prototype=_.fn,R=_(m);var F=/^(?:parents|prev(?:Until|All))/,W={children:!0,contents:!0,next:!0,prev:!0};function X(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}_.fn.extend({has:function(t){var e=_(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(_.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&_(t);if(!P.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&_.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?_.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?s.call(_(t),this[0]):s.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),_.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return L(t,"parentNode")},parentsUntil:function(t,e,n){return L(t,"parentNode",n)},next:function(t){return X(t,"nextSibling")},prev:function(t){return X(t,"previousSibling")},nextAll:function(t){return L(t,"nextSibling")},prevAll:function(t){return L(t,"previousSibling")},nextUntil:function(t,e,n){return L(t,"nextSibling",n)},prevUntil:function(t,e,n){return L(t,"previousSibling",n)},siblings:function(t){return $((t.parentNode||{}).firstChild,t)},children:function(t){return $(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(E(t,"template")&&(t=t.content||t),_.merge([],t.childNodes))}},(function(t,e){_.fn[t]=function(n,r){var i=_.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=_.filter(r,i)),this.length>1&&(W[t]||_.uniqueSort(i),F.test(t)&&i.reverse()),this.pushStack(i)}}));var U=/[^\x20\t\r\n\f]+/g;function z(t){return t}function V(t){throw t}function Y(t,e,n,r){var i;try{t&&p(i=t.promise)?i.call(t).done(e).fail(n):t&&p(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}_.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return _.each(t.match(U)||[],(function(t,n){e[n]=!0})),e}(t):_.extend({},t);var e,n,r,i,o=[],a=[],s=-1,l=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){_.each(n,(function(n,r){p(r)?t.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==b(r)&&e(r)}))}(arguments),n&&!e&&l()),this},remove:function(){return _.each(arguments,(function(t,e){for(var n;(n=_.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?_.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},_.extend({Deferred:function(e){var n=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return _.Deferred((function(e){_.each(n,(function(n,r){var i=p(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&p(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(e,r,i){var o=0;function a(e,n,r,i){return function(){var s=this,l=arguments,c=function(){var t,c;if(!(e<o)){if((t=r.apply(s,l))===n.promise())throw new TypeError("Thenable self-resolution");c=t&&("object"==typeof t||"function"==typeof t)&&t.then,p(c)?i?c.call(t,a(o,n,z,i),a(o,n,V,i)):(o++,c.call(t,a(o,n,z,i),a(o,n,V,i),a(o,n,z,n.notifyWith))):(r!==z&&(s=void 0,l=[t]),(i||n.resolveWith)(s,l))}},u=i?c:function(){try{c()}catch(t){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(t,u.error),e+1>=o&&(r!==V&&(s=void 0,l=[t]),n.rejectWith(s,l))}};e?u():(_.Deferred.getErrorHook?u.error=_.Deferred.getErrorHook():_.Deferred.getStackHook&&(u.error=_.Deferred.getStackHook()),t.setTimeout(u))}}return _.Deferred((function(t){n[0][3].add(a(0,t,p(i)?i:z,t.notifyWith)),n[1][3].add(a(0,t,p(e)?e:z)),n[2][3].add(a(0,t,p(r)?r:V))})).promise()},promise:function(t){return null!=t?_.extend(t,i):i}},o={};return _.each(n,(function(t,e){var a=e[2],s=e[5];i[e[1]]=a.add,s&&a.add((function(){r=s}),n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),a.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),o=i.call(arguments),a=_.Deferred(),s=function(t){return function(n){r[t]=this,o[t]=arguments.length>1?i.call(arguments):n,--e||a.resolveWith(r,o)}};if(e<=1&&(Y(t,a.done(s(n)).resolve,a.reject,!e),"pending"===a.state()||p(o[n]&&o[n].then)))return a.then();for(;n--;)Y(o[n],s(n),a.reject);return a.promise()}});var G=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&G.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},_.readyException=function(e){t.setTimeout((function(){throw e}))};var J=_.Deferred();function Q(){m.removeEventListener("DOMContentLoaded",Q),t.removeEventListener("load",Q),_.ready()}_.fn.ready=function(t){return J.then(t).catch((function(t){_.readyException(t)})),this},_.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--_.readyWait:_.isReady)||(_.isReady=!0,!0!==t&&--_.readyWait>0||J.resolveWith(m,[_]))}}),_.ready.then=J.then,"complete"===m.readyState||"loading"!==m.readyState&&!m.documentElement.doScroll?t.setTimeout(_.ready):(m.addEventListener("DOMContentLoaded",Q),t.addEventListener("load",Q));var K=function(t,e,n,r,i,o,a){var s=0,l=t.length,c=null==n;if("object"===b(n))for(s in i=!0,n)K(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,p(r)||(a=!0),c&&(a?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(_(t),n)})),e))for(;s<l;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:c?e.call(t):l?e(t[0],n):o},Z=/^-ms-/,tt=/-([a-z])/g;function et(t,e){return e.toUpperCase()}function nt(t){return t.replace(Z,"ms-").replace(tt,et)}var rt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function it(){this.expando=_.expando+it.uid++}it.uid=1,it.prototype={cache:function(t){var e=t[this.expando];return e||(e={},rt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[nt(e)]=n;else for(r in e)i[nt(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][nt(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(nt):(e=nt(e))in r?[e]:e.match(U)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||_.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!_.isEmptyObject(e)}};var ot=new it,at=new it,st=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,lt=/[A-Z]/g;function ct(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(lt,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:st.test(t)?JSON.parse(t):t)}(n)}catch(t){}at.set(t,e,n)}else n=void 0;return n}_.extend({hasData:function(t){return at.hasData(t)||ot.hasData(t)},data:function(t,e,n){return at.access(t,e,n)},removeData:function(t,e){at.remove(t,e)},_data:function(t,e,n){return ot.access(t,e,n)},_removeData:function(t,e){ot.remove(t,e)}}),_.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=at.get(o),1===o.nodeType&&!ot.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=nt(r.slice(5)),ct(o,r,i[r]));ot.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){at.set(this,t)})):K(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=at.get(o,t))||void 0!==(n=ct(o,t))?n:void 0;this.each((function(){at.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){at.remove(this,t)}))}}),_.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=ot.get(t,e),n&&(!r||Array.isArray(n)?r=ot.access(t,e,_.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=_.queue(t,e),r=n.length,i=n.shift(),o=_._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){_.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return ot.get(t,n)||ot.access(t,n,{empty:_.Callbacks("once memory").add((function(){ot.remove(t,[e+"queue",n])}))})}}),_.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?_.queue(this[0],t):void 0===e?this:this.each((function(){var n=_.queue(this,t,e);_._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&_.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){_.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=_.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=ot.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var ut=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ft=new RegExp("^(?:([+-])=|)("+ut+")([a-z%]*)$","i"),ht=["Top","Right","Bottom","Left"],dt=m.documentElement,pt=function(t){return _.contains(t.ownerDocument,t)},gt={composed:!0};dt.getRootNode&&(pt=function(t){return _.contains(t.ownerDocument,t)||t.getRootNode(gt)===t.ownerDocument});var mt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&pt(t)&&"none"===_.css(t,"display")};function vt(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return _.css(t,e,"")},l=s(),c=n&&n[3]||(_.cssNumber[e]?"":"px"),u=t.nodeType&&(_.cssNumber[e]||"px"!==c&&+l)&&ft.exec(_.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)_.style(t,e,u+c),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),u/=o;u*=2,_.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,i=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=u,r.end=i)),i}var yt={};function bt(t){var e,n=t.ownerDocument,r=t.nodeName,i=yt[r];return i||(e=n.body.appendChild(n.createElement(r)),i=_.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),yt[r]=i,i)}function xt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=ot.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&mt(r)&&(i[o]=bt(r))):"none"!==n&&(i[o]="none",ot.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}_.fn.extend({show:function(){return xt(this,!0)},hide:function(){return xt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){mt(this)?_(this).show():_(this).hide()}))}});var wt,_t,St=/^(?:checkbox|radio)$/i,Et=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,kt=/^$|^module$|\/(?:java|ecma)script/i;wt=m.createDocumentFragment().appendChild(m.createElement("div")),(_t=m.createElement("input")).setAttribute("type","radio"),_t.setAttribute("checked","checked"),_t.setAttribute("name","t"),wt.appendChild(_t),d.checkClone=wt.cloneNode(!0).cloneNode(!0).lastChild.checked,wt.innerHTML="<textarea>x</textarea>",d.noCloneChecked=!!wt.cloneNode(!0).lastChild.defaultValue,wt.innerHTML="<option></option>",d.option=!!wt.lastChild;var Tt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function At(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&E(t,e)?_.merge([t],n):n}function Ct(t,e){for(var n=0,r=t.length;n<r;n++)ot.set(t[n],"globalEval",!e||ot.get(e[n],"globalEval"))}Tt.tbody=Tt.tfoot=Tt.colgroup=Tt.caption=Tt.thead,Tt.th=Tt.td,d.option||(Tt.optgroup=Tt.option=[1,"<select multiple='multiple'>","</select>"]);var Nt=/<|&#?\w+;/;function Mt(t,e,n,r,i){for(var o,a,s,l,c,u,f=e.createDocumentFragment(),h=[],d=0,p=t.length;d<p;d++)if((o=t[d])||0===o)if("object"===b(o))_.merge(h,o.nodeType?[o]:o);else if(Nt.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(Et.exec(o)||["",""])[1].toLowerCase(),l=Tt[s]||Tt._default,a.innerHTML=l[1]+_.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;_.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",d=0;o=h[d++];)if(r&&_.inArray(o,r)>-1)i&&i.push(o);else if(c=pt(o),a=At(f.appendChild(o),"script"),c&&Ct(a),n)for(u=0;o=a[u++];)kt.test(o.type||"")&&n.push(o);return f}var jt=/^([^.]*)(?:\.(.+)|)/;function Dt(){return!0}function It(){return!1}function Lt(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)Lt(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=It;else if(!i)return t;return 1===o&&(a=i,i=function(t){return _().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=_.guid++)),t.each((function(){_.event.add(this,e,i,r,n)}))}function $t(t,e,n){n?(ot.set(t,e,!1),_.event.add(t,e,{namespace:!1,handler:function(t){var n,r=ot.get(this,e);if(1&t.isTrigger&&this[e]){if(r)(_.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=i.call(arguments),ot.set(this,e,r),this[e](),n=ot.get(this,e),ot.set(this,e,!1),r!==n)return t.stopImmediatePropagation(),t.preventDefault(),n}else r&&(ot.set(this,e,_.event.trigger(r[0],r.slice(1),this)),t.stopPropagation(),t.isImmediatePropagationStopped=Dt)}})):void 0===ot.get(t,e)&&_.event.add(t,e,Dt)}_.event={global:{},add:function(t,e,n,r,i){var o,a,s,l,c,u,f,h,d,p,g,m=ot.get(t);if(rt(t))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&_.find.matchesSelector(dt,i),n.guid||(n.guid=_.guid++),(l=m.events)||(l=m.events=Object.create(null)),(a=m.handle)||(a=m.handle=function(e){return void 0!==_&&_.event.triggered!==e.type?_.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(U)||[""]).length;c--;)d=g=(s=jt.exec(e[c])||[])[1],p=(s[2]||"").split(".").sort(),d&&(f=_.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=_.event.special[d]||{},u=_.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&_.expr.match.needsContext.test(i),namespace:p.join(".")},o),(h=l[d])||((h=l[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,p,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,u):h.push(u),_.event.global[d]=!0)},remove:function(t,e,n,r,i){var o,a,s,l,c,u,f,h,d,p,g,m=ot.hasData(t)&&ot.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(U)||[""]).length;c--;)if(d=g=(s=jt.exec(e[c])||[])[1],p=(s[2]||"").split(".").sort(),d){for(f=_.event.special[d]||{},h=l[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)u=h[o],!i&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(h.splice(o,1),u.selector&&h.delegateCount--,f.remove&&f.remove.call(t,u));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,p,m.handle)||_.removeEvent(t,d,m.handle),delete l[d])}else for(d in l)_.event.remove(t,d+e[c],n,r,!0);_.isEmptyObject(l)&&ot.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=new Array(arguments.length),l=_.event.fix(t),c=(ot.get(this,"events")||Object.create(null))[l.type]||[],u=_.event.special[l.type]||{};for(s[0]=l,e=1;e<arguments.length;e++)s[e]=arguments[e];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(a=_.event.handlers.call(this,l,c),e=0;(i=a[e++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(r=((_.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,r,i,o,a,s=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?_(i,this).index(c)>-1:_.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,l<e.length&&s.push({elem:c,handlers:e.slice(l)}),s},addProp:function(t,e){Object.defineProperty(_.Event.prototype,t,{enumerable:!0,configurable:!0,get:p(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[_.expando]?t:new _.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return St.test(e.type)&&e.click&&E(e,"input")&&$t(e,"click",!0),!1},trigger:function(t){var e=this||t;return St.test(e.type)&&e.click&&E(e,"input")&&$t(e,"click"),!0},_default:function(t){var e=t.target;return St.test(e.type)&&e.click&&E(e,"input")&&ot.get(e,"click")||E(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},_.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},_.Event=function(t,e){if(!(this instanceof _.Event))return new _.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Dt:It,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&_.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:It,isPropagationStopped:It,isImmediatePropagationStopped:It,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Dt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Dt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Dt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},_.event.addProp),_.each({focus:"focusin",blur:"focusout"},(function(t,e){function n(t){if(m.documentMode){var n=ot.get(this,"handle"),r=_.event.fix(t);r.type="focusin"===t.type?"focus":"blur",r.isSimulated=!0,n(t),r.target===r.currentTarget&&n(r)}else _.event.simulate(e,t.target,_.event.fix(t))}_.event.special[t]={setup:function(){var r;if($t(this,t,!0),!m.documentMode)return!1;(r=ot.get(this,e))||this.addEventListener(e,n),ot.set(this,e,(r||0)+1)},trigger:function(){return $t(this,t),!0},teardown:function(){var t;if(!m.documentMode)return!1;(t=ot.get(this,e)-1)?ot.set(this,e,t):(this.removeEventListener(e,n),ot.remove(this,e))},_default:function(e){return ot.get(e.target,t)},delegateType:e},_.event.special[e]={setup:function(){var r=this.ownerDocument||this.document||this,i=m.documentMode?this:r,o=ot.get(i,e);o||(m.documentMode?this.addEventListener(e,n):r.addEventListener(t,n,!0)),ot.set(i,e,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=m.documentMode?this:r,o=ot.get(i,e)-1;o?ot.set(i,e,o):(m.documentMode?this.removeEventListener(e,n):r.removeEventListener(t,n,!0),ot.remove(i,e))}}})),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){_.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||_.contains(this,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}})),_.fn.extend({on:function(t,e,n,r){return Lt(this,t,e,n,r)},one:function(t,e,n,r){return Lt(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,_(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=It),this.each((function(){_.event.remove(this,t,n,e)}))}});var Pt=/<script|<style|<link/i,qt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ot=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Rt(t,e){return E(t,"table")&&E(11!==e.nodeType?e:e.firstChild,"tr")&&_(t).children("tbody")[0]||t}function Ht(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Bt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ft(t,e){var n,r,i,o,a,s;if(1===e.nodeType){if(ot.hasData(t)&&(s=ot.get(t).events))for(i in ot.remove(e,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)_.event.add(e,i,s[i][n]);at.hasData(t)&&(o=at.access(t),a=_.extend({},o),at.set(e,a))}}function Wt(t,e){var n=e.nodeName.toLowerCase();"input"===n&&St.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Xt(t,e,n,r){e=o(e);var i,a,s,l,c,u,f=0,h=t.length,g=h-1,m=e[0],v=p(m);if(v||h>1&&"string"==typeof m&&!d.checkClone&&qt.test(m))return t.each((function(i){var o=t.eq(i);v&&(e[0]=m.call(this,i,o.html())),Xt(o,e,n,r)}));if(h&&(a=(i=Mt(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=a),a||r)){for(l=(s=_.map(At(i,"script"),Ht)).length;f<h;f++)c=i,f!==g&&(c=_.clone(c,!0,!0),l&&_.merge(s,At(c,"script"))),n.call(t[f],c,f);if(l)for(u=s[s.length-1].ownerDocument,_.map(s,Bt),f=0;f<l;f++)c=s[f],kt.test(c.type||"")&&!ot.access(c,"globalEval")&&_.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?_._evalUrl&&!c.noModule&&_._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):y(c.textContent.replace(Ot,""),c,u))}return t}function Ut(t,e,n){for(var r,i=e?_.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||_.cleanData(At(r)),r.parentNode&&(n&&pt(r)&&Ct(At(r,"script")),r.parentNode.removeChild(r));return t}_.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),l=pt(t);if(!(d.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||_.isXMLDoc(t)))for(a=At(s),r=0,i=(o=At(t)).length;r<i;r++)Wt(o[r],a[r]);if(e)if(n)for(o=o||At(t),a=a||At(s),r=0,i=o.length;r<i;r++)Ft(o[r],a[r]);else Ft(t,s);return(a=At(s,"script")).length>0&&Ct(a,!l&&At(t,"script")),s},cleanData:function(t){for(var e,n,r,i=_.event.special,o=0;void 0!==(n=t[o]);o++)if(rt(n)){if(e=n[ot.expando]){if(e.events)for(r in e.events)i[r]?_.event.remove(n,r):_.removeEvent(n,r,e.handle);n[ot.expando]=void 0}n[at.expando]&&(n[at.expando]=void 0)}}}),_.fn.extend({detach:function(t){return Ut(this,t,!0)},remove:function(t){return Ut(this,t)},text:function(t){return K(this,(function(t){return void 0===t?_.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Xt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Rt(this,t).appendChild(t)}))},prepend:function(){return Xt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Rt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Xt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Xt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(_.cleanData(At(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return _.clone(this,t,e)}))},html:function(t){return K(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Pt.test(t)&&!Tt[(Et.exec(t)||["",""])[1].toLowerCase()]){t=_.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(_.cleanData(At(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Xt(this,arguments,(function(e){var n=this.parentNode;_.inArray(this,t)<0&&(_.cleanData(At(this)),n&&n.replaceChild(e,this))}),t)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){_.fn[t]=function(t){for(var n,r=[],i=_(t),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),_(i[s])[e](n),a.apply(r,n.get());return this.pushStack(r)}}));var zt=new RegExp("^("+ut+")(?!px)[a-z%]+$","i"),Vt=/^--/,Yt=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Gt=function(t,e,n){var r,i,o={};for(i in e)o[i]=t.style[i],t.style[i]=e[i];for(i in r=n.call(t),e)t.style[i]=o[i];return r},Jt=new RegExp(ht.join("|"),"i");function Qt(t,e,n){var r,i,o,a,s=Vt.test(e),l=t.style;return(n=n||Yt(t))&&(a=n.getPropertyValue(e)||n[e],s&&a&&(a=a.replace(N,"$1")||void 0),""!==a||pt(t)||(a=_.style(t,e)),!d.pixelBoxStyles()&&zt.test(a)&&Jt.test(e)&&(r=l.width,i=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=i,l.maxWidth=o)),void 0!==a?a+"":a}function Kt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",dt.appendChild(c).appendChild(u);var e=t.getComputedStyle(u);r="1%"!==e.top,l=12===n(e.marginLeft),u.style.right="60%",a=36===n(e.right),i=36===n(e.width),u.style.position="absolute",o=12===n(u.offsetWidth/3),dt.removeChild(c),u=null}}function n(t){return Math.round(parseFloat(t))}var r,i,o,a,s,l,c=m.createElement("div"),u=m.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",d.clearCloneStyle="content-box"===u.style.backgroundClip,_.extend(d,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,n,r,i;return null==s&&(e=m.createElement("table"),n=m.createElement("tr"),r=m.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",n.style.cssText="box-sizing:content-box;border:1px solid",n.style.height="1px",r.style.height="9px",r.style.display="block",dt.appendChild(e).appendChild(n).appendChild(r),i=t.getComputedStyle(n),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===n.offsetHeight,dt.removeChild(e)),s}}))}();var Zt=["Webkit","Moz","ms"],te=m.createElement("div").style,ee={};function ne(t){var e=_.cssProps[t]||ee[t];return e||(t in te?t:ee[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Zt.length;n--;)if((t=Zt[n]+e)in te)return t}(t)||t)}var re=/^(none|table(?!-c[ea]).+)/,ie={position:"absolute",visibility:"hidden",display:"block"},oe={letterSpacing:"0",fontWeight:"400"};function ae(t,e,n){var r=ft.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function se(t,e,n,r,i,o){var a="width"===e?1:0,s=0,l=0,c=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(c+=_.css(t,n+ht[a],!0,i)),r?("content"===n&&(l-=_.css(t,"padding"+ht[a],!0,i)),"margin"!==n&&(l-=_.css(t,"border"+ht[a]+"Width",!0,i))):(l+=_.css(t,"padding"+ht[a],!0,i),"padding"!==n?l+=_.css(t,"border"+ht[a]+"Width",!0,i):s+=_.css(t,"border"+ht[a]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-s-.5))||0),l+c}function le(t,e,n){var r=Yt(t),i=(!d.boxSizingReliable()||n)&&"border-box"===_.css(t,"boxSizing",!1,r),o=i,a=Qt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(zt.test(a)){if(!n)return a;a="auto"}return(!d.boxSizingReliable()&&i||!d.reliableTrDimensions()&&E(t,"tr")||"auto"===a||!parseFloat(a)&&"inline"===_.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===_.css(t,"boxSizing",!1,r),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+se(t,e,n||(i?"border":"content"),o,r,a)+"px"}function ce(t,e,n,r,i){return new ce.prototype.init(t,e,n,r,i)}_.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Qt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=nt(e),l=Vt.test(e),c=t.style;if(l||(e=ne(s)),a=_.cssHooks[e]||_.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:c[e];"string"===(o=typeof n)&&(i=ft.exec(n))&&i[1]&&(n=vt(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(_.cssNumber[s]?"":"px")),d.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,r){var i,o,a,s=nt(e);return Vt.test(e)||(e=ne(s)),(a=_.cssHooks[e]||_.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=Qt(t,e,r)),"normal"===i&&e in oe&&(i=oe[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),_.each(["height","width"],(function(t,e){_.cssHooks[e]={get:function(t,n,r){if(n)return!re.test(_.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?le(t,e,r):Gt(t,ie,(function(){return le(t,e,r)}))},set:function(t,n,r){var i,o=Yt(t),a=!d.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===_.css(t,"boxSizing",!1,o),l=r?se(t,e,r,s,o):0;return s&&a&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-se(t,e,"border",!1,o)-.5)),l&&(i=ft.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=_.css(t,e)),ae(0,n,l)}}})),_.cssHooks.marginLeft=Kt(d.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Qt(t,"marginLeft"))||t.getBoundingClientRect().left-Gt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),_.each({margin:"",padding:"",border:"Width"},(function(t,e){_.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ht[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(_.cssHooks[t+e].set=ae)})),_.fn.extend({css:function(t,e){return K(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Yt(t),i=e.length;a<i;a++)o[e[a]]=_.css(t,e[a],!1,r);return o}return void 0!==n?_.style(t,e,n):_.css(t,e)}),t,e,arguments.length>1)}}),_.Tween=ce,ce.prototype={constructor:ce,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||_.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(_.cssNumber[n]?"":"px")},cur:function(){var t=ce.propHooks[this.prop];return t&&t.get?t.get(this):ce.propHooks._default.get(this)},run:function(t){var e,n=ce.propHooks[this.prop];return this.options.duration?this.pos=e=_.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ce.propHooks._default.set(this),this}},ce.prototype.init.prototype=ce.prototype,ce.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=_.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){_.fx.step[t.prop]?_.fx.step[t.prop](t):1!==t.elem.nodeType||!_.cssHooks[t.prop]&&null==t.elem.style[ne(t.prop)]?t.elem[t.prop]=t.now:_.style(t.elem,t.prop,t.now+t.unit)}}},ce.propHooks.scrollTop=ce.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},_.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},_.fx=ce.prototype.init,_.fx.step={};var ue,fe,he=/^(?:toggle|show|hide)$/,de=/queueHooks$/;function pe(){fe&&(!1===m.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(pe):t.setTimeout(pe,_.fx.interval),_.fx.tick())}function ge(){return t.setTimeout((function(){ue=void 0})),ue=Date.now()}function me(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ht[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function ve(t,e,n){for(var r,i=(ye.tweeners[e]||[]).concat(ye.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function ye(t,e,n){var r,i,o=0,a=ye.prefilters.length,s=_.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var e=ue||ge(),n=Math.max(0,c.startTime+c.duration-e),r=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(r);return s.notifyWith(t,[c,r,n]),r<1&&a?n:(a||s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c]),!1)},c=s.promise({elem:t,props:_.extend({},e),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},n),originalProperties:e,originalOptions:n,startTime:ue||ge(),duration:n.duration,tweens:[],createTween:function(e,n){var r=_.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,r=e?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return e?(s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c,e])):s.rejectWith(t,[c,e]),this}}),u=c.props;for(!function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=nt(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=_.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(u,c.opts.specialEasing);o<a;o++)if(r=ye.prefilters[o].call(c,t,u,c.opts))return p(r.stop)&&(_._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return _.map(u,ve,c),p(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),_.fx.timer(_.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}_.Animation=_.extend(ye,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return vt(n.elem,t,ft.exec(e),n),n}]},tweener:function(t,e){p(t)?(e=t,t=["*"]):t=t.match(U);for(var n,r=0,i=t.length;r<i;r++)n=t[r],ye.tweeners[n]=ye.tweeners[n]||[],ye.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,l,c,u,f="width"in e||"height"in e,h=this,d={},p=t.style,g=t.nodeType&&mt(t),m=ot.get(t,"fxshow");for(r in n.queue||(null==(a=_._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,_.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],he.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;g=!0}d[r]=m&&m[r]||_.style(t,r)}if((l=!_.isEmptyObject(e))||!_.isEmptyObject(d))for(r in f&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=ot.get(t,"display")),"none"===(u=_.css(t,"display"))&&(c?u=c:(xt([t],!0),c=t.style.display||c,u=_.css(t,"display"),xt([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===_.css(t,"float")&&(l||(h.done((function(){p.display=c})),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,d)l||(m?"hidden"in m&&(g=m.hidden):m=ot.access(t,"fxshow",{display:c}),o&&(m.hidden=!g),g&&xt([t],!0),h.done((function(){for(r in g||xt([t]),ot.remove(t,"fxshow"),d)_.style(t,r,d[r])}))),l=ve(g?m[r]:0,r,h),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ye.prefilters.unshift(t):ye.prefilters.push(t)}}),_.speed=function(t,e,n){var r=t&&"object"==typeof t?_.extend({},t):{complete:n||!n&&e||p(t)&&t,duration:t,easing:n&&e||e&&!p(e)&&e};return _.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in _.fx.speeds?r.duration=_.fx.speeds[r.duration]:r.duration=_.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){p(r.old)&&r.old.call(this),r.queue&&_.dequeue(this,r.queue)},r},_.fn.extend({fadeTo:function(t,e,n,r){return this.filter(mt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=_.isEmptyObject(t),o=_.speed(e,n,r),a=function(){var e=ye(this,_.extend({},t),o);(i||ot.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=_.timers,a=ot.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&de.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||_.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=ot.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=_.timers,a=r?r.length:0;for(n.finish=!0,_.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),_.each(["toggle","show","hide"],(function(t,e){var n=_.fn[e];_.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(me(e,!0),t,r,i)}})),_.each({slideDown:me("show"),slideUp:me("hide"),slideToggle:me("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){_.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),_.timers=[],_.fx.tick=function(){var t,e=0,n=_.timers;for(ue=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||_.fx.stop(),ue=void 0},_.fx.timer=function(t){_.timers.push(t),_.fx.start()},_.fx.interval=13,_.fx.start=function(){fe||(fe=!0,pe())},_.fx.stop=function(){fe=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(e,n){return e=_.fx&&_.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,r){var i=t.setTimeout(n,e);r.stop=function(){t.clearTimeout(i)}}))},function(){var t=m.createElement("input"),e=m.createElement("select").appendChild(m.createElement("option"));t.type="checkbox",d.checkOn=""!==t.value,d.optSelected=e.selected,(t=m.createElement("input")).value="t",t.type="radio",d.radioValue="t"===t.value}();var be,xe=_.expr.attrHandle;_.fn.extend({attr:function(t,e){return K(this,_.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){_.removeAttr(this,t)}))}}),_.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?_.prop(t,e,n):(1===o&&_.isXMLDoc(t)||(i=_.attrHooks[e.toLowerCase()]||(_.expr.match.bool.test(e)?be:void 0)),void 0!==n?null===n?void _.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=_.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!d.radioValue&&"radio"===e&&E(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(U);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),be={set:function(t,e,n){return!1===e?_.removeAttr(t,n):t.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=xe[e]||_.find.attr;xe[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=xe[a],xe[a]=i,i=null!=n(t,e,r)?a:null,xe[a]=o),i}}));var we=/^(?:input|select|textarea|button)$/i,_e=/^(?:a|area)$/i;function Se(t){return(t.match(U)||[]).join(" ")}function Ee(t){return t.getAttribute&&t.getAttribute("class")||""}function ke(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(U)||[]}_.fn.extend({prop:function(t,e){return K(this,_.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[_.propFix[t]||t]}))}}),_.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&_.isXMLDoc(t)||(e=_.propFix[e]||e,i=_.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=_.find.attr(t,"tabindex");return e?parseInt(e,10):we.test(t.nodeName)||_e.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),d.optSelected||(_.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){_.propFix[this.toLowerCase()]=this})),_.fn.extend({addClass:function(t){var e,n,r,i,o,a;return p(t)?this.each((function(e){_(this).addClass(t.call(this,e,Ee(this)))})):(e=ke(t)).length?this.each((function(){if(r=Ee(this),n=1===this.nodeType&&" "+Se(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=Se(n),r!==a&&this.setAttribute("class",a)}})):this},removeClass:function(t){var e,n,r,i,o,a;return p(t)?this.each((function(e){_(this).removeClass(t.call(this,e,Ee(this)))})):arguments.length?(e=ke(t)).length?this.each((function(){if(r=Ee(this),n=1===this.nodeType&&" "+Se(r)+" "){for(o=0;o<e.length;o++)for(i=e[o];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");a=Se(n),r!==a&&this.setAttribute("class",a)}})):this:this.attr("class","")},toggleClass:function(t,e){var n,r,i,o,a=typeof t,s="string"===a||Array.isArray(t);return p(t)?this.each((function(n){_(this).toggleClass(t.call(this,n,Ee(this),e),e)})):"boolean"==typeof e&&s?e?this.addClass(t):this.removeClass(t):(n=ke(t),this.each((function(){if(s)for(o=_(this),i=0;i<n.length;i++)r=n[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==a||((r=Ee(this))&&ot.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":ot.get(this,"__className__")||""))})))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+Se(Ee(n))+" ").indexOf(e)>-1)return!0;return!1}});var Te=/\r/g;_.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=p(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,_(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=_.map(i,(function(t){return null==t?"":t+""}))),(e=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=_.valHooks[i.type]||_.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Te,""):null==n?"":n:void 0}}),_.extend({valHooks:{option:{get:function(t){var e=_.find.attr(t,"value");return null!=e?e:Se(_.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!E(n.parentNode,"optgroup"))){if(e=_(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=_.makeArray(e),a=i.length;a--;)((r=i[a]).selected=_.inArray(_.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),_.each(["radio","checkbox"],(function(){_.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=_.inArray(_(t).val(),e)>-1}},d.checkOn||(_.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}));var Ae=t.location,Ce={guid:Date.now()},Ne=/\?/;_.parseXML=function(e){var n,r;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){}return r=n&&n.getElementsByTagName("parsererror")[0],n&&!r||_.error("Invalid XML: "+(r?_.map(r.childNodes,(function(t){return t.textContent})).join("\n"):e)),n};var Me=/^(?:focusinfocus|focusoutblur)$/,je=function(t){t.stopPropagation()};_.extend(_.event,{trigger:function(e,n,r,i){var o,a,s,l,c,f,h,d,v=[r||m],y=u.call(e,"type")?e.type:e,b=u.call(e,"namespace")?e.namespace.split("."):[];if(a=d=s=r=r||m,3!==r.nodeType&&8!==r.nodeType&&!Me.test(y+_.event.triggered)&&(y.indexOf(".")>-1&&(b=y.split("."),y=b.shift(),b.sort()),c=y.indexOf(":")<0&&"on"+y,(e=e[_.expando]?e:new _.Event(y,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=b.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),n=null==n?[e]:_.makeArray(n,[e]),h=_.event.special[y]||{},i||!h.trigger||!1!==h.trigger.apply(r,n))){if(!i&&!h.noBubble&&!g(r)){for(l=h.delegateType||y,Me.test(l+y)||(a=a.parentNode);a;a=a.parentNode)v.push(a),s=a;s===(r.ownerDocument||m)&&v.push(s.defaultView||s.parentWindow||t)}for(o=0;(a=v[o++])&&!e.isPropagationStopped();)d=a,e.type=o>1?l:h.bindType||y,(f=(ot.get(a,"events")||Object.create(null))[e.type]&&ot.get(a,"handle"))&&f.apply(a,n),(f=c&&a[c])&&f.apply&&rt(a)&&(e.result=f.apply(a,n),!1===e.result&&e.preventDefault());return e.type=y,i||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(v.pop(),n)||!rt(r)||c&&p(r[y])&&!g(r)&&((s=r[c])&&(r[c]=null),_.event.triggered=y,e.isPropagationStopped()&&d.addEventListener(y,je),r[y](),e.isPropagationStopped()&&d.removeEventListener(y,je),_.event.triggered=void 0,s&&(r[c]=s)),e.result}},simulate:function(t,e,n){var r=_.extend(new _.Event,n,{type:t,isSimulated:!0});_.event.trigger(r,null,e)}}),_.fn.extend({trigger:function(t,e){return this.each((function(){_.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return _.event.trigger(t,e,n,!0)}});var De=/\[\]$/,Ie=/\r?\n/g,Le=/^(?:submit|button|image|reset|file)$/i,$e=/^(?:input|select|textarea|keygen)/i;function Pe(t,e,n,r){var i;if(Array.isArray(e))_.each(e,(function(e,i){n||De.test(t)?r(t,i):Pe(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==b(e))r(t,e);else for(i in e)Pe(t+"["+i+"]",e[i],n,r)}_.param=function(t,e){var n,r=[],i=function(t,e){var n=p(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!_.isPlainObject(t))_.each(t,(function(){i(this.name,this.value)}));else for(n in t)Pe(n,t[n],e,i);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=_.prop(this,"elements");return t?_.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!_(this).is(":disabled")&&$e.test(this.nodeName)&&!Le.test(t)&&(this.checked||!St.test(t))})).map((function(t,e){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,(function(t){return{name:e.name,value:t.replace(Ie,"\r\n")}})):{name:e.name,value:n.replace(Ie,"\r\n")}})).get()}});var qe=/%20/g,Oe=/#.*$/,Re=/([?&])_=[^&]*/,He=/^(.*?):[ \t]*([^\r\n]*)$/gm,Be=/^(?:GET|HEAD)$/,Fe=/^\/\//,We={},Xe={},Ue="*/".concat("*"),ze=m.createElement("a");function Ve(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(U)||[];if(p(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Ye(t,e,n,r){var i={},o=t===Xe;function a(s){var l;return i[s]=!0,_.each(t[s]||[],(function(t,s){var c=s(e,n,r);return"string"!=typeof c||o||i[c]?o?!(l=c):void 0:(e.dataTypes.unshift(c),a(c),!1)})),l}return a(e.dataTypes[0])||!i["*"]&&a("*")}function Ge(t,e){var n,r,i=_.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&_.extend(!0,t,r),t}ze.href=Ae.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ae.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ae.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ue,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ge(Ge(t,_.ajaxSettings),e):Ge(_.ajaxSettings,t)},ajaxPrefilter:Ve(We),ajaxTransport:Ve(Xe),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var r,i,o,a,s,l,c,u,f,h,d=_.ajaxSetup({},n),p=d.context||d,g=d.context&&(p.nodeType||p.jquery)?_(p):_.event,v=_.Deferred(),y=_.Callbacks("once memory"),b=d.statusCode||{},x={},w={},S="canceled",E={readyState:0,getResponseHeader:function(t){var e;if(c){if(!a)for(a={};e=He.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==c&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)E.always(t[E.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||S;return r&&r.abort(e),k(0,e),this}};if(v.promise(E),d.url=((e||d.url||Ae.href)+"").replace(Fe,Ae.protocol+"//"),d.type=n.method||n.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(U)||[""],null==d.crossDomain){l=m.createElement("a");try{l.href=d.url,l.href=l.href,d.crossDomain=ze.protocol+"//"+ze.host!=l.protocol+"//"+l.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=_.param(d.data,d.traditional)),Ye(We,d,n,E),c)return E;for(f in(u=_.event&&d.global)&&0==_.active++&&_.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Be.test(d.type),i=d.url.replace(Oe,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(qe,"+")):(h=d.url.slice(i.length),d.data&&(d.processData||"string"==typeof d.data)&&(i+=(Ne.test(i)?"&":"?")+d.data,delete d.data),!1===d.cache&&(i=i.replace(Re,"$1"),h=(Ne.test(i)?"&":"?")+"_="+Ce.guid+++h),d.url=i+h),d.ifModified&&(_.lastModified[i]&&E.setRequestHeader("If-Modified-Since",_.lastModified[i]),_.etag[i]&&E.setRequestHeader("If-None-Match",_.etag[i])),(d.data&&d.hasContent&&!1!==d.contentType||n.contentType)&&E.setRequestHeader("Content-Type",d.contentType),E.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Ue+"; q=0.01":""):d.accepts["*"]),d.headers)E.setRequestHeader(f,d.headers[f]);if(d.beforeSend&&(!1===d.beforeSend.call(p,E,d)||c))return E.abort();if(S="abort",y.add(d.complete),E.done(d.success),E.fail(d.error),r=Ye(Xe,d,n,E)){if(E.readyState=1,u&&g.trigger("ajaxSend",[E,d]),c)return E;d.async&&d.timeout>0&&(s=t.setTimeout((function(){E.abort("timeout")}),d.timeout));try{c=!1,r.send(x,k)}catch(t){if(c)throw t;k(-1,t)}}else k(-1,"No Transport");function k(e,n,a,l){var f,h,m,x,w,S=n;c||(c=!0,s&&t.clearTimeout(s),r=void 0,o=l||"",E.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(x=function(t,e,n){for(var r,i,o,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||t.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(d,E,a)),!f&&_.inArray("script",d.dataTypes)>-1&&_.inArray("json",d.dataTypes)<0&&(d.converters["text script"]=function(){}),x=function(t,e,n,r){var i,o,a,s,l,c={},u=t.dataTypes.slice();if(u[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(i in c)if((s=i.split(" "))[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(d,x,E,f),f?(d.ifModified&&((w=E.getResponseHeader("Last-Modified"))&&(_.lastModified[i]=w),(w=E.getResponseHeader("etag"))&&(_.etag[i]=w)),204===e||"HEAD"===d.type?S="nocontent":304===e?S="notmodified":(S=x.state,h=x.data,f=!(m=x.error))):(m=S,!e&&S||(S="error",e<0&&(e=0))),E.status=e,E.statusText=(n||S)+"",f?v.resolveWith(p,[h,S,E]):v.rejectWith(p,[E,S,m]),E.statusCode(b),b=void 0,u&&g.trigger(f?"ajaxSuccess":"ajaxError",[E,d,f?h:m]),y.fireWith(p,[E,S]),u&&(g.trigger("ajaxComplete",[E,d]),--_.active||_.event.trigger("ajaxStop")))}return E},getJSON:function(t,e,n){return _.get(t,e,n,"json")},getScript:function(t,e){return _.get(t,void 0,e,"script")}}),_.each(["get","post"],(function(t,e){_[e]=function(t,n,r,i){return p(n)&&(i=i||r,r=n,n=void 0),_.ajax(_.extend({url:t,type:e,dataType:i,data:n,success:r},_.isPlainObject(t)&&t))}})),_.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),_._evalUrl=function(t,e,n){return _.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){_.globalEval(t,e,n)}})},_.fn.extend({wrapAll:function(t){var e;return this[0]&&(p(t)&&(t=t.call(this[0])),e=_(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return p(t)?this.each((function(e){_(this).wrapInner(t.call(this,e))})):this.each((function(){var e=_(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=p(t);return this.each((function(n){_(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){_(this).replaceWith(this.childNodes)})),this}}),_.expr.pseudos.hidden=function(t){return!_.expr.pseudos.visible(t)},_.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var Je={0:200,1223:204},Qe=_.ajaxSettings.xhr();d.cors=!!Qe&&"withCredentials"in Qe,d.ajax=Qe=!!Qe,_.ajaxTransport((function(e){var n,r;if(d.cors||Qe&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);n=function(t){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Je[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&t.setTimeout((function(){n&&r()}))},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}})),_.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return _.globalEval(t),t}}}),_.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),_.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=_("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),m.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Ke,Ze=[],tn=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ze.pop()||_.expando+"_"+Ce.guid++;return this[t]=!0,t}}),_.ajaxPrefilter("json jsonp",(function(e,n,r){var i,o,a,s=!1!==e.jsonp&&(tn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&tn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=p(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(tn,"$1"+i):!1!==e.jsonp&&(e.url+=(Ne.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||_.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=t[i],t[i]=function(){a=arguments},r.always((function(){void 0===o?_(t).removeProp(i):t[i]=o,e[i]&&(e.jsonpCallback=n.jsonpCallback,Ze.push(i)),a&&p(o)&&o(a[0]),a=o=void 0})),"script"})),d.createHTMLDocument=((Ke=m.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ke.childNodes.length),_.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(d.createHTMLDocument?((r=(e=m.implementation.createHTMLDocument("")).createElement("base")).href=m.location.href,e.head.appendChild(r)):e=m),o=!n&&[],(i=q.exec(t))?[e.createElement(i[1])]:(i=Mt([t],e,o),o&&o.length&&_(o).remove(),_.merge([],i.childNodes)));var r,i,o},_.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=Se(t.slice(s)),t=t.slice(0,s)),p(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&_.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?_("<div>").append(_.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},_.expr.pseudos.animated=function(t){return _.grep(_.timers,(function(e){return t===e.elem})).length},_.offset={setOffset:function(t,e,n){var r,i,o,a,s,l,c=_.css(t,"position"),u=_(t),f={};"static"===c&&(t.style.position="relative"),s=u.offset(),o=_.css(t,"top"),l=_.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(a=(r=u.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),p(e)&&(e=e.call(t,n,_.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+i),"using"in e?e.using.call(t,f):u.css(f)}},_.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){_.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===_.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===_.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=_(t).offset()).top+=_.css(t,"borderTopWidth",!0),i.left+=_.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-_.css(r,"marginTop",!0),left:e.left-i.left-_.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===_.css(t,"position");)t=t.offsetParent;return t||dt}))}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;_.fn[t]=function(r){return K(this,(function(t,r,i){var o;if(g(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),_.each(["top","left"],(function(t,e){_.cssHooks[e]=Kt(d.pixelPosition,(function(t,n){if(n)return n=Qt(t,e),zt.test(n)?_(t).position()[e]+"px":n}))})),_.each({Height:"height",Width:"width"},(function(t,e){_.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){_.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return K(this,(function(e,n,i){var o;return g(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?_.css(e,n,s):_.style(e,n,i,s)}),e,a?i:void 0,a)}}))})),_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){_.fn[e]=function(t){return this.on(e,t)}})),_.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.on("mouseenter",t).on("mouseleave",e||t)}}),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){_.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var en=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;_.proxy=function(t,e){var n,r,o;if("string"==typeof e&&(n=t[e],e=t,t=n),p(t))return r=i.call(arguments,2),o=function(){return t.apply(e||this,r.concat(i.call(arguments)))},o.guid=t.guid=t.guid||_.guid++,o},_.holdReady=function(t){t?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=E,_.isFunction=p,_.isWindow=g,_.camelCase=nt,_.type=b,_.now=Date.now,_.isNumeric=function(t){var e=_.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},_.trim=function(t){return null==t?"":(t+"").replace(en,"$1")};var nn=t.jQuery,rn=t.$;return _.noConflict=function(e){return t.$===_&&(t.$=rn),e&&t.jQuery===_&&(t.jQuery=nn),_},void 0===e&&(t.jQuery=t.$=_),_}))}(cr);var ur=lr(cr.exports);class fr{constructor(t,e=void 0,n=!1){ur(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=ur("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,i="fa-download"){this.createButton(t,i),ht(`#${t}`).on("click",(()=>{this.downloadSvg(e,n,r)})).on("mouseover",(()=>{this.tooltip.show("Download the plot")})).on("mouseout",(()=>{this.tooltip.hide()}))}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n),ht(`#${t}`).on("click",e).on("mouseover",(()=>{this.tooltip.show("Reset the scales")})).on("mouseout",(()=>{this.tooltip.hide()}))}createButton(t,e="fa-download",n="need to define",r=void 0){const i=ur("<a/>").attr("id",t).addClass("btn btn-default btn-light btn-sm").appendTo(this.bar);return e.startsWith("fa-")?ur("<i/>").addClass(`fa ${e}`).appendTo(i):i.text(e),this.buttons[t]=i,"foo"!=t&&ht(`#${t}`).on("click",(()=>{void 0===r?alert("need to define the click event"):r()})).on("mouseover",(()=>{this.tooltip.show(n)})).on("mouseout",(()=>{this.tooltip.hide()})),i}attachTooltip(t){this.tooltip=t}downloadSvg(t,n,r){console.log(t,n,r);let i=ur(ur(ur(""+("#"+t)))[0]),o=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),a=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var i=n[r].cssRules,o=0;o<i.length;o++){var a=i[o];if(void 0!==a.style){var s,l=void 0===a.selectorText?a.selectorText:a.selectorText.replace(`#${t[0].id} `,"");try{s=ur(t).find(l)}catch(t){s=[]}s.length>0&&(e+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var c=document.createElement("style");return c.setAttribute("type","text/css"),c.innerHTML="<![CDATA[\n"+e+"\n]]>",c}(i.get());o.prepend(a),ur("#"+r).html("").hide();let s=ur(`#${r}`).append(o).html(),l=new Blob([s],{type:"image/svg+xml"});e.saveAs(l,n),ur(`#${r}`).html("").hide()}}var hr={value:function(){}};function dr(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new pr(r)}function pr(t){this._=t}function gr(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function mr(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=hr,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}pr.prototype=dr.prototype={constructor:pr,on:function(t,e){var n,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<s;)if(n=(t=o[a]).type)i[n]=mr(i[n],t.name,e);else if(null==e)for(n in i)i[n]=mr(i[n],t.name,null);return this}for(;++a<s;)if((n=(t=o[a]).type)&&(n=gr(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new pr(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var vr,yr,br=0,xr=0,wr=0,_r=1e3,Sr=0,Er=0,kr=0,Tr="object"==typeof performance&&performance.now?performance:Date,Ar="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Cr(){return Er||(Ar(Nr),Er=Tr.now()+kr)}function Nr(){Er=0}function Mr(){this._call=this._time=this._next=null}function jr(t,e,n){var r=new Mr;return r.restart(t,e,n),r}function Dr(){Er=(Sr=Tr.now())+kr,br=xr=0;try{!function(){Cr(),++br;for(var t,e=vr;e;)(t=Er-e._time)>=0&&e._call.call(null,t),e=e._next;--br}()}finally{br=0,function(){var t,e,n=vr,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:vr=e);yr=t,Lr(r)}(),Er=0}}function Ir(){var t=Tr.now(),e=t-Sr;e>_r&&(kr-=e,Sr=t)}function Lr(t){br||(xr&&(xr=clearTimeout(xr)),t-Er>24?(t<1/0&&(xr=setTimeout(Dr,t-Tr.now()-kr)),wr&&(wr=clearInterval(wr))):(wr||(Sr=Tr.now(),wr=setInterval(Ir,_r)),br=1,Ar(Dr)))}function $r(t,e,n){var r=new Mr;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r}Mr.prototype=jr.prototype={constructor:Mr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Cr():+n)+(null==e?0:+e),this._next||yr===this||(yr?yr._next=this:vr=this,yr=this),this._call=t,this._time=n,Lr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Lr())}};var Pr=dr("start","end","cancel","interrupt"),qr=[],Or=0,Rr=1,Hr=2,Br=3,Fr=4,Wr=5,Xr=6;function Ur(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(t){n.state=Rr,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)}function a(o){var c,u,f,h;if(n.state!==Rr)return l();for(c in i)if((h=i[c]).name===n.name){if(h.state===Br)return $r(a);h.state===Fr?(h.state=Xr,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<e&&(h.state=Xr,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[c])}if($r((function(){n.state===Br&&(n.state=Fr,n.timer.restart(s,n.delay,n.time),s(o))})),n.state=Hr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Hr){for(n.state=Br,r=new Array(f=n.tween.length),c=0,u=-1;c<f;++c)(h=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++u]=h);r.length=u+1}}function s(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=Wr,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===Wr&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var r in n.state=Xr,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=jr(o,0,n.time)}(t,n,{name:e,index:r,group:i,on:Pr,tween:qr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Or})}function zr(t,e){var n=Yr(t,e);if(n.state>Or)throw new Error("too late; already scheduled");return n}function Vr(t,e){var n=Yr(t,e);if(n.state>Br)throw new Error("too late; already running");return n}function Yr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Gr(t,e){var n,r;return function(){var i=Vr(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function Jr(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Vr(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},l=0,c=i.length;l<c;++l)if(i[l].name===e){i[l]=s;break}l===c&&i.push(s)}o.tween=i}}function Qr(t,e,n){var r=t._id;return t.each((function(){var t=Vr(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Yr(t,r).value[e]}}function Kr(t,e){var n;return("number"==typeof e?Ce:e instanceof se?_e:(n=se(e))?(e=n,_e):De)(t,e)}function Zr(t){return function(){this.removeAttribute(t)}}function ti(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ei(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function ni(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function ri(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttribute(t))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttribute(t)}}function ii(t,e,n){var r,i,o;return function(){var a,s,l=n(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(s=l+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,l));this.removeAttributeNS(t.space,t.local)}}function oi(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,i)),n}return i._value=e,i}function ai(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,i)),n}return i._value=e,i}function si(t,e){return function(){zr(this,t).delay=+e.apply(this,arguments)}}function li(t,e){return e=+e,function(){zr(this,t).delay=e}}function ci(t,e){return function(){Vr(this,t).duration=+e.apply(this,arguments)}}function ui(t,e){return e=+e,function(){Vr(this,t).duration=e}}var fi=ft.prototype.constructor;function hi(t){return function(){this.style.removeProperty(t)}}var di=0;function pi(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function gi(){return++di}var mi=ft.prototype;pi.prototype={constructor:pi,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=c(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,l,u=r[a],f=u.length,h=o[a]=new Array(f),d=0;d<f;++d)(s=u[d])&&(l=t.call(s,s.__data__,d,u))&&("__data__"in s&&(l.__data__=s.__data__),h[d]=l,Ur(h[d],e,n,d,h,Yr(s,n)));return new pi(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=f(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var l,c=r[s],u=c.length,h=0;h<u;++h)if(l=c[h]){for(var d,p=t.call(l,l.__data__,h,c),g=Yr(l,n),m=0,v=p.length;m<v;++m)(d=p[m])&&Ur(d,e,n,m,p,g);o.push(p),a.push(l)}return new pi(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,l=r[i]=[],c=0;c<s;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&l.push(o);return new pi(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var l,c=e[s],u=n[s],f=c.length,h=a[s]=new Array(f),d=0;d<f;++d)(l=c[d]||u[d])&&(h[d]=l);for(;s<r;++s)a[s]=e[s];return new pi(a,this._parents,this._name,this._id)},selection:function(){return new fi(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=gi(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,c=0;c<l;++c)if(a=s[c]){var u=Yr(a,e);Ur(a,t,n,c,s,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new pi(r,this._parents,t,n)},call:mi.call,nodes:mi.nodes,node:mi.node,size:mi.size,empty:mi.empty,each:mi.each,on:function(t,e){var n=this._id;return arguments.length<2?Yr(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?zr:Vr;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}(n,t,e))},attr:function(t,e){var n=i(t),r="transform"===n?Xe:Kr;return this.attrTween(t,"function"==typeof e?(n.local?ii:ri)(n,r,Qr(this,"attr."+t,e)):null==e?(n.local?ti:Zr)(n):(n.local?ni:ei)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=i(t);return this.tween(n,(r.local?oi:ai)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?We:Kr;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=N(this,t),a=(this.style.removeProperty(t),N(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,hi(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=N(this,t),s=n(this),l=s+"";return null==s&&(this.style.removeProperty(t),l=s=N(this,t)),a===l?null:a===r&&l===i?o:(i=l,o=e(r=a,s))}}(t,r,Qr(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var l=Vr(this,t),c=l.on,u=null==l.value[a]?o||(o=hi(e)):void 0;c===n&&i===u||(r=(n=c).copy()).on(s,i=u),l.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=N(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,o,n)),r}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Qr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Yr(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?Gr:Jr)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?si:li)(e,t)):Yr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?ci:ui)(e,t)):Yr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Vr(this,t).ease=e}}(e,t)):Yr(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},l={value:function(){0==--i&&o()}};n.each((function(){var n=Vr(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(l)),n.on=e}))}))}};var vi={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function yi(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return vi.time=Cr(),vi;return n}ft.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>Hr&&n.state<Wr,n.state=Xr,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},ft.prototype.transition=function(t){var e,n;t instanceof pi?(e=t._id,t=t._name):(e=gi(),(n=vi).time=Cr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],l=s.length,c=0;c<l;++c)(a=s[c])&&Ur(a,t,e,c,s,n||yi(a,e));return new pi(r,this._parents,t,e)};var bi=Math.PI,xi=2*bi,wi=1e-6,_i=xi-wi;function Si(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ei(){return new Si}function ki(){return Math.random()}Si.prototype=Ei.prototype={constructor:Si,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,l=r-e,c=o-t,u=a-e,f=c*c+u*u;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>wi)if(Math.abs(u*s-l*c)>wi&&i){var h=n-o,d=r-a,p=s*s+l*l,g=h*h+d*d,m=Math.sqrt(p),v=Math.sqrt(f),y=i*Math.tan((bi-Math.acos((p+f-g)/(2*m*v)))/2),b=y/v,x=y/m;Math.abs(b-1)>wi&&(this._+="L"+(t+b*c)+","+(e+b*u)),this._+="A"+i+","+i+",0,0,"+ +(u*h>c*d)+","+(this._x1=t+x*s)+","+(this._y1=e+x*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),l=t+a,c=e+s,u=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+c:(Math.abs(this._x1-l)>wi||Math.abs(this._y1-c)>wi)&&(this._+="L"+l+","+c),n&&(f<0&&(f=f%xi+xi),f>_i?this._+="A"+n+","+n+",0,1,"+u+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+u+","+(this._x1=l)+","+(this._y1=c):f>wi&&(this._+="A"+n+","+n+",0,"+ +(f>=bi)+","+u+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}},function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(ki);var Ti=function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(ki);!function t(e){function n(){var t=Ti.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(ki);var Ai=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(ki);function Ci(t){return function(){return t}}function Ni(t){this._context=t}function Mi(t){return new Ni(t)}function ji(t){return t[0]}function Di(t){return t[1]}function Ii(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Li(t,e){this._context=t,this._k=(1-e)/6}!function t(e){function n(t){var n=Ai.source(e)(t);return function(){return n()/t}}return n.source=t,n}(ki),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(ki),Ni.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},Li.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ii(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Ii(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var $i=function t(e){function n(t){return new Li(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Pi(){this._=null}function qi(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Oi(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Ri(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Hi(t){for(;t.L;)t=t.L;return t}function Bi(t,e,n,r){var i=[null,null],o=fo.push(i)-1;return i.left=t,i.right=e,n&&Wi(i,t,e,n),r&&Wi(i,e,t,r),co[t.index].halfedges.push(o),co[e.index].halfedges.push(o),i}function Fi(t,e,n){var r=[e,n];return r.left=t,r}function Wi(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Xi(t,e,n,r,i){var o,a=t[0],s=t[1],l=a[0],c=a[1],u=0,f=1,h=s[0]-l,d=s[1]-c;if(o=e-l,h||!(o>0)){if(o/=h,h<0){if(o<u)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>u&&(u=o)}if(o=r-l,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>u&&(u=o)}else if(h>0){if(o<u)return;o<f&&(f=o)}if(o=n-c,d||!(o>0)){if(o/=d,d<0){if(o<u)return;o<f&&(f=o)}else if(d>0){if(o>f)return;o>u&&(u=o)}if(o=i-c,d||!(o<0)){if(o/=d,d<0){if(o>f)return;o>u&&(u=o)}else if(d>0){if(o<u)return;o<f&&(f=o)}return!(u>0||f<1)||(u>0&&(t[0]=[l+u*h,c+u*d]),f<1&&(t[1]=[l+f*h,c+f*d]),!0)}}}}}function Ui(t,e,n,r,i){var o=t[1];if(o)return!0;var a,s,l=t[0],c=t.left,u=t.right,f=c[0],h=c[1],d=u[0],p=u[1],g=(f+d)/2,m=(h+p)/2;if(p===h){if(g<e||g>=r)return;if(f>d){if(l){if(l[1]>=i)return}else l=[g,n];o=[g,i]}else{if(l){if(l[1]<n)return}else l=[g,i];o=[g,n]}}else if(s=m-(a=(f-d)/(p-h))*g,a<-1||a>1)if(f>d){if(l){if(l[1]>=i)return}else l=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(l){if(l[1]<n)return}else l=[(i-s)/a,i];o=[(n-s)/a,n]}else if(h<p){if(l){if(l[0]>=r)return}else l=[e,a*e+s];o=[r,a*r+s]}else{if(l){if(l[0]<e)return}else l=[r,a*r+s];o=[e,a*e+s]}return t[0]=l,t[1]=o,!0}function zi(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Vi(t,e){return e[+(e.left!==t.site)]}function Yi(t,e){return e[+(e.left===t.site)]}Pi.prototype={constructor:Pi,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Hi(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Oi(this,n),n=(t=n).U),n.C=!1,r.C=!0,Ri(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Ri(this,n),n=(t=n).U),n.C=!1,r.C=!0,Oi(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Hi(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Oi(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Ri(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Oi(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Ri(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Oi(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Ri(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Gi,Ji=[];function Qi(){qi(this),this.x=this.y=this.arc=this.site=this.cy=null}function Ki(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],s=i[1],l=r[0]-a,c=r[1]-s,u=o[0]-a,f=o[1]-s,h=2*(l*f-c*u);if(!(h>=-po)){var d=l*l+c*c,p=u*u+f*f,g=(f*d-c*p)/h,m=(l*p-u*d)/h,v=Ji.pop()||new Qi;v.arc=t,v.site=i,v.x=g+a,v.y=(v.cy=m+s)+Math.sqrt(g*g+m*m),t.circle=v;for(var y=null,b=uo._;b;)if(v.y<b.y||v.y===b.y&&v.x<=b.x){if(!b.L){y=b.P;break}b=b.L}else{if(!b.R){y=b;break}b=b.R}uo.insert(y,v),y||(Gi=v)}}}}function Zi(t){var e=t.circle;e&&(e.P||(Gi=e.N),uo.remove(e),Ji.push(e),qi(e),t.circle=null)}var to=[];function eo(){qi(this),this.edge=this.site=this.circle=null}function no(t){var e=to.pop()||new eo;return e.site=t,e}function ro(t){Zi(t),lo.remove(t),to.push(t),qi(t)}function io(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,s=[t];ro(t);for(var l=o;l.circle&&Math.abs(n-l.circle.x)<ho&&Math.abs(r-l.circle.cy)<ho;)o=l.P,s.unshift(l),ro(l),l=o;s.unshift(l),Zi(l);for(var c=a;c.circle&&Math.abs(n-c.circle.x)<ho&&Math.abs(r-c.circle.cy)<ho;)a=c.N,s.push(c),ro(c),c=a;s.push(c),Zi(c);var u,f=s.length;for(u=1;u<f;++u)c=s[u],l=s[u-1],Wi(c.edge,l.site,c.site,i);l=s[0],(c=s[f-1]).edge=Bi(l.site,c.site,null,i),Ki(l),Ki(c)}function oo(t){for(var e,n,r,i,o=t[0],a=t[1],s=lo._;s;)if((r=ao(s,a)-o)>ho)s=s.L;else{if(!((i=o-so(s,a))>ho)){r>-ho?(e=s.P,n=s):i>-ho?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){co[t.index]={site:t,halfedges:[]}}(t);var l=no(t);if(lo.insert(e,l),e||n){if(e===n)return Zi(e),n=no(e.site),lo.insert(l,n),l.edge=n.edge=Bi(e.site,l.site),Ki(e),void Ki(n);if(n){Zi(e),Zi(n);var c=e.site,u=c[0],f=c[1],h=t[0]-u,d=t[1]-f,p=n.site,g=p[0]-u,m=p[1]-f,v=2*(h*m-d*g),y=h*h+d*d,b=g*g+m*m,x=[(m*y-d*b)/v+u,(h*b-g*y)/v+f];Wi(n.edge,c,p,x),l.edge=Bi(c,t,null,x),n.edge=Bi(t,p,null,x),Ki(e),Ki(n)}else l.edge=Bi(e.site,l.site)}}function ao(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(n=a.site)[0],l=n[1],c=l-e;if(!c)return s;var u=s-r,f=1/o-1/c,h=u/c;return f?(-h+Math.sqrt(h*h-2*f*(u*u/(-2*c)-l+c/2+i-o/2)))/f+r:(r+s)/2}function so(t,e){var n=t.N;if(n)return ao(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var lo,co,uo,fo,ho=1e-6,po=1e-12;function go(t,e){return e[1]-t[1]||e[0]-t[0]}function mo(t,e){var n,r,i,o=t.sort(go).pop();for(fo=[],co=new Array(t.length),lo=new Pi,uo=new Pi;;)if(i=Gi,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(oo(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;io(i.arc)}if(function(){for(var t,e,n,r,i=0,o=co.length;i<o;++i)if((t=co[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=zi(t,fo[e[n]]);for(a.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[a[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var a=+e[0][0],s=+e[0][1],l=+e[1][0],c=+e[1][1];!function(t,e,n,r){for(var i,o=fo.length;o--;)Ui(i=fo[o],t,e,n,r)&&Xi(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>ho||Math.abs(i[0][1]-i[1][1])>ho)||delete fo[o]}(a,s,l,c),function(t,e,n,r){var i,o,a,s,l,c,u,f,h,d,p,g,m=co.length,v=!0;for(i=0;i<m;++i)if(o=co[i]){for(a=o.site,s=(l=o.halfedges).length;s--;)fo[l[s]]||l.splice(s,1);for(s=0,c=l.length;s<c;)p=(d=Yi(o,fo[l[s]]))[0],g=d[1],f=(u=Vi(o,fo[l[++s%c]]))[0],h=u[1],(Math.abs(p-f)>ho||Math.abs(g-h)>ho)&&(l.splice(s,0,fo.push(Fi(a,d,Math.abs(p-t)<ho&&r-g>ho?[t,Math.abs(f-t)<ho?h:r]:Math.abs(g-r)<ho&&n-p>ho?[Math.abs(h-r)<ho?f:n,r]:Math.abs(p-n)<ho&&g-e>ho?[n,Math.abs(f-n)<ho?h:e]:Math.abs(g-e)<ho&&p-t>ho?[Math.abs(h-e)<ho?f:t,e]:null))-1),++c);c&&(v=!1)}if(v){var y,b,x,w=1/0;for(i=0,v=null;i<m;++i)(o=co[i])&&(x=(y=(a=o.site)[0]-t)*y+(b=a[1]-e)*b)<w&&(w=x,v=o);if(v){var _=[t,e],S=[t,r],E=[n,r],k=[n,e];v.halfedges.push(fo.push(Fi(a=v.site,_,S))-1,fo.push(Fi(a,S,E))-1,fo.push(Fi(a,E,k))-1,fo.push(Fi(a,k,_))-1)}}for(i=0;i<m;++i)(o=co[i])&&(o.halfedges.length||delete co[i])}(a,s,l,c)}this.edges=fo,this.cells=co,lo=uo=fo=co=null}function vo(t,e,n){this.k=t,this.x=e,this.y=n}mo.prototype={constructor:mo,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return Vi(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,l,c,u=n.site,f=-1,h=e[i[o-1]],d=h.left===u?h.right:h.left;++f<o;)a=d,d=(h=e[i[f]]).left===u?h.right:h.left,a&&d&&r<a.index&&r<d.index&&(l=a,c=d,((s=u)[0]-c[0])*(l[1]-s[1])-(s[0]-l[0])*(c[1]-s[1])<0)&&t.push([u.data,a.data,d.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var l=t-i.site[0],c=e-i.site[1],u=l*l+c*c;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var l=t-s[0],c=e-s[1],f=l*l+c*c;f<u&&(u=f,a=s.index)}}))}while(null!==a);return o._found=r,null==n||u<=n*n?i.site:null}},vo.prototype={constructor:vo,scale:function(t){return 1===t?this:new vo(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new vo(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},vo.prototype;class yo{constructor(t,e=!1,n=30,r=-40,i=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),ht("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){ht("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=et.pageX,e=et.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY,ht("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){ht("#"+this.id).html(t)}}class bo{constructor(t,e=!0,n=10,r="YlGnBu",i=2,o="heatmapTooltip",a="heatmap-tooltip"){this.data=t,this.useLog=e,this.logBase=n,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=i,this.colorScheme=r,ht(`#${o}`).empty()&&ht("body").append("div").attr("id",o),this.tooltip=new yo(o),ht(`#${o}`).classed(a,!0),this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new fr(t,e),this.toolbar}drawColorLegend(t,e={x:0,y:0},n=5){On(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.logBase)}redraw(t,e,n,r={w:1e3,h:1e3},i=30){this._setXScale(r.w,e),this._setYScale(r.h,n),this.draw(t,r,i)}draw(t,e={w:1e3,h:600},n=30,r=!1,i=null,o=0,a="right"){void 0===this.xList&&this._setXScale(e.w),void 0===this.yList&&this._setYScale(e.h),void 0===this.colorScale&&this._setColorScale(o);const s=t.selectAll(".exp-map-xlabel").data(this.xList),l=null==i?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+i;s.attr("transform",(t=>`translate(${this.xScale(t)+5}, ${l}) rotate(${n})`)),s.enter().append("text").attr("class",((t,e)=>`exp-map-xlabel x${e}`)).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").style("font-size",this.xScale.bandwidth()>12?12:this.xScale.bandwidth()).attr("transform",(t=>`translate(${this.xScale(t)+5}, ${l}) rotate(${n})`)).merge(s).text((t=>t)),s.exit().remove(),t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text((t=>t)).attr("x","left"==a?this.xScale.range()[0]-5:this.xScale.range()[1]+5).attr("y",(t=>this.yScale(t)+this.yScale.bandwidth()/2)).style("font-size",this.yScale.bandwidth()).attr("class",((t,e)=>`exp-map-ylabel y${e}`)).attr("text-anchor","left"==a?"end":"start").style("cursor","default").on("click",(t=>{alert(`${t} is clicked. To be implemented`)})).on("mouseover",(function(){ht(this).classed("normal",!1).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).classed("normal",!0).classed("highlighted",!1)}));const c=t.selectAll(".exp-map-cell").data(this.data,(t=>t.value));c.attr("x",(t=>this.xScale(t.x))).attr("y",(t=>this.yScale(t.y))).attr("row",(t=>`x${this.xList.indexOf(t.x)}`)).attr("col",(t=>`y${this.yList.indexOf(t.y)}`));const u=this;c.enter().append("rect").attr("row",(t=>`x${this.xList.indexOf(t.x)}`)).attr("col",(t=>`y${this.yList.indexOf(t.y)}`)).attr("x",(t=>this.xScale(t.x))).attr("y",(t=>this.yScale(t.y))).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",(function(e){const n=ht(this);u.cellMouseover(e,t,n)})).on("mouseout",(function(){u.cellMouseout(t)})).merge(c).style("fill",(t=>t.color?t.color:(r&&0==t.value&&console.info(t),!r||0!=t.value&&null!==t.value&&void 0!==t.value?this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value):"#ffffff"))).style("stroke",(t=>r&&0==t.value?"lightgrey":t.stroke?t.stroke:"none")).style("stroke",(t=>r&&0==t.value||t.stroke?1:0)),c.exit().remove()}cellMouseout(t){t.selectAll("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(t,e,n){const r=n.attr("row"),i=n.attr("col");e.selectAll(".exp-map-xlabel").filter(`.${r}`).classed("highlighted",!0),e.selectAll(".exp-map-ylabel").filter(`.${i}`).classed("highlighted",!0),n.classed("highlighted",!0);const o=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue;this.tooltip.show(`Column: ${t.x} <br/> Row: ${t.y}<br/> Value: ${o}`)}_setXScale(t,e=void 0){this.xList=void 0!==e?e:Mt().key((t=>t.x)).entries(this.data).map((t=>t.key)),this.xScale=Ft().domain(this.xList).range([0,t]).padding(.05)}_setYScale(t,e){this.yList=void 0!==e?e:Mt().key((t=>t.y)).entries(this.data).map((t=>t.key)),this.yScale=Ft().domain(this.yList).range([0,t]).padding(.05)}_setColorScale(t=0){let e=this.useLog,n=this.data.map((t=>e?this._log(t.value):t.value));this.colorScale=qn(n,this.colorScheme,t)}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class xo{constructor(t,e,n,r="YlGnBu",i=2,o=new Rn,a="dmapTooltip",s=!0,l=10,c=""){this.config=o.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new ar(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new ar(this.data.rowTree,"h"),heatmap:new bo(this.data.heatmap,s,l,r,i,a)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.title=c,this.toolbar=void 0,this.tooltip=this.objects.heatmap.tooltip}createToolbar(t,e){return this.toolbar=new fr(t,e),this.toolbar}render(t,e,n=!0,r=!0,i="top",o=5){let a,s;this._updateConfig(i),this.visualComponents.svg=Hn(t,this.config.w,this.config.h,this.config.margin,e),n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),a=this.objects.columnTree.xScale.domain()),r&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),s=this.objects.rowTree.yScale.domain()),""!=this.title&&ht(`#${t}-svg`).append("text").attr("x",0).attr("y",20).text(this.title),this._renderHeatmap(this.objects.heatmap,a,s,o)}_renderTree(t,e,n){let r=this.visualComponents.svg;const i="row"==t?".exp-map-ylabel":".exp-map-xlabel",o=r.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`);e.draw(o,n.w,n.h);return o.selectAll(".dendrogram-node").on("mouseover",(function(t){ht(this).attr("r",6).attr("fill","red");let e=t.leaves().map((t=>t.data.name));r.selectAll(i).filter((t=>e.includes(t))).classed("highlighted",!0),r.selectAll(".leaf-color").filter((t=>e.includes(t))).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).attr("r",2).attr("fill","#333"),r.selectAll(i).classed("highlighted",!1),r.selectAll(".leaf-color").classed("highlighted",!1)})),o}_renderHeatmap(t,e,n,r=5){let i=this.visualComponents.svg;const o=this.config.panels.main,a=i.append("g").attr("id",o.id).attr("transform",`translate(${o.x}, ${o.y})`);t.redraw(a,e,n,{w:o.w,h:o.h}),t.drawColorLegend(i,this.config.panels.legend,r)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}class wo{constructor(t,e,n,r,i=!1,o=1e3,a=0){this.gene=t,this.exons=e,"+"==this.gene.strand?this.exons.sort(((t,e)=>Number(t.exonNumber)-Number(e.exonNumber))):this.exons.sort(((t,e)=>Number(e.exonNumber)-Number(t.exonNumber))),this.exonsCurated=n.sort(((t,e)=>Number(t.exonNumber)-Number(e.exonNumber))),this.junctions=r.sort(((t,e)=>t.junctionId<e.junctionId?-1:t.junctionId>e.junctionId?1:0)),this.isIsoform=i,this.maxIntronLength=o,this.intronLength=0,this.minExonWidth=a,this.nullColor="#DDDDDD"}changeTextlabel(t,e){t.selectAll("#modelInfo").text(e)}addData(t,e,n,r,i){void 0!==e&&t.selectAll(".junc").style("fill",(n=>{const i=e.filter((t=>t.junctionId==n.junctionId))[0],o=0==i.value?this.nullColor:r(i.value);return t.selectAll(".junc-curve").filter(`.junc${n.junctionId}`).style("stroke",o),o})),t.selectAll(".exon-curated").style("fill",(t=>{const e=n.filter((e=>e.exonId==t.exonId))[0];if(void 0===e)throw`${t.exonId} has no data`;return 0==e.value?this.nullColor:i(e.value)}))}render(t,e){this.setXscale(e.w);const n=e.h/2;if(this.exons.forEach(((t,e)=>{t.x=0==e?0:this.exons[e-1].x+this.exons[e-1].w+this.xScale(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)})),this.exonsCurated.forEach(((t,e)=>{if(t.oriExon=this._findExon(t.chromStart)||this._findExon(t.chromEnd),void 0!==t.oriExon){if(Number(t.oriExon.chromStart)==Number(t.chromStart))t.x=t.oriExon.x;else{const e=Number(t.chromStart)-Number(t.oriExon.chromStart)+1;t.x=t.oriExon.x+this.xScale(e)}void 0===t.length&&(t.length=Number(t.chromEnd)-Number(t.chromStart)+1),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}else console.warn(`${this.gene.transcriptId}-${t.exonId} can't map to full gene model`)})),this.isIsoform)t.append("line").attr("x1",this.exonsCurated[0].x).attr("x2",this.exonsCurated[this.exonsCurated.length-1].x).attr("y1",n+7.5).attr("y2",n+7.5).classed("intron",!0);else{this.junctions=this.junctions.filter((t=>(t.startExon=this._findExon(t.chromStart),t.endExon=this._findExon(t.chromEnd),void 0!==t.startExon&&void 0!==t.endExon))),this.junctions.sort(((t,e)=>+t.chromStart<+e.chromStart?-1:+t.chromStart>+e.chromStart?1:+t.chromEnd<+e.chromEnd?-1:+t.chromEnd>+e.chromEnd?1:0)),this.junctions.forEach(((t,e)=>{t.displayName=`Junction ${e+1}`;const r=Number(t.chromStart)-Number(t.startExon.chromStart)+1,i=Number(t.chromEnd)-Number(t.endExon.chromStart)+1;t.startX=t.startExon.x+this.xScale(r),t.endX=t.endExon.x+this.xScale(i),t.cx=t.startX+(t.endX-t.startX+1)/2,t.cy=n-15*(Math.abs(Number(t.endExon.exonNumber)-Number(t.startExon.exonNumber))+.5),t.cy<0&&(t.cy=0)}));const e=this.junctions.reduce(((t,e)=>(t[e.displayName]=1+t[e.displayName]||1,t)),{});this.junctions.forEach((t=>{e[t.displayName]>1&&(t.cy-=15*Math.random())}));const r=function(){var t=ji,e=Di,n=Ci(!0),r=null,i=Mi,o=null;function a(a){var s,l,c,u=a.length,f=!1;for(null==r&&(o=i(c=Ei())),s=0;s<=u;++s)!(s<u&&n(l=a[s],s,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(l,s,a),+e(l,s,a));if(c)return o=null,c+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:Ci(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:Ci(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:Ci(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().x((t=>t.x)).y((t=>t.y)).curve($i);this.junctions.forEach(((e,i)=>{t.append("path").datum([{x:e.startX,y:n},{x:e.cx,y:e.cy},{x:e.endX,y:n}]).attr("class",`junc-curve junc${e.junctionId}`).attr("d",r).style("stroke","#92bcc9")}));const i=t.selectAll(".junc").data(this.junctions);i.attr("cx",(t=>t.cx)),i.attr("cy",(t=>t.cy)),i.enter().append("circle").attr("class",(t=>`junc junc${t.junctionId}`)).attr("cx",(t=>t.cx)).attr("cy",(t=>t.cy)).merge(i).attr("r",4).style("fill","rgb(86, 98, 107)");const o=t.selectAll(".exon").data(this.exons);o.attr("x",(t=>t.x)),o.attr("y",n),o.enter().append("rect").attr("class",(t=>`exon exon${t.exonNumber}`)).attr("y",n).attr("rx",2).attr("ry",2).attr("width",(t=>t.w)).attr("height",15).attr("x",(t=>t.x)).merge(o).style("cursor","default"),t.append("text").attr("id","modelInfo").attr("text-anchor","end").attr("x",this.xScale(0)).attr("y",n-10).style("font-size",12).text("Gene Model")}const r=t.selectAll(".exon-curated").data(this.exonsCurated);r.attr("x",(t=>t.x)),r.attr("y",n),r.enter().append("rect").attr("class",(t=>this.isIsoform?"exon-curated":`exon-curated exon-curated${t.exonNumber}`)).attr("y",n).attr("width",(t=>t.w)).attr("height",15).attr("x",(t=>t.x)).merge(r).style("fill","#eee").style("cursor","default"),"left"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabel").attr("text-anchor","end").attr("x",this.xScale.range()[0]-5).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId),"right"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabelRight").attr("text-anchor","start").attr("x",this.xScale.range()[1]+50).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId)}setXscale(t){this.exons.sort(((t,e)=>Number(t.chromStart)<Number(e.chromStart)?-1:Number(t.chromStart)>Number(e.chromStart)?1:0));let e=0;this.exons.forEach(((t,n)=>{if(t.length=Number(t.chromEnd)-Number(t.chromStart)+1,0==n)e+=t.length;else{let r=this.exons[n-1];t.intronLength=Number(t.chromStart)-Number(r.chromEnd)+1,e+=t.length+(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength)}}));const n=[0,e],r=[0,t];this.xScale=vn().domain(n).range(r)}setXscaleFixIntron(t){this.exons.forEach((t=>{t.length=Number(t.chromEnd)-Number(t.chromStart)+1}));const e=St(this.exons,(t=>t.length)),n=[0,e*this.exons.length],r=[0,t];this.xScale=vn().domain(n).range(r);const i=this.xScale.invert(this.minExonWidth),o=function(t,e){var n,r=t.length,i=-1,o=0;if(null==e)for(;++i<r;)(n=+t[i])&&(o+=n);else for(;++i<r;)(n=+e(t[i],i,t))&&(o+=n);return o}(this.exons,(t=>t.length>i?t.length:i));this.intronLength=(e*this.exons.length-o)/(this.exons.length-1)}_findExon(t){t=Number(t);const e=this.exons.filter((e=>Number(e.chromStart)-1<=t&&Number(e.chromEnd)+1>=t));return 1==e.length?e[0]:0==e.length?void console.warn("No exon found for: "+t):void console.warn("More than one exons found for: "+t)}}class _o{constructor(t,e,n,r){this.isoforms=t,this.isoformExons=e,this.modelExons=n,this.visualDom=void 0,this.config=r,this.nullColor="#DDDDDD"}showData(t,e,n,r,i=!0){if(i){t.sort(((t,e)=>-(t.displayValue-e.displayValue)));const e=t.map((t=>t.transcriptId));this.sortTracks(e)}t.forEach((t=>{this.visualDom.select(`#${t.transcriptId.replace(".","_")}`).selectAll(".exon-curated").style("fill",0==t.value?this.nullColor:e(t.value))})),this.visualDom.select(".lollipopGraph").remove();const o=this.visualDom.append("g").classed("lollipopGraph",!0).attr("transform","translate(-100, 13)"),a=o.selectAll(".lollipop").data(t).enter().append("g").classed("lollipop",!0);var s;a.append("line").attr("x1",0).attr("y1",(t=>this.yScale(t.transcriptId))).attr("y2",(t=>this.yScale(t.transcriptId))).style("stroke",(t=>0==t.value?this.nullColor:e(t.value))).style("stroke-width",2).transition().duration(1e3).attr("x2",(t=>0==t.value?0:n(t.value))),a.append("circle").attr("cx",0).attr("cy",(t=>this.yScale(t.transcriptId))).attr("r",5).style("fill",(t=>0==t.value?this.nullColor:e(t.value))).transition().duration(1e3).attr("cx",(t=>n(t.value))),o.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call((s=n,or(Gn,s)).ticks(3)),o.append("text").attr("id","lolliLabel").attr("x",0).attr("y",-40).attr("text-anchor","end").style("font-size",9).text("TPM"),o.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call(function(t){return or(Jn,t)}(this.yScale).tickValues([])),o.append("text").attr("id","lolliLabel").attr("x",10).attr("y",-20).text(`Transcript Expression in ${r}`).attr("text-anchor","start").style("font-size","12px")}sortTracks(t){this.setYscale(this.config.h,t),this.render(!0)}render(t=!1,e=void 0,n="left",r=1e3){if(void 0===e&&void 0===this.visualDom)throw"Fatal Error: must provide a dom element";void 0===e?e=this.visualDom:this.visualDom=e,void 0===this.yScale&&this.setYscale(this.config.h);const i=e.selectAll(".isotrack").data(this.isoforms.map((t=>t.transcriptId)));i.transition().duration(r).attr("transform",(t=>`translate(0, ${this.yScale(t)})`)),i.enter().append("g").attr("id",(t=>t.replace(".","_"))).attr("class","isotrack").attr("transform",(t=>"translate(0, 0)")).transition().duration(r/2).attr("transform",(t=>`translate(0, ${this.yScale(t)})`)),t||this._renderModels(this.config.w,n)}_renderModels(t,e="left"){this.isoforms.forEach((n=>{let r=void 0===this.modelExons||null===this.modelExons?this.isoformExons[n.transcriptId]:this.modelExons;const i=new wo(n,r,this.isoformExons[n.transcriptId],[],!0),o=ht(`#${n.transcriptId.replace(".","_")}`);i.render(o,{w:t,h:this.yScale.bandwidth(),labelOn:e})}))}setYscale(t,e=void 0){void 0===e&&(e=this.isoforms.map((t=>t.transcriptId))),this.yScale=Ft().domain(e).range([0,t]).padding(.05)}}async function So(t,e=250){let n,r=[],i=0;do{const o=ko(t,i,e);n=await fetch(o).then((t=>t.json())),r=r.concat(n.data),i+=1}while(i<n.paging_info.numberOfPages);return r}async function Eo(t){return await fetch(t).then((t=>t.json()))}function ko(t,e,n=250){let r;const i="page="+e;r=t.includes("?")?t+"&"+i:t+"?"+i;return r=r+"&"+("itemsPerPage="+n),r}function To(t,e,n,r=function(){const t="https://gtexportal.org/api/v2/",e="gtex_v8";return{singleCellExpression:t+"expression/singleNucleusGeneExpression?datasetId=gtex_snrnaseq_pilot&gencodeId=",singleCellExpressionSummary:t+"expression/singleNucleusGeneExpressionSummary",dyneqtl:t+"association/dyneqtl",snp:t+"dataset/variant?snpId=",variantId:t+"dataset/variant?variantId=",exonExp:t+"expression/clusteredMedianExonExpression?gencodeId=",transcriptExp:t+"expression/clusteredMedianTranscriptExpression?gencodeId=",junctionExp:t+"expression/clusteredMedianJunctionExpression?gencodeId=",transcript:t+`reference/transcript?datasetId=${e}&gencodeId=`,exon:t+`reference/exon?datasetId=${e}&gencodeId=`,geneModel:t+"dataset/collapsedGeneModelExon?gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?gencodeId=",geneExp:t+"expression/geneExpression?gencodeId=",medGeneExp:t+"expression/clusteredMedianGeneExpression",topInTissueFiltered:t+"expression/topExpressedGene?filterMtGene=true&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?&filterMtGene=false&tissueSiteDetailId=",geneId:t+"reference/gene?geneId=",tissue:t+"dataset/tissueSiteDetail",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",dynsqtl:t+"association/dynsqtl",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){So(r.geneId+e).then((function(i){const o=function(t,e=!1,n=null){if(0==t.length)throw alert("No gene is found"),"Fatal Error: gene(s) not found";if(e){if(null===n)throw"Please provide a gene ID for search results validation";if(t.length>1){let e=t.filter((t=>t.geneSymbolUpper==n.toUpperCase()||t.gencodeId==n.toUpperCase()));if(e.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";if(0==e.length)throw alert("No gene is found with "+n),"Fatal Error: gene not found";t=e}return t[0]}return t}(i,!0,e),a=o.gencodeId,s=[So(r.tissue),So(r.geneModelUnfiltered+a),So(r.geneModel+a),So(r.transcript+a),Eo(r.junctionExp+a),Eo(r.exonExp+a),Eo(r.transcriptExp+a),So(r.exon+a)];Promise.all(s).then((function(e){const r=(h=e[0],["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach((t=>{if(!h[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t})),h),i=bn(e[1]),a=bn(e[2]),s=function(t){return["transcriptId","start","end"].forEach((e=>{if(!t[0].hasOwnProperty(e))throw"Parsing Error: required json attribute is missing: "+e})),t.sort(((t,e)=>-(Math.abs(t.end-t.start)+1-(Math.abs(e.end-e.start)+1))))}(e[3]),l=function(t){return t.reduce(((t,e)=>(["transcriptId","chromosome","start","end","exonNumber","exonId"].forEach((t=>{if(!e.hasOwnProperty(t))throw console.error(e),"Parsing Error: required json attribute is missing: "+t})),void 0===t[e.transcriptId]&&(t[e.transcriptId]=[]),e.chrom=e.chromosome,e.chromStart=e.start,e.chromEnd=e.end,t[e.transcriptId].push(e),t)),{})}(e[7]),c=function(t){const e="medianJunctionExpression";if(!t.hasOwnProperty(e))throw"Parsing Error: parseJunctions input error. "+e;return 0==t[e].length?(console.warn("There is no junction entry"),[]):(["tissueSiteDetailId","junctionId"].forEach((n=>{if(!t[e][0].hasOwnProperty(n))throw console.error(t[0]),"Parsing Error: required junction attribute is missing: "+n})),t[e].filter((t=>"Liver"==t.tissueSiteDetailId)).map((t=>{let e=t.junctionId.split("_");return{chrom:e[0],chromStart:e[1],chromEnd:e[2],junctionId:t.junctionId}})))}(e[4]),u=function(t){const e="medianJunctionExpression";if(!t.hasOwnProperty(e))throw"parseJunctionExpression input error";const n=t[e];if(void 0!==n&&0!=n.length)return n.forEach((t=>{["tissueSiteDetailId","junctionId","median","gencodeId"].forEach((e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsingr Error: parseJunctionExpression attr not found: "+e}));let e=t.median,n=t.tissueSiteDetailId;t.tissueId=n,t.id=t.gencodeId,t.x=t.junctionId,t.y=n,t.value=Number(e),t.displayValue=Number(e)})),n.sort(((t,e)=>t.junctionId>e.junctionId?1:t.junctionId<e.junctionId?-1:0));console.warn("No junction data found")}(e[4]),f=function(t,e){const n=e.reduce(((t,e)=>(t[e.exonId]=e,t)),{}),r="medianExonExpression";if(!t.hasOwnProperty(r))throw"parseExonExpression input error";const i=t[r];return["median","exonId","tissueSiteDetailId"].forEach((t=>{if(!i[0].hasOwnProperty(t))throw"Fatal Error: parseExonExpression attr not found: "+t})),i.forEach((t=>{const e=n[t.exonId];["end","start"].forEach((t=>{if(!e.hasOwnProperty(t))throw"Fatal Error: parseExonExpression position attr not found: "+t})),t.l=e.end-e.start+1,t.value=Number(t.median)/t.l,t.displayValue=Number(t.median)/t.l,t.x=t.exonId,t.y=t.tissueSiteDetailId,t.id=t.gencodeId,t.chromStart=e.start,t.chromEnd=e.end,t.unit="median "+t.unit+" per base",t.tissueId=t.tissueSiteDetailId})),i.sort(((t,e)=>t.chromStart<e.chromStart?-1:t.chromStart>e.chromStart?1:0))}(e[5],a);var h;let d,p,g,m,v=function(t){const e="medianTranscriptExpression";if(!t.hasOwnProperty(e))throw"Parsing Error: parseTranscriptExpression input error";return t[e].forEach((t=>{["median","transcriptId","tissueSiteDetailId","gencodeId"].forEach((e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: required transcipt attribute is missing: "+e})),t.value=Number(t.median),t.displayValue=Number(t.median),t.x=t.transcriptId,t.y=t.tissueSiteDetailId,t.id=t.gencodeId,t.tissueId=t.tissueSiteDetailId})),t[e]}(e[6]);c.length>=0&&void 0!==u&&(g=qn(u.map((t=>Math.log10(t.value+1))),"Reds",0)),d=qn(f.map((t=>Math.log2(t.value+1))),"Blues",0),p=qn(v.map((t=>Math.log10(t.value+1))),"Purples",0);const y={root:n,svg:`${n}-svg`,tooltip:`${n}-isoformTooltip`,toolbar:`${n}-isoformToolbar`,clone:`${n}-isoformClone`,buttons:{save:`${n}-isoformSave`}};["toolbar","clone"].forEach((t=>{$("<div/>").attr("id",y[t]).appendTo($(`#${y.root}`))}));const b=`${o.geneSymbol}: ${o.gencodeId} ${o.description}`,x=$(`#${n}`).innerWidth()||window.innerWidth;switch(t){case"isoformTransposed":{const t=new Rn(x,150,100,{top:60,right:350,bottom:200,left:50},12,10);["tissue","transcript"].forEach((t=>{if(!e[6].clusters.hasOwnProperty(t))throw console.error(e[6].clusters),"Parse Error: Required cluster attribute is missing: "+t}));let n=e[6].clusters.tissue,r=e[6].clusters.transcript,i=function(t){const e="medianTranscriptExpression";if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: parseTranscriptExpressionTranspose input error.";return t[e].forEach((t=>{["median","transcriptId","tissueSiteDetailId","gencodeId"].forEach((e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: Required transcript attribute is missing: "+e}));const e=t.median,n=t.tissueSiteDetailId;t.value=Number(e),t.displayValue=Number(e),t.y=t.transcriptId,t.x=n,t.id=t.gencodeId,t.tissueId=n})),t[e]}(e[6]);if(m=new xo(n,r,i,"Purples",5,t,y.tooltip,!0,10,`Isoform Expression of ${b}`),m.render(y.root,y.svg,!0,!0,top,5),!r.startsWith("Not enough data")){const t=m.objects.rowTree.yScale.domain();s.sort(((e,n)=>t.indexOf(e.transcriptId)<t.indexOf(n.transcriptId)?-1:t.indexOf(e.transcriptId)>t.indexOf(n.transcriptId)?1:0))}break}case"junction":{if(0==c.length){$(`#${n}`).text("This gene has no junctions available.");break}const t=new Rn(x,150,0,{top:60,right:350,bottom:200,left:50},12,10);let r=e[4].clusters.tissue;m=new xo(void 0,r,u,"Reds",5,t,y.tooltip,!0,10,`Junction Expression of ${b}`),m.render(y.root,y.svg,!1,!0,top,5);break}case"exon":{const t=new Rn(x,150,0,{top:60,right:350,bottom:200,left:50},12,10);let n=e[5].clusters.tissue;m=new xo(void 0,n,f,"Blues",5,t,y.tooltip,!0,2,`Exon Expression of ${b}`),m.render(y.root,y.svg,!1,!0,top,5);break}default:throw"Input type is not recognized"}$("#spinner").hide();const w=t.startsWith("isoform")?60:80,_={x:m.config.panels.main.x,y:m.config.panels.main.h+m.config.panels.main.y+w,w:m.config.panels.main.w,h:100},S={x:_.x,y:_.y+_.h,w:_.w,h:20*s.length,labelOn:"left"};let E=+ht(`#${y.svg}`).attr("height")+_.h+S.h;t.startsWith("isoform")||(E=E<1200?1200:E),ht(`#${y.svg}`).attr("height",E);const k=new wo(o,i,a,c),T=m.visualComponents.svg.append("g").attr("id","geneModel").attr("transform",`translate(${_.x}, ${_.y})`);t.startsWith("isoform")||k.render(T,_);const A=new _o(s,l,i,S),C=m.visualComponents.svg.append("g").attr("transform",`translate(${S.x}, ${S.y})`),N=t.startsWith("isoform")?"both":"left";switch(A.render(!1,C,N),t.startsWith("isoform")||function(t,e,n){const r=t.visualComponents.svg;let i=t.objects.heatmap.xScale.range()[1]+50;const o=30,a=50;On("Exon read counts per base",r.select("#geneModel"),n,{x:i,y:o},!0,5,2,{h:20,w:10},"v"),i+=a,void 0!==e&&On("Junction read counts",r.select("#geneModel"),e,{x:i,y:o},!0,5,10,{h:20,w:10},"v")}(m,g,d),function(t,e){let n=t.createToolbar(e.toolbar,t.tooltip);n.createDownloadSvgButton(e.buttons.save,e.svg,`${e.root}-save.svg`,e.clone)}(m,y),t){case"isoformTransposed":!function(t,e,n,r,i,o,a,s,l){const c=e.visualComponents.svg,u=t.reduce(((t,e)=>(t[e.tissueSiteDetailId]=e,t)),{}),f=e.tooltip;c.selectAll(".exp-map-xlabel").text((t=>void 0!==u[t]?u[t].tissueSiteDetail:t)).style("cursor","pointer"),c.select("#heatmap").selectAll(".exp-map-xcolor").data(e.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",(t=>e.objects.heatmap.xScale(t))).attr("y",e.objects.heatmap.yScale.range()[1]+5).attr("width",e.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("exp-map-xcolor",!0).style("fill",(t=>`#${u[t].colorHex}`)),e.objects.heatmap.yScale.domain().length>15&&c.select("#heatmap").selectAll(".leaf-color").data(e.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",(t=>e.objects.heatmap.xScale(t))).attr("y",e.objects.heatmap.yScale.range()[0]-10).attr("width",e.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("leaf-color",!0).style("fill",(t=>`#${u[t].colorHex}`));c.selectAll(".exp-map-xlabel").on("mouseover",(function(){ht(this).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).classed("highlighted",!1)})).on("click",(function(t){c.selectAll(".exp-map-xlabel").classed("clicked",!1),ht(this).classed("clicked",!0);const e=t;void 0!==a&&a.filter((t=>t.tissueSiteDetailId==e)),s.filter((t=>t.tissueSiteDetailId==e));const r=vn().domain([Et(l.map((t=>t.value))),St(l.map((t=>t.value)))]).range([0,-100]),i=l.filter((t=>t.tissueSiteDetailId==e)),f=!1;n.showData(i,o,r,u[e].tissueSiteDetail,f)})),c.selectAll(".exp-map-cell").on("mouseover",(function(t){const n=ht(this);e.objects.heatmap.cellMouseover(t,c,n);const r=void 0===u[t.x]?t.x:u[t.x].tissueSiteDetail,i=parseFloat(t.displayValue.toExponential()).toPrecision(3),o=[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${r}</span>`,`<span class="tooltip-key">Isoform</span>: <span class="tooltip-value">${t.transcriptId}</span>`,`<span class="tooltip-key">${t.unit.charAt(0).toUpperCase()+t.unit.slice(1)}</span>: <span class="tooltip-value">${i}</span>`];f.show(o.join("<br/>"));const a=t.transcriptId.replace(".","_");c.select(`#${a}`).selectAll(".exon-curated").classed("highlighted",!0),c.select(`#${a}`).selectAll(".intron").classed("highlighted",!0)})).on("mouseout",(function(t){c.selectAll("*").classed("highlighted",!1),f.hide()})),c.selectAll(".exp-map-ylabel").on("mouseover",(function(t){ht(this).classed("highlighted",!0);const e=t.replace(".","_");c.select(`#${e}`).selectAll(".exon-curated").classed("highlighted",!0),c.select(`#${e}`).selectAll(".intron").classed("highlighted",!0)})).on("mouseout",(function(){ht(this).classed("highlighted",!1),c.selectAll(".exon-curated").classed("highlighted",!1),c.selectAll(".intron").classed("highlighted",!1)})).on("click",(function(){}))}(r,m,A,0,0,p,u,f,v),No(m);break;case"junction":if(0==c.length)break;Ao(r,k,m,A,g,d,p,u,f,v),function(t,e,n){const r=n.visualComponents.svg,i=n.tooltip,o=t.reduce(((t,e)=>(t[e.tissueSiteDetailId]=e,t)),{});r.selectAll(".exp-map-cell").on("mouseover",(function(t){const a=ht(this);n.objects.heatmap.cellMouseover(t,r,a);const s=void 0===o[t.y]?t.x:o[t.y].tissueSiteDetail,l=e.junctions.filter((e=>e.junctionId==t.x&&!e.filtered))[0],c=parseFloat(t.displayValue.toExponential()).toPrecision(3),u=[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${s}</span>`,`<span class="tooltip-key">Junction</span>: <span class="tooltip-value">${l.displayName}</span>`,`<span class="tooltip-key">Start</span>: <span class="tooltip-value">${l.chromStart}</span>`,`<span class="tooltip-key">End</span>: <span class="tooltip-value">${l.chromEnd}</span>`,`<span class="tooltip-key">Exon length</span>: <span class="tooltip-value">${Number(l.chromEnd)-Number(l.chromStart)+1} bp</span>`,`<span class="tooltip-key">${t.unit.charAt(0).toUpperCase()+t.unit.slice(1)}</span>: <span class="tooltip-value">${c}</span>`];i.show(u.join("<br/>")),r.selectAll(`.junc${l.junctionId}`).classed("highlighted",!0),void 0!==l&&(r.selectAll(`.exon${l.startExon.exonNumber}`).classed("highlighted",!0),r.selectAll(`.exon${l.endExon.exonNumber}`).classed("highlighted",!0))})).on("mouseout",(function(t){r.selectAll("*").classed("highlighted",!1),i.hide()})),r.selectAll(".exp-map-xlabel").each((function(){const t=ht(this),n=t.text();t.attr("id",`${n}`),t.classed(`junc${n}`,!0);const r=e.junctions.filter((t=>t.junctionId==`${n}`&&!t.filtered))[0];void 0!==r&&t.text(r.displayName)})).on("mouseover",(function(){const t=ht(this).attr("id");ht(this).classed("highlighted",!0),r.selectAll(`.junc${t}`).classed("highlighted",!0);const n=e.junctions.filter((e=>e.junctionId==t&&!e.filtered))[0];void 0!==n&&(r.selectAll(`.exon${n.startExon.exonNumber}`).classed("highlighted",!0),r.selectAll(`.exon${n.endExon.exonNumber}`).classed("highlighted",!0))})).on("mouseout",(function(){ht(this).classed("highlighted",!1),dt(".junc").classed("highlighted",!1),dt(".junc-curve").classed("highlighted",!1),r.selectAll(".exon").classed("highlighted",!1)}))}(r,k,m),Co(r,k,m),No(m);break;case"exon":Ao(r,k,m,A,g,d,p,u,f,v),function(t,e,n){const r=n.visualComponents.svg,i=n.tooltip,o=t.reduce(((t,e)=>(t[e.tissueSiteDetailId]=e,t)),{});r.selectAll(".exp-map-cell").on("mouseover",(function(t){const e=ht(this);n.objects.heatmap.cellMouseover(t,r,e);const a=void 0===o[t.y]?t.x:o[t.y].tissueSiteDetail,s=parseFloat(t.displayValue.toExponential()).toPrecision(3),l=[`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${a}</span>`,`<span class="tooltip-key">Exon</span>: <span class="tooltip-value">${t.exonId}</span>`,`<span class="tooltip-key">Start</span>: <span class="tooltip-value">${t.chromStart}</span>`,`<span class="tooltip-key">End</span>: <span class="tooltip-value">${t.chromEnd}</span>`,`<span class="tooltip-key">Exon length</span>: <span class="tooltip-value">${Number(t.chromEnd)-Number(t.chromStart)+1} bp</span>`,`<span class="tooltip-key">${t.unit.charAt(0).toUpperCase()+t.unit.slice(1)}</span>: <span class="tooltip-value">${s}</span>`];i.show(l.join("<br/>"));const c=t.exonId.split("_")[1];r.selectAll(`.exon-curated${c}`).classed("highlighted",!0)})).on("mouseout",(function(t){r.selectAll("*").classed("highlighted",!1),i.hide()})),r.selectAll(".exp-map-xlabel").each((function(t){const e=t.split("_")[1];ht(this).text(`Exon ${e}`)})).on("mouseover",(function(t){ht(this).classed("highlighted",!0);const e=t.split("_")[1];r.selectAll(`.exon-curated${e}`).classed("highlighted",!0)})).on("mouseout",(function(){ht(this).classed("highlighted",!1),r.selectAll(".exon-curated").classed("highlighted",!1)}))}(r,0,m),Co(r,k,m),No(m);break;default:throw"unrecognized type"}})).catch((function(t){console.error(t),$("#spinner").hide()}))})).catch((function(t){console.error(t),$("#spinner").hide()}))}function Ao(t,e,n,r,i,o,a,s,l,c){const u=n.visualComponents.svg,f=t.reduce(((t,e)=>(t[e.tissueSiteDetailId]=e,t)),{});u.selectAll(".exp-map-ylabel").text((t=>void 0!==f[t]?f[t].tissueSiteDetail:t)).style("cursor","pointer").attr("x",n.objects.heatmap.xScale.range()[1]+15),u.select("#heatmap").selectAll(".exp-map-ycolor").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[1]+5).attr("y",(t=>n.objects.heatmap.yScale(t))).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("exp-map-ycolor",!0).style("fill",(t=>`#${f[t].colorHex}`)),n.objects.heatmap.xScale.domain().length>15&&u.select("#heatmap").selectAll(".leaf-color").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[0]-5).attr("y",(t=>n.objects.heatmap.yScale(t))).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("leaf-color",!0).style("fill",(t=>`#${f[t].colorHex}`)),u.selectAll(".exp-map-ylabel").on("mouseover",(function(){ht(this).classed("highlighted",!0)})).on("click",(function(t){u.selectAll(".exp-map-ylabel").classed("clicked",!1),ht(this).classed("clicked",!0);const n=t;let h;void 0!==s&&(h=s.filter((t=>t.tissueSiteDetailId==n)));const d=l.filter((t=>t.tissueSiteDetailId==n));e.addData(u.select("#geneModel"),h,d,i,o);const p=vn().domain([Et(c.map((t=>t.value))),St(c.map((t=>t.value)))]).range([0,-100]),g=c.filter((t=>t.tissueSiteDetailId==n));r.showData(g,a,p,f[n].tissueSiteDetail)}))}function Co(t,e,n){const r=n.visualComponents.svg,i=n.tooltip,o=r.select("#geneModel");t.reduce(((t,e)=>(t[e.tissueSiteDetailId]=e,t)),{}),r.selectAll(".junc").on("mouseover",(function(t){dt(`.junc${t.junctionId}`).classed("highlighted",!0);const e=[`<span class="tooltip-head">${t.displayName}</span>`,`<span class="tooltip-key">ID</span>: <span class="tooltip-value">${t.junctionId}</span>`,`<span class="tooltip-key">Junction length</span>: <span class="tooltip-value">${Number(t.chromEnd)-Number(t.chromStart)+1} bp</span>`];i.show(e.join("<br/>")),void 0!==t.startExon&&(o.selectAll(".exon").filter(`.exon${t.startExon.exonNumber}`).classed("highlighted",!0),o.selectAll(".exon").filter(`.exon${t.endExon.exonNumber}`).classed("highlighted",!0)),o.select(`.junc${t.junctionId}`).classed("highlighted",!0).classed("normal",!1)})).on("mouseout",(function(t){dt(`.junc${t.junctionId}`).classed("highlighted",!1),o.selectAll(".exon").classed("highlighted",!1),o.selectAll(".xLabel").classed("highlighted",!1).classed("normal",!0),i.hide()})),o.selectAll(".exon-curated").on("mouseover",(function(t){ht(this).classed("highlighted",!0);const e=[`<span class="tooltip-head">Exon ${t.exonNumber}</span>`,`<span class="tooltip-key">Start</span>: <span class="tooltip-value">${t.chromStart}</span>`,`<span class="tooltip-key">End</span>: <span class="tooltip-value">${t.chromEnd}</span>`,`<span class="tooltip-key">Exon length</span>: <span class="tooltip-value">${Number(t.chromEnd)-Number(t.chromStart)+1} bp</span>`];i.show(e.join("<br/>"))})).on("mouseout",(function(t){ht(this).classed("highlighted",!1),i.hide()}))}function No(t){const e=t.visualComponents.svg,n=t.tooltip;e.selectAll(".isotrack").selectAll(".exon-curated").on("mouseover",(function(t){ht(this).classed("highlighted",!0);const e=[`<span class="tooltip-head">Exon ${t.exonNumber}</span>`,`<span class="tooltip-key">Start</span>: <span class="tooltip-value">${t.chromStart}</span>`,`<span class="tooltip-key">End</span>: <span class="tooltip-value">${t.chromEnd}</span>`,`<span class="tooltip-key">Exon length</span>: <span class="tooltip-value">${Number(t.chromEnd)-Number(t.chromStart)+1} bp</span>`];n.show(e.join("<br/>"))})).on("mouseout",(function(){ht(this).classed("highlighted",!1),e.selectAll(".exon-curated").classed("highlighted",!1),n.hide()}))}var Mo={render:To};t.TranscriptBrowser=Mo,t.render=To}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNjcmlwdC1icm93c2VyLmJ1bmRsZS5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VudGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2ZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vam9pbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jYWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbXB0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGlja3MuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21heC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWluLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9pbml0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL21hcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9uZXN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3NldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2JhbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2NvbG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlckFycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9vYmplY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblByZWZpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvc2VxdWVudGlhbC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2d0ZXhEYXRhUGFyc2VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY29sb3JzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvcmFtcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QaVlHLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1B1T3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRCdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZEd5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkWWxCdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvT3JSZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVCdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxHbkJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvQmx1ZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmVlbnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmV5cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1B1cnBsZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9SZWRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvT3Jhbmdlcy5qcyIsIi4uLy4uL3NyYy91dGlscy9jb2xvci11dGlscy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL0RlbmRyb0hlYXRtYXBDb25maWcuanMiLCIuLi8uLi9zcmMvdXRpbHMvZG9tLXV0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2NvdW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaEFmdGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hCZWZvcmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc3VtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3NvcnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvcGF0aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9hbmNlc3RvcnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZGVzY2VuZGFudHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvbGVhdmVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xpbmtzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2FycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2lkZW50aXR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2F4aXMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9EZW5kcm9ncmFtLmpzIiwiLi4vLi4vc3JjL3V0aWxzL25ld2ljay5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9Ub29sYmFyLmpzIiwiLi4vLi4vc3JjL3V0aWxzL2Rvd25sb2FkLXV0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVvdXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zY2hlZHVsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0clR3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZGVsYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kdXJhdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RyYW5zaXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9vbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdGV4dFR3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vcmVtb3ZlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtcGF0aC9zcmMvcGF0aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2RlZmF1bHRTb3VyY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy91bmlmb3JtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvbm9ybWFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvbG9nTm9ybWFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvaXJ3aW5IYWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9wb2ludC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2FyZGluYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9iYXRlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2V4cG9uZW50aWFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL1JlZEJsYWNrVHJlZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9FZGdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0NlbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2lyY2xlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0JlYWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL0RpYWdyYW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvdHJhbnNmb3JtLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvVG9vbHRpcC5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL0hlYXRtYXAuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9EZW5kcm9IZWF0bWFwLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvR2VuZU1vZGVsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9zdW0uanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9Jc29mb3JtVHJhY2tWaWV3ZXIuanMiLCIuLi8uLi9zcmMvdXRpbHMvcGFnaW5hdGlvbi5qcyIsIi4uLy4uL3NyYy9UcmFuc2NyaXB0QnJvd3Nlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZVwiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHtFbnRlck5vZGV9IGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4uL2NvbnN0YW50XCI7XG5cbnZhciBrZXlQcmVmaXggPSBcIiRcIjsgLy8gUHJvdGVjdCBhZ2FpbnN0IGtleXMgbGlrZSDigJxfX3Byb3RvX1/igJ0uXG5cbmZ1bmN0aW9uIGJpbmRJbmRleChwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhKSB7XG4gIHZhciBpID0gMCxcbiAgICAgIG5vZGUsXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZml0IGludG8gdXBkYXRlLlxuICAvLyBQdXQgYW55IG51bGwgbm9kZXMgaW50byBlbnRlci5cbiAgLy8gUHV0IGFueSByZW1haW5pbmcgZGF0YSBpbnRvIGVudGVyLlxuICBmb3IgKDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGRvbuKAmXQgZml0IGludG8gZXhpdC5cbiAgZm9yICg7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGJpbmRLZXkocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSwga2V5KSB7XG4gIHZhciBpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVCeUtleVZhbHVlID0ge30sXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGtleVZhbHVlcyA9IG5ldyBBcnJheShncm91cExlbmd0aCksXG4gICAgICBrZXlWYWx1ZTtcblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggbm9kZS5cbiAgLy8gSWYgbXVsdGlwbGUgbm9kZXMgaGF2ZSB0aGUgc2FtZSBrZXksIHRoZSBkdXBsaWNhdGVzIGFyZSBhZGRlZCB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlID0ga2V5UHJlZml4ICsga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgICAgaWYgKGtleVZhbHVlIGluIG5vZGVCeUtleVZhbHVlKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggZGF0dW0uXG4gIC8vIElmIHRoZXJlIGEgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXksIGpvaW4gYW5kIGFkZCBpdCB0byB1cGRhdGUuXG4gIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cbiAgZm9yIChpID0gMDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGtleVZhbHVlID0ga2V5UHJlZml4ICsga2V5LmNhbGwocGFyZW50LCBkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICBpZiAobm9kZSA9IG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSkge1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGFueSByZW1haW5pbmcgbm9kZXMgdGhhdCB3ZXJlIG5vdCBib3VuZCB0byBkYXRhIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZXNbaV1dID09PSBub2RlKSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIGRhdGEgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBqID0gLTE7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGQpIHsgZGF0YVsrK2pdID0gZDsgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYmluZCA9IGtleSA/IGJpbmRLZXkgOiBiaW5kSW5kZXgsXG4gICAgICBwYXJlbnRzID0gdGhpcy5fcGFyZW50cyxcbiAgICAgIGdyb3VwcyA9IHRoaXMuX2dyb3VwcztcblxuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHZhbHVlID0gY29uc3RhbnQodmFsdWUpO1xuXG4gIGZvciAodmFyIG0gPSBncm91cHMubGVuZ3RoLCB1cGRhdGUgPSBuZXcgQXJyYXkobSksIGVudGVyID0gbmV3IEFycmF5KG0pLCBleGl0ID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIHZhciBwYXJlbnQgPSBwYXJlbnRzW2pdLFxuICAgICAgICBncm91cCA9IGdyb3Vwc1tqXSxcbiAgICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICAgIGRhdGEgPSB2YWx1ZS5jYWxsKHBhcmVudCwgcGFyZW50ICYmIHBhcmVudC5fX2RhdGFfXywgaiwgcGFyZW50cyksXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZW50ZXJHcm91cCA9IGVudGVyW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICB1cGRhdGVHcm91cCA9IHVwZGF0ZVtqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgZXhpdEdyb3VwID0gZXhpdFtqXSA9IG5ldyBBcnJheShncm91cExlbmd0aCk7XG5cbiAgICBiaW5kKHBhcmVudCwgZ3JvdXAsIGVudGVyR3JvdXAsIHVwZGF0ZUdyb3VwLCBleGl0R3JvdXAsIGRhdGEsIGtleSk7XG5cbiAgICAvLyBOb3cgY29ubmVjdCB0aGUgZW50ZXIgbm9kZXMgdG8gdGhlaXIgZm9sbG93aW5nIHVwZGF0ZSBub2RlLCBzdWNoIHRoYXRcbiAgICAvLyBhcHBlbmRDaGlsZCBjYW4gaW5zZXJ0IHRoZSBtYXRlcmlhbGl6ZWQgZW50ZXIgbm9kZSBiZWZvcmUgdGhpcyBub2RlLFxuICAgIC8vIHJhdGhlciB0aGFuIGF0IHRoZSBlbmQgb2YgdGhlIHBhcmVudCBub2RlLlxuICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAwLCBwcmV2aW91cywgbmV4dDsgaTAgPCBkYXRhTGVuZ3RoOyArK2kwKSB7XG4gICAgICBpZiAocHJldmlvdXMgPSBlbnRlckdyb3VwW2kwXSkge1xuICAgICAgICBpZiAoaTAgPj0gaTEpIGkxID0gaTAgKyAxO1xuICAgICAgICB3aGlsZSAoIShuZXh0ID0gdXBkYXRlR3JvdXBbaTFdKSAmJiArK2kxIDwgZGF0YUxlbmd0aCk7XG4gICAgICAgIHByZXZpb3VzLl9uZXh0ID0gbmV4dCB8fCBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSA9IG5ldyBTZWxlY3Rpb24odXBkYXRlLCBwYXJlbnRzKTtcbiAgdXBkYXRlLl9lbnRlciA9IGVudGVyO1xuICB1cGRhdGUuX2V4aXQgPSBleGl0O1xuICByZXR1cm4gdXBkYXRlO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKCFjb21wYXJlKSBjb21wYXJlID0gYXNjZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGNvbXBhcmVOb2RlKGEsIGIpIHtcbiAgICByZXR1cm4gYSAmJiBiID8gY29tcGFyZShhLl9fZGF0YV9fLCBiLl9fZGF0YV9fKSA6ICFhIC0gIWI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzb3J0Z3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzb3J0Z3JvdXAgPSBzb3J0Z3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzb3J0Z3JvdXBbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3J0Z3JvdXAuc29ydChjb21wYXJlTm9kZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzb3J0Z3JvdXBzLCB0aGlzLl9wYXJlbnRzKS5vcmRlcigpO1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuLi9uYW1lc3BhY2VcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpXG4gICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHJldHVybiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgLy8gbm9kZSBpcyBhIE5vZGVcbiAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgIHx8IG5vZGUuZGVmYXVsdFZpZXc7IC8vIG5vZGUgaXMgYSBEb2N1bWVudFxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3dcIjtcblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2LCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IHN0eWxlUmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvblxuICAgICAgICAgICAgOiBzdHlsZUNvbnN0YW50KShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpXG4gICAgICA6IHN0eWxlVmFsdWUodGhpcy5ub2RlKCksIG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVWYWx1ZShub2RlLCBuYW1lKSB7XG4gIHJldHVybiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSlcbiAgICAgIHx8IGRlZmF1bHRWaWV3KG5vZGUpLmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuIiwiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwiZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgc2VsZWN0ID0gYmVmb3JlID09IG51bGwgPyBjb25zdGFudE51bGwgOiB0eXBlb2YgYmVmb3JlID09PSBcImZ1bmN0aW9uXCIgPyBiZWZvcmUgOiBzZWxlY3RvcihiZWZvcmUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICByZXR1cm4gcGFyZW50ID8gcGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0U2libGluZykgOiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUodHJ1ZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGRlZXAgPyBzZWxlY3Rpb25fY2xvbmVEZWVwIDogc2VsZWN0aW9uX2Nsb25lU2hhbGxvdyk7XG59XG4iLCJ2YXIgZmlsdGVyRXZlbnRzID0ge307XG5cbmV4cG9ydCB2YXIgZXZlbnQgPSBudWxsO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoIShcIm9ubW91c2VlbnRlclwiIGluIGVsZW1lbnQpKSB7XG4gICAgZmlsdGVyRXZlbnRzID0ge21vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIn07XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyQ29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCk7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICBpZiAoIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRoaXMgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRoaXMpICYgOCkpKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudDEpIHtcbiAgICB2YXIgZXZlbnQwID0gZXZlbnQ7IC8vIEV2ZW50cyBjYW4gYmUgcmVlbnRyYW50IChlLmcuLCBmb2N1cykuXG4gICAgZXZlbnQgPSBldmVudDE7XG4gICAgdHJ5IHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgdGhpcy5fX2RhdGFfXywgaW5kZXgsIGdyb3VwKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZXZlbnQgPSBldmVudDA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgIGlmICghb24pIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB3cmFwID0gZmlsdGVyRXZlbnRzLmhhc093blByb3BlcnR5KHR5cGVuYW1lLnR5cGUpID8gZmlsdGVyQ29udGV4dExpc3RlbmVyIDogY29udGV4dExpc3RlbmVyO1xuICByZXR1cm4gZnVuY3Rpb24oZCwgaSwgZ3JvdXApIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gd3JhcCh2YWx1ZSwgaSwgZ3JvdXApO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyID0gbGlzdGVuZXIsIG8uY2FwdHVyZSA9IGNhcHR1cmUpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICBvID0ge3R5cGU6IHR5cGVuYW1lLnR5cGUsIG5hbWU6IHR5cGVuYW1lLm5hbWUsIHZhbHVlOiB2YWx1ZSwgbGlzdGVuZXI6IGxpc3RlbmVyLCBjYXB0dXJlOiBjYXB0dXJlfTtcbiAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgZWxzZSBvbi5wdXNoKG8pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGlmIChjYXB0dXJlID09IG51bGwpIGNhcHR1cmUgPSBmYWxzZTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgdGhpcy5lYWNoKG9uKHR5cGVuYW1lc1tpXSwgdmFsdWUsIGNhcHR1cmUpKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21FdmVudChldmVudDEsIGxpc3RlbmVyLCB0aGF0LCBhcmdzKSB7XG4gIHZhciBldmVudDAgPSBldmVudDtcbiAgZXZlbnQxLnNvdXJjZUV2ZW50ID0gZXZlbnQ7XG4gIGV2ZW50ID0gZXZlbnQxO1xuICB0cnkge1xuICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBldmVudCA9IGV2ZW50MDtcbiAgfVxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3dcIjtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xufVxuIiwiaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXRhIGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW50ZXIgZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZXhpdCBmcm9tIFwiLi9leGl0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2pvaW4gZnJvbSBcIi4vam9pblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaFwiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIGpvaW46IHNlbGVjdGlvbl9qb2luLFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtbc2VsZWN0b3JdXSwgcm9vdCk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbc2VsZWN0b3IgPT0gbnVsbCA/IFtdIDogc2VsZWN0b3JdLCByb290KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob25lbnRlciwgb251cGRhdGUsIG9uZXhpdCkge1xuICB2YXIgZW50ZXIgPSB0aGlzLmVudGVyKCksIHVwZGF0ZSA9IHRoaXMsIGV4aXQgPSB0aGlzLmV4aXQoKTtcbiAgZW50ZXIgPSB0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiID8gb25lbnRlcihlbnRlcikgOiBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICBpZiAob251cGRhdGUgIT0gbnVsbCkgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rpb24pIHtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBub2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5leHQpIF4gNCkgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBpID0gLTE7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgbm9kZXNbKytpXSA9IHRoaXM7IH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgKytzaXplOyB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yXCI7XG5cbnZhciBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IHZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbmV4cG9ydCB2YXIgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmIChjb21wYXJlLmxlbmd0aCA9PT0gMSkgY29tcGFyZSA9IGFzY2VuZGluZ0NvbXBhcmF0b3IoY29tcGFyZSk7XG4gIHJldHVybiB7XG4gICAgbGVmdDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9LFxuICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7XG4gICAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nQ29tcGFyYXRvcihmKSB7XG4gIHJldHVybiBmdW5jdGlvbihkLCB4KSB7XG4gICAgcmV0dXJuIGFzY2VuZGluZyhmKGQpLCB4KTtcbiAgfTtcbn1cbiIsInZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RhcnQgLSBzdG9wICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCAtIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXg7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW47XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIG1pbiA+IHZhbHVlKSB7XG4gICAgICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWluO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGluaXRSYW5nZShkb21haW4sIHJhbmdlKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLnJhbmdlKGRvbWFpbik7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRoaXMucmFuZ2UocmFuZ2UpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRJbnRlcnBvbGF0b3IoZG9tYWluLCBpbnRlcnBvbGF0b3IpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMuaW50ZXJwb2xhdG9yKGRvbWFpbik7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRoaXMuaW50ZXJwb2xhdG9yKGludGVycG9sYXRvcikuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IHZhciBwcmVmaXggPSBcIiRcIjtcblxuZnVuY3Rpb24gTWFwKCkge31cblxuTWFwLnByb3RvdHlwZSA9IG1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXAsXG4gIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHByb3BlcnR5ID0gcHJlZml4ICsga2V5O1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH0sXG4gIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSxcbiAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZW50cmllcy5wdXNoKHtrZXk6IHByb3BlcnR5LnNsaWNlKDEpLCB2YWx1ZTogdGhpc1twcm9wZXJ0eV19KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfSxcbiAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBlYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwKG9iamVjdCwgZikge1xuICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWFwKSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7IG1hcC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuXG4gIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgIG87XG5cbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgb2JqZWN0IHRvIG1hcC5cbiAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcDtcbiIsImltcG9ydCBtYXAgZnJvbSBcIi4vbWFwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IFtdLFxuICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICByb2xsdXAsXG4gICAgICBuZXN0O1xuXG4gIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGFycmF5LnNvcnQoc29ydFZhbHVlcyk7XG4gICAgICByZXR1cm4gcm9sbHVwICE9IG51bGwgPyByb2xsdXAoYXJyYXkpIDogYXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAga2V5VmFsdWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCgpLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkodmFsdWUgPSBhcnJheVtpXSkgKyBcIlwiKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZXNCeUtleS5zZXQoa2V5VmFsdWUsIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlc0J5S2V5LmVhY2goZnVuY3Rpb24odmFsdWVzLCBrZXkpIHtcbiAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyaWVzKG1hcCwgZGVwdGgpIHtcbiAgICBpZiAoKytkZXB0aCA+IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgaWYgKHJvbGx1cCAhPSBudWxsICYmIGRlcHRoID49IGtleXMubGVuZ3RoKSBhcnJheSA9IG1hcC5lbnRyaWVzKCk7XG4gICAgZWxzZSBhcnJheSA9IFtdLCBtYXAuZWFjaChmdW5jdGlvbih2LCBrKSB7IGFycmF5LnB1c2goe2tleTogaywgdmFsdWVzOiBlbnRyaWVzKHYsIGRlcHRoKX0pOyB9KTtcbiAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gIH1cblxuICByZXR1cm4gbmVzdCA9IHtcbiAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgIG1hcDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCk7IH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGVudHJpZXMoYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKSwgMCk7IH0sXG4gICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydEtleXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydFZhbHVlczogZnVuY3Rpb24ob3JkZXIpIHsgc29ydFZhbHVlcyA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gbWFwKCk7XG59XG5cbmZ1bmN0aW9uIHNldE1hcChtYXAsIGtleSwgdmFsdWUpIHtcbiAgbWFwLnNldChrZXksIHZhbHVlKTtcbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBtYXAsIHByZWZpeH0gZnJvbSBcIi4vbWFwXCI7XG5cbmZ1bmN0aW9uIFNldCgpIHt9XG5cbnZhciBwcm90byA9IG1hcC5wcm90b3R5cGU7XG5cblNldC5wcm90b3R5cGUgPSBzZXQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2V0LFxuICBoYXM6IHByb3RvLmhhcyxcbiAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhbHVlICs9IFwiXCI7XG4gICAgdGhpc1twcmVmaXggKyB2YWx1ZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBwcm90by5yZW1vdmUsXG4gIGNsZWFyOiBwcm90by5jbGVhcixcbiAgdmFsdWVzOiBwcm90by5rZXlzLFxuICBzaXplOiBwcm90by5zaXplLFxuICBlbXB0eTogcHJvdG8uZW1wdHksXG4gIGVhY2g6IHByb3RvLmVhY2hcbn07XG5cbmZ1bmN0aW9uIHNldChvYmplY3QsIGYpIHtcbiAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgZWxzZSBpZiAob2JqZWN0KSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKGYob2JqZWN0W2ldLCBpLCBvYmplY3QpKTtcbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldDtcbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4iLCJpbXBvcnQge21hcH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuXG5leHBvcnQgdmFyIGltcGxpY2l0ID0ge25hbWU6IFwiaW1wbGljaXRcIn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGluYWwoKSB7XG4gIHZhciBpbmRleCA9IG1hcCgpLFxuICAgICAgZG9tYWluID0gW10sXG4gICAgICByYW5nZSA9IFtdLFxuICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICB2YXIga2V5ID0gZCArIFwiXCIsIGkgPSBpbmRleC5nZXQoa2V5KTtcbiAgICBpZiAoIWkpIHtcbiAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICBpbmRleC5zZXQoa2V5LCBpID0gZG9tYWluLnB1c2goZCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW10sIGluZGV4ID0gbWFwKCk7XG4gICAgdmFyIGkgPSAtMSwgbiA9IF8ubGVuZ3RoLCBkLCBrZXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKGtleSA9IChkID0gX1tpXSkgKyBcIlwiKSkgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2goZCkpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9yZGluYWwoZG9tYWluLCByYW5nZSkudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiaW1wb3J0IHtyYW5nZSBhcyBzZXF1ZW5jZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IG9yZGluYWwgZnJvbSBcIi4vb3JkaW5hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiYW5kKCkge1xuICB2YXIgc2NhbGUgPSBvcmRpbmFsKCkudW5rbm93bih1bmRlZmluZWQpLFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgb3JkaW5hbFJhbmdlID0gc2NhbGUucmFuZ2UsXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHN0ZXAsXG4gICAgICBiYW5kd2lkdGgsXG4gICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgcGFkZGluZ0lubmVyID0gMCxcbiAgICAgIHBhZGRpbmdPdXRlciA9IDAsXG4gICAgICBhbGlnbiA9IDAuNTtcblxuICBkZWxldGUgc2NhbGUudW5rbm93bjtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBuID0gZG9tYWluKCkubGVuZ3RoLFxuICAgICAgICByZXZlcnNlID0gcmFuZ2VbMV0gPCByYW5nZVswXSxcbiAgICAgICAgc3RhcnQgPSByYW5nZVtyZXZlcnNlIC0gMF0sXG4gICAgICAgIHN0b3AgPSByYW5nZVsxIC0gcmV2ZXJzZV07XG4gICAgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMSwgbiAtIHBhZGRpbmdJbm5lciArIHBhZGRpbmdPdXRlciAqIDIpO1xuICAgIGlmIChyb3VuZCkgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgc3RhcnQgKz0gKHN0b3AgLSBzdGFydCAtIHN0ZXAgKiAobiAtIHBhZGRpbmdJbm5lcikpICogYWxpZ247XG4gICAgYmFuZHdpZHRoID0gc3RlcCAqICgxIC0gcGFkZGluZ0lubmVyKTtcbiAgICBpZiAocm91bmQpIHN0YXJ0ID0gTWF0aC5yb3VuZChzdGFydCksIGJhbmR3aWR0aCA9IE1hdGgucm91bmQoYmFuZHdpZHRoKTtcbiAgICB2YXIgdmFsdWVzID0gc2VxdWVuY2UobikubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7IH0pO1xuICAgIHJldHVybiBvcmRpbmFsUmFuZ2UocmV2ZXJzZSA/IHZhbHVlcy5yZXZlcnNlKCkgOiB2YWx1ZXMpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gWytfWzBdLCArX1sxXV0sIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gWytfWzBdLCArX1sxXV0sIHJvdW5kID0gdHJ1ZSwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmJhbmR3aWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kd2lkdGg7XG4gIH07XG5cbiAgc2NhbGUuc3RlcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzdGVwO1xuICB9O1xuXG4gIHNjYWxlLnJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISFfLCByZXNjYWxlKCkpIDogcm91bmQ7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1pbigxLCBwYWRkaW5nT3V0ZXIgPSArXyksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ0lubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWluKDEsIF8pLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nT3V0ZXIgPSArXywgcmVzY2FsZSgpKSA6IHBhZGRpbmdPdXRlcjtcbiAgfTtcblxuICBzY2FsZS5hbGlnbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbGlnbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IGFsaWduO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZChkb21haW4oKSwgcmFuZ2UpXG4gICAgICAgIC5yb3VuZChyb3VuZClcbiAgICAgICAgLnBhZGRpbmdJbm5lcihwYWRkaW5nSW5uZXIpXG4gICAgICAgIC5wYWRkaW5nT3V0ZXIocGFkZGluZ091dGVyKVxuICAgICAgICAuYWxpZ24oYWxpZ24pO1xuICB9O1xuXG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkocmVzY2FsZSgpLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBwb2ludGlzaChzY2FsZSkge1xuICB2YXIgY29weSA9IHNjYWxlLmNvcHk7XG5cbiAgc2NhbGUucGFkZGluZyA9IHNjYWxlLnBhZGRpbmdPdXRlcjtcbiAgZGVsZXRlIHNjYWxlLnBhZGRpbmdJbm5lcjtcbiAgZGVsZXRlIHNjYWxlLnBhZGRpbmdPdXRlcjtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHBvaW50aXNoKGNvcHkoKSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHJldHVybiBwb2ludGlzaChiYW5kLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFkZGluZ0lubmVyKDEpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcblxuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApKSB8IDAsXG4gICAgICByYW5nZSA9IG5ldyBBcnJheShuKTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHJhbmdlW2ldID0gc3RhcnQgKyBpICogc3RlcDtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiLFxuICAgIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4ID0gL14jKFswLTlhLWZdezMsOH0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlUCwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVJLCByZUksIHJlSSwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbFxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xhXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIik7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGNvcHk6IGZ1bmN0aW9uKGNoYW5uZWxzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IHRoaXMuY29uc3RydWN0b3IsIHRoaXMsIGNoYW5uZWxzKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gIH0sXG4gIGhleDogY29sb3JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IGNvbG9yX2Zvcm1hdEhleCxcbiAgZm9ybWF0SHNsOiBjb2xvcl9mb3JtYXRIc2wsXG4gIGZvcm1hdFJnYjogY29sb3JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogY29sb3JfZm9ybWF0UmdiXG59KTtcblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRIZXgoKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SHNsKCkge1xuICByZXR1cm4gaHNsQ29udmVydCh0aGlzKS5mb3JtYXRIc2woKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0UmdiKCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRSZ2IoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtLCBsO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4LmV4ZWMoZm9ybWF0KSkgPyAobCA9IG1bMV0ubGVuZ3RoLCBtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBsID09PSA2ID8gcmdibihtKSAvLyAjZmYwMDAwXG4gICAgICA6IGwgPT09IDMgPyBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpIC8vICNmMDBcbiAgICAgIDogbCA9PT0gOCA/IHJnYmEobSA+PiAyNCAmIDB4ZmYsIG0gPj4gMTYgJiAweGZmLCBtID4+IDggJiAweGZmLCAobSAmIDB4ZmYpIC8gMHhmZikgLy8gI2ZmMDAwMDAwXG4gICAgICA6IGwgPT09IDQgPyByZ2JhKChtID4+IDEyICYgMHhmKSB8IChtID4+IDggJiAweGYwKSwgKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKCgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZikpIC8gMHhmZikgLy8gI2YwMDBcbiAgICAgIDogbnVsbCkgLy8gaW52YWxpZCBoZXhcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKC0wLjUgPD0gdGhpcy5yICYmIHRoaXMuciA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmcgJiYgdGhpcy5nIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuYiAmJiB0aGlzLmIgPCAyNTUuNSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiByZ2JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IHJnYl9mb3JtYXRIZXgsXG4gIGZvcm1hdFJnYjogcmdiX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IHJnYl9mb3JtYXRSZ2Jcbn0pKTtcblxuZnVuY3Rpb24gcmdiX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIFwiI1wiICsgaGV4KHRoaXMucikgKyBoZXgodGhpcy5nKSArIGhleCh0aGlzLmIpO1xufVxuXG5mdW5jdGlvbiByZ2JfZm9ybWF0UmdiKCkge1xuICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodmFsdWUpIHx8IDApKTtcbiAgcmV0dXJuICh2YWx1ZSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHZhbHVlLnRvU3RyaW5nKDE2KTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBmb3JtYXRIc2w6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgIHJldHVybiAoYSA9PT0gMSA/IFwiaHNsKFwiIDogXCJoc2xhKFwiKVxuICAgICAgICArICh0aGlzLmggfHwgMCkgKyBcIiwgXCJcbiAgICAgICAgKyAodGhpcy5zIHx8IDApICogMTAwICsgXCIlLCBcIlxuICAgICAgICArICh0aGlzLmwgfHwgMCkgKiAxMDAgKyBcIiVcIlxuICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5cbmZ1bmN0aW9uIGxpbmVhcihhLCBkKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnRpYWwoYSwgYiwgeSkge1xuICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhID8gZXhwb25lbnRpYWwoYSwgYiwgeSkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG4iLCJpbXBvcnQge3JnYiBhcyBjb2xvclJnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgYmFzaXMgZnJvbSBcIi4vYmFzaXMuanNcIjtcbmltcG9ydCBiYXNpc0Nsb3NlZCBmcm9tIFwiLi9iYXNpc0Nsb3NlZC5qc1wiO1xuaW1wb3J0IG5vZ2FtbWEsIHtnYW1tYX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYjtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yLnIgPSByKHQpO1xuICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyk7XG5leHBvcnQgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBiYXNpcyh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xuICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcbiAgICAgICsgdDMgKiB2MykgLyA2O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxuICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIGlmICghYikgYiA9IFtdO1xuICB2YXIgbiA9IGEgPyBNYXRoLm1pbihiLmxlbmd0aCwgYS5sZW5ndGgpIDogMCxcbiAgICAgIGMgPSBiLnNsaWNlKCksXG4gICAgICBpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNbaV0gPSBhW2ldICogKDEgLSB0KSArIGJbaV0gKiB0O1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJBcnJheSh4KSB7XG4gIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoeCkgJiYgISh4IGluc3RhbmNlb2YgRGF0YVZpZXcpO1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiAoaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5IDogZ2VuZXJpY0FycmF5KShhLCBiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyaWNBcnJheShhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSAqICgxIC0gdCkgKyBiICogdCksIGQ7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICogKDEgLSB0KSArIGIgKiB0O1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGkgPSB7fSxcbiAgICAgIGMgPSB7fSxcbiAgICAgIGs7XG5cbiAgaWYgKGEgPT09IG51bGwgfHwgdHlwZW9mIGEgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgaWYgKGIgPT09IG51bGwgfHwgdHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIGIgPSB7fTtcblxuICBmb3IgKGsgaW4gYikge1xuICAgIGlmIChrIGluIGEpIHtcbiAgICAgIGlba10gPSB2YWx1ZShhW2tdLCBiW2tdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY1trXSA9IGJba107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYi5qc1wiO1xuaW1wb3J0IHtnZW5lcmljQXJyYXl9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3QuanNcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5XG4gICAgICA6IEFycmF5LmlzQXJyYXkoYikgPyBnZW5lcmljQXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSAqICgxIC0gdCkgKyBiICogdCk7XG4gIH07XG59XG4iLCJ2YXIgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBzY2FsZVgsIHNjYWxlWSwgc2tld1g7XG4gIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcbiAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICBpZiAoc2NhbGVZID0gTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpKSBjIC89IHNjYWxlWSwgZCAvPSBzY2FsZVksIHNrZXdYIC89IHNjYWxlWTtcbiAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2xhdGVYOiBlLFxuICAgIHRyYW5zbGF0ZVk6IGYsXG4gICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICBza2V3WDogTWF0aC5hdGFuKHNrZXdYKSAqIGRlZ3JlZXMsXG4gICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgc2NhbGVZOiBzY2FsZVlcbiAgfTtcbn1cbiIsImltcG9ydCBkZWNvbXBvc2UsIHtpZGVudGl0eX0gZnJvbSBcIi4vZGVjb21wb3NlLmpzXCI7XG5cbnZhciBjc3NOb2RlLFxuICAgIGNzc1Jvb3QsXG4gICAgY3NzVmlldyxcbiAgICBzdmdOb2RlO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBcIm5vbmVcIikgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIWNzc05vZGUpIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLCBjc3NSb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBjc3NWaWV3ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIGNzc05vZGUuc3R5bGUudHJhbnNmb3JtID0gdmFsdWU7XG4gIHZhbHVlID0gY3NzVmlldy5nZXRDb21wdXRlZFN0eWxlKGNzc1Jvb3QuYXBwZW5kQ2hpbGQoY3NzTm9kZSksIG51bGwpLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2Zvcm1cIik7XG4gIGNzc1Jvb3QucmVtb3ZlQ2hpbGQoY3NzTm9kZSk7XG4gIHZhbHVlID0gdmFsdWUuc2xpY2UoNywgLTEpLnNwbGl0KFwiLFwiKTtcbiAgcmV0dXJuIGRlY29tcG9zZSgrdmFsdWVbMF0sICt2YWx1ZVsxXSwgK3ZhbHVlWzJdLCArdmFsdWVbM10sICt2YWx1ZVs0XSwgK3ZhbHVlWzVdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghc3ZnTm9kZSkgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTtcbiAgc3ZnTm9kZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdmFsdWUpO1xuICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eTtcbiAgdmFsdWUgPSB2YWx1ZS5tYXRyaXg7XG4gIHJldHVybiBkZWNvbXBvc2UodmFsdWUuYSwgdmFsdWUuYiwgdmFsdWUuYywgdmFsdWUuZCwgdmFsdWUuZSwgdmFsdWUuZik7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuLi9udW1iZXIuanNcIjtcbmltcG9ydCB7cGFyc2VDc3MsIHBhcnNlU3ZnfSBmcm9tIFwiLi9wYXJzZS5qc1wiO1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZSwgcHhDb21tYSwgcHhQYXJlbiwgZGVnUGFyZW4pIHtcblxuICBmdW5jdGlvbiBwb3Aocykge1xuICAgIHJldHVybiBzLmxlbmd0aCA/IHMucG9wKCkgKyBcIiBcIiA6IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIHB4Q29tbWEsIG51bGwsIHB4UGFyZW4pO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiB8fCB5Yikge1xuICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgeGIgKyBweENvbW1hICsgeWIgKyBweFBhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGUoYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBpZiAoYSAtIGIgPiAxODApIGIgKz0gMzYwOyBlbHNlIGlmIChiIC0gYSA+IDE4MCkgYSArPSAzNjA7IC8vIHNob3J0ZXN0IHBhdGhcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2tld1goYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiAhPT0gMSB8fCB5YiAhPT0gMSkge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIgKyB4YiArIFwiLFwiICsgeWIgKyBcIilcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xuICAgIHRyYW5zbGF0ZShhLnRyYW5zbGF0ZVgsIGEudHJhbnNsYXRlWSwgYi50cmFuc2xhdGVYLCBiLnRyYW5zbGF0ZVksIHMsIHEpO1xuICAgIHJvdGF0ZShhLnJvdGF0ZSwgYi5yb3RhdGUsIHMsIHEpO1xuICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xuICAgIHNjYWxlKGEuc2NhbGVYLCBhLnNjYWxlWSwgYi5zY2FsZVgsIGIuc2NhbGVZLCBzLCBxKTtcbiAgICBhID0gYiA9IG51bGw7IC8vIGdjXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZUNzcywgXCJweCwgXCIsIFwicHgpXCIsIFwiZGVnKVwiKTtcbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZVN2ZywgXCIsIFwiLCBcIilcIiwgXCIpXCIpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bWFwLCBzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGlzTmFOKGIpID8gTmFOIDogMC41KTtcbn1cblxuZnVuY3Rpb24gY2xhbXBlcihkb21haW4pIHtcbiAgdmFyIGEgPSBkb21haW5bMF0sIGIgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdLCB0O1xuICBpZiAoYSA+IGIpIHQgPSBhLCBhID0gYiwgYiA9IHQ7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCB4KSk7IH07XG59XG5cbi8vIG5vcm1hbGl6ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByYW5nZSB2YWx1ZSB4IGluIFthLGJdLlxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gbm9ybWFsaXplKGQxLCBkMCksIHIwID0gaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IG5vcm1hbGl6ZShkMCwgZDEpLCByMCA9IGludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBub3JtYWxpemUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCByYW5nZSwgaW50ZXJwb2xhdGUpKSkodHJhbnNmb3JtKGNsYW1wKHgpKSk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIGNsYW1wKHVudHJhbnNmb3JtKChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgaW50ZXJwb2xhdGVOdW1iZXIpKSkoeSkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwLmNhbGwoXywgbnVtYmVyKSwgY2xhbXAgPT09IGlkZW50aXR5IHx8IChjbGFtcCA9IGNsYW1wZXIoZG9tYWluKSksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gc2xpY2UuY2FsbChfKSwgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSBfID8gY2xhbXBlcihkb21haW4pIDogaWRlbnRpdHksIHNjYWxlKSA6IGNsYW1wICE9PSBpZGVudGl0eTtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHJlc2NhbGUoKSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbih0LCB1KSB7XG4gICAgdHJhbnNmb3JtID0gdCwgdW50cmFuc2Zvcm0gPSB1O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRpbnVvdXModHJhbnNmb3JtLCB1bnRyYW5zZm9ybSkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoKSh0cmFuc2Zvcm0sIHVudHJhbnNmb3JtKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gTWF0aC5hYnMoeCA9IE1hdGgucm91bmQoeCkpID49IDFlMjFcbiAgICAgID8geC50b0xvY2FsZVN0cmluZyhcImVuXCIpLnJlcGxhY2UoLywvZywgXCJcIilcbiAgICAgIDogeC50b1N0cmluZygxMCk7XG59XG5cbi8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbi8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxuLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWxQYXJ0cygxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsUGFydHMoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsIi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bfl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC0oIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG4gIHZhciBtYXRjaDtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoe1xuICAgIGZpbGw6IG1hdGNoWzFdLFxuICAgIGFsaWduOiBtYXRjaFsyXSxcbiAgICBzaWduOiBtYXRjaFszXSxcbiAgICBzeW1ib2w6IG1hdGNoWzRdLFxuICAgIHplcm86IG1hdGNoWzVdLFxuICAgIHdpZHRoOiBtYXRjaFs2XSxcbiAgICBjb21tYTogbWF0Y2hbN10sXG4gICAgcHJlY2lzaW9uOiBtYXRjaFs4XSAmJiBtYXRjaFs4XS5zbGljZSgxKSxcbiAgICB0cmltOiBtYXRjaFs5XSxcbiAgICB0eXBlOiBtYXRjaFsxMF1cbiAgfSk7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmV4cG9ydCBmdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHRoaXMuZmlsbCA9IHNwZWNpZmllci5maWxsID09PSB1bmRlZmluZWQgPyBcIiBcIiA6IHNwZWNpZmllci5maWxsICsgXCJcIjtcbiAgdGhpcy5hbGlnbiA9IHNwZWNpZmllci5hbGlnbiA9PT0gdW5kZWZpbmVkID8gXCI+XCIgOiBzcGVjaWZpZXIuYWxpZ24gKyBcIlwiO1xuICB0aGlzLnNpZ24gPSBzcGVjaWZpZXIuc2lnbiA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBzcGVjaWZpZXIuc2lnbiArIFwiXCI7XG4gIHRoaXMuc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci5zeW1ib2wgKyBcIlwiO1xuICB0aGlzLnplcm8gPSAhIXNwZWNpZmllci56ZXJvO1xuICB0aGlzLndpZHRoID0gc3BlY2lmaWVyLndpZHRoID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLndpZHRoO1xuICB0aGlzLmNvbW1hID0gISFzcGVjaWZpZXIuY29tbWE7XG4gIHRoaXMucHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci5wcmVjaXNpb247XG4gIHRoaXMudHJpbSA9ICEhc3BlY2lmaWVyLnRyaW07XG4gIHRoaXMudHlwZSA9IHNwZWNpZmllci50eXBlID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnR5cGUgKyBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsUGFydHMoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5pbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuICh4ICogMTAwKS50b0ZpeGVkKHApOyB9LFxuICBcImJcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygyKTsgfSxcbiAgXCJjXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggKyBcIlwiOyB9LFxuICBcImRcIjogZm9ybWF0RGVjaW1hbCxcbiAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcbiAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcbiAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuaW1wb3J0IGZvcm1hdEdyb3VwIGZyb20gXCIuL2Zvcm1hdEdyb3VwLmpzXCI7XG5pbXBvcnQgZm9ybWF0TnVtZXJhbHMgZnJvbSBcIi4vZm9ybWF0TnVtZXJhbHMuanNcIjtcbmltcG9ydCBmb3JtYXRTcGVjaWZpZXIgZnJvbSBcIi4vZm9ybWF0U3BlY2lmaWVyLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHJpbSBmcm9tIFwiLi9mb3JtYXRUcmltLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHlwZXMgZnJvbSBcIi4vZm9ybWF0VHlwZXMuanNcIjtcbmltcG9ydCB7cHJlZml4RXhwb25lbnR9IGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eS5qc1wiO1xuXG52YXIgbWFwID0gQXJyYXkucHJvdG90eXBlLm1hcCxcbiAgICBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIsK1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxvY2FsZSkge1xuICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgPT09IHVuZGVmaW5lZCB8fCBsb2NhbGUudGhvdXNhbmRzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdEdyb3VwKG1hcC5jYWxsKGxvY2FsZS5ncm91cGluZywgTnVtYmVyKSwgbG9jYWxlLnRob3VzYW5kcyArIFwiXCIpLFxuICAgICAgY3VycmVuY3lQcmVmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMF0gKyBcIlwiLFxuICAgICAgY3VycmVuY3lTdWZmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMV0gKyBcIlwiLFxuICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsID09PSB1bmRlZmluZWQgPyBcIi5cIiA6IGxvY2FsZS5kZWNpbWFsICsgXCJcIixcbiAgICAgIG51bWVyYWxzID0gbG9jYWxlLm51bWVyYWxzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdE51bWVyYWxzKG1hcC5jYWxsKGxvY2FsZS5udW1lcmFscywgU3RyaW5nKSksXG4gICAgICBwZXJjZW50ID0gbG9jYWxlLnBlcmNlbnQgPT09IHVuZGVmaW5lZCA/IFwiJVwiIDogbG9jYWxlLnBlcmNlbnQgKyBcIlwiLFxuICAgICAgbWludXMgPSBsb2NhbGUubWludXMgPT09IHVuZGVmaW5lZCA/IFwiLVwiIDogbG9jYWxlLm1pbnVzICsgXCJcIixcbiAgICAgIG5hbiA9IGxvY2FsZS5uYW4gPT09IHVuZGVmaW5lZCA/IFwiTmFOXCIgOiBsb2NhbGUubmFuICsgXCJcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lQcmVmaXggOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVN1ZmZpeCA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIERldGVybWluZSB0aGUgc2lnbi4gLTAgaXMgbm90IGxlc3MgdGhhbiAwLCBidXQgMSAvIC0wIGlzIVxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCAxIC8gdmFsdWUgPCAwO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFsdWUgPSBpc05hTih2YWx1ZSkgPyBuYW4gOiBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gYWZ0ZXIgZm9ybWF0dGluZywgYW5kIG5vIGV4cGxpY2l0IHBvc2l0aXZlIHNpZ24gaXMgcmVxdWVzdGVkLCBoaWRlIHRoZSBzaWduLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDAgJiYgc2lnbiAhPT0gXCIrXCIpIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBtaW51cykgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZS5qc1wiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciBmb3JtYXQ7XG5leHBvcnQgdmFyIGZvcm1hdFByZWZpeDtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRlY2ltYWw6IFwiLlwiLFxuICB0aG91c2FuZHM6IFwiLFwiLFxuICBncm91cGluZzogWzNdLFxuICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXSxcbiAgbWludXM6IFwiLVwiXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHt0aWNrcywgdGlja0luY3JlbWVudH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQgY29udGludW91cywge2NvcHksIGlkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgaTAgPSAwLFxuICAgICAgICBpMSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgc3RhcnQgPSBkW2kwXSxcbiAgICAgICAgc3RvcCA9IGRbaTFdLFxuICAgICAgICBzdGVwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH1cblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsImltcG9ydCB7aWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdEludGVycG9sYXRvcn0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhclwiO1xuaW1wb3J0IHtsb2dnaXNofSBmcm9tIFwiLi9sb2dcIjtcbmltcG9ydCB7c3ltbG9naXNofSBmcm9tIFwiLi9zeW1sb2dcIjtcbmltcG9ydCB7cG93aXNofSBmcm9tIFwiLi9wb3dcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDEsXG4gICAgICB0MCxcbiAgICAgIHQxLFxuICAgICAgazEwLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgaW50ZXJwb2xhdG9yID0gaWRlbnRpdHksXG4gICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogaW50ZXJwb2xhdG9yKGsxMCA9PT0gMCA/IDAuNSA6ICh4ID0gKHRyYW5zZm9ybSh4KSAtIHQwKSAqIGsxMCwgY2xhbXAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB4KSkgOiB4KSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodDAgPSB0cmFuc2Zvcm0oeDAgPSArX1swXSksIHQxID0gdHJhbnNmb3JtKHgxID0gK19bMV0pLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMSAvICh0MSAtIHQwKSwgc2NhbGUpIDogW3gwLCB4MV07XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHNjYWxlKSA6IGNsYW1wO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHQwID0gdCh4MCksIHQxID0gdCh4MSksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAxIC8gKHQxIC0gdDApO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAuaW50ZXJwb2xhdG9yKHNvdXJjZS5pbnRlcnBvbGF0b3IoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXF1ZW50aWFsKCkge1xuICB2YXIgc2NhbGUgPSBsaW5lYXJpc2godHJhbnNmb3JtZXIoKShpZGVudGl0eSkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxMb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbExvZygpKS5iYXNlKHNjYWxlLmJhc2UoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW50aWFsU3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzZXF1ZW50aWFsU3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVudGlhbFBvdygpIHtcbiAgdmFyIHNjYWxlID0gcG93aXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbFBvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxTcXJ0KCkge1xuICByZXR1cm4gc2VxdWVudGlhbFBvdy5hcHBseShudWxsLCBhcmd1bWVudHMpLmV4cG9uZW50KDAuNSk7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgKi9cbi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cblwidXNlIHN0cmljdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEd0ZXhVcmxzKCl7XG4gICAgY29uc3QgaG9zdCA9IFwiaHR0cHM6Ly9ndGV4cG9ydGFsLm9yZy9hcGkvdjIvXCI7XG4gICAgY29uc3QgZGF0YXNldElkID0gXCJndGV4X3Y4XCI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gc2luZ2xlLWNlbGwgZXhwcmVzc2lvblxuICAgICAgICBzaW5nbGVDZWxsRXhwcmVzc2lvbjogXG4gICAgICAgICAgICBob3N0ICsgXCJleHByZXNzaW9uL3NpbmdsZU51Y2xldXNHZW5lRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF9zbnJuYXNlcV9waWxvdCZnZW5jb2RlSWQ9XCIsXG4gICAgICAgIHNpbmdsZUNlbGxFeHByZXNzaW9uU3VtbWFyeTpcbiAgICAgICAgICAgIGhvc3QgKyBcImV4cHJlc3Npb24vc2luZ2xlTnVjbGV1c0dlbmVFeHByZXNzaW9uU3VtbWFyeVwiLFxuXG4gICAgICAgIC8vIGVxdGwgRGFzaGJvYXJkIHNwZWNpZmljXG4gICAgICAgIGR5bmVxdGw6IGhvc3QgKyBcImFzc29jaWF0aW9uL2R5bmVxdGxcIixcbiAgICAgICAgc25wOiBob3N0ICsgXCJkYXRhc2V0L3ZhcmlhbnQ/c25wSWQ9XCIsXG4gICAgICAgIHZhcmlhbnRJZDogaG9zdCArIFwiZGF0YXNldC92YXJpYW50P3ZhcmlhbnRJZD1cIixcblxuICAgICAgICAvLyB0cmFuc2NyaXB0LCBleG9uLCBqdW5jdGlvbiBleHByZXNzaW9uIHNwZWNpZmljXG4gICAgICAgIGV4b25FeHA6IGhvc3QgKyBcImV4cHJlc3Npb24vY2x1c3RlcmVkTWVkaWFuRXhvbkV4cHJlc3Npb24/Z2VuY29kZUlkPVwiLFxuICAgICAgICB0cmFuc2NyaXB0RXhwOiBob3N0ICsgXCJleHByZXNzaW9uL2NsdXN0ZXJlZE1lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uP2dlbmNvZGVJZD1cIixcbiAgICAgICAganVuY3Rpb25FeHA6IGhvc3QgKyBcImV4cHJlc3Npb24vY2x1c3RlcmVkTWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uP2dlbmNvZGVJZD1cIixcbiAgICAgICAgdHJhbnNjcmlwdDogaG9zdCArIGByZWZlcmVuY2UvdHJhbnNjcmlwdD9kYXRhc2V0SWQ9JHtkYXRhc2V0SWR9JmdlbmNvZGVJZD1gLFxuICAgICAgICBcbiAgICAgICAgZXhvbjogaG9zdCArIGByZWZlcmVuY2UvZXhvbj9kYXRhc2V0SWQ9JHtkYXRhc2V0SWR9JmdlbmNvZGVJZD1gLFxuICAgICAgICBnZW5lTW9kZWw6IGhvc3QgKyBcImRhdGFzZXQvY29sbGFwc2VkR2VuZU1vZGVsRXhvbj9nZW5jb2RlSWQ9XCIsXG4gICAgICAgIGdlbmVNb2RlbFVuZmlsdGVyZWQ6IGhvc3QgKyBcImRhdGFzZXQvZnVsbENvbGxhcHNlZEdlbmVNb2RlbEV4b24/Z2VuY29kZUlkPVwiLFxuXG4gICAgICAgIC8vIGdlbmUgZXhwcmVzc2lvbiB2aW9saW4gcGxvdCBzcGVjaWZpY1xuICAgICAgICBnZW5lRXhwOiBob3N0ICsgXCJleHByZXNzaW9uL2dlbmVFeHByZXNzaW9uP2dlbmNvZGVJZD1cIixcblxuICAgICAgICAvLyBnZW5lIGV4cHJlc3Npb24gaGVhdCBtYXAgc3BlY2lmaWNcbiAgICAgICAgbWVkR2VuZUV4cDogaG9zdCArIFwiZXhwcmVzc2lvbi9jbHVzdGVyZWRNZWRpYW5HZW5lRXhwcmVzc2lvblwiLFxuICAgICAgICBcbiAgICAgICAgLy8gdG9wIGV4cHJlc3NlZCBnZW5lIGV4cHJlc3Npb24gc3BlY2lmaWNcbiAgICAgICAgdG9wSW5UaXNzdWVGaWx0ZXJlZDogaG9zdCArIFwiZXhwcmVzc2lvbi90b3BFeHByZXNzZWRHZW5lP2ZpbHRlck10R2VuZT10cnVlJnRpc3N1ZVNpdGVEZXRhaWxJZD1cIixcbiAgICAgICAgdG9wSW5UaXNzdWU6IGhvc3QgKyBcImV4cHJlc3Npb24vdG9wRXhwcmVzc2VkR2VuZT8mZmlsdGVyTXRHZW5lPWZhbHNlJnRpc3N1ZVNpdGVEZXRhaWxJZD1cIixcblxuICAgICAgICBnZW5lSWQ6IGhvc3QgKyBcInJlZmVyZW5jZS9nZW5lP2dlbmVJZD1cIixcblxuICAgICAgICAvLyB0aXNzdWUgbWVudSBzcGVjaWZpY1xuICAgICAgICB0aXNzdWU6IGhvc3QgKyBcImRhdGFzZXQvdGlzc3VlU2l0ZURldGFpbFwiLFxuXG4gICAgICAgIC8vIGxvY2FsIHN0YXRpYyBmaWxlc1xuICAgICAgICBzYW1wbGU6IFwidG1wU3VtbWFyeURhdGEvZ3RleC5TYW1wbGUuY3N2XCIsXG4gICAgICAgIHJuYXNlcUNyYW06IFwidG1wU3VtbWFyeURhdGEvcm5hc2VxX2NyYW1fZmlsZXNfdjdfZGJHYVBfMDExNTE2LnR4dFwiLFxuICAgICAgICB3Z3NDcmFtOiBcInRtcFN1bW1hcnlEYXRhL3dnc19jcmFtX2ZpbGVzX3Y3X2hnMzhfZGJHYVBfMDExNTE2LnR4dFwiLFxuXG4gICAgICAgIC8vIGFkZGl0aW9uYWwgZHluYW1pYyBRVEwgdXJsc1xuICAgICAgICBkeW5zcXRsOiBob3N0ICsgXCJhc3NvY2lhdGlvbi9keW5zcXRsXCIsXG5cbiAgICAgICAgLy8gZmlyZUNsb3VkXG4gICAgICAgIGZjQmlsbGluZzogXCJodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS9wcm9maWxlL2JpbGxpbmdcIixcbiAgICAgICAgZmNXb3JrU3BhY2U6IFwiaHR0cHM6Ly9hcGkuZmlyZWNsb3VkLm9yZy9hcGkvd29ya3NwYWNlc1wiLFxuICAgICAgICBmY1BvcnRhbFdvcmtTcGFjZTogXCJodHRwczovL3BvcnRhbC5maXJlY2xvdWQub3JnLyN3b3Jrc3BhY2VzXCJcbiAgICB9O1xufVxuXG4vKipcbiAqIHBhcnNlIEdURXggZHlucXRsIGpzb25cbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZHluYW1pYyBRVEwgd2ViIHNlcnZpY2VzXG4gKiBAcmV0dXJucyBkYXRhIHtKU09OfSBtb2RpZmllZCBkYXRhXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEeW5RdGwoanNvbil7XG4gICAgLy8gY2hlY2sgcmVxdWlyZWQganNvbiBhdHRyaWJ1dGVzXG4gICAgW1wiZGF0YVwiLCBcImdlbm90eXBlc1wiLCBcInBWYWx1ZVwiLCBcInBWYWx1ZVRocmVzaG9sZFwiLCBcInRpc3N1ZVNpdGVEZXRhaWxJZFwiXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGQpKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanNvbik7XG4gICAgICAgICAgICB0aHJvdyBcIlBhcnNlIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGpzb24uZXhwcmVzc2lvbl92YWx1ZXMgPSBqc29uLmRhdGEubWFwKChkKT0+cGFyc2VGbG9hdChkKSk7XG4gICAganNvbi5nZW5vdHlwZXMgPSBqc29uLmdlbm90eXBlcy5tYXAoKGQpPT5wYXJzZUZsb2F0KGQpKTtcblxuICAgIGpzb24uaG9tb1JlZkV4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09IDA7XG4gICAgfSk7XG4gICAganNvbi5ob21vQWx0RXhwID0ganNvbi5leHByZXNzaW9uX3ZhbHVlcy5maWx0ZXIoKGQsaSkgPT4ge1xuICAgICAgICByZXR1cm4ganNvbi5nZW5vdHlwZXNbaV0gPT0gMjtcbiAgICB9KTtcbiAgICBqc29uLmhldGVyb0V4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09IDE7XG4gICAgfSk7XG5cbiAgICAvLyBnZW5lcmF0ZSBnZW5vdHlwZSB0ZXh0IGxhYmVsc1xuICAgIGxldCByZWYgPSBqc29uLnZhcmlhbnRJZC5zcGxpdCgvXy8pWzJdO1xuICAgIGxldCBhbHQgPSBqc29uLnZhcmlhbnRJZC5zcGxpdCgvXy8pWzNdO1xuICAgIGpzb24uaGV0ID0gcmVmICsgYWx0O1xuICAgIGpzb24ucmVmID0gcmVmICsgcmVmO1xuICAgIGpzb24uYWx0ID0gYWx0ICsgYWx0O1xuXG4gICAgcmV0dXJuIGpzb247XG59XG5cblxuLyoqXG4gKiBQYXJzZSB0aGUgc2luZ2xlIHRpc3N1ZSBlcXRscyBmcm9tIEdURXggd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHBhcmFtIHRpc3N1ZVNpdGVUYWJsZSB7SnNvbn0gb3B0aW9uYWwgZm9yIG1hcHBpbmcgdGlzc3VlU2l0ZURldGFpbElkIHRvIHRpc3N1ZVNpdGVEZXRhaWwsIGEgZGljdGlvbmFyeSBvZiB0aXNzdWVTaXRlIG9iamVjdHMgKHdpdGggdGhlIGF0dHIgdGlzc3VlU2l0ZURldGFpbCkgaW5kZXhlZCBieSB0aXNzdWVTaXRlRGV0YWlsSWQsIGFuZFxuICogQHJldHVybnMge0xpc3R9IG9mIGVxdGxzIHdpdGggYXR0cmlidXRlcyByZXF1aXJlZCBmb3IgR0VWIHJlbmRlcmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTaW5nbGVUaXNzdWVFcXRscyhkYXRhLCB0aXNzdWVTaXRlVGFibGUgPSB1bmRlZmluZWQpe1xuICAgIGNvbnN0IGF0dHIgPSBcInNpbmdsZVRpc3N1ZUVxdGxcIjtcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBhdHRyaWJ1dGUgaXMgbm90IGZvdW5kOiBcIiArIGF0dHI7XG4gICAgW1widmFyaWFudElkXCIsIFwidGlzc3VlU2l0ZURldGFpbElkXCIsIFwibmVzXCIsIFwicFZhbHVlXCJdLmZvckVhY2goKGspPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShrKSkgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBhdHRyaWJ1dGUgaXMgbWlzc2luZzogXCIgKyBhdHRyO1xuICAgIH0pO1xuXG5cbiAgICByZXR1cm4gZGF0YVthdHRyXS5tYXAoKGQpPT57XG4gICAgICAgIGQueCA9IGQudmFyaWFudElkO1xuICAgICAgICBkLmRpc3BsYXlYID0gZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChkLnZhcmlhbnRJZCk7XG4gICAgICAgIGQueSA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBpZiAodGlzc3VlU2l0ZVRhYmxlKSBkLmRpc3BsYXlZID0gdGlzc3VlU2l0ZVRhYmxlW2QudGlzc3VlU2l0ZURldGFpbElkXS50aXNzdWVTaXRlRGV0YWlsO1xuICAgICAgICBkLnZhbHVlID0gZC5uZXM7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gZC5uZXMudG9QcmVjaXNpb24oMyk7XG4gICAgICAgIGQuciA9IC1NYXRoLmxvZzEwKGQucFZhbHVlKTsgLy8gc2V0IHIgdG8gYmUgdGhlIC1sb2cxMChwLXZhbHVlKVxuICAgICAgICBkLnJEaXNwbGF5VmFsdWUgPSBwYXJzZUZsb2F0KGQucFZhbHVlLnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oMyk7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBnZW5lcyBmcm9tIEdURXggd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVzKGRhdGEsIHNpbmdsZT1mYWxzZSwgZ2VuZUlkPW51bGwpe1xuICAgIGlmIChkYXRhLmxlbmd0aD09MCl7XG4gICAgICAgIGFsZXJ0KFwiTm8gZ2VuZSBpcyBmb3VuZFwiKTtcbiAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogZ2VuZShzKSBub3QgZm91bmRcIjtcbiAgICB9XG4gICAgaWYgKHNpbmdsZSl7XG4gICAgICAgIGlmIChnZW5lSWQgPT09IG51bGwpIHRocm93IFwiUGxlYXNlIHByb3ZpZGUgYSBnZW5lIElEIGZvciBzZWFyY2ggcmVzdWx0cyB2YWxpZGF0aW9uXCI7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aD4xKSB7IC8vIHdoZW4gYSBzaW5nbGUgZ2VuZSBJRCBoYXMgbXVsdGlwbGUgbWF0Y2hlc1xuICAgICAgICAgICAgbGV0IGZpbHRlcmVkID0gZGF0YS5maWx0ZXIoKGcpPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIGcuZ2VuZVN5bWJvbFVwcGVyPT1nZW5lSWQudG9VcHBlckNhc2UoKSB8fCBnLmdlbmNvZGVJZCA9PSBnZW5lSWQudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIkZhdGFsIEVycm9yOiBpbnB1dCBnZW5lIElEIGlzIG5vdCB1bmlxdWUuXCIpO1xuICAgICAgICAgICAgICAgIHRocm93IFwiRmF0YWwgRXJyb3I6IGlucHV0IGdlbmUgSUQgaXMgbm90IHVuaXF1ZS5cIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyZWQubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiTm8gZ2VuZSBpcyBmb3VuZCB3aXRoIFwiICsgZ2VuZUlkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIkZhdGFsIEVycm9yOiBnZW5lIG5vdCBmb3VuZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBkYXRhID0gZmlsdGVyZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGFbMF07XG4gICAgfVxuICAgIGVsc2UgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIHRpc3N1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3Vlcyhqc29uKXtcbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbXCJ0aXNzdWVTaXRlRGV0YWlsSWRcIiwgXCJ0aXNzdWVTaXRlRGV0YWlsXCIsIFwiY29sb3JIZXhcIl0uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFqc29uWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiBcIiArIGQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGpzb247XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXMgYW5kIHJldHVybiBhIGxvb2t1cCB0YWJsZSBpbmRleGVkIGJ5IHRpc3N1ZVNpdGVEZXRhaWxJZFxuICogQHBhcmFtIGpzb24gZnJvbSB3ZWIgc2VydmljZSB0aXNzdWVTaXRlRGV0YWlsXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlRGljdChqc29uKXtcbiAgICAvLyBjb25zdCBhdHRyID0gXCJ0aXNzdWVJbmZvXCI7XG4gICAgLy8gaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6IFwiICsgYXR0cjtcbiAgICAvLyBjb25zdCB0aXNzdWVzID0ganNvblthdHRyXTtcbiAgICAvLyBUT0RPOiBJdCdzIGEgYnVnIGluIHRoZSB3ZWIgc2VydmljZSB0aGF0IHRoZSBqc29uIG9iamVjdCBpcyBub3Qgd3JhcHBlZCBpbiBhIGtleVxuICAgIGNvbnN0IHRpc3N1ZXMgPSBqc29uO1xuICAgIC8vIHNhbml0eSBjaGVja1xuICAgIFtcInRpc3N1ZVNpdGVEZXRhaWxJZFwiLCBcInRpc3N1ZVNpdGVEZXRhaWxcIiwgXCJjb2xvckhleFwiXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6IFwiICsgZDtcbiAgICB9KTtcbiAgICByZXR1cm4gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PnthcnJbZC50aXNzdWVTaXRlRGV0YWlsSWRdID0gZDsgcmV0dXJuIGFycjt9LHt9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3VlcyBzYW1wbGUgY291bnRzLCBHVEV4IHJlbGVhc2Ugc3BlY2lmaWNcbiAqIEBwYXJhbSBqc29uIGZyb20gd2ViIHNlcnZpY2UgdGlzc3VlSW5mb1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVTYW1wbGVDb3VudHMoanNvbil7XG4gICAgY29uc3QgYXR0ciA9IFwidGlzc3VlSW5mb1wiO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiBcIiArIGF0dHI7XG4gICAgY29uc3QgdGlzc3VlcyA9IGpzb25bYXR0cl07XG5cbiAgICAvLyBjaGVjayBqc29uIHN0cnVjdHVyZVxuICAgIGNvbnN0IHRpc3N1ZSA9IHRpc3N1ZXNbMF07XG4gICAgaWYgKCF0aXNzdWUuaGFzT3duUHJvcGVydHkoXCJ0aXNzdWVTaXRlRGV0YWlsSWRcIikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0ciBpcyBtaXNzaW5nOiB0aXNzdWVTaXRlRGV0YWlsSWRcIjtcbiAgICBpZiAoIXRpc3N1ZS5oYXNPd25Qcm9wZXJ0eShcInJuYVNlcUFuZEdlbm90eXBlU2FtcGxlQ291bnRcIikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0ciBpcyBtaXNzaW5nOiBybmFTZXFBbmRHZW5vdHlwZVNhbXBsZUNvdW50XCI7XG4gICAgcmV0dXJuIHRpc3N1ZXM7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZSBncm91cHNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHBhcmFtIGZvckVxdGwge0Jvb2xlYW59IHJlc3RyaWN0IHRvIGVxdGwgdGlzc3Vlc1xuICogQHJldHVybnMge0RpY3Rpb25hcnl9IG9mIGxpc3RzIG9mIHRpc3N1ZXMgaW5kZXhlZCBieSB0aGUgdGlzc3VlIGdyb3VwIG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlU2l0ZXMoZGF0YSwgZm9yRXF0bD1mYWxzZSl7XG4gICAgLy8gdGhlIGxpc3Qgb2YgaW52YWxpZCBlcXRsIHRpc3N1ZXMgZHVlIHRvIHNhbXBsZSBzaXplIDwgNzBcbiAgICAvLyBhIGhhcmQtY29kZWQgbGlzdCBiZWNhdXNlIHRoZSBzYW1wbGUgc2l6ZSBpcyBub3QgZWFzeSB0byByZXRyaWV2ZVxuICAgIFxuICAgIGxldCB0aXNzdWVzID0gZGF0YTtcbiAgICBjb25zdCBpbnZhbGlkVGlzc3VlcyA9IHRpc3N1ZXMuZmlsdGVyKCh0KT0+dC5ybmFTZXFBbmRHZW5vdHlwZVNhbXBsZUNvdW50PD03MCkubWFwKCh0KT0+dC50aXNzdWVTaXRlRGV0YWlsSWQpOyAvL1tcIkJsYWRkZXJcIiwgXCJDZXJ2aXhfRWN0b2NlcnZpeFwiLCBcIkNlcnZpeF9FbmRvY2Vydml4XCIsIFwiRmFsbG9waWFuX1R1YmVcIiwgXCJLaWRuZXlfTWVkdWxsYVwiXTtcblxuICAgIFtcInRpc3N1ZVNpdGVcIixcInRpc3N1ZVNpdGVEZXRhaWxJZFwiLFwidGlzc3VlU2l0ZURldGFpbFwiXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IGBwYXJzZVRpc3N1ZVNpdGVzIGF0dHIgZXJyb3IuICR7ZH0gaXMgbm90IGZvdW5kYDtcbiAgICB9KTtcbiAgICB0aXNzdWVzID0gZm9yRXF0bD09ZmFsc2U/dGlzc3Vlczp0aXNzdWVzLmZpbHRlcigoZCk9PntyZXR1cm4gIWludmFsaWRUaXNzdWVzLmluY2x1ZGVzKGQudGlzc3VlU2l0ZURldGFpbElkKTt9KTsgLy8gYW4gYXJyYXkgb2YgdGlzc3VlU2l0ZURldGFpbElkIG9iamVjdHNcblxuICAgIC8vIGJ1aWxkIHRoZSB0aXNzdWVHcm91cHMgbG9va3VwIGRpY3Rpb25hcnkgaW5kZXhlZCBieSB0aGUgdGlzc3VlIGdyb3VwIG5hbWUgKGkuZS4gdGhlIHRpc3N1ZSBtYWluIHNpdGUgbmFtZSlcbiAgICBsZXQgdGlzc3VlR3JvdXBzID0gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PntcbiAgICAgICAgbGV0IGdyb3VwTmFtZSA9IGQudGlzc3VlU2l0ZTtcbiAgICAgICAgbGV0IHNpdGUgPSB7XG4gICAgICAgICAgICBpZDogZC50aXNzdWVTaXRlRGV0YWlsSWQsXG4gICAgICAgICAgICBuYW1lOiBkLnRpc3N1ZVNpdGVEZXRhaWxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFhcnIuaGFzT3duUHJvcGVydHkoZ3JvdXBOYW1lKSkgYXJyW2dyb3VwTmFtZV0gPSBbXTsgLy8gaW5pdGlhdGUgYW4gYXJyYXlcbiAgICAgICAgYXJyW2dyb3VwTmFtZV0ucHVzaChzaXRlKTtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9LCB7fSk7XG5cbiAgICAvLyBtb2RpZnkgdGhlIHRpc3N1ZSBncm91cHMgdGhhdCBoYXZlIG9ubHkgYSBzaW5nbGUgc2l0ZVxuICAgIC8vIGJ5IHJlcGxhY2luZyB0aGUgZ3JvdXAncyBuYW1lIHdpdGggdGhlIHNpbmdsZSBzaXRlJ3MgbmFtZSAtLSByZXN1bHRpbmcgYSBiZXR0ZXIgQWxwaGFiZXRpY2FsIG9yZGVyIG9mIHRoZSB0aXNzdWUgZ3JvdXBzXG5cbiAgICBPYmplY3Qua2V5cyh0aXNzdWVHcm91cHMpLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICh0aXNzdWVHcm91cHNbZF0ubGVuZ3RoID09IDEpeyAvLyBhIHNpbmdsZS1zaXRlIGdyb3VwXG4gICAgICAgICAgICBsZXQgc2l0ZSA9IHRpc3N1ZUdyb3Vwc1tkXVswXTsgLy8gdGhlIHNpbmdsZSBzaXRlXG4gICAgICAgICAgICBkZWxldGUgdGlzc3VlR3JvdXBzW2RdOyAvLyByZW1vdmUgdGhlIG9sZCBncm91cCBpbiB0aGUgZGljdGlvbmFyeVxuICAgICAgICAgICAgdGlzc3VlR3JvdXBzW3NpdGUubmFtZV0gPSBbc2l0ZV07IC8vIGNyZWF0ZSBhIG5ldyBncm91cCB3aXRoIHRoZSBzaXRlJ3MgbmFtZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRpc3N1ZUdyb3Vwcztcbn1cblxuXG4vKipcbiAqIHBhcnNlIHRoZSBleG9uc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcGFyYW0gZnVsbCB7Qm9vbGVhbn1cbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBleG9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNb2RlbEV4b25zKGpzb24pe1xuICAgIC8vY29uc3QgYXR0ciA9IGZ1bGw/XCJmdWxsQ29sbGFwc2VkR2VuZU1vZGVsRXhvblwiOlwiY29sbGFwc2VkR2VuZU1vZGVsRXhvblwiO1xuICAgIC8qaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpe1xuICAgICAgICBjb25zb2xlLmVycm9yKGpzb24pO1xuICAgICAgICB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IFJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IFwiICsgYXR0cjtcbiAgICB9Ki9cbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbXCJzdGFydFwiLCBcImVuZFwiXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWpzb25bMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IFwiUGFyc2luZyBFcnJvcjogUmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogXCIgKyBkO1xuICAgIH0pO1xuICAgIHJldHVybiBqc29uLm1hcCgoZCk9PntcbiAgICAgICAgZC5jaHJvbVN0YXJ0ID0gZC5zdGFydDtcbiAgICAgICAgZC5jaHJvbUVuZCA9IGQuZW5kO1xuICAgICAgICByZXR1cm4gZDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUganVuY3Rpb25zXG4gKiBAcGFyYW0gZGF0YVxuICogQHJldHVybnMge0xpc3R9IG9mIGp1bmN0aW9uc1xuICogLy8ganVuY3Rpb24gYW5ub3RhdGlvbnMgYXJlIG5vdCBzdG9yZWQgaW4gTW9uZ29cbiAgICAvLyBzbyBoZXJlIHdlIHVzZSB0aGUganVuY3Rpb24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZSB0byBwYXJzZSB0aGUganVuY3Rpb24gSUQgZm9yIGl0cyBnZW5vbWljIGxvY2F0aW9uXG4gICAgLy8gYXNzdW1pbmcgdGhhdCBlYWNoIHRpc3N1ZSBoYXMgdGhlIHNhbWUganVuY3Rpb25zLFxuICAgIC8vIHRvIGdyYWIgYWxsIHRoZSBrbm93biBqdW5jdGlvbnMgb2YgYSBnZW5lLCB3ZSBvbmx5IG5lZWQgdG8gcXVlcnkgb25lIHRpc3N1ZVxuICAgIC8vIGhlcmUgd2UgYXJiaXRyYXJpbHkgcGljayBMaXZlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnVuY3Rpb25zKGpzb24pe1xuXG4gICAgY29uc3QgYXR0ciA9IFwibWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uXCI7XG4gICAgXG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcGFyc2VKdW5jdGlvbnMgaW5wdXQgZXJyb3IuIFwiICsgYXR0cjtcbiAgICBpZiAoanNvblthdHRyXS5sZW5ndGggPT0gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGVyZSBpcyBubyBqdW5jdGlvbiBlbnRyeVwiKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICAvLyBjaGVjayByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZXNcbiAgICBbXCJ0aXNzdWVTaXRlRGV0YWlsSWRcIiwgXCJqdW5jdGlvbklkXCJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIC8vIHVzZSB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUganNvbiBvYmplY3RzIGFzIGEgdGVzdCBjYXNlXG4gICAgICAgIGlmKCFqc29uW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanNvblswXSk7XG4gICAgICAgICAgICB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGp1bmN0aW9uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGQ7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ganNvblthdHRyXS5maWx0ZXIoKGQpPT5kLnRpc3N1ZVNpdGVEZXRhaWxJZD09XCJMaXZlclwiKVxuICAgICAgICAubWFwKChkKSA9PiB7XG4gICAgICAgICAgICBsZXQgcG9zID0gZC5qdW5jdGlvbklkLnNwbGl0KFwiX1wiKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY2hyb206IHBvc1swXSxcbiAgICAgICAgICAgICAgICBjaHJvbVN0YXJ0OiBwb3NbMV0sXG4gICAgICAgICAgICAgICAgY2hyb21FbmQ6IHBvc1syXSxcbiAgICAgICAgICAgICAgICBqdW5jdGlvbklkOiBkLmp1bmN0aW9uSWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIHJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIHRyYW5zY3JpcHQgZXhvbiBvYmplY3QgbGlzdHMgaW5kZXhlZCBieSB0cmFuc2NyaXB0IElEcyAtLSBFTlNUIElEc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9ucyhqc29uKXtcbiAgICAvL2NvbnN0IGF0dHIgPSBcImV4b25cIjtcbiAgICAvL2lmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IGV4b25cIjtcbiAgICByZXR1cm4ganNvbi5yZWR1Y2UoKGEsIGQpPT57XG4gICAgICAgIC8vIGNoZWNrIHJlcXVpcmVkIGF0dHJpYnV0ZXNcbiAgICAgICAgW1widHJhbnNjcmlwdElkXCIsIFwiY2hyb21vc29tZVwiLCBcInN0YXJ0XCIsIFwiZW5kXCIsIFwiZXhvbk51bWJlclwiLCBcImV4b25JZFwiXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogXCIgKyBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFbZC50cmFuc2NyaXB0SWRdID09PSB1bmRlZmluZWQpIGFbZC50cmFuc2NyaXB0SWRdID0gW107XG4gICAgICAgIGQuY2hyb20gPSBkLmNocm9tb3NvbWU7XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGQuc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBkLmVuZDtcbiAgICAgICAgYVtkLnRyYW5zY3JpcHRJZF0ucHVzaChkKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfSwge30pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn0gZnJvbSB3ZWIgc2VydmljZSBleG9uXG4gKiByZXR1cm5zIGEgbGlzdCBvZiBhbGwgRXhvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXhvbnNUb0xpc3QoanNvbil7XG4gICAgY29uc3QgYXR0ciA9IFwiZXhvblwiO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IGV4b25cIjtcbiAgICByZXR1cm4ganNvblthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGlzb2Zvcm1zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn0gZnJvbSBHVEV4IHdlYiBzZXJ2aWNlICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9J1xuICogcmV0dXJucyBhIGxpc3Qgb2YgaXNvZm9ybSBvYmplY3RzIHNvcnRlZCBieSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0cyhqc29uKXtcbiAgICAvL2NvbnN0IGF0dHIgPSBcInRyYW5zY3JpcHRcIjtcbiAgICAvL2lmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyhcInBhcnNlSXNvZm9ybXMgaW5wdXQgZXJyb3JcIik7XG5cbiAgICAvLyBjaGVjayByZXF1aXJlZCBhdHRyaWJ1dGVzLCB1c2UgdGhlIGZpcnN0IHRyYW5zY3JpcHQgYXMgdGhlIHRlc3QgY2FzZVxuICAgIFtcInRyYW5zY3JpcHRJZFwiLCBcInN0YXJ0XCIsIFwiZW5kXCJdLmZvckVhY2goKGspPT57XG4gICAgICAgIGlmKCFqc29uWzBdLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IFwiICsgaztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGpzb24uc29ydCgoYSwgYik9PntcbiAgICAgICAgY29uc3QgbDEgPSBNYXRoLmFicyhhLmVuZCAtIGEuc3RhcnQpICsgMTtcbiAgICAgICAgY29uc3QgbDIgPSBNYXRoLmFicyhiLmVuZCAtIGIuc3RhcnQpICsgMTtcbiAgICAgICAgcmV0dXJuIC0obDEtbDIpOyAvLyBzb3J0IGJ5IGlzb2Zvcm0gbGVuZ3RoIGluIGRlc2NlbmRpbmcgb3JkZXJcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSBmaW5hbCAobWFza2VkKSBnZW5lIG1vZGVsIGV4b24gZXhwcmVzc2lvblxuICogZXhwcmVzc2lvbiBpcyBub3JtYWxpemVkIHRvIHJlYWRzIHBlciBrYlxuICogQHBhcmFtIGRhdGEge0pTT059IG9mIGV4b24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHBhcmFtIGV4b25zIHtMaXN0fSBvZiBleG9ucyB3aXRoIHBvc2l0aW9uc1xuICogQHJldHVybnMge0xpc3R9IG9mIGV4b24gb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9uRXhwcmVzc2lvbihkYXRhLCBleG9ucyl7XG4gICAgY29uc3QgZXhvbkRpY3QgPSBleG9ucy5yZWR1Y2UoKGEsIGQpPT57YVtkLmV4b25JZF0gPSBkOyByZXR1cm4gYTt9LCB7fSk7XG4gICAgY29uc3QgYXR0ciA9IFwibWVkaWFuRXhvbkV4cHJlc3Npb25cIjtcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coXCJwYXJzZUV4b25FeHByZXNzaW9uIGlucHV0IGVycm9yXCIpO1xuXG4gICAgY29uc3QgZXhvbk9iamVjdHMgPSBkYXRhW2F0dHJdO1xuICAgIC8vIGVycm9yLWNoZWNraW5nXG4gICAgW1wibWVkaWFuXCIsIFwiZXhvbklkXCIsIFwidGlzc3VlU2l0ZURldGFpbElkXCJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghZXhvbk9iamVjdHNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IFwiRmF0YWwgRXJyb3I6IHBhcnNlRXhvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6IFwiICsgZDtcbiAgICB9KTtcbiAgICAvLyBwYXJzZSBHVEV4IG1lZGlhbiBleG9uIGNvdW50c1xuICAgIGV4b25PYmplY3RzLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgY29uc3QgZXhvbiA9IGV4b25EaWN0W2QuZXhvbklkXTsgLy8gZm9yIHJldHJpZXZpbmcgZXhvbiBwb3NpdGlvbnNcbiAgICAgICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICAgICAgW1wiZW5kXCIsIFwic3RhcnRcIl0uZm9yRWFjaCgocCk9PntcbiAgICAgICAgICAgIGlmICghZXhvbi5oYXNPd25Qcm9wZXJ0eShwKSkgdGhyb3cgXCJGYXRhbCBFcnJvcjogcGFyc2VFeG9uRXhwcmVzc2lvbiBwb3NpdGlvbiBhdHRyIG5vdCBmb3VuZDogXCIgKyBwO1xuICAgICAgICB9KTtcbiAgICAgICAgZC5sID0gZXhvbi5lbmQgLSBleG9uLnN0YXJ0ICsgMTtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihkLm1lZGlhbikvZC5sO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihkLm1lZGlhbikvZC5sO1xuICAgICAgICBkLnggPSBkLmV4b25JZDtcbiAgICAgICAgZC55ID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC5jaHJvbVN0YXJ0ID0gZXhvbi5zdGFydDtcbiAgICAgICAgZC5jaHJvbUVuZCA9IGV4b24uZW5kO1xuICAgICAgICBkLnVuaXQgPSBcIm1lZGlhbiBcIiArIGQudW5pdCArIFwiIHBlciBiYXNlXCI7XG4gICAgICAgIGQudGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICB9KTtcbiAgICByZXR1cm4gZXhvbk9iamVjdHMuc29ydCgoYSxiKT0+e1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PGIuY2hyb21TdGFydCkgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PmIuY2hyb21TdGFydCkgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0pOyAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG59XG5cbi8qKlxuICogUGFyc2UganVuY3Rpb24gbWVkaWFuIHJlYWQgY291bnQgZGF0YVxuICogQHBhcmFtIGRhdGEge0pTT059IG9mIHRoZSBqdW5jdGlvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YganVuY3Rpb24gb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9IFwibWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uXCI7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KFwicGFyc2VKdW5jdGlvbkV4cHJlc3Npb24gaW5wdXQgZXJyb3JcIik7XG5cbiAgICBjb25zdCBqdW5jdGlvbnMgPSBkYXRhW2F0dHJdO1xuXG4gICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICBpZiAoanVuY3Rpb25zID09PSB1bmRlZmluZWQgfHwganVuY3Rpb25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIk5vIGp1bmN0aW9uIGRhdGEgZm91bmRcIik7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG5cbiAgICAvLyBwYXJzZSBHVEV4IG1lZGlhbiBqdW5jdGlvbiByZWFkIGNvdW50c1xuICAgIGp1bmN0aW9ucy5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFtcInRpc3N1ZVNpdGVEZXRhaWxJZFwiLCBcImp1bmN0aW9uSWRcIiwgXCJtZWRpYW5cIiwgXCJnZW5jb2RlSWRcIl0uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmICghZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJQYXJzaW5nciBFcnJvcjogcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6IFwiICsgaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgbGV0IHRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnggPSBkLmp1bmN0aW9uSWQ7XG4gICAgICAgIGQueSA9IHRpc3N1ZUlkO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgfSk7XG5cbiAgICAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG4gICAgcmV0dXJuIGp1bmN0aW9ucy5zb3J0KChhLGIpPT57XG4gICAgICAgIGlmIChhLmp1bmN0aW9uSWQ+Yi5qdW5jdGlvbklkKSByZXR1cm4gMTtcbiAgICAgICAgZWxzZSBpZiAoYS5qdW5jdGlvbklkPGIuanVuY3Rpb25JZCkgcmV0dXJuIC0xO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9IFwibWVkaWFuVHJhbnNjcmlwdEV4cHJlc3Npb25cIjtcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coXCJQYXJzaW5nIEVycm9yOiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uIGlucHV0IGVycm9yXCIpO1xuICAgIC8vIHBhcnNlIEdURXggaXNvZm9ybSBtZWRpYW4gVFBNXG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFtcIm1lZGlhblwiLCBcInRyYW5zY3JpcHRJZFwiLCBcInRpc3N1ZVNpdGVEZXRhaWxJZFwiLCBcImdlbmNvZGVJZFwiXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgdHJhbnNjaXB0IGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC54ID0gZC50cmFuc2NyaXB0SWQ7XG4gICAgICAgIGQueSA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgZXhwcmVzc2lvbiwgYW5kIHRyYW5zcG9zZSB0aGUgbWF0cml4XG4gKiBAcGFyYW0gZGF0YVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uVHJhbnNwb3NlKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSBcIm1lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uXCI7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihkYXRhKTtcbiAgICAgICAgdGhyb3coXCJQYXJzaW5nIEVycm9yOiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uVHJhbnNwb3NlIGlucHV0IGVycm9yLlwiKTtcbiAgICB9XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgW1wibWVkaWFuXCIsIFwidHJhbnNjcmlwdElkXCIsIFwidGlzc3VlU2l0ZURldGFpbElkXCIsIFwiZ2VuY29kZUlkXCJdLmZvckVhY2goKGspPT57XG4gICAgICAgICAgICBpZighZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3coXCJQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCB0cmFuc2NyaXB0IGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWVkaWFuID0gZC5tZWRpYW47XG4gICAgICAgIGNvbnN0IHRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIobWVkaWFuKTtcbiAgICAgICAgZC5kaXNwbGF5VmFsdWUgPSBOdW1iZXIobWVkaWFuKTtcbiAgICAgICAgZC55ID0gZC50cmFuc2NyaXB0SWQ7XG4gICAgICAgIGQueCA9IHRpc3N1ZUlkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIHBhcnNlIG1lZGlhbiBnZW5lIGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhIHtKc29ufSB3aXRoIGF0dHIgbWVkaWFuR2VuZUV4cHJlc3Npb25cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNZWRpYW5FeHByZXNzaW9uKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSBcIm1lZGlhbkdlbmVFeHByZXNzaW9uXCI7XG4gICAgLy9pZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGF0dHI7XG4gICAgLy8gcGFyc2UgR1RFeCBtZWRpYW4gZ2VuZSBleHByZXNzaW9uXG4gICAgLy8gZXJyb3ItY2hlY2tpbmcgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZXM6XG4gICAgaWYgKGRhdGFbYXR0cl0ubGVuZ3RoID09IDApIHRocm93IFwicGFyc2VNZWRpYW5FeHByZXNzaW9uIGZpbmRzIG5vIGRhdGEuXCI7XG4gICAgW1wibWVkaWFuXCIsIFwidGlzc3VlU2l0ZURldGFpbElkXCIsIFwiZ2VuY29kZUlkXCJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkYXRhW2F0dHJdWzBdKTtcbiAgICAgICAgICAgIHRocm93IGBQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAke2R9YDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGxldCByZXN1bHRzID0gZGF0YVthdHRyXTtcbiAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLnggPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC55ID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGEgZ3JvdXBlZCB2aW9saW4gcGxvdFxuICogQHBhcmFtIGRhdGEge0pTT059IGZyb20gR1RFeCBnZW5lIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBjb2xvcnMge0RpY3Rpb25hcnl9IHRoZSB2aW9saW4gY29sb3IgZm9yIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluKGRhdGEsIHVzZUxvZz10cnVlLCBjb2xvcnM9dW5kZWZpbmVkKXtcbiAgICAvL2NvbnN0IGF0dHIgPSBcImdlbmVFeHByZXNzaW9uXCI7XG4gICAgLy9pZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGF0dHI7XG4gICAgZGF0YS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBbXCJkYXRhXCIsIFwidGlzc3VlU2l0ZURldGFpbElkXCIsIFwiZ2VuZVN5bWJvbFwiLCBcImdlbmNvZGVJZFwiXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLnZhbHVlcyA9IHVzZUxvZz9kLmRhdGEubWFwKChkZCk9PntyZXR1cm4gTWF0aC5sb2cxMCgrZGQrMSk7fSk6ZC5kYXRhO1xuICAgICAgICBkLmdyb3VwID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQubGFiZWwgPSBkLmdlbmVTeW1ib2w7XG4gICAgICAgIGQuY29sb3IgPSBjb2xvcnM9PT11bmRlZmluZWQ/XCIjOTBjMWMxXCI6Y29sb3JzW2QuZ2VuY29kZUlkXTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUgTEQgKGxpbmthZ2UgZGlzZXF1aWxpYnJpdW0gZGF0YSlcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggbGQgd2ViIHNlcnZpY2VcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTEQoZGF0YSkge1xuICAgIGNvbnN0IGF0dHIgPSBcImxkXCI7XG4gICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IFwiICsgYXR0cjtcbiAgICBsZXQgcGFyc2VkID0gW107XG4gICAgbGV0IHVuaXF1ZSA9IHt9O1xuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBsZXQgbGFiZWxzID0gZFswXS5zcGxpdChcIixcIikuc29ydCgpOyAvLyBzb3J0IHRoZSB2YXJpYW50IElEc1xuICAgICAgICB1bmlxdWVbbGFiZWxzWzBdXSA9IHRydWU7XG4gICAgICAgIHVuaXF1ZVtsYWJlbHNbMV1dID0gdHJ1ZTtcbiAgICAgICAgcGFyc2VkLnB1c2goe1xuICAgICAgICAgICAgeDogbGFiZWxzWzBdLFxuICAgICAgICAgICAgZGlzcGxheVg6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQobGFiZWxzWzBdKSxcbiAgICAgICAgICAgIHk6IGxhYmVsc1sxXSxcbiAgICAgICAgICAgIGRpc3BsYXlZOiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGxhYmVsc1sxXSksXG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VGbG9hdChkWzFdKSxcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogcGFyc2VGbG9hdChkWzFdKS50b1ByZWNpc2lvbigzKSAvLyB0b1ByZWNpc2lvbigpIHJldHVybnMgYSBzdHJpbmdcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXModW5pcXVlKS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBwYXJzZWQucHVzaCh7XG4gICAgICAgICAgICB4OiBkLFxuICAgICAgICAgICAgZGlzcGxheVg6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoZCksXG4gICAgICAgICAgICB5OiBkLFxuICAgICAgICAgICAgZGlzcGxheVk6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoZCksXG4gICAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogXCIxXCJcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cblxuLyogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGJveHBsb3RcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZ2VuZSBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gdGlzc3VlcyB7T2JqZWN0fSBtYXBwaW5nIG9mIHRpc3N1ZSBpZHMgdG8gbGFiZWxzICh0aXNzdWUgbmFtZSlcbiAqIEBwYXJhbSBjb2xvcnMge09iamVjdH0gbWFwcGluZyBvZiB0aXNzdWUgaWRzIHRvIGJveHBsb3QgY29sb3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yQm94cGxvdChkYXRhLCB0aXNzdWVzPXVuZGVmaW5lZCwgY29sb3JzPXVuZGVmaW5lZCkge1xuICAgIGRhdGEuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgW1wiZGF0YVwiLCBcImdlbmNvZGVJZFwiLCBcImdlbmVTeW1ib2xcIiwgXCJ0aXNzdWVTaXRlRGV0YWlsSWRcIl0uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmICghZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgYFBhcnNpbmcgZXJyb3I6IHJlcXVpcmVkIEpTT04gYXR0cmlidXRlICR7a30gaXMgbWlzc2luZyBmcm9tIGEgcmVjb3JkLmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLmxhYmVsID0gdGlzc3Vlcz09PXVuZGVmaW5lZD9kLnRpc3N1ZVNpdGVEZXRhaWxJZDp0aXNzdWVzW2QudGlzc3VlU2l0ZURldGFpbElkXTtcbiAgICAgICAgZC5jb2xvciA9IGNvbG9ycz09PXVuZGVmaW5lZD9cIiM0NjgyYjRcIjpjb2xvcnNbZC50aXNzdWVTaXRlRGV0YWlsSWRdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogZ2VuZXJhdGUgdmFyaWFudCBJRCBzaG9ydGhhbmRcbiAqIEBwYXJhbSBpZFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoaWQpe1xuICAgIGxldCB0ZW1wID0gaWQuc3BsaXQoXCJfXCIpO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID09IDEgJiYgdGVtcFszXS5sZW5ndGggPT0gMSkgcmV0dXJuIGlkO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID4gdGVtcFszXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFsyXSA9IFwiZGVsXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDMsIDEpOyAvLyBkZWxldGUgdGhlIGFsdFxuICAgIH1cbiAgICBlbHNlIGlmKHRlbXBbM10ubGVuZ3RoID4gdGVtcFsyXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFszXSA9IFwiaW5zXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDIsIDEpOyAvLyBkZWxldGUgdGhlIHJlZlxuICAgIH1cbiAgICBlbHNlIHsgLy8gdGVtcFszXS5sZW5ndGggPT0gdGVtcFsyXS5sZW5ndGggYW5kIHRlbXBbM10ubGVuZ3RoID4gMVxuICAgICAgICB0ZW1wWzNdID0gXCJzdWJcIjtcbiAgICAgICAgdGVtcC5zcGxpY2UoMiwgMSk7IC8vIGRlbGV0ZSB0aGUgcmVmXG4gICAgfVxuICAgIHJldHVybiB0ZW1wLmpvaW4oXCJfXCIpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gIHZhciBuID0gc3BlY2lmaWVyLmxlbmd0aCAvIDYgfCAwLCBjb2xvcnMgPSBuZXcgQXJyYXkobiksIGkgPSAwO1xuICB3aGlsZSAoaSA8IG4pIGNvbG9yc1tpXSA9IFwiI1wiICsgc3BlY2lmaWVyLnNsaWNlKGkgKiA2LCArK2kgKiA2KTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVSZ2JCYXNpc30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNjaGVtZSkge1xuICByZXR1cm4gaW50ZXJwb2xhdGVSZ2JCYXNpcyhzY2hlbWVbc2NoZW1lLmxlbmd0aCAtIDFdKTtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU5YTNjOWY3ZjdmN2ExZDc2YVwiLFxuICBcImQwMWM4YmYxYjZkYWI4ZTE4NjRkYWMyNlwiLFxuICBcImQwMWM4YmYxYjZkYWY3ZjdmN2I4ZTE4NjRkYWMyNlwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmU2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmY3ZjdmN2U2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCI5OThlYzNmN2Y3ZjdmMWEzNDBcIixcbiAgXCI1ZTNjOTliMmFiZDJmZGI4NjNlNjYxMDFcIixcbiAgXCI1ZTNjOTliMmFiZDJmN2Y3ZjdmZGI4NjNlNjYxMDFcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmN2Y3ZjdmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZjdmN2Y3NjdhOWNmXCIsXG4gIFwiY2EwMDIwZjRhNTgyOTJjNWRlMDU3MWIwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZjdmN2Y3OTJjNWRlMDU3MWIwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZjdmN2Y3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmZmZmZmZjk5OTk5OVwiLFxuICBcImNhMDAyMGY0YTU4MmJhYmFiYTQwNDA0MFwiLFxuICBcImNhMDAyMGY0YTU4MmZmZmZmZmJhYmFiYTQwNDA0MFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2UwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2ZmZmZmZmUwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWJmZGJcIixcbiAgXCJkNzE5MWNmZGFlNjFhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBmZmZmYmZlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWY5OTlkOGM5MmNhMjVmXCIsXG4gIFwiZWRmOGZiYjJlMmUyNjZjMmE0MjM4YjQ1XCIsXG4gIFwiZWRmOGZiYjJlMmUyNjZjMmE0MmNhMjVmMDA2ZDJjXCIsXG4gIFwiZWRmOGZiY2NlY2U2OTlkOGM5NjZjMmE0MmNhMjVmMDA2ZDJjXCIsXG4gIFwiZWRmOGZiY2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA1ODI0XCIsXG4gIFwiZjdmY2ZkZTVmNWY5Y2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA1ODI0XCIsXG4gIFwiZjdmY2ZkZTVmNWY5Y2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZThjOGZkYmI4NGUzNGEzM1wiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWQ3MzAxZlwiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZmIzMDAwMDdmMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlY2U3ZjJhNmJkZGIyYjhjYmVcIixcbiAgXCJmMWVlZjZiZGM5ZTE3NGE5Y2YwNTcwYjBcIixcbiAgXCJmMWVlZjZiZGM5ZTE3NGE5Y2YyYjhjYmUwNDVhOGRcIixcbiAgXCJmMWVlZjZkMGQxZTZhNmJkZGI3NGE5Y2YyYjhjYmUwNDVhOGRcIixcbiAgXCJmMWVlZjZkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwMzRlN2JcIixcbiAgXCJmZmY3ZmJlY2U3ZjJkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwMzRlN2JcIixcbiAgXCJmZmY3ZmJlY2U3ZjJkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwNDVhOGQwMjM4NThcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWRmOGIxN2ZjZGJiMmM3ZmI4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MjI1ZWE4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MjUzNDk0MDgxZDU4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImRlZWJmNzllY2FlMTMxODJiZFwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjIxNzFiNVwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NTE5YzA4MzA2YlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlNWY1ZTBhMWQ5OWIzMWEzNTRcIixcbiAgXCJlZGY4ZTliYWU0YjM3NGM0NzYyMzhiNDVcIixcbiAgXCJlZGY4ZTliYWU0YjM3NGM0NzYzMWEzNTQwMDZkMmNcIixcbiAgXCJlZGY4ZTljN2U5YzBhMWQ5OWI3NGM0NzYzMWEzNTQwMDZkMmNcIixcbiAgXCJlZGY4ZTljN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDVhMzJcIixcbiAgXCJmN2ZjZjVlNWY1ZTBjN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDVhMzJcIixcbiAgXCJmN2ZjZjVlNWY1ZTBjN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDZkMmMwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZjBmMGYwYmRiZGJkNjM2MzYzXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NTI1MjUyXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1MDAwMDAwXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmZWRmNWJjYmRkYzc1NmJiMVwiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODZhNTFhM1wiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzU0Mjc4ZjNmMDA3ZFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWUwZDJmYzkyNzJkZTJkMjZcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFjYjE4MWRcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWRhNTBmMTU2NzAwMGRcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlNmNlZmRhZTZiZTY1NTBkXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZDk0NzAxXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxYTYzNjAzN2YyNzA0XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE5IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbmltcG9ydCB7bWF4LCBtaW59IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzY2FsZVNlcXVlbnRpYWx9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0ICogYXMgZDNDaHJvbWF0aWMgZnJvbSBcImQzLXNjYWxlLWNocm9tYXRpY1wiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xvckNoYXJ0KHNodWZmbGU9dHJ1ZSl7XG4gICAgLy8gcmVmIGlsbHVzdHJhdG9yIGNvbG9yIHRoZW1lc1xuICAgIGNvbnN0IGNvbG9ycyA9IFtcbiAgICAgICAgXCJyZ2IoMTAwLDExOCwxMjApXCIsXG4gICAgICAgIFwicmdiKDEwMSwxNDEsMTQ1KVwiLFxuICAgICAgICBcInJnYigxMDMsMTI2LDgyKVwiLFxuICAgICAgICBcInJnYigxMDMsMTg0LDIyMilcIixcbiAgICAgICAgXCJyZ2IoMTA4LDExMCw4OClcIixcblxuICAgICAgICBcInJnYigxMDgsMTQ3LDEyOClcIixcbiAgICAgICAgXCJyZ2IoMTE5LDE0NCwxODIpXCIsXG4gICAgICAgIFwicmdiKDEyNiwxMzAsMTIyKVwiLFxuICAgICAgICBcInJnYigxMzMsMTczLDE4NilcIixcbiAgICAgICAgXCJyZ2IoMTM3LDExNCw5MSlcIixcbiAgICAgICAgXCJyZ2IoMTQ1LDE3MCwxNTcpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTQ1LDIwMSwyMzIpXCIsXG4gICAgICAgIFwicmdiKDE0NywxMDUsNjYpXCIsXG4gICAgICAgIFwicmdiKDE1OSwxMTQsMTE2KVwiLFxuICAgICAgICBcInJnYigxNTksMTg4LDE5MSlcIixcbiAgICAgICAgXCJyZ2IoMTU5LDIyOSwxOTQpXCIsXG4gICAgICAgIFwicmdiKDE2MywxNjMsMTcxKVwiLFxuXG4gICAgICAgIFwicmdiKDE2NCwyMDcsMTkwKVwiLFxuICAgICAgICBcInJnYigxNzIsMTA4LDEzMClcIixcbiAgICAgICAgXCJyZ2IoMTczLDg0LDExNClcIixcbiAgICAgICAgXCJyZ2IoMTc0LDE5NSwyMjIpXCIsXG4gICAgICAgIFwicmdiKDE3NiwyMDQsMTUzKVwiLFxuXG4gICAgICAgIFwicmdiKDE3OSwxODAsMTUwKVwiLFxuICAgICAgICBcInJnYigxODAsMjIwLDIzNylcIixcbiAgICAgICAgXCJyZ2IoMTgzLDIwMiwxMjEpXCIsXG4gICAgICAgIFwicmdiKDE5MiwyMDIsODUpXCIsXG4gICAgICAgIFwicmdiKDE5MywxOTEsMTkzKVwiLFxuICAgICAgICBcInJnYigxOTUsOTcsMTM2KVwiLFxuXG4gICAgICAgIFwicmdiKDE5OSwxMjEsMTAyKVwiLFxuICAgICAgICBcInJnYigyMDcsMjAyLDc2KVwiLFxuICAgICAgICBcInJnYigyMDksMjE5LDE4OSlcIixcbiAgICAgICAgXCJyZ2IoMjEzLDI1MSwyNTUpXCIsXG4gICAgICAgIFwicmdiKDIxNSw5NCw1NilcIixcblxuICAgICAgICBcInJnYigyMTgsMTE0LDEyNilcIixcbiAgICAgICAgXCJyZ2IoMjIzLDkwLDczKVwiLFxuICAgICAgICBcInJnYigyMjQsMjQ3LDIxNylcIixcbiAgICAgICAgXCJyZ2IoMjI3LDIwNSwxNjQpXCIsXG4gICAgICAgIFwicmdiKDIyOCwxNjgsMTg1KVwiLFxuXG4gICAgICAgIFwicmdiKDIzMCwxNzYsMTUyKVwiLFxuICAgICAgICBcInJnYigyMzIsMjEyLDE3NSlcIixcbiAgICAgICAgXCJyZ2IoMjM5LDIwMSw3NilcIixcbiAgICAgICAgXCJyZ2IoMjQwLDEyNCwxMDgpXCIsXG4gICAgICAgIFwicmdiKDI0NiwyMzIsMTc3KVwiLFxuXG4gICAgICAgIFwicmdiKDI0OSwyMjgsMTczKVwiLFxuICAgICAgICBcInJnYigyNTIsMjQ1LDE5MSlcIixcbiAgICAgICAgXCJyZ2IoMjU1LDE4OCwxMDMpXCIsXG4gICAgICAgIFwicmdiKDQ1LDk0LDExMClcIixcbiAgICAgICAgXCJyZ2IoNTEsMTUzLDIwNClcIixcblxuICAgICAgICBcInJnYig2MCwxMjQsMTQ1KVwiLFxuICAgICAgICBcInJnYig2Miw4NywxNDUpXCIsXG4gICAgICAgIFwicmdiKDY1LDExNSwxMjApXCIsXG4gICAgICAgIFwicmdiKDg5LDIxNiwyMjkpXCIsXG4gICAgICAgIFwicmdiKDk0LDE3OCwxNTMpXCIsXG4gICAgICAgIFwicmdiKDk1LDEyNCwxMzQpXCJcbiAgICBdO1xuXG4gICAgaWYgKHNodWZmbGUpIHJldHVybiBzaHVmZmxlQ29sb3JzKGNvbG9ycyk7XG4gICAgcmV0dXJuIGNvbG9ycztcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZUNvbG9ycyhhcnJheSkge1xuICAgIC8vIEZpc2hlci1ZYXRlcyBzaHVmZmxlXG4gICAgbGV0IGNvdW50ZXIgPSBhcnJheS5sZW5ndGg7XG5cbiAgICAvLyBXaGlsZSB0aGVyZSBhcmUgZWxlbWVudHMgaW4gdGhlIGFycmF5XG4gICAgd2hpbGUgKGNvdW50ZXIgPiAwKSB7XG4gICAgICAgIC8vIFBpY2sgYSByYW5kb20gaW5kZXhcbiAgICAgICAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY291bnRlcik7XG5cbiAgICAgICAgLy8gRGVjcmVhc2UgY291bnRlciBieSAxXG4gICAgICAgIGNvdW50ZXItLTtcblxuICAgICAgICAvLyBBbmQgc3dhcCB0aGUgbGFzdCBlbGVtZW50IHdpdGggaXRcbiAgICAgICAgbGV0IHRlbXAgPSBhcnJheVtjb3VudGVyXTtcbiAgICAgICAgYXJyYXlbY291bnRlcl0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHRlbXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIGdldCBhIGNvbG9yIHNjaGVtZSBieSBuYW1lXG4gKiBAcGFyYW0gbmFtZSB7ZW51bX06IEJ1R24sIE9yUmQuLi4uXG4gKiBAcmV0dXJucyB7Kn06IGEgY29udGludW91cyBpbnRlcnBvbGF0b3IgKHVzZWQgd2l0aCBkMy5zY2FsZVNlcXVlbnRpYWwpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvckludGVycG9sYXRvcihuYW1lKXtcbiAgICAvLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1zY2FsZS1jaHJvbWF0aWMvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kI3NlcXVlbnRpYWwtbXVsdGktaHVlXG5cbiAgICBjb25zdCBpbnRlcnBvbGF0b3JzID0ge1xuICAgICAgICBCdUduOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUJ1R24sXG4gICAgICAgIE9yUmQ6IGQzQ2hyb21hdGljLmludGVycG9sYXRlT3JSZCxcbiAgICAgICAgUHVCdTogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdUJ1LFxuICAgICAgICBZbEduQnU6IGQzQ2hyb21hdGljLmludGVycG9sYXRlWWxHbkJ1LFxuICAgICAgICBCbHVlczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVCbHVlcyxcbiAgICAgICAgT3JhbmdlczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVPcmFuZ2VzLFxuICAgICAgICBHcmVlbnM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlR3JlZW5zLFxuICAgICAgICBQdXJwbGVzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVB1cnBsZXMsXG4gICAgICAgIFJlZHM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUmVkcyxcbiAgICAgICAgR3JleXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlR3JleXMsXG4gICAgICAgIEdyYXlzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUdyZXlzLFxuXG4gICAgICAgIC8vIGRpdmVyZ2luZyBjb2xvciBzY2hlbWVzXG4gICAgICAgIFJkQnU6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUmRCdSxcbiAgICAgICAgUmRHeTogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVSZEd5LFxuICAgICAgICBQaVlHOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVBpWUcsXG4gICAgICAgIFB1T3I6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUHVPcixcbiAgICAgICAgUmRZbEJ1OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVJkWWxCdVxuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgIGlmICghaW50ZXJwb2xhdG9ycy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb25zdCBlcnIgPSBcIlVucmVjb2duaXplZCBjb2xvcjogXCIgKyBuYW1lO1xuICAgICAgICBhbGVydChlcnIpO1xuICAgICAgICB0aHJvdyhlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gaW50ZXJwb2xhdG9yc1tuYW1lXTtcbn1cblxuLyoqXG4gKiByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1zY2FsZVxuICogcmVmZXJlbmNlOiBodHRwOi8vYmwub2Nrcy5vcmcvY3VycmFuLzMwOTRiMzdlNjNiOTE4YmFiMGEwNjc4N2UxNjE2MDdiXG4gKiBzY2FsZVNlcXVlbnRpYWwgbWFwcyB0aGUgY29udGludW91cyBkb21haW4gdG8gYSBjb250aW51b3VzIGNvbG9yIHNjYWxlXG4gKiBAcGFyYW0gZGF0YSB7TGlzdH0gb2YgbnVtZXJpY2FsIGRhdGFcbiAqIEBwYXJhbSBjb2xvcnMge1N0cmluZ30gYSBjb2xvciBuYW1lIHRoYXQgaXMgYXZhaWxhYmxlIGluIGdldENvbG9ySW50ZXJwb2xhdG9yKClcbiAqIEBwYXJhbSBkbWluIHtOdW1iZXJ9IG1pbmltdW0gZG9tYWluIHZhbHVlXG4gKiBAcGFyYW0gZG1heCB7TnVtYmVyfSBtYXhpbXVtIGRvbWFpbiB2YWx1ZVxuICogQHBhcmFtIHJldmVyc2Uge0Jvb2xlYW59IHJldmVyc2UgdGhlIGNvbG9yIHNjaGVtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29sb3JTY2FsZShkYXRhLCBjb2xvcnM9XCJZbEduQnVcIiwgZG1pbj11bmRlZmluZWQsIGRtYXg9dW5kZWZpbmVkLCByZXZlcnNlPWZhbHNlKSB7XG4gICAgZGF0YSA9IGRhdGEuZmlsdGVyKChkKT0+e3JldHVybiBpc0Zpbml0ZShkKTt9KTtcbiAgICBkbWF4ID0gZG1heCA9PT0gdW5kZWZpbmVkP21heChkYXRhKTpkbWF4O1xuICAgIGRtaW4gPSBkbWluID09PSB1bmRlZmluZWQ/bWluKGRhdGEpOmRtaW47XG4gICAgY29uc3Qgc2NhbGUgPSBzY2FsZVNlcXVlbnRpYWwoZ2V0Q29sb3JJbnRlcnBvbGF0b3IoY29sb3JzKSk7XG4gICAgaWYocmV2ZXJzZSkgc2NhbGUuZG9tYWluKFtkbWF4LCBkbWluXSk7XG4gICAgZWxzZSBzY2FsZS5kb21haW4oW2RtaW4sIGRtYXhdKTtcbiAgICByZXR1cm4gc2NhbGU7XG59XG5cbi8qKlxuICogRHJhdyBhIGNvbG9yIGxlZ2VuZCBiYXIuXG4gKiBEZXBlbmRlbmNpZXM6IGV4cHJlc3Npb25NYXAuY3NzXG4gKiBAcGFyYW0gdGl0bGUge1N0cmluZ31cbiAqIEBwYXJhbSBkb20ge29iamVjdH0gRDMgZG9tIG9iamVjdFxuICogQHBhcmFtIHNjYWxlIHtPYmplY3R9IEQzIHNjYWxlIG9mIHRoZSBjb2xvclxuICogQHBhcmFtIGNvbmZpZyB7T2JqZWN0fSB3aXRoIGF0dHI6IHgsIHlcbiAqIEBwYXJhbSB1c2VMb2cge0Jvb2xlYW59XG4gKiBAcGFyYW0gdGlja3Mge0ludGVnZXJ9IG51bWJlciBvZiB0aWNrcyAob25lLXNpZGVkKVxuICogQHBhcmFtIGJhc2Uge0ludGVnZXJ9IGxvZyBiYXNlXG4gKiBAcGFyYW0gY2VsbCB7T2JqZWN0fSB3aXRoIGF0dHJpYnV0ZXM6IGgsIHdcbiAqIEBwYXJhbSBvcmllbnRhdGlvbiB7ZW51bX0gaCBvciB2LCBpLmUuIGhvcml6b250YWwgb3IgdmVydGljYWxcbiAqIEBwYXJhbSBkaXZlcmdpbmcge0Jvb2xlYW59IHdoZXRoZXIgdGhlIGNvbG9yIHNjaGVtZSBpcyBkaXZlcmdpbmdcbiAqIEBwYXJhbSBjZWxsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkcmF3Q29sb3JMZWdlbmQodGl0bGUsIGRvbSwgc2NhbGUsIGNvbmZpZywgdXNlTG9nLCB0aWNrcz0xMCwgYmFzZT0xMCwgY2VsbD17aDoxMCwgdzo0MH0sIG9yaWVudGF0aW9uPVwiaFwiLCBkaXZlcmdpbmc9ZmFsc2Upe1xuICAgIGxldCBkYXRhID0gW107XG5cbiAgICBpZihkaXZlcmdpbmcpe1xuICAgICAgICBsZXQgcmFuZ2UgPSBbLi4uQXJyYXkodGlja3MrMSkua2V5cygpXTtcbiAgICAgICAgbGV0IGludGVydmFsID0gc2NhbGUuZG9tYWluKClbMV0vdGlja3M7XG4gICAgICAgIGRhdGEgPSByYW5nZS5tYXAoKGQpPT5kKmludGVydmFsKTtcbiAgICAgICAgZGF0YSA9IGRhdGEuY29uY2F0KHJhbmdlLmZpbHRlcigoZCk9PmQhPTApLm1hcCgoZCk9PjAtZCppbnRlcnZhbCkpLnNvcnQoKGEsIGIpID0+IHtyZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47fSk7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICAgIGxldCByYW5nZSA9IFsuLi5BcnJheSh0aWNrcysxKS5rZXlzKCldO1xuICAgICAgICBsZXQgaW50ZXJ2YWwgPSBzY2FsZS5kb21haW4oKVsxXS90aWNrcztcbiAgICAgICAgZGF0YSA9IHJhbmdlLm1hcCgoZCk9PmQqaW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIC8vIGxlZ2VuZCBncm91cHNcbiAgICBjb25zdCBsZWdlbmRzID0gZG9tLmFwcGVuZChcImdcIikuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7Y29uZmlnLnh9LCAke2NvbmZpZy55fSlgKVxuICAgICAgICAuc2VsZWN0QWxsKFwiLmxlZ2VuZFwiKS5kYXRhKGRhdGEpO1xuXG4gICAgY29uc3QgZyA9IGxlZ2VuZHMuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmNsYXNzZWQoXCJsZWdlbmRcIiwgdHJ1ZSk7XG5cbiAgICBpZiAob3JpZW50YXRpb24gPT0gXCJoXCIpe1xuICAgICAgICAvLyBsZWdlbmQgdGl0bGVcbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KHRpdGxlKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIC0xMClcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBjZWxsLmgpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7Y29uZmlnLnh9LCAke2NvbmZpZy55fSlgKTtcblxuICAgICAgICAvLyB0aGUgY29sb3IgbGVnZW5kXG4gICAgICAgIGcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiBjZWxsLncqaSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCA1KVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBjZWxsLncpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBjZWxsLmgpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIHNjYWxlKTtcblxuICAgICAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiB1c2VMb2c/KE1hdGgucG93KGJhc2UsIGQpLTEpLnRvUHJlY2lzaW9uKDIpOmQudG9QcmVjaXNpb24oMikpIC8vIGFzc3VtaW5nIHRoYXQgcmF3IHZhbHVlIGhhZCBiZWVuIGFkanVzdGVkIGJ5ICsxIHRvIGRlYWwgd2l0aCBsb2cgdHJhbnNmb3JtaW5nIHplcm9zXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgKGQsIGkpID0+IGNlbGwudyAqIGkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCAxMCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBsZWdlbmQgdGl0bGVcbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KHRpdGxlKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDUpXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueSArIGNlbGwuaCAqIGRhdGEubGVuZ3RofSlyb3RhdGUoOTApYCk7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCwgaSkgPT4gY2VsbC5oKmkpXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGNlbGwudylcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGNlbGwuaClcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgc2NhbGUpO1xuXG4gICAgICAgIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNvbG9yLWxlZ2VuZFwiKVxuICAgICAgICAgICAgLnRleHQoKGQpID0+IHVzZUxvZz8oTWF0aC5wb3coYmFzZSwgZCktMSkudG9QcmVjaXNpb24oMik6ZC50b1ByZWNpc2lvbigyKSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAxNSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCwgaSkgPT4gY2VsbC5oICogaSArIChjZWxsLmgvMikpO1xuICAgIH1cblxuXG5cbn0iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKipcbiAqIFRPRE86IGNvZGUgcmV2aWV3IG9mIGhvdyB0byBwcmVzZXQgcGFyYW1ldGVyIHZhbHVlc1xuICogcmV2aWV3IGFsbCB0aGUgcG9zaXRpb24gY2FsY3VsYXRpb25zXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbmRyb0hlYXRtYXBDb25maWcge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSByb290VyB7TnVtYmVyfSwgdGhpcyB3aWR0aCBpbmNsdWRlcyBtYXJnaW4gbGVmdCBhbmQgcmlnaHQsIHJvd1RyZWVQYW5lbCB3aWR0aCBhbmQgaGVhdG1hcCB3aWR0aC5cbiAgICAgKiBAcGFyYW0gbGVmdFBhbmVsVyB7SW50ZWdlcn0sIHNldCB0byAwIGlmIHRoZXJlJ3Mgbm8gbGVmdCBwYW5lbFxuICAgICAqIEBwYXJhbSB0b3BQYW5lbEgge0ludGVnZXJ9LCBzZXQgdG8gMCBpZiB0aGVyZSdzIG5vIHRvcCBwYW5lbFxuICAgICAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCBhdHRyOiB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIHNtYWxsZXIgdmFsdWVzIHRoYW4gdGhlIGRlZmF1bHQgYXJlIG5vdCByZWNvbW1lbmRlZCBmb3IgdGhlIGhlYXRtYXAsIHRvcCBtYXJnaW4gc2hvdWxkIGJlIGF0IGxlYXN0IDUwXG4gICAgICogQHBhcmFtIGNlbGxIIHtJbnRlZ2VyfVxuICAgICAqIEBwYXJhbSBhZGp1c3Qge0ludGVnZXJ9LCBhZGp1c3RlZCBzcGFjaW5nIGJldHdlZW4gdGhlIGhlYXRtYXAgYW5kIHRoZSBkZW5kcm9ncmFtXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iocm9vdFc9d2luZG93LmlubmVyV2lkdGgsIGxlZnRQYW5lbFc9MTAwLCB0b3BQYW5lbEg9MTAwLCBtYXJnaW49e3RvcDo1MCwgcmlnaHQ6MjUwLCBib3R0b206MTcwLCBsZWZ0OjEwfSwgY2VsbEg9MTIsIGFkanVzdD0xMCkge1xuICAgICAgICB0aGlzLm1hcmdpbiA9IG1hcmdpbjtcbiAgICAgICAgdGhpcy5yb290VyA9IHJvb3RXO1xuXG4gICAgICAgIHRoaXMubGVmdFRyZWVQYW5lbCA9IHsgLy8gdGhlIHJvdyBkZW5kcm9ncmFtIHBhbmVsXG4gICAgICAgICAgICB4OiBtYXJnaW4ubGVmdCxcbiAgICAgICAgICAgIHk6IG1hcmdpbi50b3AgKyB0b3BQYW5lbEgsXG4gICAgICAgICAgICBoOiB1bmRlZmluZWQsIC8vIHVuZGVmaW5lZCBpbml0aWFsbHksIGJlY2F1c2UgaXQncyBkYXRhLWRlcGVuZGVudFxuICAgICAgICAgICAgdzogbGVmdFBhbmVsVyAtIGFkanVzdCxcbiAgICAgICAgICAgIGlkOiBcImxlZnRUcmVlXCJcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmNlbGwgPSB7XG4gICAgICAgICAgICB3OiB1bmRlZmluZWQsIC8vIHRvIGJlIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIGRhdGEgYW5kIHJvb3RXXG4gICAgICAgICAgICBoOiBjZWxsSFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudG9wVHJlZVBhbmVsID0geyAvLyB0aGUgY29sdW1uIGRlbmRyb2dyYW0gcGFuZWxcbiAgICAgICAgICAgIHg6IG1hcmdpbi5sZWZ0ICsgbGVmdFBhbmVsVyxcbiAgICAgICAgICAgIHk6IG1hcmdpbi50b3AsXG4gICAgICAgICAgICBoOiB0b3BQYW5lbEggLSBhZGp1c3QsXG4gICAgICAgICAgICB3OiB0aGlzLnJvb3RXIC0gKG1hcmdpbi5sZWZ0ICsgbGVmdFBhbmVsVyArIG1hcmdpbi5yaWdodCksIC8vIGhhcmQtY29kZWQgdmFsdWVzP1xuICAgICAgICAgICAgaWQ6IFwidG9wVHJlZVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oZWF0bWFwUGFuZWwgPSB7XG4gICAgICAgICAgICB4OiBtYXJnaW4ubGVmdCArIGxlZnRQYW5lbFcsXG4gICAgICAgICAgICB5OiBtYXJnaW4udG9wICsgdG9wUGFuZWxILFxuICAgICAgICAgICAgaDogdGhpcy5sZWZ0VHJlZVBhbmVsLmgsXG4gICAgICAgICAgICB3OiB0aGlzLnRvcFRyZWVQYW5lbC53LFxuICAgICAgICAgICAgaWQ6IFwiaGVhdG1hcFwiXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5sZWdlbmRQYW5lbCA9IHsgLy8gdGhlIGNvbG9yIGxlZ2VuZCBwYW5lbFxuICAgICAgICAgICAgeDogbWFyZ2luLmxlZnQgKyBsZWZ0UGFuZWxXLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIGg6IG1hcmdpbi50b3AvMixcbiAgICAgICAgICAgIHc6IHRoaXMudG9wVHJlZVBhbmVsLncsXG4gICAgICAgICAgICBjZWxsOiB7dzogNjB9LFxuICAgICAgICAgICAgaWQ6IFwibGVnZW5kXCJcbiAgICAgICAgfTtcblxuXG4gICAgfVxuXG4gICAgZ2V0KCl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXJnaW46IHRoaXMubWFyZ2luLFxuICAgICAgICAgICAgY2VsbDogdGhpcy5jZWxsLFxuICAgICAgICAgICAgdzogdGhpcy5yb290VyxcbiAgICAgICAgICAgIGg6IHRoaXMubWFyZ2luLnRvcCArIHRoaXMudG9wVHJlZVBhbmVsLmggKyB0aGlzLmxlZ2VuZFBhbmVsLmggKyB0aGlzLm1hcmdpbi5ib3R0b20sIC8vIGluaXRpYWwgaGVpZ2h0XG4gICAgICAgICAgICBwYW5lbHM6IHtcbiAgICAgICAgICAgICAgICB0b3A6IHRoaXMudG9wVHJlZVBhbmVsLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMubGVmdFRyZWVQYW5lbCxcbiAgICAgICAgICAgICAgICBtYWluOiB0aGlzLmhlYXRtYXBQYW5lbCxcbiAgICAgICAgICAgICAgICBsZWdlbmQ6IHRoaXMubGVnZW5kUGFuZWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qKlxuICogQ3JlYXRlcyBhbiBTVkdcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSBhIERPTSBlbGVtZW50IElEIHRoYXQgc3RhcnRzIHdpdGggYSBcIiNcIlxuICogQHBhcmFtIHdpZHRoIHtOdW1lcmljfVxuICogQHBhcmFtIGhlaWdodCB7TnVtZXJpY31cbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCB0d28gYXR0cmlidXRlczogd2lkdGggYW5kIGhlaWdodFxuICogQHJldHVybiB7U2VsZWN0aW9ufSB0aGUgZDMgc2VsZWN0aW9uIG9iamVjdCBvZiB0aGUgU1ZHXG4gKi9cblxuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRG9tSWQoaWQpe1xuICAgIC8vIHRlc3QgaW5wdXQgcGFyYW1zXG4gICAgaWYgKHNlbGVjdChgIyR7aWR9YCkuZW1wdHkoKSkge1xuICAgICAgICBsZXQgZXJyb3IgPSBgSW5wdXQgRXJyb3I6IERPTSBJRCAke2lkfSBpcyBub3QgZm91bmQuYDtcbiAgICAgICAgLy9hbGVydChlcnJvcik7XG4gICAgICAgIGNvbnNvbGUud2FybihlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBDYW52YXMgRDMgb2JqZWN0XG4gKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIHBhcmVudCBkb20gSURcbiAqIEBwYXJhbSB3aWR0aCB7TnVtZXJpY306IHRoZSBvdXRlciB3aWR0aFxuICogQHBhcmFtIGhlaWdodCB7TnVtZXJpY306IHRoZSBvdXRlciBoZWlnaHRcbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCBhdHRyOiBsZWZ0LCB0b3BcbiAqIEBwYXJhbSBjYW52YXNJZCB7U3RyaW5nfVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYW52YXMoaWQsIHdpZHRoLCBoZWlnaHQsIG1hcmdpbiwgY2FudmFzSWQ9dW5kZWZpbmVkLCBwb3NpdGlvbj1cImFic29sdXRlXCIpe1xuICAgIGNoZWNrRG9tSWQoaWQpO1xuICAgIGlmKGNhbnZhc0lkPT09dW5kZWZpbmVkKSBjYW52YXNJZD1gJHtpZH0tY2FudmFzYDtcbiAgICByZXR1cm4gc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAuYXBwZW5kKFwiY2FudmFzXCIpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgY2FudmFzSWQpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgLnN0eWxlKFwicG9zaXRpb25cIiwgcG9zaXRpb24pOyAvLyBUT0RPOiBzaG91bGQgdGhlIHBvc2l0aW9uIGJlIHVzZXItZGVmaW5lZD8gcmVsYXRpdmUgdnMgYWJzb2x1dGVcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gU1ZHIEQzIG9iamVjdFxuICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBwYXJlbnQgZG9tIElEXG4gKiBAcGFyYW0gd2lkdGgge051bWVyaWN9OiB0aGUgb3V0ZXIgd2lkdGhcbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9OiB0aGUgb3V0ZXIgaGVpZ2h0XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggYXR0cjogbGVmdCwgdG9wXG4gKiBAcGFyYW0gc3ZnSWQge1N0cmluZ31cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3ZnKGlkLCB3aWR0aCwgaGVpZ2h0LCBtYXJnaW4sIHN2Z0lkPXVuZGVmaW5lZCl7XG4gICAgY2hlY2tEb21JZChpZCk7XG4gICAgaWYgKHN2Z0lkPT09dW5kZWZpbmVkKSBzdmdJZD1gJHtpZH0tc3ZnYDtcbiAgICBpZiAobWFyZ2luPT09dW5kZWZpbmVkKSBtYXJnaW49e3RvcDowLCBsZWZ0OjB9O1xuICAgIHJldHVybiBzZWxlY3QoXCIjXCIraWQpLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgc3ZnSWQpXG4gICAgICAgIC8vIC5zdHlsZShcInBvc2l0aW9uXCIsIHBvc2l0aW9uKVxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke21hcmdpbi50b3B9KWApO1xufVxuXG5cblxuIiwiZnVuY3Rpb24gY291bnQobm9kZSkge1xuICB2YXIgc3VtID0gMCxcbiAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gIGlmICghaSkgc3VtID0gMTtcbiAgZWxzZSB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgbm9kZS52YWx1ZSA9IHN1bTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihjb3VudCk7XG59XG4iLCJpbXBvcnQgbm9kZV9jb3VudCBmcm9tIFwiLi9jb3VudC5qc1wiO1xuaW1wb3J0IG5vZGVfZWFjaCBmcm9tIFwiLi9lYWNoLmpzXCI7XG5pbXBvcnQgbm9kZV9lYWNoQmVmb3JlIGZyb20gXCIuL2VhY2hCZWZvcmUuanNcIjtcbmltcG9ydCBub2RlX2VhY2hBZnRlciBmcm9tIFwiLi9lYWNoQWZ0ZXIuanNcIjtcbmltcG9ydCBub2RlX3N1bSBmcm9tIFwiLi9zdW0uanNcIjtcbmltcG9ydCBub2RlX3NvcnQgZnJvbSBcIi4vc29ydC5qc1wiO1xuaW1wb3J0IG5vZGVfcGF0aCBmcm9tIFwiLi9wYXRoLmpzXCI7XG5pbXBvcnQgbm9kZV9hbmNlc3RvcnMgZnJvbSBcIi4vYW5jZXN0b3JzLmpzXCI7XG5pbXBvcnQgbm9kZV9kZXNjZW5kYW50cyBmcm9tIFwiLi9kZXNjZW5kYW50cy5qc1wiO1xuaW1wb3J0IG5vZGVfbGVhdmVzIGZyb20gXCIuL2xlYXZlcy5qc1wiO1xuaW1wb3J0IG5vZGVfbGlua3MgZnJvbSBcIi4vbGlua3MuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGllcmFyY2h5KGRhdGEsIGNoaWxkcmVuKSB7XG4gIHZhciByb290ID0gbmV3IE5vZGUoZGF0YSksXG4gICAgICB2YWx1ZWQgPSArZGF0YS52YWx1ZSAmJiAocm9vdC52YWx1ZSA9IGRhdGEudmFsdWUpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVzID0gW3Jvb3RdLFxuICAgICAgY2hpbGQsXG4gICAgICBjaGlsZHMsXG4gICAgICBpLFxuICAgICAgbjtcblxuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkgY2hpbGRyZW4gPSBkZWZhdWx0Q2hpbGRyZW47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmICh2YWx1ZWQpIG5vZGUudmFsdWUgPSArbm9kZS5kYXRhLnZhbHVlO1xuICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4obm9kZS5kYXRhKSkgJiYgKG4gPSBjaGlsZHMubGVuZ3RoKSkge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBOb2RlKGNoaWxkc1tpXSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByb290LmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIG5vZGVfY29weSgpIHtcbiAgcmV0dXJuIGhpZXJhcmNoeSh0aGlzKS5lYWNoQmVmb3JlKGNvcHlEYXRhKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENoaWxkcmVuKGQpIHtcbiAgcmV0dXJuIGQuY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNvcHlEYXRhKG5vZGUpIHtcbiAgbm9kZS5kYXRhID0gbm9kZS5kYXRhLmRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlSGVpZ2h0KG5vZGUpIHtcbiAgdmFyIGhlaWdodCA9IDA7XG4gIGRvIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICB3aGlsZSAoKG5vZGUgPSBub2RlLnBhcmVudCkgJiYgKG5vZGUuaGVpZ2h0IDwgKytoZWlnaHQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5vZGUoZGF0YSkge1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmRlcHRoID1cbiAgdGhpcy5oZWlnaHQgPSAwO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG59XG5cbk5vZGUucHJvdG90eXBlID0gaGllcmFyY2h5LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE5vZGUsXG4gIGNvdW50OiBub2RlX2NvdW50LFxuICBlYWNoOiBub2RlX2VhY2gsXG4gIGVhY2hBZnRlcjogbm9kZV9lYWNoQWZ0ZXIsXG4gIGVhY2hCZWZvcmU6IG5vZGVfZWFjaEJlZm9yZSxcbiAgc3VtOiBub2RlX3N1bSxcbiAgc29ydDogbm9kZV9zb3J0LFxuICBwYXRoOiBub2RlX3BhdGgsXG4gIGFuY2VzdG9yczogbm9kZV9hbmNlc3RvcnMsXG4gIGRlc2NlbmRhbnRzOiBub2RlX2Rlc2NlbmRhbnRzLFxuICBsZWF2ZXM6IG5vZGVfbGVhdmVzLFxuICBsaW5rczogbm9kZV9saW5rcyxcbiAgY29weTogbm9kZV9jb3B5XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBjdXJyZW50LCBuZXh0ID0gW25vZGVdLCBjaGlsZHJlbiwgaSwgbjtcbiAgZG8ge1xuICAgIGN1cnJlbnQgPSBuZXh0LnJldmVyc2UoKSwgbmV4dCA9IFtdO1xuICAgIHdoaWxlIChub2RlID0gY3VycmVudC5wb3AoKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBuZXh0LnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAobmV4dC5sZW5ndGgpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIG5leHQgPSBbXSwgY2hpbGRyZW4sIGksIG47XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBuZXh0LnB1c2gobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgfVxuICB3aGlsZSAobm9kZSA9IG5leHQucG9wKCkpIHtcbiAgICBjYWxsYmFjayhub2RlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIGNoaWxkcmVuLCBpO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBzdW0gPSArdmFsdWUobm9kZS5kYXRhKSB8fCAwLFxuICAgICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gICAgd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gICAgbm9kZS52YWx1ZSA9IHN1bTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuLnNvcnQoY29tcGFyZSk7XG4gICAgfVxuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVuZCkge1xuICB2YXIgc3RhcnQgPSB0aGlzLFxuICAgICAgYW5jZXN0b3IgPSBsZWFzdENvbW1vbkFuY2VzdG9yKHN0YXJ0LCBlbmQpLFxuICAgICAgbm9kZXMgPSBbc3RhcnRdO1xuICB3aGlsZSAoc3RhcnQgIT09IGFuY2VzdG9yKSB7XG4gICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgbm9kZXMucHVzaChzdGFydCk7XG4gIH1cbiAgdmFyIGsgPSBub2Rlcy5sZW5ndGg7XG4gIHdoaWxlIChlbmQgIT09IGFuY2VzdG9yKSB7XG4gICAgbm9kZXMuc3BsaWNlKGssIDAsIGVuZCk7XG4gICAgZW5kID0gZW5kLnBhcmVudDtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbmZ1bmN0aW9uIGxlYXN0Q29tbW9uQW5jZXN0b3IoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XG4gIHZhciBhTm9kZXMgPSBhLmFuY2VzdG9ycygpLFxuICAgICAgYk5vZGVzID0gYi5hbmNlc3RvcnMoKSxcbiAgICAgIGMgPSBudWxsO1xuICBhID0gYU5vZGVzLnBvcCgpO1xuICBiID0gYk5vZGVzLnBvcCgpO1xuICB3aGlsZSAoYSA9PT0gYikge1xuICAgIGMgPSBhO1xuICAgIGEgPSBhTm9kZXMucG9wKCk7XG4gICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgfVxuICByZXR1cm4gYztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xuICB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50KSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gW107XG4gIHRoaXMuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfSk7XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbGVhdmVzID0gW107XG4gIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICBsZWF2ZXMucHVzaChub2RlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGVhdmVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciByb290ID0gdGhpcywgbGlua3MgPSBbXTtcbiAgcm9vdC5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZSAhPT0gcm9vdCkgeyAvLyBEb27igJl0IGluY2x1ZGUgdGhlIHJvb3TigJlzIHBhcmVudCwgaWYgYW55LlxuICAgICAgbGlua3MucHVzaCh7c291cmNlOiBub2RlLnBhcmVudCwgdGFyZ2V0OiBub2RlfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxpbmtzO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5XCI7XG5cbnZhciB0b3AgPSAxLFxuICAgIHJpZ2h0ID0gMixcbiAgICBib3R0b20gPSAzLFxuICAgIGxlZnQgPSA0LFxuICAgIGVwc2lsb24gPSAxZS02O1xuXG5mdW5jdGlvbiB0cmFuc2xhdGVYKHgpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgKHggKyAwLjUpICsgXCIsMClcIjtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlWSh5KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZSgwLFwiICsgKHkgKyAwLjUpICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIG51bWJlcihzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbnRlcihzY2FsZSkge1xuICB2YXIgb2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2NhbGUuYmFuZHdpZHRoKCkgLSAxKSAvIDI7IC8vIEFkanVzdCBmb3IgMC41cHggb2Zmc2V0LlxuICBpZiAoc2NhbGUucm91bmQoKSkgb2Zmc2V0ID0gTWF0aC5yb3VuZChvZmZzZXQpO1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCkgKyBvZmZzZXQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVudGVyaW5nKCkge1xuICByZXR1cm4gIXRoaXMuX19heGlzO1xufVxuXG5mdW5jdGlvbiBheGlzKG9yaWVudCwgc2NhbGUpIHtcbiAgdmFyIHRpY2tBcmd1bWVudHMgPSBbXSxcbiAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgdGlja0Zvcm1hdCA9IG51bGwsXG4gICAgICB0aWNrU2l6ZUlubmVyID0gNixcbiAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgdGlja1BhZGRpbmcgPSAzLFxuICAgICAgayA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gbGVmdCA/IC0xIDogMSxcbiAgICAgIHggPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/IFwieFwiIDogXCJ5XCIsXG4gICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZO1xuXG4gIGZ1bmN0aW9uIGF4aXMoY29udGV4dCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICBmb3JtYXQgPSB0aWNrRm9ybWF0ID09IG51bGwgPyAoc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkpIDogdGlja0Zvcm1hdCxcbiAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgIHJhbmdlID0gc2NhbGUucmFuZ2UoKSxcbiAgICAgICAgcmFuZ2UwID0gK3JhbmdlWzBdICsgMC41LFxuICAgICAgICByYW5nZTEgPSArcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV0gKyAwLjUsXG4gICAgICAgIHBvc2l0aW9uID0gKHNjYWxlLmJhbmR3aWR0aCA/IGNlbnRlciA6IG51bWJlcikoc2NhbGUuY29weSgpKSxcbiAgICAgICAgc2VsZWN0aW9uID0gY29udGV4dC5zZWxlY3Rpb24gPyBjb250ZXh0LnNlbGVjdGlvbigpIDogY29udGV4dCxcbiAgICAgICAgcGF0aCA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIuZG9tYWluXCIpLmRhdGEoW251bGxdKSxcbiAgICAgICAgdGljayA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIudGlja1wiKS5kYXRhKHZhbHVlcywgc2NhbGUpLm9yZGVyKCksXG4gICAgICAgIHRpY2tFeGl0ID0gdGljay5leGl0KCksXG4gICAgICAgIHRpY2tFbnRlciA9IHRpY2suZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIiksXG4gICAgICAgIGxpbmUgPSB0aWNrLnNlbGVjdChcImxpbmVcIiksXG4gICAgICAgIHRleHQgPSB0aWNrLnNlbGVjdChcInRleHRcIik7XG5cbiAgICBwYXRoID0gcGF0aC5tZXJnZShwYXRoLmVudGVyKCkuaW5zZXJ0KFwicGF0aFwiLCBcIi50aWNrXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb21haW5cIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIikpO1xuXG4gICAgdGljayA9IHRpY2subWVyZ2UodGlja0VudGVyKTtcblxuICAgIGxpbmUgPSBsaW5lLm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpKTtcblxuICAgIHRleHQgPSB0ZXh0Lm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKVxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLmF0dHIoXCJkeVwiLCBvcmllbnQgPT09IHRvcCA/IFwiMGVtXCIgOiBvcmllbnQgPT09IGJvdHRvbSA/IFwiMC43MWVtXCIgOiBcIjAuMzJlbVwiKSk7XG5cbiAgICBpZiAoY29udGV4dCAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICBwYXRoID0gcGF0aC50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGljayA9IHRpY2sudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIGxpbmUgPSBsaW5lLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0ZXh0ID0gdGV4dC50cmFuc2l0aW9uKGNvbnRleHQpO1xuXG4gICAgICB0aWNrRXhpdCA9IHRpY2tFeGl0LnRyYW5zaXRpb24oY29udGV4dClcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBpc0Zpbml0ZShkID0gcG9zaXRpb24oZCkpID8gdHJhbnNmb3JtKGQpIDogdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7IH0pO1xuXG4gICAgICB0aWNrRW50ZXJcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHZhciBwID0gdGhpcy5wYXJlbnROb2RlLl9fYXhpczsgcmV0dXJuIHRyYW5zZm9ybShwICYmIGlzRmluaXRlKHAgPSBwKGQpKSA/IHAgOiBwb3NpdGlvbihkKSk7IH0pO1xuICAgIH1cblxuICAgIHRpY2tFeGl0LnJlbW92ZSgpO1xuXG4gICAgcGF0aFxuICAgICAgICAuYXR0cihcImRcIiwgb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PSByaWdodFxuICAgICAgICAgICAgPyAodGlja1NpemVPdXRlciA/IFwiTVwiICsgayAqIHRpY2tTaXplT3V0ZXIgKyBcIixcIiArIHJhbmdlMCArIFwiSDAuNVZcIiArIHJhbmdlMSArIFwiSFwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk0wLjUsXCIgKyByYW5nZTAgKyBcIlZcIiArIHJhbmdlMSlcbiAgICAgICAgICAgIDogKHRpY2tTaXplT3V0ZXIgPyBcIk1cIiArIHJhbmdlMCArIFwiLFwiICsgayAqIHRpY2tTaXplT3V0ZXIgKyBcIlYwLjVIXCIgKyByYW5nZTEgKyBcIlZcIiArIGsgKiB0aWNrU2l6ZU91dGVyIDogXCJNXCIgKyByYW5nZTAgKyBcIiwwLjVIXCIgKyByYW5nZTEpKTtcblxuICAgIHRpY2tcbiAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHRyYW5zZm9ybShwb3NpdGlvbihkKSk7IH0pO1xuXG4gICAgbGluZVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKTtcblxuICAgIHRleHRcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC50ZXh0KGZvcm1hdCk7XG5cbiAgICBzZWxlY3Rpb24uZmlsdGVyKGVudGVyaW5nKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDEwKVxuICAgICAgICAuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwic2Fucy1zZXJpZlwiKVxuICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIG9yaWVudCA9PT0gcmlnaHQgPyBcInN0YXJ0XCIgOiBvcmllbnQgPT09IGxlZnQgPyBcImVuZFwiIDogXCJtaWRkbGVcIik7XG5cbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7IHRoaXMuX19heGlzID0gcG9zaXRpb247IH0pO1xuICB9XG5cbiAgYXhpcy5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZSA9IF8sIGF4aXMpIDogc2NhbGU7XG4gIH07XG5cbiAgYXhpcy50aWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aWNrQXJndW1lbnRzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLCBheGlzO1xuICB9O1xuXG4gIGF4aXMudGlja0FyZ3VtZW50cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrQXJndW1lbnRzID0gXyA9PSBudWxsID8gW10gOiBzbGljZS5jYWxsKF8pLCBheGlzKSA6IHRpY2tBcmd1bWVudHMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tWYWx1ZXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1ZhbHVlcyA9IF8gPT0gbnVsbCA/IG51bGwgOiBzbGljZS5jYWxsKF8pLCBheGlzKSA6IHRpY2tWYWx1ZXMgJiYgdGlja1ZhbHVlcy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrRm9ybWF0ID0gXywgYXhpcykgOiB0aWNrRm9ybWF0O1xuICB9O1xuXG4gIGF4aXMudGlja1NpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9IHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplT3V0ZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrUGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrUGFkZGluZyA9ICtfLCBheGlzKSA6IHRpY2tQYWRkaW5nO1xuICB9O1xuXG4gIHJldHVybiBheGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1RvcChzY2FsZSkge1xuICByZXR1cm4gYXhpcyh0b3AsIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNSaWdodChzY2FsZSkge1xuICByZXR1cm4gYXhpcyhyaWdodCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0JvdHRvbShzY2FsZSkge1xuICByZXR1cm4gYXhpcyhib3R0b20sIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNMZWZ0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGxlZnQsIHNjYWxlKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qXG4gICAgRGVuZHJvZ3JhbSB2aXN1YWxpemVzIGEgdGV4dC1iYXNlZCBOZXdpY2sgdHJlZSB1c2luZyBEMyBWNS5cblxuICAgIGRlcGVuZGVuY2llczpcbiAgICBkMyB2NVxuICAgIHRoZSBuZXdpY2sgcGFyc2VyOiBuZXdpY2suanNcblxuICAgIHJlZmVyZW5jZXM6XG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLWhpZXJhcmNoeVxuICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNvbmRhdmllcy9uZXdpY2suanMvXG5cbiAgICBub3RlcyBvbiB0aGUgdW5kZXJseWluZyBkYXRhIHN0cnVjdHVyZXM6XG4gICAgLSBpdCB1c2VzIHBhcnNlTmV3aWNrKCkgdG8gY29udmVydCB0aGUgbmV3aWNrIHRyZWUgaW50byB0aGUgZm9sbG93aW5nIGpzb246XG4gICAgICAgIHtcbiAgICAgICAgICAgIGJyYW5jaHNldDpbY2hpbGQgbm9kZSBqc29uIG9iamVjdHNdLFxuICAgICAgICAgICAgbmFtZTogXCJcIiAvLyBpbnRlcm5hbCBub2RlcyB3b3VsZCBoYXZlIG5vIHJlYWwgbGFiZWxzXG4gICAgICAgIH1cbiAgICAgICBUaGlzIGpzb24gc3RydWN0dXJlIGlzIHRoZSBpbnB1dCBkYXRhIG9mIGQzLmhpZXJhcmNoeSgpXG5cbiAgICAtIEluIHRoZSBkMy5oaWVyYXJjaHkoKSwgdGhlIHJvb3Qgbm9kZSBvYmplY3QgaGFzIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuICAgICAgICB7XG4gICAgICAgICAgICBjaGlsZHJlbjogW2NvLCBjb10sXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgYnJhbmNoc2V0OiBBcnJheSgyKSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5vZGUgbmFtZVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVwdGg6IDAsXG4gICAgICAgICAgICBoZWlnaHQ6IGludGVnZXIsXG4gICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZTogOVxuICAgICAgICB9XG4gKi9cblxuLy8gVE9ETzogZWxpbWluYXRlIGhhcmQtY29kZWQgdmFsdWVzXG5cbmltcG9ydCB7aGllcmFyY2h5fSBmcm9tIFwiZDMtaGllcmFyY2h5XCI7XG5pbXBvcnQge2FzY2VuZGluZ30gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2F4aXNCb3R0b20sIGF4aXNMZWZ0fSBmcm9tIFwiZDMtYXhpc1wiO1xuaW1wb3J0IHtzY2FsZUxpbmVhciwgc2NhbGVCYW5kfSBmcm9tIFwiZDMtc2NhbGVcIjtcbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3BhcnNlTmV3aWNrfSBmcm9tIFwiLi4vdXRpbHMvbmV3aWNrXCI7XG5jb25zdCB2ZXJib3NlID0gZmFsc2U7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZW5kcm9ncmFtIHtcbiAgICBjb25zdHJ1Y3RvcihuZXdpY2ssIG9yaWVudGF0aW9uPVwiaFwiKXtcbiAgICAgICAgdGhpcy5uZXdpY2sgPSBuZXdpY2s7XG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcbiAgICAgICAgdGhpcy5wb3N0b3JkZXIgPSBbXTtcbiAgICAgICAgdGhpcy5yb290ID0gaGllcmFyY2h5KHBhcnNlTmV3aWNrKG5ld2ljayksIChkKSA9PiBkLmJyYW5jaHNldClcbiAgICAgICAgICAgIC5zdW0oKGQpPT5kLmJyYW5jaHNldD8wOjEpXG4gICAgICAgICAgICAuc29ydCgoYSxiKT0+YS52YWx1ZS1iLnZhbHVlfHxhLmRhdGEubGVuZ3RoLWIuZGF0YS5sZW5ndGgpO1xuICAgICAgICB0aGlzLmxlYXZlcyA9IHRoaXMucm9vdC5sZWF2ZXMoKS5zb3J0KChhLCBiKSA9PiAoYS52YWx1ZSAtIGIudmFsdWUpIHx8IGFzY2VuZGluZyhhLmRhdGEubGVuZ3RoLCBiLmRhdGEubGVuZ3RoKSk7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnhTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy55U2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZHJhdyhkb20sIHdpZHRoLCBoZWlnaHQpe1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLl9zZXRYU2NhbGUoKTtcbiAgICAgICAgdGhpcy5fc2V0WVNjYWxlKCk7XG4gICAgICAgIGlmIChcImhcIiA9PSB0aGlzLm9yaWVudGF0aW9uKSB0aGlzLl9kcmF3SFRyZWUoZG9tKTtcbiAgICAgICAgZWxzZSB0aGlzLl9kcmF3VlRyZWUoZG9tKTtcbiAgICB9XG5cbiAgICAvLy8vLy8vIHByaXZhdGUgbWV0aG9kcyAvLy8vLy8vXG5cbiAgICBfZHJhd0hUcmVlKGRvbSl7XG4gICAgICAgIGNvbnN0IHNldFkgPSAobm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGEgbGVhZiBub2RlXG4gICAgICAgICAgICAgICAgbm9kZS55ID0gdGhpcy55U2NhbGUobm9kZS5kYXRhLm5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhbiBpbnRlcm5hbCBub2RlXG4gICAgICAgICAgICAgICAgLy8gdGhlIHkgY29vcmRpbmF0ZSBvZiBhbiBpbnRlcm5hbCBub2RlIGlzIHRoZSBhdmVyYWdlIHkgZnJvbSBpdHMgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBub2RlLnkgPSBub2RlLmNoaWxkcmVuLnJlZHVjZSgoc3VtLCBkKT0+c3VtK2QueSwgMCkvbm9kZS5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNldFggPSAobm9kZSkgPT4ge1xuICAgICAgICAgICAgbm9kZS54ID0gdGhpcy54U2NhbGUodGhpcy5fZ2V0QnJhbmNoTGVuZ3RoVG9Sb290KG5vZGUpKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBmcm9tIHRoZSBsZWFmIGxldmVsIC0+IHJvb3RcbiAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLl9zb3J0Tm9kZXNCeUxldmVsKCk7XG4gICAgICAgIG5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIHNldFgobm9kZSk7XG4gICAgICAgICAgICBzZXRZKG5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmJyYW5jaFwiKVxuICAgICAgICAgICAgLmRhdGEobm9kZXMpXG4gICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLngpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLmRhdGEubGVuZ3RoP2QueCAtIHRoaXMueFNjYWxlKGQuZGF0YS5sZW5ndGgpOmQueClcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpID0+IGQueSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIChkKSA9PiBkLnkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJncmF5XCIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKTtcblxuICAgICAgICAvLyBmb3IgYWxsIGludGVybmFsIG5vZGVzXG4gICAgICAgIGNvbnN0IGlub2RlcyA9IHRoaXMucm9vdC5kZXNjZW5kYW50cygpLmZpbHRlcigoZCk9PmQuaGVpZ2h0KS5zb3J0KChhLGIpPT5iLmhlaWdodC1hLmhlaWdodCk7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIuYXJtXCIpXG4gICAgICAgICAgICAuZGF0YShpbm9kZXMpXG4gICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLngpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLngpXG4gICAgICAgICAgICAuYXR0cihcInkxXCIsIChkKSA9PiBkLmNoaWxkcmVuWzBdLnkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCAoZCkgPT4gZC5jaGlsZHJlblsxXS55ICsgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiZ3JheVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMSk7XG5cbiAgICAgICAgZG9tLnNlbGVjdEFsbChcIi5ub2RlXCIpXG4gICAgICAgICAgICAuZGF0YShpbm9kZXMpXG4gICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IGQueClcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKGQpID0+IGQueSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgMilcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiMzMzNcIilcbiAgICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAwLjUpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZGVuZHJvZ3JhbS1ub2RlXCIpXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmF0dHIoXCJyXCIsIDMpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGQubGVhdmVzKCkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmF0dHIoXCJyXCIsIDIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYXhpc1xuICAgICAgICAvLyBBZGQgdGhlIHggQXhpc1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRlbmRyb2dyYW0tYXhpc1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIHRoaXMuaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgICAuY2FsbChcbiAgICAgICAgICAgICAgICBheGlzQm90dG9tKHRoaXMueFNjYWxlKVxuICAgICAgICAgICAgICAgICAgICAudGlja3MoMylcbiAgICAgICAgICAgICAgICAvLyAudGlja1ZhbHVlcyhbTWF0aC5mbG9vcih0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKS8yKSwgTWF0aC5mbG9vcih0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKSldKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBfc29ydE5vZGVzQnlMZXZlbCgpe1xuICAgICAgICAvLyByZXR1cm5zIGEgbGlzdCBvZiBub2RlcyBvcmRlcmVkIGJ5IGFuY2VzdHJhbCBsZXZlbCwgdGhlbiBieSBicmFuY2ggbGVuZ3RoXG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QuZGVzY2VuZGFudHMoKS5zb3J0KChhLCBiKSA9PiAoYS5oZWlnaHQgLSBiLmhlaWdodCkgfHwgYXNjZW5kaW5nKGEuZGF0YS5sZW5ndGgsIGIuZGF0YS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICBfZHJhd1ZUcmVlKGRvbSl7XG4gICAgICAgIGNvbnN0IHNldFggPSAobm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGEgbGVhZiBub2RlXG4gICAgICAgICAgICAgICAgbm9kZS54ID0gdGhpcy54U2NhbGUobm9kZS5kYXRhLm5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhbiBpbnRlcm5hbCBub2RlXG4gICAgICAgICAgICAgICAgLy8gdGhlIHkgY29vcmRpbmF0ZSBvZiBhbiBpbnRlcm5hbCBub2RlIGlzIHRoZSBhdmVyYWdlIHkgZnJvbSBpdHMgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBub2RlLnggPSBub2RlLmNoaWxkcmVuLnJlZHVjZSgoc3VtLCBkKT0+c3VtK2QueCwgMCkvbm9kZS5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNldFkgPSAobm9kZSkgPT4ge1xuICAgICAgICAgICAgbm9kZS55ID0gdGhpcy55U2NhbGUodGhpcy5fZ2V0QnJhbmNoTGVuZ3RoVG9Sb290KG5vZGUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZnJvbSB0aGUgbGVhZiBsZXZlbCAtPiByb290XG4gICAgICAgIGNvbnN0IG5vZGVzID0gdGhpcy5fc29ydE5vZGVzQnlMZXZlbCgpO1xuICAgICAgICBub2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICBzZXRYKG5vZGUpO1xuICAgICAgICAgICAgc2V0WShub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIuYnJhbmNoXCIpXG4gICAgICAgICAgICAuZGF0YShub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpID0+IGQueSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgKGQpID0+IGQuZGF0YS5sZW5ndGg/ZC55IC0gdGhpcy55U2NhbGUoZC5kYXRhLmxlbmd0aCk6ZC55KVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCAoZCkgPT4gZC54ICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgKGQpID0+IGQueCArIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImdyYXlcIilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEpO1xuXG4gICAgICAgIC8vIGZvciBhbGwgaW50ZXJuYWwgbm9kZXNcbiAgICAgICAgY29uc3QgaW5vZGVzID0gdGhpcy5yb290LmRlc2NlbmRhbnRzKCkuZmlsdGVyKChkKT0+ZC5oZWlnaHQpLnNvcnQoKGEsYik9PmIuaGVpZ2h0LWEuaGVpZ2h0KTtcbiAgICAgICAgZG9tLnNlbGVjdEFsbChcIi5hcm1cIilcbiAgICAgICAgICAgIC5kYXRhKGlub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpID0+IGQueSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgKGQpID0+IGQueSlcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgKGQpID0+IGQuY2hpbGRyZW5bMF0ueCArIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLmNoaWxkcmVuWzFdLnggKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJncmF5XCIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKTtcblxuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLm5vZGVcIilcbiAgICAgICAgICAgIC5kYXRhKGlub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCkgPT4gZC54ICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKGQpID0+IGQueSlcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKVxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzMzM1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDAuNSlcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkZW5kcm9ncmFtLW5vZGVcIilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QodGhpcykuYXR0cihcInJcIiwgMyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZC5sZWF2ZXMoKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QodGhpcykuYXR0cihcInJcIiwgMik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBheGlzXG4gICAgICAgIC8vIEFkZCB0aGUgeCBBeGlzXG4gICAgICAgIGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAvLyAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7dGhpcy53aWR0aH0sIDApYClcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkZW5kcm9ncmFtLWF4aXNcIilcbiAgICAgICAgICAgIC5jYWxsKFxuICAgICAgICAgICAgICAgIGF4aXNMZWZ0KHRoaXMueVNjYWxlKVxuICAgICAgICAgICAgICAgICAgICAudGlja3MoMylcbiAgICAgICAgICAgICAgICAvLyAudGlja1ZhbHVlcyhbTWF0aC5mbG9vcih0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKS8yKSwgTWF0aC5mbG9vcih0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKSldKVxuICAgICAgICAgICAgKTtcblxuICAgIH1cblxuICAgIF9nZXRCcmFuY2hMZW5ndGhUb1Jvb3Qobm9kZSkge1xuICAgICAgICAvLyBub2RlOiBhIGQzLmhpZXJhcmNoeSBub2RlXG4gICAgICAgIHJldHVybiBub2RlLnBhdGgodGhpcy5yb290KVxuICAgICAgICAgICAgLnJlZHVjZSgoc3VtLCBkKSA9PiBkLmRhdGEubGVuZ3RoP3N1bStkLmRhdGEubGVuZ3RoOnN1bSwgMCk7XG4gICAgfVxuXG4gICAgX2dldE1heEJyYW5jaExlbmd0aCgpIHtcbiAgICAgICAgLy8gdGhlIGFzc3VtcHRpb24gaGVyZSBpcyB0aGF0IGFsbCBsZWFmIG5vZGVzIGhhdmUgdGhlIHNhbWUgZGlzdGFuY2UgdG8gdGhlIHJvb3QuXG4gICAgICAgIGxldCBub2RlID0gdGhpcy5sZWF2ZXNbMF07IC8vIHJhbmRvbWx5IHBpY2tzIGEgbGVhZiBub2RlXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRCcmFuY2hMZW5ndGhUb1Jvb3Qobm9kZSk7XG4gICAgfVxuXG4gICAgX2Fzc2lnblBvc3RvcmRlcihub2RlKXtcbiAgICAgICAgLy8gYXNzaWducyBwb3N0LW9yZGVyIG9mIGFsbCBsZWFmIG5vZGVzXG4gICAgICAgIGlmKG5vZGUuY2hpbGRyZW4gPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAvLyBiYXNlIGNhc2VcbiAgICAgICAgICAgIHRoaXMucG9zdG9yZGVyLnB1c2gobm9kZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Qb3N0b3JkZXIobm9kZS5jaGlsZHJlblswXSk7XG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Qb3N0b3JkZXIobm9kZS5jaGlsZHJlblsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0WFNjYWxlKCl7XG4gICAgICAgIGlmIChcImhcIiA9PSB0aGlzLm9yaWVudGF0aW9uKXtcbiAgICAgICAgICAgIHRoaXMueFNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpXSlcbiAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIHRoaXMud2lkdGhdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Fzc2lnblBvc3RvcmRlcih0aGlzLnJvb3QpO1xuICAgICAgICAgICAgaWYgKHZlcmJvc2UpIGNvbnNvbGUubG9nKHRoaXMucG9zdG9yZGVyKTtcbiAgICAgICAgICAgIHRoaXMueFNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKHRoaXMucG9zdG9yZGVyLm1hcCgoZCkgPT4gZC5kYXRhLm5hbWUpKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy53aWR0aF0pXG4gICAgICAgICAgICAgICAgLnBhZGRpbmcoLjA1KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRZU2NhbGUoKXtcbiAgICAgICAgaWYgKFwiaFwiID09IHRoaXMub3JpZW50YXRpb24pe1xuICAgICAgICAgICAgdGhpcy5fYXNzaWduUG9zdG9yZGVyKHRoaXMucm9vdCk7XG4gICAgICAgICAgICBpZiAodmVyYm9zZSkgY29uc29sZS5sb2codGhpcy5wb3N0b3JkZXIpO1xuICAgICAgICAgICAgdGhpcy55U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgIC5kb21haW4odGhpcy5wb3N0b3JkZXIubWFwKChkKSA9PiBkLmRhdGEubmFtZSkpXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCB0aGlzLmhlaWdodF0pXG4gICAgICAgICAgICAgICAgLnBhZGRpbmcoLjA1KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueVNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpXSlcbiAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIHRoaXMuaGVpZ2h0XSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCIvLyBDb3B5cmlnaHQgMjAxMSBKYXNvbiBEYXZpZXMgaHR0cHM6Ly9naXRodWIuY29tL2phc29uZGF2aWVzL25ld2ljay5qc1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VOZXdpY2socykge1xuICAgIHZhciBhbmNlc3RvcnMgPSBbXTtcbiAgICB2YXIgdHJlZSA9IHt9O1xuICAgIHZhciB0b2tlbnMgPSBzLnNwbGl0KC9cXHMqKDt8XFwofFxcKXwsfDopXFxzKi8pO1xuICAgIGZvciAodmFyIGk9MDsgaTx0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICB2YXIgc3VidHJlZSA9IHt9O1xuXG4gICAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSBcIihcIjogLy8gbmV3IGJyYW5jaHNldFxuICAgICAgICAgICAgdHJlZS5icmFuY2hzZXQgPSBbc3VidHJlZV07XG4gICAgICAgICAgICBhbmNlc3RvcnMucHVzaCh0cmVlKTtcbiAgICAgICAgICAgIHRyZWUgPSBzdWJ0cmVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCIsXCI6IC8vIGFub3RoZXIgYnJhbmNoXG4gICAgICAgICAgICBhbmNlc3RvcnNbYW5jZXN0b3JzLmxlbmd0aC0xXS5icmFuY2hzZXQucHVzaChzdWJ0cmVlKTtcbiAgICAgICAgICAgIHRyZWUgPSBzdWJ0cmVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCIpXCI6IC8vIG9wdGlvbmFsIG5hbWUgbmV4dFxuICAgICAgICAgICAgdHJlZSA9IGFuY2VzdG9ycy5wb3AoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiOlwiOiAvLyBvcHRpb25hbCBsZW5ndGggbmV4dFxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgeCA9IHRva2Vuc1tpLTFdO1xuICAgICAgICAgICAgaWYgKHggPT0gXCIpXCIgfHwgeCA9PSBcIihcIiB8fCB4ID09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgdHJlZS5uYW1lID0gdG9rZW47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHggPT0gXCI6XCIpIHtcbiAgICAgICAgICAgICAgICB0cmVlLmxlbmd0aCA9IHBhcnNlRmxvYXQodG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cmVlO1xufVxuXG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNy4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIzLTA4LTI4VDEzOjM3WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCB0cmFjLTE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgZmxhdCA9IGFyci5mbGF0ID8gZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmZsYXQuY2FsbCggYXJyYXkgKTtcbn0gOiBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuY29uY2F0LmFwcGx5KCBbXSwgYXJyYXkgKTtcbn07XG5cblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcblx0XHQvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcblx0XHQvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuXHRcdC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cblx0XHQvLyBTdXBwb3J0OiBRdFdlYiA8PTMuOC41LCBXZWJLaXQgPD01MzQuMzQsIHdraHRtbHRvcGRmIHRvb2wgPD0wLjEyLjVcblx0XHQvLyBQbHVzIGZvciBvbGQgV2ViS2l0LCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgY29sbGVjdGlvbnNcblx0XHQvLyAoZS5nLiwgYHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKSA9PT0gXCJmdW5jdGlvblwiYCkuIChnaC00NzU2KVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIiAmJlxuXHRcdFx0dHlwZW9mIG9iai5pdGVtICE9PSBcImZ1bmN0aW9uXCI7XG5cdH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhciB2ZXJzaW9uID0gXCIzLjcuMVwiLFxuXG5cdHJodG1sU3VmZml4ID0gL0hUTUwkL2ksXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cblx0Ly8gUmV0cmlldmUgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG5cdHRleHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBub2RlLFxuXHRcdFx0cmV0ID0gXCJcIixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cblx0XHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdFx0cmV0ICs9IGpRdWVyeS50ZXh0KCBub2RlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fVxuXHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kb2N1bWVudEVsZW1lbnQudGV4dENvbnRlbnQ7XG5cdFx0fVxuXHRcdGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdFx0fVxuXG5cdFx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHRpc1hNTERvYzogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWVzcGFjZSA9IGVsZW0gJiYgZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0XHRkb2NFbGVtID0gZWxlbSAmJiAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlXG5cdFx0Ly8gZG9jdW1lbnQgZnJhZ21lbnRzLlxuXHRcdHJldHVybiAhcmh0bWxTdWZmaXgudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGZsYXQoIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdFx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdH0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG5cdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59XG52YXIgcG9wID0gYXJyLnBvcDtcblxuXG52YXIgc29ydCA9IGFyci5zb3J0O1xuXG5cbnZhciBzcGxpY2UgPSBhcnIuc3BsaWNlO1xuXG5cbnZhciB3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiO1xuXG5cbnZhciBydHJpbUNTUyA9IG5ldyBSZWdFeHAoXG5cdFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsXG5cdFwiZ1wiXG4pO1xuXG5cblxuXG4vLyBOb3RlOiBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5qUXVlcnkuY29udGFpbnMgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0dmFyIGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXG5cdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExK1xuXHRcdC8vIElFIGRvZXNuJ3QgaGF2ZSBgY29udGFpbnNgIG9uIFNWRy5cblx0XHRhLmNvbnRhaW5zID9cblx0XHRcdGEuY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHQpICk7XG59O1xuXG5cblxuXG4vLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuLy8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG52YXIgcmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxceDgwLVxcdUZGRkZcXHctXS9nO1xuXG5mdW5jdGlvbiBmY3NzZXNjYXBlKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdH1cblxuXHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0fVxuXG5cdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG59XG5cbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5cblxuXG52YXIgcHJlZmVycmVkRG9jID0gZG9jdW1lbnQsXG5cdHB1c2hOYXRpdmUgPSBwdXNoO1xuXG4oIGZ1bmN0aW9uKCkge1xuXG52YXIgaSxcblx0RXhwcixcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cdHB1c2ggPSBwdXNoTmF0aXZlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0ZG9jdW1lbnQsXG5cdGRvY3VtZW50RWxlbWVudCxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0bWF0Y2hlcyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxcIiArXG5cdFx0XCJsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmxlYWRpbmdDb21iaW5hdG9yID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRJRDogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdENMQVNTOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFRBRzogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdEFUVFI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFBTRVVETzogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0Q0hJTEQ6IG5ldyBSZWdFeHAoXG5cdFx0XHRcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgK1xuXHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0Ym9vbDogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRuZWVkc0NvbnRleHQ6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRpZiAoIG5vbkhleCApIHtcblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRyZXR1cm4gbm9uSGV4O1xuXHRcdH1cblxuXHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdC8vIEZvciB2YWx1ZXMgb3V0c2lkZSB0aGUgQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIChCTVApLCBtYW51YWxseSBjb25zdHJ1Y3QgYVxuXHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0cmV0dXJuIGhpZ2ggPCAwID9cblx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lczsgc2VlIGBzZXREb2N1bWVudGAuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFL0VkZ2UuXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBub2RlTmFtZSggZWxlbSwgXCJmaWVsZHNldFwiICk7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHtcblx0XHRhcHBseTogZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0sXG5cdFx0Y2FsbDogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICkgKTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIGZpbmQoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAoIG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAoIG0gPSBtYXRjaFsgMSBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHB1c2guY2FsbCggcmVzdWx0cywgZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGZpbmQuY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHB1c2guY2FsbCggcmVzdWx0cywgZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMiBdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIG0gPSBtYXRjaFsgMyBdICkgJiYgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCAhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJsZWFkaW5nQ29tYmluYXRvci50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlblxuXHRcdFx0XHRcdC8vIHN0cmljdC1jb21wYXJpbmcgdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT0gY29udGV4dCB8fCAhc3VwcG9ydC5zY29wZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKCBuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkgKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0galF1ZXJ5LmVzY2FwZVNlbGVjdG9yKCBuaWQgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsICggbmlkID0gZXhwYW5kbyApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbIGkgXSA9ICggbmlkID8gXCIjXCIgKyBuaWQgOiBcIjpzY29wZVwiICkgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcdHRvU2VsZWN0b3IoIGdyb3Vwc1sgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllc1xuXHRcdC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvaXNzdWVzLzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IGpRdWVyeSBzZWxlY3RvciBtb2R1bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgfHwgbm9kZU5hbWUoIGVsZW0sIFwiYnV0dG9uXCIgKSApICYmXG5cdFx0XHRlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTErXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbICggaiA9IG1hdGNoSW5kZXhlc1sgaSBdICkgXSApIHtcblx0XHRcdFx0XHRzZWVkWyBqIF0gPSAhKCBtYXRjaGVzWyBqIF0gPSBzZWVkWyBqIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgalF1ZXJ5IHNlbGVjdG9yIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbbm9kZV0gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0RG9jdW1lbnQoIG5vZGUgKSB7XG5cdHZhciBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggZG9jID09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFqUXVlcnkuaXNYTUxEb2MoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogaU9TIDcgb25seSwgSUUgOSAtIDExK1xuXHQvLyBPbGRlciBicm93c2VycyBkaWRuJ3Qgc3VwcG9ydCB1bnByZWZpeGVkIGBtYXRjaGVzYC5cblx0bWF0Y2hlcyA9IGRvY3VtZW50RWxlbWVudC5tYXRjaGVzIHx8XG5cdFx0ZG9jdW1lbnRFbGVtZW50LndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY3VtZW50RWxlbWVudC5tc01hdGNoZXNTZWxlY3RvcjtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yc1xuXHQvLyAoc2VlIHRyYWMtMTM5MzYpLlxuXHQvLyBMaW1pdCB0aGUgZml4IHRvIElFICYgRWRnZSBMZWdhY3k7IGRlc3BpdGUgRWRnZSAxNSsgaW1wbGVtZW50aW5nIGBtYXRjaGVzYCxcblx0Ly8gYWxsIElFIDkrIGFuZCBFZGdlIExlZ2FjeSB2ZXJzaW9ucyBpbXBsZW1lbnQgYG1zTWF0Y2hlc1NlbGVjdG9yYCBhcyB3ZWxsLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5tc01hdGNoZXNTZWxlY3RvciAmJlxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBlbCApLmlkID0galF1ZXJ5LmV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fFxuXHRcdFx0IWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBqUXVlcnkuZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZS5cblx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdHJldHVybiBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBJRS9FZGdlIGRvbid0IHN1cHBvcnQgdGhlIDpzY29wZSBwc2V1ZG8tY2xhc3MuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZVwiICk7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBDaHJvbWUgMTA1IC0gMTExIG9ubHksIFNhZmFyaSAxNS40IC0gMTYuMyBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0aGUgYDpoYXMoKWAgYXJndW1lbnQgaXMgcGFyc2VkIHVuZm9yZ2l2aW5nbHkuXG5cdC8vIFdlIGluY2x1ZGUgYCpgIGluIHRoZSB0ZXN0IHRvIGRldGVjdCBidWdneSBpbXBsZW1lbnRhdGlvbnMgdGhhdCBhcmVcblx0Ly8gX3NlbGVjdGl2ZWx5XyBmb3JnaXZpbmcgKHNwZWNpZmljYWxseSB3aGVuIHRoZSBsaXN0IGluY2x1ZGVzIGF0IGxlYXN0XG5cdC8vIG9uZSB2YWxpZCBzZWxlY3RvcikuXG5cdC8vIE5vdGUgdGhhdCB3ZSB0cmVhdCBjb21wbGV0ZSBsYWNrIG9mIHN1cHBvcnQgZm9yIGA6aGFzKClgIGFzIGlmIGl0IHdlcmVcblx0Ly8gc3BlYy1jb21wbGlhbnQgc3VwcG9ydCwgd2hpY2ggaXMgZmluZSBiZWNhdXNlIHVzZSBvZiBgOmhhcygpYCBpbiBzdWNoXG5cdC8vIGVudmlyb25tZW50cyB3aWxsIGZhaWwgaW4gdGhlIHFTQSBwYXRoIGFuZCBmYWxsIGJhY2sgdG8galF1ZXJ5IHRyYXZlcnNhbFxuXHQvLyBhbnl3YXkuXG5cdHN1cHBvcnQuY3NzSGFzID0gYXNzZXJ0KCBmdW5jdGlvbigpIHtcblx0XHR0cnkge1xuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvciggXCI6aGFzKCosOmpxZmFrZSlcIiApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9ICk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyLklEID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmQuSUQgPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyLklEID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZC5JRCA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kLlRBRyA9IGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kLkNMQVNTID0gZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdC8vIEJ1aWxkIFFTQSByZWdleFxuXHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0dmFyIGlucHV0O1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9XG5cdFx0XHRcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIicgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIGRpc2FibGVkPSdkaXNhYmxlZCc+XCIgK1xuXHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDw9NyAtIDggb25seVxuXHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHkgaW4gc29tZSBYTUwgZG9jdW1lbnRzXG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbc2VsZWN0ZWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IGlPUyA8PTcgLSA4IG9ubHlcblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwifj1cIiApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IGlPUyA4IG9ubHlcblx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MTA1KywgRmlyZWZveCA8PTEwNCssIFNhZmFyaSA8PTE1LjQrXG5cdFx0Ly8gSW4gc29tZSBvZiB0aGUgZG9jdW1lbnQga2luZHMsIHRoZXNlIHNlbGVjdG9ycyB3b3VsZG4ndCB3b3JrIG5hdGl2ZWx5LlxuXHRcdC8vIFRoaXMgaXMgcHJvYmFibHkgT0sgYnV0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3ZSB3YW50IHRvIG1haW50YWluXG5cdFx0Ly8gaGFuZGxpbmcgdGhlbSB0aHJvdWdoIGpRdWVyeSB0cmF2ZXJzYWwgaW4galF1ZXJ5IDMueC5cblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0xMDUrLCBGaXJlZm94IDw9MTA0KywgU2FmYXJpIDw9MTUuNCtcblx0XHQvLyBJbiBzb21lIG9mIHRoZSBkb2N1bWVudCBraW5kcywgdGhlc2Ugc2VsZWN0b3JzIHdvdWxkbid0IHdvcmsgbmF0aXZlbHkuXG5cdFx0Ly8gVGhpcyBpcyBwcm9iYWJseSBPSyBidXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdlIHdhbnQgdG8gbWFpbnRhaW5cblx0XHQvLyBoYW5kbGluZyB0aGVtIHRocm91Z2ggalF1ZXJ5IHRyYXZlcnNhbCBpbiBqUXVlcnkgMy54LlxuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpkaXNhYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFIDExL0VkZ2UgZG9uJ3QgZmluZCBlbGVtZW50cyBvbiBhIGBbbmFtZT0nJ11gIHF1ZXJ5IGluIHNvbWUgY2FzZXMuXG5cdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIElFIDEwICYgb2xkZXIgZG9uJ3Qgc2VlbSB0byBoYXZlIHRoZSBpc3N1ZS5cblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0fVxuXHR9ICk7XG5cblx0aWYgKCAhc3VwcG9ydC5jc3NIYXMgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgMTA1IC0gMTEwKywgU2FmYXJpIDE1LjQgLSAxNi4zK1xuXHRcdC8vIE91ciByZWd1bGFyIGB0cnktY2F0Y2hgIG1lY2hhbmlzbSBmYWlscyB0byBkZXRlY3QgbmF0aXZlbHktdW5zdXBwb3J0ZWRcblx0XHQvLyBwc2V1ZG8tY2xhc3NlcyBpbnNpZGUgYDpoYXMoKWAgKHN1Y2ggYXMgYDpoYXMoOmNvbnRhaW5zKFwiRm9vXCIpKWApXG5cdFx0Ly8gaW4gYnJvd3NlcnMgdGhhdCBwYXJzZSB0aGUgYDpoYXMoKWAgYXJndW1lbnQgYXMgYSBmb3JnaXZpbmcgc2VsZWN0b3IgbGlzdC5cblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLyNyZWxhdGlvbmFsIG5vdyByZXF1aXJlcyB0aGUgYXJndW1lbnRcblx0XHQvLyB0byBiZSBwYXJzZWQgdW5mb3JnaXZpbmdseSwgYnV0IGJyb3dzZXJzIGhhdmUgbm90IHlldCBmdWxseSBhZGp1c3RlZC5cblx0XHRyYnVnZ3lRU0EucHVzaCggXCI6aGFzXCIgKTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGZpbmQuY29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0ZmluZC5jb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZi5jYWxsKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn1cblxuZmluZC5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gZmluZCggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cbmZpbmQubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZmluZCggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cbmZpbmQuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5cbmZpbmQuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgdHJhYy0xMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdGlmICggdmFsICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xufTtcblxuZmluZC5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5qUXVlcnkudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHQvL1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wK1xuXHQvLyBUZXN0aW5nIGZvciBkZXRlY3RpbmcgZHVwbGljYXRlcyBpcyB1bnByZWRpY3RhYmxlIHNvIGluc3RlYWQgYXNzdW1lIHdlIGNhbid0XG5cdC8vIGRlcGVuZCBvbiBkdXBsaWNhdGUgZGV0ZWN0aW9uIGluIGFsbCBicm93c2VycyB3aXRob3V0IGEgc3RhYmxlIHNvcnQuXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LnNvcnRTdGFibGU7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgc2xpY2UuY2FsbCggcmVzdWx0cywgMCApO1xuXHRzb3J0LmNhbGwoIHJlc3VsdHMsIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0c3BsaWNlLmNhbGwoIHJlc3VsdHMsIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxualF1ZXJ5LmZuLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkudW5pcXVlU29ydCggc2xpY2UuYXBwbHkoIHRoaXMgKSApICk7XG59O1xuXG5FeHByID0galF1ZXJ5LmV4cHIgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0QVRUUjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWyAzIF0gPSAoIG1hdGNoWyAzIF0gfHwgbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCIgKVxuXHRcdFx0XHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdENISUxEOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAxIF0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRcdGZpbmQuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApXG5cdFx0XHRcdCk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdGZpbmQuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRQU0VVRE86IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHIuQ0hJTEQudGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFRBRzogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgZXhwZWN0ZWROb2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGVsZW0sIGV4cGVjdGVkTm9kZU5hbWUgKTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0Q0xBU1M6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgK1xuXHRcdFx0XHRcdFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdChcblx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0QVRUUjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IGZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIj1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ID09PSBjaGVjaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIiE9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdCAhPT0gY2hlY2s7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCJePVwiICkge1xuXHRcdFx0XHRcdHJldHVybiBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIio9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCIkPVwiICkge1xuXHRcdFx0XHRcdHJldHVybiBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2s7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRcdHJldHVybiAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKVxuXHRcdFx0XHRcdFx0LmluZGV4T2YoIGNoZWNrICkgPiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcInw9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRDSElMRDogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIF9hcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGVOYW1lKCBub2RlLCBuYW1lICkgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBwYXJlbnRbIGV4cGFuZG8gXSB8fCAoIHBhcmVudFsgZXhwYW5kbyBdID0ge30gKTtcblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSBvdXRlckNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZU5hbWUoIG5vZGUsIG5hbWUgKSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRQU0VVRE86IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRmaW5kLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgalF1ZXJ5IGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mLmNhbGwoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0bm90OiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnRcblx0XHRcdFx0XHQvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL2lzc3Vlcy8yOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdGhhczogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBmaW5kKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdGNvbnRhaW5zOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBqUXVlcnkudGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdGxhbmc6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRmaW5kLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdHRhcmdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0cm9vdDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0sXG5cblx0XHRmb2N1czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJlxuXHRcdFx0XHRkb2N1bWVudC5oYXNGb2N1cygpICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdGVuYWJsZWQ6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdGRpc2FibGVkOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0Y2hlY2tlZDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHRyZXR1cm4gKCBub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lKCBlbGVtLCBcIm9wdGlvblwiICkgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdHNlbGVjdGVkOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuXHRcdFx0Ly8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHRyZWF0IHRoZSBkZWZhdWx0IG9wdGlvbiBhc1xuXHRcdFx0Ly8gc2VsZWN0ZWQgd2hlbiBpbiBhbiBvcHRncm91cC5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRlbXB0eTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvcy5lbXB0eSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0aGVhZGVyOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0aW5wdXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRidXR0b246IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHxcblx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiYnV0dG9uXCIgKTtcblx0XHR9LFxuXG5cdFx0dGV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgJiYgZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDwxMCBvbmx5XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXJcblx0XHRcdFx0Ly8gd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0Zmlyc3Q6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0gKSxcblxuXHRcdGxhc3Q6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0ZXE6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdGV2ZW46IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRvZGQ6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRsdDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpO1xuXG5cdFx0XHRpZiAoIGFyZ3VtZW50IDwgMCApIHtcblx0XHRcdFx0aSA9IGFyZ3VtZW50ICsgbGVuZ3RoO1xuXHRcdFx0fSBlbHNlIGlmICggYXJndW1lbnQgPiBsZW5ndGggKSB7XG5cdFx0XHRcdGkgPSBsZW5ndGg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpID0gYXJndW1lbnQ7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRndDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApXG5cdH1cbn07XG5cbkV4cHIucHNldWRvcy5udGggPSBFeHByLnBzZXVkb3MuZXE7XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxuZnVuY3Rpb24gdG9rZW5pemUoIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJsZWFkaW5nQ29tYmluYXRvci5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdGlmICggcGFyc2VPbmx5ICkge1xuXHRcdHJldHVybiBzb0Zhci5sZW5ndGg7XG5cdH1cblxuXHRyZXR1cm4gc29GYXIgP1xuXHRcdGZpbmQuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufVxuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBub2RlTmFtZSggZWxlbSwgc2tpcCApICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSBvdXRlckNhY2hlWyBrZXkgXSApICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggbmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGZpbmQoIHNlbGVjdG9yLCBjb250ZXh0c1sgaSBdLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sIG1hdGNoZXJPdXQsXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHxcblx0XHRcdFx0bXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsXG5cdFx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcztcblxuXHRcdGlmICggbWF0Y2hlciApIHtcblxuXHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXJcblx0XHRcdC8vIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRtYXRjaGVyT3V0ID0gcG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdHJlc3VsdHM7XG5cblx0XHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlckluO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZi5jYWxsKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnRcblx0XHRcdC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvaXNzdWVzLzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApXG5cdFx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmQuVEFHKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IGlPUyA8PTcgLSA5IG9ubHlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZ1xuXHRcdFx0Ly8gZWxlbWVudHMgYnkgaWQuIChzZWUgdHJhYy0xNDE0Milcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRwdXNoLmNhbGwoIHJlc3VsdHMsIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSApICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gc2V0TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKCB1bm1hdGNoZWRbIGkgXSB8fCBzZXRNYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkWyBpIF0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBqUXVlcnkncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIGpRdWVyeSBzZWxlY3RvciBjb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuZnVuY3Rpb24gc2VsZWN0KCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDEgXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZC5JRChcblx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdGNvbnRleHRcblx0XHRcdCkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwci5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiZcblx0XHRcdFx0XHRcdHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgLSA0LjErXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIC0gNC4xK1xuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApICkgJiAxO1xufSApO1xuXG5qUXVlcnkuZmluZCA9IGZpbmQ7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWUgPSBqUXVlcnkudW5pcXVlU29ydDtcblxuLy8gVGhlc2UgaGF2ZSBhbHdheXMgYmVlbiBwcml2YXRlLCBidXQgdGhleSB1c2VkIHRvIGJlIGRvY3VtZW50ZWQgYXMgcGFydCBvZlxuLy8gU2l6emxlIHNvIGxldCdzIG1haW50YWluIHRoZW0gZm9yIG5vdyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcHVycG9zZXMuXG5maW5kLmNvbXBpbGUgPSBjb21waWxlO1xuZmluZC5zZWxlY3QgPSBzZWxlY3Q7XG5maW5kLnNldERvY3VtZW50ID0gc2V0RG9jdW1lbnQ7XG5maW5kLnRva2VuaXplID0gdG9rZW5pemU7XG5cbmZpbmQuZXNjYXBlID0galF1ZXJ5LmVzY2FwZVNlbGVjdG9yO1xuZmluZC5nZXRUZXh0ID0galF1ZXJ5LnRleHQ7XG5maW5kLmlzWE1MID0galF1ZXJ5LmlzWE1MRG9jO1xuZmluZC5zZWxlY3RvcnMgPSBqUXVlcnkuZXhwcjtcbmZpbmQuc3VwcG9ydCA9IGpRdWVyeS5zdXBwb3J0O1xuZmluZC51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZVNvcnQ7XG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG59ICkoKTtcblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAodHJhYy05NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAodHJhYy0xMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8galF1ZXJ5I2ZpbmRcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5lcnJvciApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBlcnJvciwgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRFcnJvckhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLmVycm9yID0galF1ZXJ5LkRlZmVycmVkLmdldEVycm9ySG9vaygpO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVGhlIGRlcHJlY2F0ZWQgYWxpYXMgb2YgdGhlIGFib3ZlLiBXaGlsZSB0aGUgbmFtZSBzdWdnZXN0c1xuXHRcdFx0XHRcdFx0XHRcdC8vIHJldHVybmluZyB0aGUgc3RhY2ssIG5vdCBhbiBlcnJvciBpbnN0YW5jZSwgalF1ZXJ5IGp1c3QgcGFzc2VzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gaXQgZGlyZWN0bHkgdG8gYGNvbnNvbGUud2FybmAgc28gYm90aCB3aWxsIHdvcms7IGFuIGluc3RhbmNlXG5cdFx0XHRcdFx0XHRcdFx0Ly8ganVzdCBiZXR0ZXIgY29vcGVyYXRlcyB3aXRoIHNvdXJjZSBtYXBzLlxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLmVycm9yID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIHByaW1hcnkgRGVmZXJyZWRcblx0XHRcdHByaW1hcnkgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0cHJpbWFyeS5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgcHJpbWFyeS5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBwcmltYXJ5LnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIHByaW1hcnkuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHByaW1hcnkudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgcHJpbWFyeS5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJpbWFyeS5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbi8vIElmIGBqUXVlcnkuRGVmZXJyZWQuZ2V0RXJyb3JIb29rYCBpcyBkZWZpbmVkLCBgYXN5bmNFcnJvcmAgaXMgYW4gZXJyb3Jcbi8vIGNhcHR1cmVkIGJlZm9yZSB0aGUgYXN5bmMgYmFycmllciB0byBnZXQgdGhlIG9yaWdpbmFsIGVycm9yIGNhdXNlXG4vLyB3aGljaCBtYXkgb3RoZXJ3aXNlIGJlIGhpZGRlbi5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBhc3luY0Vycm9yICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSxcblx0XHRcdGVycm9yLnN0YWNrLCBhc3luY0Vycm9yICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSB0cmFjLTY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAodHJhYy05NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgdHJhYy04MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAodHJhYy0xNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAodHJhYy0xMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKHRyYWMtMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKHRyYWMtMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICh0cmFjLTE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAodHJhYy0xMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXIgcnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKHRyYWMtMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICh0cmFjLTY5MTEsIHRyYWMtODE2NSwgdHJhYy0xMTM4MiwgdHJhYy0xMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICh0cmFjLTEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGlzU2V0dXAgKSB7XG5cblx0Ly8gTWlzc2luZyBgaXNTZXR1cGAgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFpc1NldHVwICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHRpZiAoICFzYXZlZCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZ1xuXHRcdFx0XHQvLyB0aGUgbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblx0XHRcdFx0XHRzYXZlZFsgMCBdLFxuXHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHQpICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudCBieSBhbGwgalF1ZXJ5IGhhbmRsZXJzIHdoaWxlIGFsbG93aW5nXG5cdFx0XHRcdC8vIG5hdGl2ZSBoYW5kbGVycyBvbiB0aGUgc2FtZSBlbGVtZW50IHRvIHJ1bi4gT24gdGFyZ2V0LCB0aGlzIGlzIGFjaGlldmVkXG5cdFx0XHRcdC8vIGJ5IHN0b3BwaW5nIGltbWVkaWF0ZSBwcm9wYWdhdGlvbiBqdXN0IG9uIHRoZSBqUXVlcnkgZXZlbnQuIEhvd2V2ZXIsXG5cdFx0XHRcdC8vIHRoZSBuYXRpdmUgZXZlbnQgaXMgcmUtd3JhcHBlZCBieSBhIGpRdWVyeSBvbmUgb24gZWFjaCBsZXZlbCBvZiB0aGVcblx0XHRcdFx0Ly8gcHJvcGFnYXRpb24gc28gdGhlIG9ubHkgd2F5IHRvIHN0b3AgaXQgZm9yIGpRdWVyeSBpcyB0byBzdG9wIGl0IGZvclxuXHRcdFx0XHQvLyBldmVyeW9uZSB2aWEgbmF0aXZlIGBzdG9wUHJvcGFnYXRpb24oKWAuIFRoaXMgaXMgbm90IGEgcHJvYmxlbSBmb3Jcblx0XHRcdFx0Ly8gZm9jdXMvYmx1ciB3aGljaCBkb24ndCBidWJibGUsIGJ1dCBpdCBkb2VzIGFsc28gc3RvcCBjbGljayBvbiBjaGVja2JveGVzXG5cdFx0XHRcdC8vIGFuZCByYWRpb3MuIFdlIGFjY2VwdCB0aGlzIGxpbWl0YXRpb24uXG5cdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAodHJhYy01MDQsIHRyYWMtMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblx0d2hpY2g6IHRydWVcbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cblx0ZnVuY3Rpb24gZm9jdXNNYXBwZWRIYW5kbGVyKCBuYXRpdmVFdmVudCApIHtcblx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgZm9jdXNpbi9mb2N1c291dCBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzXG5cdFx0XHQvLyBmb2N1cy9ibHVyLiBUaGlzIGlzIGJlY2F1c2UgdGhlIGZvcm1lciBhcmUgc3luY2hyb25vdXMgaW4gSUUgd2hpbGUgdGhlIGxhdHRlclxuXHRcdFx0Ly8gYXJlIGFzeW5jLiBJbiBvdGhlciBicm93c2VycywgYWxsIHRob3NlIGhhbmRsZXJzIGFyZSBpbnZva2VkIHN5bmNocm9ub3VzbHkuXG5cblx0XHRcdC8vIGBoYW5kbGVgIGZyb20gcHJpdmF0ZSBkYXRhIHdvdWxkIGFscmVhZHkgd3JhcCB0aGUgZXZlbnQsIGJ1dCB3ZSBuZWVkXG5cdFx0XHQvLyB0byBjaGFuZ2UgdGhlIGB0eXBlYCBoZXJlLlxuXHRcdFx0dmFyIGhhbmRsZSA9IGRhdGFQcml2LmdldCggdGhpcywgXCJoYW5kbGVcIiApLFxuXHRcdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cdFx0XHRldmVudC50eXBlID0gbmF0aXZlRXZlbnQudHlwZSA9PT0gXCJmb2N1c2luXCIgPyBcImZvY3VzXCIgOiBcImJsdXJcIjtcblx0XHRcdGV2ZW50LmlzU2ltdWxhdGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRmlyc3QsIGhhbmRsZSBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0XHRoYW5kbGUoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHRcdC8vIC4uLnRoZW4sIGhhbmRsZSBmb2N1cy9ibHVyXG5cdFx0XHQvL1xuXHRcdFx0Ly8gZm9jdXMvYmx1ciBkb24ndCBidWJibGUgd2hpbGUgZm9jdXNpbi9mb2N1c291dCBkbzsgc2ltdWxhdGUgdGhlIGZvcm1lciBieSBvbmx5XG5cdFx0XHQvLyBpbnZva2luZyB0aGUgaGFuZGxlciBhdCB0aGUgbG93ZXIgbGV2ZWwuXG5cdFx0XHRpZiAoIGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCApIHtcblxuXHRcdFx0XHQvLyBUaGUgc2V0dXAgcGFydCBjYWxscyBgbGV2ZXJhZ2VOYXRpdmVgLCB3aGljaCwgaW4gdHVybiwgY2FsbHNcblx0XHRcdFx0Ly8gYGpRdWVyeS5ldmVudC5hZGRgLCBzbyBldmVudCBoYW5kbGUgd2lsbCBhbHJlYWR5IGhhdmUgYmVlbiBzZXRcblx0XHRcdFx0Ly8gYnkgdGhpcyBwb2ludC5cblx0XHRcdFx0aGFuZGxlKCBldmVudCApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBub24tSUUgYnJvd3NlcnMsIGF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnRcblx0XHRcdC8vIHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dC5cblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZGVsZWdhdGVUeXBlLCBuYXRpdmVFdmVudC50YXJnZXQsXG5cdFx0XHRcdGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICkgKTtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgYXR0YWNoZXM7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdFx0XHRcdC8vIFdlIHVzZSB0aGUgc2FtZSBuYXRpdmUgaGFuZGxlciBmb3IgZm9jdXNpbiAmIGZvY3VzIChhbmQgZm9jdXNvdXQgJiBibHVyKVxuXHRcdFx0XHQvLyBzbyB3ZSBuZWVkIHRvIGNvb3JkaW5hdGUgc2V0dXAgJiB0ZWFyZG93biBwYXJ0cyBiZXR3ZWVuIHRob3NlIGV2ZW50cy5cblx0XHRcdFx0Ly8gVXNlIGBkZWxlZ2F0ZVR5cGVgIGFzIHRoZSBrZXkgYXMgYHR5cGVgIGlzIGFscmVhZHkgdXNlZCBieSBgbGV2ZXJhZ2VOYXRpdmVgLlxuXHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmdldCggdGhpcywgZGVsZWdhdGVUeXBlICk7XG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIGRlbGVnYXRlVHlwZSwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBhdHRhY2hlcztcblxuXHRcdFx0aWYgKCBkb2N1bWVudC5kb2N1bWVudE1vZGUgKSB7XG5cdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuZ2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUgKSAtIDE7XG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIHRoaXMsIGRlbGVnYXRlVHlwZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgZGVsZWdhdGVUeXBlLCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBpbmRpY2F0ZSBzdGFuZGFyZCB0ZWFyZG93biBzaG91bGQgYmUgYXBwbGllZFxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIFN1cHByZXNzIG5hdGl2ZSBmb2N1cyBvciBibHVyIGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGVcblx0XHQvLyBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZXZlbnQudGFyZ2V0LCB0eXBlICk7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG5cdC8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcblx0Ly8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcblx0Ly9cblx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG5cdC8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuXHQvLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcblx0Ly8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcblx0Ly9cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExK1xuXHQvLyBUbyBwcmVzZXJ2ZSByZWxhdGl2ZSBmb2N1c2luL2ZvY3VzICYgZm9jdXNvdXQvYmx1ciBldmVudCBvcmRlciBndWFyYW50ZWVkIG9uIHRoZSAzLnggYnJhbmNoLFxuXHQvLyBhdHRhY2ggYSBzaW5nbGUgaGFuZGxlciBmb3IgYm90aCBldmVudHMgaW4gSUUuXG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBkZWxlZ2F0ZVR5cGUgXSA9IHtcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0ZGF0YUhvbGRlciA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSA/IHRoaXMgOiBkb2MsXG5cdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuZ2V0KCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExK1xuXHRcdFx0Ly8gV2UgdXNlIHRoZSBzYW1lIG5hdGl2ZSBoYW5kbGVyIGZvciBmb2N1c2luICYgZm9jdXMgKGFuZCBmb2N1c291dCAmIGJsdXIpXG5cdFx0XHQvLyBzbyB3ZSBuZWVkIHRvIGNvb3JkaW5hdGUgc2V0dXAgJiB0ZWFyZG93biBwYXJ0cyBiZXR3ZWVuIHRob3NlIGV2ZW50cy5cblx0XHRcdC8vIFVzZSBgZGVsZWdhdGVUeXBlYCBhcyB0aGUga2V5IGFzIGB0eXBlYCBpcyBhbHJlYWR5IHVzZWQgYnkgYGxldmVyYWdlTmF0aXZlYC5cblx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblx0XHRcdFx0XHR0aGlzLmFkZEV2ZW50TGlzdGVuZXIoIGRlbGVnYXRlVHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRkYXRhUHJpdi5zZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0fSxcblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0ZGF0YUhvbGRlciA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSA/IHRoaXMgOiBkb2MsXG5cdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuZ2V0KCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUgKSAtIDE7XG5cblx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblx0XHRcdFx0XHR0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoIGRlbGVnYXRlVHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSwgYXR0YWNoZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhXFxbQ0RBVEFcXFt8XFxdXFxdPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICh0cmFjLTgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlLWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9LCBkb2MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVbndyYXAgYSBDREFUQSBzZWN0aW9uIGNvbnRhaW5pbmcgc2NyaXB0IGNvbnRlbnRzLiBUaGlzIHNob3VsZG4ndCBiZVxuXHRcdFx0XHRcdFx0XHQvLyBuZWVkZWQgYXMgaW4gWE1MIGRvY3VtZW50cyB0aGV5J3JlIGFscmVhZHkgbm90IHZpc2libGUgd2hlblxuXHRcdFx0XHRcdFx0XHQvLyBpbnNwZWN0aW5nIGVsZW1lbnQgY29udGVudHMgYW5kIGluIEhUTUwgZG9jdW1lbnRzIHRoZXkgaGF2ZSBub1xuXHRcdFx0XHRcdFx0XHQvLyBtZWFuaW5nIGJ1dCB3ZSdyZSBwcmVzZXJ2aW5nIHRoYXQgbG9naWMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgYmUgcmVtb3ZlZCBjb21wbGV0ZWx5IGluIDQuMC4gU2VlIGdoLTQ5MDQuXG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgalF1ZXJ5I2ZpbmQgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczpcblx0XHRcdC8vIGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIHJjdXN0b21Qcm9wID0gL14tLS87XG5cblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKHRyYWMtMTUwOTgsIHRyYWMtMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmNhbGwoIGVsZW0gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICh0cmFjLTg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0Ly9cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDcwK1xuXHRcdC8vIE9ubHkgRmlyZWZveCBpbmNsdWRlcyBib3JkZXIgd2lkdGhzXG5cdFx0Ly8gaW4gY29tcHV0ZWQgZGltZW5zaW9ucy4gKGdoLTQ1MjkpXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O2JvcmRlci1jb2xsYXBzZTpzZXBhcmF0ZVwiO1xuXHRcdFx0XHR0ci5zdHlsZS5jc3NUZXh0ID0gXCJib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JvcmRlcjoxcHggc29saWRcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEhlaWdodCBzZXQgdGhyb3VnaCBjc3NUZXh0IGRvZXMgbm90IGdldCBhcHBsaWVkLlxuXHRcdFx0XHQvLyBDb21wdXRlZCBoZWlnaHQgdGhlbiBjb21lcyBiYWNrIGFzIDAuXG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDggQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBJbiBvdXIgYm9keUJhY2tncm91bmQuaHRtbCBpZnJhbWUsXG5cdFx0XHRcdC8vIGRpc3BsYXkgZm9yIGFsbCBkaXYgZWxlbWVudHMgaXMgc2V0IHRvIFwiaW5saW5lXCIsXG5cdFx0XHRcdC8vIHdoaWNoIGNhdXNlcyBhIHByb2JsZW0gb25seSBpbiBBbmRyb2lkIDggQ2hyb21lIDg2LlxuXHRcdFx0XHQvLyBFbnN1cmluZyB0aGUgZGl2IGlzIGBkaXNwbGF5OiBibG9ja2Bcblx0XHRcdFx0Ly8gZ2V0cyBhcm91bmQgdGhpcyBpc3N1ZS5cblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSAoIHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyVG9wV2lkdGgsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCApICkgPT09IHRyLm9mZnNldEhlaWdodDtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCB0cmFjLTEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpIChnaC0zMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0Ly8gSUUgb25seSBzdXBwb3J0cyBgXCJmbG9hdFwiYCBpbiBgZ2V0UHJvcGVydHlWYWx1ZWA7IGluIGNvbXB1dGVkIHN0eWxlc1xuXHRcdC8vIGl0J3Mgb25seSBhdmFpbGFibGUgYXMgYFwiY3NzRmxvYXRcImAuIFdlIG5vIGxvbmdlciBtb2RpZnkgcHJvcGVydGllc1xuXHRcdC8vIHNlbnQgdG8gYC5jc3MoKWAgYXBhcnQgZnJvbSBjYW1lbENhc2luZywgc28gd2UgbmVlZCB0byBjaGVjayBib3RoLlxuXHRcdC8vIE5vcm1hbGx5LCB0aGlzIHdvdWxkIGNyZWF0ZSBkaWZmZXJlbmNlIGluIGJlaGF2aW9yOiBpZlxuXHRcdC8vIGBnZXRQcm9wZXJ0eVZhbHVlYCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZywgdGhlIHZhbHVlIHJldHVybmVkXG5cdFx0Ly8gYnkgYC5jc3MoKWAgd291bGQgYmUgYHVuZGVmaW5lZGAuIFRoaXMgaXMgdXN1YWxseSB0aGUgY2FzZSBmb3Jcblx0XHQvLyBkaXNjb25uZWN0ZWQgZWxlbWVudHMuIEhvd2V2ZXIsIGluIElFIGV2ZW4gZGlzY29ubmVjdGVkIGVsZW1lbnRzXG5cdFx0Ly8gd2l0aCBubyBzdHlsZXMgcmV0dXJuIGBcIm5vbmVcImAgZm9yIGBnZXRQcm9wZXJ0eVZhbHVlKCBcImZsb2F0XCIgKWBcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggaXNDdXN0b21Qcm9wICYmIHJldCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAxMDUrLCBDaHJvbWUgPD0xMDUrXG5cdFx0XHQvLyBTcGVjIHJlcXVpcmVzIHRyaW1taW5nIHdoaXRlc3BhY2UgZm9yIGN1c3RvbSBwcm9wZXJ0aWVzIChnaC00OTI2KS5cblx0XHRcdC8vIEZpcmVmb3ggb25seSB0cmltcyBsZWFkaW5nIHdoaXRlc3BhY2UuIENocm9tZSBqdXN0IGNvbGxhcHNlc1xuXHRcdFx0Ly8gYm90aCBsZWFkaW5nICYgdHJhaWxpbmcgd2hpdGVzcGFjZSB0byBhIHNpbmdsZSBzcGFjZS5cblx0XHRcdC8vXG5cdFx0XHQvLyBGYWxsIGJhY2sgdG8gYHVuZGVmaW5lZGAgaWYgZW1wdHkgc3RyaW5nIHJldHVybmVkLlxuXHRcdFx0Ly8gVGhpcyBjb2xsYXBzZXMgYSBtaXNzaW5nIGRlZmluaXRpb24gd2l0aCBwcm9wZXJ0eSBkZWZpbmVkXG5cdFx0XHQvLyBhbmQgc2V0IHRvIGFuIGVtcHR5IHN0cmluZyBidXQgdGhlcmUncyBubyBzdGFuZGFyZCBBUElcblx0XHRcdC8vIGFsbG93aW5nIHVzIHRvIGRpZmZlcmVudGlhdGUgdGhlbSB3aXRob3V0IGEgcGVyZm9ybWFuY2UgcGVuYWx0eVxuXHRcdFx0Ly8gYW5kIHJldHVybmluZyBgdW5kZWZpbmVkYCBhbGlnbnMgd2l0aCBvbGRlciBqUXVlcnkuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gcnRyaW1DU1MgdHJlYXRzIFUrMDAwRCBDQVJSSUFHRSBSRVRVUk4gYW5kIFUrMDAwQyBGT1JNIEZFRURcblx0XHRcdC8vIGFzIHdoaXRlc3BhY2Ugd2hpbGUgQ1NTIGRvZXMgbm90LCBidXQgdGhpcyBpcyBub3QgYSBwcm9ibGVtXG5cdFx0XHQvLyBiZWNhdXNlIENTUyBwcmVwcm9jZXNzaW5nIHJlcGxhY2VzIHRoZW0gd2l0aCBVKzAwMEEgTElORSBGRUVEXG5cdFx0XHQvLyAod2hpY2ggKmlzKiBDU1Mgd2hpdGVzcGFjZSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lucHV0LXByZXByb2Nlc3Npbmdcblx0XHRcdHJldCA9IHJldC5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICkgfHwgdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMCxcblx0XHRtYXJnaW5EZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0Ly8gQ291bnQgbWFyZ2luIGRlbHRhIHNlcGFyYXRlbHkgdG8gb25seSBhZGQgaXQgYWZ0ZXIgc2Nyb2xsIGd1dHRlciBhZGp1c3RtZW50LlxuXHRcdC8vIFRoaXMgaXMgbmVlZGVkIHRvIG1ha2UgbmVnYXRpdmUgbWFyZ2lucyB3b3JrIHdpdGggYG91dGVySGVpZ2h0KCB0cnVlIClgIChnaC0zOTgyKS5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdG1hcmdpbkRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YSArIG1hcmdpbkRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcblx0XHRhc3BlY3RSYXRpbzogdHJ1ZSxcblx0XHRib3JkZXJJbWFnZVNsaWNlOiB0cnVlLFxuXHRcdGNvbHVtbkNvdW50OiB0cnVlLFxuXHRcdGZsZXhHcm93OiB0cnVlLFxuXHRcdGZsZXhTaHJpbms6IHRydWUsXG5cdFx0Zm9udFdlaWdodDogdHJ1ZSxcblx0XHRncmlkQXJlYTogdHJ1ZSxcblx0XHRncmlkQ29sdW1uOiB0cnVlLFxuXHRcdGdyaWRDb2x1bW5FbmQ6IHRydWUsXG5cdFx0Z3JpZENvbHVtblN0YXJ0OiB0cnVlLFxuXHRcdGdyaWRSb3c6IHRydWUsXG5cdFx0Z3JpZFJvd0VuZDogdHJ1ZSxcblx0XHRncmlkUm93U3RhcnQ6IHRydWUsXG5cdFx0bGluZUhlaWdodDogdHJ1ZSxcblx0XHRvcGFjaXR5OiB0cnVlLFxuXHRcdG9yZGVyOiB0cnVlLFxuXHRcdG9ycGhhbnM6IHRydWUsXG5cdFx0c2NhbGU6IHRydWUsXG5cdFx0d2lkb3dzOiB0cnVlLFxuXHRcdHpJbmRleDogdHJ1ZSxcblx0XHR6b29tOiB0cnVlLFxuXG5cdFx0Ly8gU1ZHLXJlbGF0ZWRcblx0XHRmaWxsT3BhY2l0eTogdHJ1ZSxcblx0XHRmbG9vZE9wYWNpdHk6IHRydWUsXG5cdFx0c3RvcE9wYWNpdHk6IHRydWUsXG5cdFx0c3Ryb2tlTWl0ZXJsaW1pdDogdHJ1ZSxcblx0XHRzdHJva2VPcGFjaXR5OiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICh0cmFjLTczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyB0cmFjLTkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAodHJhYy03MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKHRyYWMtMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwgKHRyYWMtMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc05hbWVzLCBjdXIsIGN1clZhbHVlLCBjbGFzc05hbWUsIGksIGZpbmFsVmFsdWU7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3NOYW1lcy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRjdXIgPSB0aGlzLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc05hbWVzLCBjdXIsIGN1clZhbHVlLCBjbGFzc05hbWUsIGksIGZpbmFsVmFsdWU7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzTmFtZXMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSB0aGlzLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciBjbGFzc05hbWVzLCBjbGFzc05hbWUsIGksIHNlbGYsXG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICh0cmFjLTE0Njg2LCB0cmFjLTE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAodHJhYy0yNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHBhcnNlckVycm9yRWxlbTtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge31cblxuXHRwYXJzZXJFcnJvckVsZW0gPSB4bWwgJiYgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKVsgMCBdO1xuXHRpZiAoICF4bWwgfHwgcGFyc2VyRXJyb3JFbGVtICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyAoXG5cdFx0XHRwYXJzZXJFcnJvckVsZW0gP1xuXHRcdFx0XHRqUXVlcnkubWFwKCBwYXJzZXJFcnJvckVsZW0uY2hpbGROb2RlcywgZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0XHRcdHJldHVybiBlbC50ZXh0Q29udGVudDtcblx0XHRcdFx0fSApLmpvaW4oIFwiXFxuXCIgKSA6XG5cdFx0XHRcdGRhdGFcblx0XHQpICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKHRyYWMtOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKHRyYWMtOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApIClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAodHJhYy02MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9ICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApLm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyB0cmFjLTc2NTMsIHRyYWMtODEyNSwgdHJhYy04MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICh0cmFjLTEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxub3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzIHRyYWMtOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKHRyYWMtMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgdHJhYy0xMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKHRyYWMtMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyB0cmFjLTk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0IGJ1dCBub3QgaWYganNvbnBcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcImpzb25cIiwgcy5kYXRhVHlwZXMgKSA8IDAgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKHRyYWMtMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vIHRyYWMtMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlIHRyYWMtODYwNSwgdHJhYy0xNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gdHJhYy0xNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFkZGluZzogXCJpbm5lclwiICsgbmFtZSxcblx0XHRjb250ZW50OiB0eXBlLFxuXHRcdFwiXCI6IFwib3V0ZXJcIiArIG5hbWVcblx0fSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpc1xuXHRcdFx0Lm9uKCBcIm1vdXNlZW50ZXJcIiwgZm5PdmVyIClcblx0XHRcdC5vbiggXCJtb3VzZWxlYXZlXCIsIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKFxuXHQoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9XG4pO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcbi8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuLy8gUmVxdWlyZSB0aGF0IHRoZSBcIndoaXRlc3BhY2UgcnVuXCIgc3RhcnRzIGZyb20gYSBub24td2hpdGVzcGFjZVxuLy8gdG8gYXZvaWQgTyhOXjIpIGJlaGF2aW9yIHdoZW4gdGhlIGVuZ2luZSB3b3VsZCB0cnkgbWF0Y2hpbmcgXCJcXHMrJFwiIGF0IGVhY2ggc3BhY2UgcG9zaXRpb24uXG52YXIgcnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3woW15cXHNcXHVGRUZGXFx4QTBdKVtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKTtcbn07XG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKHRyYWMtNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKHRyYWMtMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuLyoqXG4gKiBDcmVhdGUgYSB0b29sYmFyXG4gKiBUaGlzIGNsYXNzIHVzZXMgYSBsb3Qgb2YgalF1ZXJ5IGZvciBkb20gZWxlbWVudCBtYW5pcHVsYXRpb25cbiAqL1xuXG5pbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtwYXJzZUNzc1N0eWxlc30gZnJvbSBcIi4uL3V0aWxzL2Rvd25sb2FkLXV0aWxzXCI7XG5pbXBvcnQge3NhdmVBc30gZnJvbSBcImZpbGUtc2F2ZXJcIjtcbmltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjsgXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xiYXIge1xuICAgIGNvbnN0cnVjdG9yKGRvbUlkLCB0b29sdGlwPXVuZGVmaW5lZCwgdmVydGljYWw9ZmFsc2Upe1xuICAgICAgICAkKGAjJHtkb21JZH1gKS5zaG93KCk7IC8vIGlmIGhpZGRlblxuXG4gICAgICAgIC8vIGFkZCBhIG5ldyBiYXJncm91cCBkaXYgdG8gZG9tSUQgd2l0aCBib290c3RyYXAgYnV0dG9uIGNsYXNzZXNcbiAgICAgICAgY29uc3QgYnRuQ2xhc3NlcyA9IHZlcnRpY2FsP1wiYnRuLWdyb3VwLXZlcnRpY2FsIGJ0bi1ncm91cC1zbVwiOiBcImJ0bi1ncm91cCBidG4tZ3JvdXAtc21cIjtcbiAgICAgICAgdGhpcy5iYXIgPSAkKFwiPGRpdi8+XCIpLmFkZENsYXNzKGJ0bkNsYXNzZXMpLmFwcGVuZFRvKGAjJHtkb21JZH1gKTtcbiAgICAgICAgdGhpcy5idXR0b25zID0ge307XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZG93bmxvYWQgYnV0dG9uIGZvciBTVkdcbiAgICAgKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIGJ1dHRvbiBkb20gSURcbiAgICAgKiBAcGFyYW0gc3ZnSWQge1N0cmluZ30gdGhlIFNWRyBkb20gSUQgdG8gZ3JhYiBhbmQgZG93bmxvYWRcbiAgICAgKiBAcGFyYW0gb3V0ZmlsZU5hbWUge1N0cmluZ30gdGhlIGRvd25sb2FkIGZpbGUgbmFtZVxuICAgICAqIEBwYXJhbSBjbG9uZUlkIHtTdHJpbmd9IHRoZSBjbG9uZWQgU1ZHIGRvbSBJRFxuICAgICAqIEBwYXJhbSBpY29uIHtTdHJpbmd9IGEgZm9udGF3ZXNvbWUncyBpY29uIGNsYXNzIG5hbWVcbiAgICAgKi9cbiAgICBjcmVhdGVEb3dubG9hZFN2Z0J1dHRvbihpZCwgc3ZnSWQsIG91dGZpbGVOYW1lLCBjbG9uZUlkLCBpY29uPVwiZmEtZG93bmxvYWRcIil7XG4gICAgICAgIHRoaXMuY3JlYXRlQnV0dG9uKGlkLCBpY29uKTtcbiAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkU3ZnKHN2Z0lkLCBvdXRmaWxlTmFtZSwgY2xvbmVJZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXCJEb3dubG9hZCB0aGUgcGxvdFwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVSZXNldEJ1dHRvbihpZCwgY2FsbGJhY2ssIGljb249XCJmYS1leHBhbmQtYXJyb3dzLWFsdFwiKXtcbiAgICAgICAgdGhpcy5jcmVhdGVCdXR0b24oaWQsIGljb24pO1xuICAgICAgICBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCBjYWxsYmFjaylcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KFwiUmVzZXQgdGhlIHNjYWxlc1wiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgYSBidXR0b24gdG8gdGhlIHRvb2xiYXJcbiAgICAgKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIGJ1dHRvbidzIGlkXG4gICAgICogQHBhcmFtIGljb24ge1N0cmluZ30gYSBmb250YXdlc29tZSBpY29uIGNsYXNzXG4gICAgICogRGVwZW5kZW5jaWVzOiBCb290c3RyYXAsIGpRdWVyeSwgRm9udGF3ZXNvbWVcbiAgICAgKi9cbiAgICBjcmVhdGVCdXR0b24oaWQsIGljb249XCJmYS1kb3dubG9hZFwiLCBob3Zlcj1cIm5lZWQgdG8gZGVmaW5lXCIsIGNhbGxiYWNrPXVuZGVmaW5lZCl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSAkKFwiPGEvPlwiKS5hdHRyKFwiaWRcIiwgaWQpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoXCJidG4gYnRuLWRlZmF1bHQgYnRuLWxpZ2h0IGJ0bi1zbVwiKS5hcHBlbmRUbyh0aGlzLmJhcik7XG4gICAgICAgIGlmIChpY29uLnN0YXJ0c1dpdGgoXCJmYS1cIikpICQoXCI8aS8+XCIpLmFkZENsYXNzKGBmYSAke2ljb259YCkuYXBwZW5kVG8oJGJ1dHRvbik7XG4gICAgICAgIGVsc2UgeyRidXR0b24udGV4dChpY29uKTt9XG4gICAgICAgIHRoaXMuYnV0dG9uc1tpZF0gPSAkYnV0dG9uO1xuICAgICAgICBpZiAoaWQhPVwiZm9vXCIpe1xuICAgICAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgICAgIC5vbihcImNsaWNrXCIsICgpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaz09PXVuZGVmaW5lZCkgYWxlcnQoXCJuZWVkIHRvIGRlZmluZSB0aGUgY2xpY2sgZXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhob3Zlcik7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCAoKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gJGJ1dHRvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhdHRhY2ggYSB0b29sdGlwIGRvbSB3aXRoIHRoZSB0b29sYmFyXG4gICAgICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9XG4gICAgICovXG4gICAgYXR0YWNoVG9vbHRpcCh0b29sdGlwKXtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3dubG9hZCBTVkcgb2JqXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IHRoZSBTVkcgZG9tIElEXG4gICAgICogQHBhcmFtIGZpbGVOYW1lIHtTdHJpbmd9IHRoZSBvdXRwdXQgZmlsZSBuYW1lXG4gICAgICogQHBhcmFtIGNsb25lSWQge1N0cmluZ30gdGhlIHRlbXBvcmFyeSBkb20gSUQgdG8gY29weSB0aGUgU1ZHIHRvXG4gICAgICogRGVwZW5kZW5jaWVzOiBGaWxlU2F2ZXJcbiAgICAgKi9cbiAgICBkb3dubG9hZFN2ZyhzdmdJZCwgZmlsZU5hbWUsIGNsb25lSWQpe1xuICAgICAgICBjb25zb2xlLmxvZyhzdmdJZCwgZmlsZU5hbWUsIGNsb25lSWQpO1xuICAgICAgICAvLyBsZXQgc3ZnT2JqID0gJCgkKCQoYCR7XCIjXCIgK3N2Z0lkfSBzdmdgKSlbMF0pOyAvLyBjb21wbGljYXRlZCBqUXVlcnkgdG8gZ2V0IHRvIHRoZSBTVkcgb2JqZWN0XG4gICAgICAgIGxldCBzdmdPYmogPSAkKCQoJChgJHtcIiNcIiArc3ZnSWR9YCkpWzBdKTtcbiAgICAgICAgbGV0ICRzdmdDb3B5ID0gc3ZnT2JqLmNsb25lKClcbiAgICAgICAgICAgIC5hdHRyKFwidmVyc2lvblwiLCBcIjEuMVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuXG4gICAgICAgIC8vIHBhcnNlIGFuZCBhZGQgYWxsIHRoZSBDU1Mgc3R5bGluZyB1c2VkIGJ5IHRoZSBTVkdcbiAgICAgICAgbGV0IHN0eWxlcyA9IHBhcnNlQ3NzU3R5bGVzKHN2Z09iai5nZXQoKSk7XG4gICAgICAgICRzdmdDb3B5LnByZXBlbmQoc3R5bGVzKTtcblxuICAgICAgICAkKFwiI1wiICsgY2xvbmVJZCkuaHRtbChcIlwiKS5oaWRlKCk7IC8vIG1ha2Ugc3VyZSB0aGUgY29weUlEIGlzIGludmlzaWJsZVxuICAgICAgICBsZXQgc3ZnSHRtbCA9ICQoYCMke2Nsb25lSWR9YCkuYXBwZW5kKCRzdmdDb3B5KS5odG1sKCk7XG5cbiAgICAgICAgbGV0IHN2Z0Jsb2IgPSBuZXcgQmxvYihbc3ZnSHRtbF0sIHt0eXBlOiBcImltYWdlL3N2Zyt4bWxcIn0pO1xuICAgICAgICBzYXZlQXMoc3ZnQmxvYiwgZmlsZU5hbWUpOyAvLyB0aGlzIGlzIGEgRmlsZVNhdmVyIGZ1bmN0aW9uLi4uLlxuXG4gICAgICAgIC8vIGNsZWFyIHRoZSB0ZW1wIGRvd25sb2FkIGRpdlxuICAgICAgICAkKGAjJHtjbG9uZUlkfWApLmh0bWwoXCJcIikuaGlkZSgpO1xuICAgIH1cbn0iLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7c2F2ZUFzfSBmcm9tIFwiZmlsZS1zYXZlclwiO1xuaW1wb3J0ICQgZnJvbSBcImpxdWVyeVwiO1xuXG4vKipcbiAqIERvd25sb2FkIFNWR1xuICogQHBhcmFtIHN2Z09ialxuICogQHBhcmFtIGRvd25sb2FkRmlsZU5hbWUge1N0cmluZ31cbiAqIEBwYXJhbSB0ZW1wRG93bmxvYWREaXZJZCB7U3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZG93bmxvYWRTdmcoc3ZnT2JqLCBkb3dubG9hZEZpbGVOYW1lLCB0ZW1wRG93bmxvYWREaXZJZCl7XG4gICAgY29uc29sZS5sb2coc3ZnT2JqKTtcbiAgICB2YXIgJHN2Z0NvcHkgPSBzdmdPYmouY2xvbmUoKVxuICAgICAgICAuYXR0cihcInZlcnNpb25cIiwgXCIxLjFcIilcbiAgICAgICAgLmF0dHIoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuXG4gICAgLy8gcGFyc2UgYW5kIGFkZCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgdmFyIHN0eWxlcyA9IHBhcnNlQ3NzU3R5bGVzKHN2Z09iai5nZXQoKSk7XG4gICAgJHN2Z0NvcHkucHJlcGVuZChzdHlsZXMpO1xuXG4gICAgJChcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5odG1sKFwiXCIpLmhpZGUoKTtcbiAgICB2YXIgc3ZnSHRtbCA9ICQoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuYXBwZW5kKCRzdmdDb3B5KS5odG1sKCk7XG5cbiAgICB2YXIgc3ZnQmxvYiA9IG5ldyBCbG9iKFtzdmdIdG1sXSwge3R5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwifSk7XG4gICAgc2F2ZUFzKHN2Z0Jsb2IsIGRvd25sb2FkRmlsZU5hbWUpO1xuXG4gICAgLy8gY2xlYXIgdGhlIHRlbXAgZG93bmxvYWQgZGl2XG4gICAgJChcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5odG1sKFwiXCIpLmhpZGUoKTtcbn1cbi8qKlxuICogQSBmdW5jdGlvbiBmb3IgcGFyc2luZyB0aGUgQ1NTIHN0eWxlIHNoZWV0IGFuZCBpbmNsdWRpbmcgdGhlIHN0eWxlIHByb3BlcnRpZXMgaW4gdGhlIGRvd25sb2FkYWJsZSBTVkcuXG4gKiBAcGFyYW0gZG9tXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzU3R5bGVzIChkb20pIHtcbiAgICB2YXIgdXNlZCA9IFwiXCI7XG4gICAgdmFyIHNoZWV0cyA9IGRvY3VtZW50LnN0eWxlU2hlZXRzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGVldHMubGVuZ3RoOyBpKyspIHsgLy8gVE9ETzogd2FsayB0aHJvdWdoIHRoaXMgYmxvY2sgb2YgY29kZVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoc2hlZXRzW2ldLmNzc1J1bGVzID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIHJ1bGVzID0gc2hlZXRzW2ldLmNzc1J1bGVzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJ1bGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHJ1bGUuc3R5bGUpICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1zO1xuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmluZyBhbnkgc2VsZWN0b3IgdGV4dCBpbmNsdWRpbmcgc3ZnIGVsZW1lbnQgSUQgLS0gZG9tIGFscmVhZHkgc2VsZWN0cyBmb3IgdGhhdFxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBydWxlLnNlbGVjdG9yVGV4dCA9PT0gdW5kZWZpbmVkPyBydWxlLnNlbGVjdG9yVGV4dCA6IHJ1bGUuc2VsZWN0b3JUZXh0LnJlcGxhY2UoYCMke2RvbVswXS5pZH0gYCwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIC8vU29tZSBzZWxlY3RvcnMgd29uJ3Qgd29yaywgYW5kIG1vc3Qgb2YgdGhlc2UgZG9uJ3QgbWF0dGVyLlxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXMgPSAkKGRvbSkuZmluZChzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1zID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCArPSBydWxlLnNlbGVjdG9yVGV4dCArIFwiIHsgXCIgKyBydWxlLnN0eWxlLmNzc1RleHQgKyBcIiB9XFxuXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIEluIEZpcmVmb3gsIGlmIHN0eWxlc2hlZXQgb3JpZ2luYXRlcyBmcm9tIGEgZGlmZiBkb21haW4sXG4gICAgICAgICAgICAvLyB0cnlpbmcgdG8gYWNjZXNzIHRoZSBjc3NSdWxlcyB3aWxsIHRocm93IGEgU2VjdXJpdHlFcnJvci5cbiAgICAgICAgICAgIC8vIEhlbmNlLCB3ZSBtdXN0IHVzZSBhIHRyeS9jYXRjaCB0byBoYW5kbGUgdGhpcyBpbiBGaXJlZm94XG4gICAgICAgICAgICBpZiAoZS5uYW1lICE9PSBcIlNlY3VyaXR5RXJyb3JcIikgdGhyb3cgZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgcy5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dC9jc3NcIik7XG4gICAgcy5pbm5lckhUTUwgPSBcIjwhW0NEQVRBW1xcblwiICsgdXNlZCArIFwiXFxuXV0+XCI7XG5cbiAgICByZXR1cm4gcztcbn1cbiIsInZhciBub29wID0ge3ZhbHVlOiBmdW5jdGlvbigpIHt9fTtcblxuZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IHt9LCB0OyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEodCA9IGFyZ3VtZW50c1tpXSArIFwiXCIpIHx8ICh0IGluIF8pIHx8IC9bXFxzLl0vLnRlc3QodCkpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiY2FuY2VsXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgcnVubmluZ1wiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0cmFuc2l0aW9uIG5vdCBmb3VuZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgdHdlZW47XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gIC8vIE5vdGUgdGhlIGFjdHVhbCBkZWxheSBpcyBub3Qga25vd24gdW50aWwgdGhlIGZpcnN0IGNhbGxiYWNrIVxuICBzY2hlZHVsZXNbaWRdID0gc2VsZjtcbiAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcbiAgICBzZWxmLnN0YXRlID0gU0NIRURVTEVEO1xuICAgIHNlbGYudGltZXIucmVzdGFydChzdGFydCwgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcblxuICAgIC8vIElmIHRoZSBlbGFwc2VkIGRlbGF5IGlzIGxlc3MgdGhhbiBvdXIgZmlyc3Qgc2xlZXAsIHN0YXJ0IGltbWVkaWF0ZWx5LlxuICAgIGlmIChzZWxmLmRlbGF5IDw9IGVsYXBzZWQpIHN0YXJ0KGVsYXBzZWQgLSBzZWxmLmRlbGF5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICB2YXIgaSwgaiwgbiwgbztcblxuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QgU0NIRURVTEVELCB0aGVuIHdlIHByZXZpb3VzbHkgZXJyb3JlZCBvbiBzdGFydC5cbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU0NIRURVTEVEKSByZXR1cm4gc3RvcCgpO1xuXG4gICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgIGlmIChvLm5hbWUgIT09IHNlbGYubmFtZSkgY29udGludWU7XG5cbiAgICAgIC8vIFdoaWxlIHRoaXMgZWxlbWVudCBhbHJlYWR5IGhhcyBhIHN0YXJ0aW5nIHRyYW5zaXRpb24gZHVyaW5nIHRoaXMgZnJhbWUsXG4gICAgICAvLyBkZWZlciBzdGFydGluZyBhbiBpbnRlcnJ1cHRpbmcgdHJhbnNpdGlvbiB1bnRpbCB0aGF0IHRyYW5zaXRpb24gaGFzIGFcbiAgICAgIC8vIGNoYW5jZSB0byB0aWNrIChhbmQgcG9zc2libHkgZW5kKTsgc2VlIGQzL2QzLXRyYW5zaXRpb24jNTQhXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gU1RBUlRFRCkgcmV0dXJuIHRpbWVvdXQoc3RhcnQpO1xuXG4gICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gUlVOTklORykge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG5cbiAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy5cbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmVyIHRoZSBmaXJzdCB0aWNrIHRvIGVuZCBvZiB0aGUgY3VycmVudCBmcmFtZTsgc2VlIGQzL2QzIzE1NzYuXG4gICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgLy8gQXNzdW1pbmcgdGhpcyBpcyBzdWNjZXNzZnVsLCBzdWJzZXF1ZW50IGNhbGxiYWNrcyBnbyBzdHJhaWdodCB0byB0aWNrLlxuICAgIHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICBzZWxmLnN0YXRlID0gUlVOTklORztcbiAgICAgICAgc2VsZi50aW1lci5yZXN0YXJ0KHRpY2ssIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgICAgIHRpY2soZWxhcHNlZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgc3RhcnQgZXZlbnQuXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICBzZWxmLnN0YXRlID0gU1RBUlRJTkc7XG4gICAgc2VsZi5vbi5jYWxsKFwic3RhcnRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJURUQ7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSB0d2VlbiwgZGVsZXRpbmcgbnVsbCB0d2Vlbi5cbiAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG8gPSBzZWxmLnR3ZWVuW2ldLnZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCkpIHtcbiAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnRpbWVyLnJlc3RhcnQoc3RvcCksIHNlbGYuc3RhdGUgPSBFTkRJTkcsIDEpLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgdHdlZW5baV0uY2FsbChub2RlLCB0KTtcbiAgICB9XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgZW5kIGV2ZW50LlxuICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHNlbGYuc3RhdGUgPSBFTkRFRDtcbiAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICBmb3IgKHZhciBpIGluIHNjaGVkdWxlcykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICB9XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJnYiwgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjO1xuICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtU3ZnIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGUuanNcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlKG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBpLmNhbGwodGhpcywgdCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpLmNhbGwodGhpcywgdCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW5OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2VlbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZShuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGtleSA9IFwiYXR0ci5cIiArIG5hbWU7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkZWxheUZ1bmN0aW9uXG4gICAgICAgICAgOiBkZWxheUNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbnZhciBTZWxlY3Rpb24gPSBzZWxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtzdHlsZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGUuanNcIjtcblxuZnVuY3Rpb24gc3R5bGVOdWxsKG5hbWUsIGludGVycG9sYXRlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgc3RyaW5nMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHN0cmluZzEwID0gc3RyaW5nMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyksXG4gICAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgc3RyaW5nMSA9IHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZU1heWJlUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciBvbjAsIG9uMSwgbGlzdGVuZXIwLCBrZXkgPSBcInN0eWxlLlwiICsgbmFtZSwgZXZlbnQgPSBcImVuZC5cIiArIGtleSwgcmVtb3ZlO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZS5vbixcbiAgICAgICAgbGlzdGVuZXIgPSBzY2hlZHVsZS52YWx1ZVtrZXldID09IG51bGwgPyByZW1vdmUgfHwgKHJlbW92ZSA9IHN0eWxlUmVtb3ZlKG5hbWUpKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAob24gIT09IG9uMCB8fCBsaXN0ZW5lcjAgIT09IGxpc3RlbmVyKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKGV2ZW50LCBsaXN0ZW5lcjAgPSBsaXN0ZW5lcik7XG5cbiAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBpID0gKG5hbWUgKz0gXCJcIikgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlTnVsbChuYW1lLCBpKSlcbiAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIHN0eWxlUmVtb3ZlKG5hbWUpKVxuICAgIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUZ1bmN0aW9uKG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlKSkpXG4gICAgICAuZWFjaChzdHlsZU1heWJlUmVtb3ZlKHRoaXMuX2lkLCBuYW1lKSlcbiAgICA6IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlQ29uc3RhbnQobmFtZSwgaSwgdmFsdWUpLCBwcmlvcml0eSlcbiAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIG51bGwpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHIgZnJvbSBcIi4vYXR0ci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0clR3ZWVuIGZyb20gXCIuL2F0dHJUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZGVsYXkgZnJvbSBcIi4vZGVsYXkuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2R1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlIGZyb20gXCIuL2Vhc2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9vbiBmcm9tIFwiLi9vbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0aW9uIGZyb20gXCIuL3NlbGVjdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGUuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlVHdlZW4gZnJvbSBcIi4vc3R5bGVUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dCBmcm9tIFwiLi90ZXh0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0VHdlZW4gZnJvbSBcIi4vdGV4dFR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3R3ZWVuIGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lbmQgZnJvbSBcIi4vZW5kLmpzXCI7XG5cbnZhciBpZCA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0lkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxudmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG5UcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gIG9uOiB0cmFuc2l0aW9uX29uLFxuICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXG4gIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXG4gIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgdGV4dFR3ZWVuOiB0cmFuc2l0aW9uX3RleHRUd2VlbixcbiAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXG4gIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgZWFzZTogdHJhbnNpdGlvbl9lYXNlLFxuICBlbmQ6IHRyYW5zaXRpb25fZW5kXG59O1xuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJmdW5jdGlvbiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpLmNhbGwodGhpcywgdCksIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIHQsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0ID0gKGkwID0gaSkgJiYgc3R5bGVJbnRlcnBvbGF0ZShuYW1lLCBpLCBwcmlvcml0eSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0SW50ZXJwb2xhdGUoaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSBpLmNhbGwodGhpcywgdCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRUd2Vlbih2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIHRleHRJbnRlcnBvbGF0ZShpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGtleSA9IFwidGV4dFwiO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgdGV4dFR3ZWVuKHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5lYXNlID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaChlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZWFzZTtcbn1cbiIsImltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG9uMCwgb24xLCB0aGF0ID0gdGhpcywgaWQgPSB0aGF0Ll9pZCwgc2l6ZSA9IHRoYXQuc2l6ZSgpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGNhbmNlbCA9IHt2YWx1ZTogcmVqZWN0fSxcbiAgICAgICAgZW5kID0ge3ZhbHVlOiBmdW5jdGlvbigpIHsgaWYgKC0tc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpOyB9fTtcblxuICAgIHRoYXQuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICAgIGlmIChvbiAhPT0gb24wKSB7XG4gICAgICAgIG9uMSA9IChvbjAgPSBvbikuY29weSgpO1xuICAgICAgICBvbjEuXy5jYW5jZWwucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5pbnRlcnJ1cHQucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5lbmQucHVzaChlbmQpO1xuICAgICAgfVxuXG4gICAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlIGZyb20gXCIuLi90cmFuc2l0aW9uL3NjaGVkdWxlLmpzXCI7XG5pbXBvcnQge2Vhc2VDdWJpY0luT3V0fSBmcm9tIFwiZDMtZWFzZVwiO1xuaW1wb3J0IHtub3d9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZGVmYXVsdFRpbWluZyA9IHtcbiAgdGltZTogbnVsbCwgLy8gU2V0IG9uIHVzZS5cbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiAyNTAsXG4gIGVhc2U6IGVhc2VDdWJpY0luT3V0XG59O1xuXG5mdW5jdGlvbiBpbmhlcml0KG5vZGUsIGlkKSB7XG4gIHZhciB0aW1pbmc7XG4gIHdoaWxlICghKHRpbWluZyA9IG5vZGUuX190cmFuc2l0aW9uKSB8fCAhKHRpbWluZyA9IHRpbWluZ1tpZF0pKSB7XG4gICAgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VGltaW5nLnRpbWUgPSBub3coKSwgZGVmYXVsdFRpbWluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRpbWluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgaWQsXG4gICAgICB0aW1pbmc7XG5cbiAgaWYgKG5hbWUgaW5zdGFuY2VvZiBUcmFuc2l0aW9uKSB7XG4gICAgaWQgPSBuYW1lLl9pZCwgbmFtZSA9IG5hbWUuX25hbWU7XG4gIH0gZWxzZSB7XG4gICAgaWQgPSBuZXdJZCgpLCAodGltaW5nID0gZGVmYXVsdFRpbWluZykudGltZSA9IG5vdygpLCBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGksIGdyb3VwLCB0aW1pbmcgfHwgaW5oZXJpdChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBzZWxlY3Rpb25faW50ZXJydXB0IGZyb20gXCIuL2ludGVycnVwdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb24uanNcIjtcblxuc2VsZWN0aW9uLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBzZWxlY3Rpb25faW50ZXJydXB0O1xuc2VsZWN0aW9uLnByb3RvdHlwZS50cmFuc2l0aW9uID0gc2VsZWN0aW9uX3RyYW5zaXRpb247XG4iLCJpbXBvcnQgaW50ZXJydXB0IGZyb20gXCIuLi9pbnRlcnJ1cHQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGludGVycnVwdCh0aGlzLCBuYW1lKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge1NUQVJUSU5HLCBFTkRJTkcsIEVOREVEfSBmcm9tIFwiLi90cmFuc2l0aW9uL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUsXG4gICAgICBhY3RpdmUsXG4gICAgICBlbXB0eSA9IHRydWUsXG4gICAgICBpO1xuXG4gIGlmICghc2NoZWR1bGVzKSByZXR1cm47XG5cbiAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcblxuICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgaWYgKChzY2hlZHVsZSA9IHNjaGVkdWxlc1tpXSkubmFtZSAhPT0gbmFtZSkgeyBlbXB0eSA9IGZhbHNlOyBjb250aW51ZTsgfVxuICAgIGFjdGl2ZSA9IHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcgJiYgc2NoZWR1bGUuc3RhdGUgPCBFTkRJTkc7XG4gICAgc2NoZWR1bGUuc3RhdGUgPSBFTkRFRDtcbiAgICBzY2hlZHVsZS50aW1lci5zdG9wKCk7XG4gICAgc2NoZWR1bGUub24uY2FsbChhY3RpdmUgPyBcImludGVycnVwdFwiIDogXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG4iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpO1xuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3IsIGNjdyA9ICEhY2N3O1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXRoO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpO1xufVxuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tVW5pZm9ybShzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tVW5pZm9ybShtaW4sIG1heCkge1xuICAgIG1pbiA9IG1pbiA9PSBudWxsID8gMCA6ICttaW47XG4gICAgbWF4ID0gbWF4ID09IG51bGwgPyAxIDogK21heDtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgbWF4ID0gbWluLCBtaW4gPSAwO1xuICAgIGVsc2UgbWF4IC09IG1pbjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc291cmNlKCkgKiBtYXggKyBtaW47XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbVVuaWZvcm0uc291cmNlID0gc291cmNlUmFuZG9tVW5pZm9ybTtcblxuICByZXR1cm4gcmFuZG9tVW5pZm9ybTtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tTm9ybWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Ob3JtYWwobXUsIHNpZ21hKSB7XG4gICAgdmFyIHgsIHI7XG4gICAgbXUgPSBtdSA9PSBudWxsID8gMCA6ICttdTtcbiAgICBzaWdtYSA9IHNpZ21hID09IG51bGwgPyAxIDogK3NpZ21hO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB5O1xuXG4gICAgICAvLyBJZiBhdmFpbGFibGUsIHVzZSB0aGUgc2Vjb25kIHByZXZpb3VzbHktZ2VuZXJhdGVkIHVuaWZvcm0gcmFuZG9tLlxuICAgICAgaWYgKHggIT0gbnVsbCkgeSA9IHgsIHggPSBudWxsO1xuXG4gICAgICAvLyBPdGhlcndpc2UsIGdlbmVyYXRlIGEgbmV3IHggYW5kIHkuXG4gICAgICBlbHNlIGRvIHtcbiAgICAgICAgeCA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHkgPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICByID0geCAqIHggKyB5ICogeTtcbiAgICAgIH0gd2hpbGUgKCFyIHx8IHIgPiAxKTtcblxuICAgICAgcmV0dXJuIG11ICsgc2lnbWEgKiB5ICogTWF0aC5zcXJ0KC0yICogTWF0aC5sb2cocikgLyByKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tTm9ybWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbU5vcm1hbDtcblxuICByZXR1cm4gcmFuZG9tTm9ybWFsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5pbXBvcnQgbm9ybWFsIGZyb20gXCIuL25vcm1hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tTG9nTm9ybWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Mb2dOb3JtYWwoKSB7XG4gICAgdmFyIHJhbmRvbU5vcm1hbCA9IG5vcm1hbC5zb3VyY2Uoc291cmNlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNYXRoLmV4cChyYW5kb21Ob3JtYWwoKSk7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUxvZ05vcm1hbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21Mb2dOb3JtYWw7XG5cbiAgcmV0dXJuIHJhbmRvbUxvZ05vcm1hbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tSXJ3aW5IYWxsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21JcndpbkhhbGwobikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIHN1bSA9IDAsIGkgPSAwOyBpIDwgbjsgKytpKSBzdW0gKz0gc291cmNlKCk7XG4gICAgICByZXR1cm4gc3VtO1xuICAgIH07XG4gIH1cblxuICByYW5kb21JcndpbkhhbGwuc291cmNlID0gc291cmNlUmFuZG9tSXJ3aW5IYWxsO1xuXG4gIHJldHVybiByYW5kb21JcndpbkhhbGw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbnN0YW50KCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZnVuY3Rpb24gTGluZWFyKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhci5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhcihjb250ZXh0KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB4KHApIHtcbiAgcmV0dXJuIHBbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5KHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgdGhhdC5feDEgKyB0aGF0Ll9rICogKHRoYXQuX3gyIC0gdGhhdC5feDApLFxuICAgIHRoYXQuX3kxICsgdGhhdC5fayAqICh0aGF0Ll95MiAtIHRoYXQuX3kwKSxcbiAgICB0aGF0Ll94MiArIHRoYXQuX2sgKiAodGhhdC5feDEgLSB4KSxcbiAgICB0aGF0Ll95MiArIHRoYXQuX2sgKiAodGhhdC5feTEgLSB5KSxcbiAgICB0aGF0Ll94MixcbiAgICB0aGF0Ll95MlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gxID0geCwgdGhpcy5feTEgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcbmltcG9ydCBpcndpbkhhbGwgZnJvbSBcIi4vaXJ3aW5IYWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21CYXRlcyhzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tQmF0ZXMobikge1xuICAgIHZhciByYW5kb21JcndpbkhhbGwgPSBpcndpbkhhbGwuc291cmNlKHNvdXJjZSkobik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbCgpIC8gbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tQmF0ZXMuc291cmNlID0gc291cmNlUmFuZG9tQmF0ZXM7XG5cbiAgcmV0dXJuIHJhbmRvbUJhdGVzO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21FeHBvbmVudGlhbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tRXhwb25lbnRpYWwobGFtYmRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmxvZygxIC0gc291cmNlKCkpIC8gbGFtYmRhO1xuICAgIH07XG4gIH1cblxuICByYW5kb21FeHBvbmVudGlhbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21FeHBvbmVudGlhbDtcblxuICByZXR1cm4gcmFuZG9tRXhwb25lbnRpYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImZ1bmN0aW9uIFJlZEJsYWNrVHJlZSgpIHtcbiAgdGhpcy5fID0gbnVsbDsgLy8gcm9vdCBub2RlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZWRCbGFja05vZGUobm9kZSkge1xuICBub2RlLlUgPSAvLyBwYXJlbnQgbm9kZVxuICBub2RlLkMgPSAvLyBjb2xvciAtIHRydWUgZm9yIHJlZCwgZmFsc2UgZm9yIGJsYWNrXG4gIG5vZGUuTCA9IC8vIGxlZnQgbm9kZVxuICBub2RlLlIgPSAvLyByaWdodCBub2RlXG4gIG5vZGUuUCA9IC8vIHByZXZpb3VzIG5vZGVcbiAgbm9kZS5OID0gbnVsbDsgLy8gbmV4dCBub2RlXG59XG5cblJlZEJsYWNrVHJlZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBSZWRCbGFja1RyZWUsXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbihhZnRlciwgbm9kZSkge1xuICAgIHZhciBwYXJlbnQsIGdyYW5kcGEsIHVuY2xlO1xuXG4gICAgaWYgKGFmdGVyKSB7XG4gICAgICBub2RlLlAgPSBhZnRlcjtcbiAgICAgIG5vZGUuTiA9IGFmdGVyLk47XG4gICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgIGFmdGVyLk4gPSBub2RlO1xuICAgICAgaWYgKGFmdGVyLlIpIHtcbiAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICB3aGlsZSAoYWZ0ZXIuTCkgYWZ0ZXIgPSBhZnRlci5MO1xuICAgICAgICBhZnRlci5MID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFmdGVyLlIgPSBub2RlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIGlmICh0aGlzLl8pIHtcbiAgICAgIGFmdGVyID0gUmVkQmxhY2tGaXJzdCh0aGlzLl8pO1xuICAgICAgbm9kZS5QID0gbnVsbDtcbiAgICAgIG5vZGUuTiA9IGFmdGVyO1xuICAgICAgYWZ0ZXIuUCA9IGFmdGVyLkwgPSBub2RlO1xuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuUCA9IG5vZGUuTiA9IG51bGw7XG4gICAgICB0aGlzLl8gPSBub2RlO1xuICAgICAgcGFyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcbiAgICBub2RlLlUgPSBwYXJlbnQ7XG4gICAgbm9kZS5DID0gdHJ1ZTtcblxuICAgIGFmdGVyID0gbm9kZTtcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5DKSB7XG4gICAgICBncmFuZHBhID0gcGFyZW50LlU7XG4gICAgICBpZiAocGFyZW50ID09PSBncmFuZHBhLkwpIHtcbiAgICAgICAgdW5jbGUgPSBncmFuZHBhLlI7XG4gICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuUikge1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bmNsZSA9IGdyYW5kcGEuTDtcbiAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5MKSB7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgfVxuICAgIHRoaXMuXy5DID0gZmFsc2U7XG4gIH0sXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuTikgbm9kZS5OLlAgPSBub2RlLlA7XG4gICAgaWYgKG5vZGUuUCkgbm9kZS5QLk4gPSBub2RlLk47XG4gICAgbm9kZS5OID0gbm9kZS5QID0gbnVsbDtcblxuICAgIHZhciBwYXJlbnQgPSBub2RlLlUsXG4gICAgICAgIHNpYmxpbmcsXG4gICAgICAgIGxlZnQgPSBub2RlLkwsXG4gICAgICAgIHJpZ2h0ID0gbm9kZS5SLFxuICAgICAgICBuZXh0LFxuICAgICAgICByZWQ7XG5cbiAgICBpZiAoIWxlZnQpIG5leHQgPSByaWdodDtcbiAgICBlbHNlIGlmICghcmlnaHQpIG5leHQgPSBsZWZ0O1xuICAgIGVsc2UgbmV4dCA9IFJlZEJsYWNrRmlyc3QocmlnaHQpO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7XG4gICAgICBlbHNlIHBhcmVudC5SID0gbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobGVmdCAmJiByaWdodCkge1xuICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgbmV4dC5DID0gbm9kZS5DO1xuICAgICAgbmV4dC5MID0gbGVmdDtcbiAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICBpZiAobmV4dCAhPT0gcmlnaHQpIHtcbiAgICAgICAgcGFyZW50ID0gbmV4dC5VO1xuICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgIHBhcmVudC5MID0gbm9kZTtcbiAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgIHJpZ2h0LlUgPSBuZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBuZXh0O1xuICAgICAgICBub2RlID0gbmV4dC5SO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWQgPSBub2RlLkM7XG4gICAgICBub2RlID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobm9kZSkgbm9kZS5VID0gcGFyZW50O1xuICAgIGlmIChyZWQpIHJldHVybjtcbiAgICBpZiAobm9kZSAmJiBub2RlLkMpIHsgbm9kZS5DID0gZmFsc2U7IHJldHVybjsgfVxuXG4gICAgZG8ge1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICBpZiAobm9kZSA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgcGFyZW50LkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgaWYgKCFzaWJsaW5nLlIgfHwgIXNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICB8fCAoc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSkge1xuICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5MLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICB9IHdoaWxlICghbm9kZS5DKTtcblxuICAgIGlmIChub2RlKSBub2RlLkMgPSBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVMZWZ0KHRyZWUsIG5vZGUpIHtcbiAgdmFyIHAgPSBub2RlLFxuICAgICAgcSA9IG5vZGUuUixcbiAgICAgIHBhcmVudCA9IHAuVTtcblxuICBpZiAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7XG4gICAgZWxzZSBwYXJlbnQuUiA9IHE7XG4gIH0gZWxzZSB7XG4gICAgdHJlZS5fID0gcTtcbiAgfVxuXG4gIHEuVSA9IHBhcmVudDtcbiAgcC5VID0gcTtcbiAgcC5SID0gcS5MO1xuICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gIHEuTCA9IHA7XG59XG5cbmZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlUmlnaHQodHJlZSwgbm9kZSkge1xuICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5MLFxuICAgICAgcGFyZW50ID0gcC5VO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgfSBlbHNlIHtcbiAgICB0cmVlLl8gPSBxO1xuICB9XG5cbiAgcS5VID0gcGFyZW50O1xuICBwLlUgPSBxO1xuICBwLkwgPSBxLlI7XG4gIGlmIChwLkwpIHAuTC5VID0gcDtcbiAgcS5SID0gcDtcbn1cblxuZnVuY3Rpb24gUmVkQmxhY2tGaXJzdChub2RlKSB7XG4gIHdoaWxlIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWRCbGFja1RyZWU7XG4iLCJpbXBvcnQge2NlbGxzLCBlZGdlcywgZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWRnZShsZWZ0LCByaWdodCwgdjAsIHYxKSB7XG4gIHZhciBlZGdlID0gW251bGwsIG51bGxdLFxuICAgICAgaW5kZXggPSBlZGdlcy5wdXNoKGVkZ2UpIC0gMTtcbiAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICBpZiAodjApIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHYwKTtcbiAgaWYgKHYxKSBzZXRFZGdlRW5kKGVkZ2UsIHJpZ2h0LCBsZWZ0LCB2MSk7XG4gIGNlbGxzW2xlZnQuaW5kZXhdLmhhbGZlZGdlcy5wdXNoKGluZGV4KTtcbiAgY2VsbHNbcmlnaHQuaW5kZXhdLmhhbGZlZGdlcy5wdXNoKGluZGV4KTtcbiAgcmV0dXJuIGVkZ2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCb3JkZXJFZGdlKGxlZnQsIHYwLCB2MSkge1xuICB2YXIgZWRnZSA9IFt2MCwgdjFdO1xuICBlZGdlLmxlZnQgPSBsZWZ0O1xuICByZXR1cm4gZWRnZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHZlcnRleCkge1xuICBpZiAoIWVkZ2VbMF0gJiYgIWVkZ2VbMV0pIHtcbiAgICBlZGdlWzBdID0gdmVydGV4O1xuICAgIGVkZ2UubGVmdCA9IGxlZnQ7XG4gICAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICB9IGVsc2UgaWYgKGVkZ2UubGVmdCA9PT0gcmlnaHQpIHtcbiAgICBlZGdlWzFdID0gdmVydGV4O1xuICB9IGVsc2Uge1xuICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XG4gIH1cbn1cblxuLy8gTGlhbmfigJNCYXJza3kgbGluZSBjbGlwcGluZy5cbmZ1bmN0aW9uIGNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBhID0gZWRnZVswXSxcbiAgICAgIGIgPSBlZGdlWzFdLFxuICAgICAgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgdDAgPSAwLFxuICAgICAgdDEgPSAxLFxuICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgZHkgPSBieSAtIGF5LFxuICAgICAgcjtcblxuICByID0geDAgLSBheDtcbiAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHgxIC0gYXg7XG4gIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIHIgPSB5MCAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geTEgLSBheTtcbiAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgaWYgKCEodDAgPiAwKSAmJiAhKHQxIDwgMSkpIHJldHVybiB0cnVlOyAvLyBUT0RPIEJldHRlciBjaGVjaz9cblxuICBpZiAodDAgPiAwKSBlZGdlWzBdID0gW2F4ICsgdDAgKiBkeCwgYXkgKyB0MCAqIGR5XTtcbiAgaWYgKHQxIDwgMSkgZWRnZVsxXSA9IFtheCArIHQxICogZHgsIGF5ICsgdDEgKiBkeV07XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0RWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgdjEgPSBlZGdlWzFdO1xuICBpZiAodjEpIHJldHVybiB0cnVlO1xuXG4gIHZhciB2MCA9IGVkZ2VbMF0sXG4gICAgICBsZWZ0ID0gZWRnZS5sZWZ0LFxuICAgICAgcmlnaHQgPSBlZGdlLnJpZ2h0LFxuICAgICAgbHggPSBsZWZ0WzBdLFxuICAgICAgbHkgPSBsZWZ0WzFdLFxuICAgICAgcnggPSByaWdodFswXSxcbiAgICAgIHJ5ID0gcmlnaHRbMV0sXG4gICAgICBmeCA9IChseCArIHJ4KSAvIDIsXG4gICAgICBmeSA9IChseSArIHJ5KSAvIDIsXG4gICAgICBmbSxcbiAgICAgIGZiO1xuXG4gIGlmIChyeSA9PT0gbHkpIHtcbiAgICBpZiAoZnggPCB4MCB8fCBmeCA+PSB4MSkgcmV0dXJuO1xuICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICBpZiAoIXYwKSB2MCA9IFtmeCwgeTBdO1xuICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgIHYxID0gW2Z4LCB5MV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MV07XG4gICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICB2MSA9IFtmeCwgeTBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmbSA9IChseCAtIHJ4KSAvIChyeSAtIGx5KTtcbiAgICBmYiA9IGZ5IC0gZm0gKiBmeDtcbiAgICBpZiAoZm0gPCAtMSB8fCBmbSA+IDEpIHtcbiAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdID49IHkxKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO1xuICAgICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChseSA8IHJ5KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA+PSB4MSkgcmV0dXJuO1xuICAgICAgICB2MSA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gxLCBmbSAqIHgxICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA8IHgwKSByZXR1cm47XG4gICAgICAgIHYxID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVkZ2VbMF0gPSB2MDtcbiAgZWRnZVsxXSA9IHYxO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgaSA9IGVkZ2VzLmxlbmd0aCxcbiAgICAgIGVkZ2U7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICghY29ubmVjdEVkZ2UoZWRnZSA9IGVkZ2VzW2ldLCB4MCwgeTAsIHgxLCB5MSlcbiAgICAgICAgfHwgIWNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICB8fCAhKE1hdGguYWJzKGVkZ2VbMF1bMF0gLSBlZGdlWzFdWzBdKSA+IGVwc2lsb25cbiAgICAgICAgICAgIHx8IE1hdGguYWJzKGVkZ2VbMF1bMV0gLSBlZGdlWzFdWzFdKSA+IGVwc2lsb24pKSB7XG4gICAgICBkZWxldGUgZWRnZXNbaV07XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge2NyZWF0ZUJvcmRlckVkZ2V9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCB7Y2VsbHMsIGVkZ2VzLCBlcHNpbG9ufSBmcm9tIFwiLi9EaWFncmFtXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDZWxsKHNpdGUpIHtcbiAgcmV0dXJuIGNlbGxzW3NpdGUuaW5kZXhdID0ge1xuICAgIHNpdGU6IHNpdGUsXG4gICAgaGFsZmVkZ2VzOiBbXVxuICB9O1xufVxuXG5mdW5jdGlvbiBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlKSB7XG4gIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgdmEgPSBlZGdlLmxlZnQsXG4gICAgICB2YiA9IGVkZ2UucmlnaHQ7XG4gIGlmIChzaXRlID09PSB2YikgdmIgPSB2YSwgdmEgPSBzaXRlO1xuICBpZiAodmIpIHJldHVybiBNYXRoLmF0YW4yKHZiWzFdIC0gdmFbMV0sIHZiWzBdIC0gdmFbMF0pO1xuICBpZiAoc2l0ZSA9PT0gdmEpIHZhID0gZWRnZVsxXSwgdmIgPSBlZGdlWzBdO1xuICBlbHNlIHZhID0gZWRnZVswXSwgdmIgPSBlZGdlWzFdO1xuICByZXR1cm4gTWF0aC5hdGFuMih2YVswXSAtIHZiWzBdLCB2YlsxXSAtIHZhWzFdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2UpIHtcbiAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgIT09IGNlbGwuc2l0ZSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2UpIHtcbiAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgPT09IGNlbGwuc2l0ZSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydENlbGxIYWxmZWRnZXMoKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gY2VsbHMubGVuZ3RoLCBjZWxsLCBoYWxmZWRnZXMsIGosIG07IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGNlbGwgPSBjZWxsc1tpXSkgJiYgKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHtcbiAgICAgIHZhciBpbmRleCA9IG5ldyBBcnJheShtKSxcbiAgICAgICAgICBhcnJheSA9IG5ldyBBcnJheShtKTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGluZGV4W2pdID0gaiwgYXJyYXlbal0gPSBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlc1toYWxmZWRnZXNbal1dKTtcbiAgICAgIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gYXJyYXlbal0gLSBhcnJheVtpXTsgfSk7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBhcnJheVtqXSA9IGhhbGZlZGdlc1tpbmRleFtqXV07XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBoYWxmZWRnZXNbal0gPSBhcnJheVtqXTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsaXBDZWxscyh4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbkNlbGxzID0gY2VsbHMubGVuZ3RoLFxuICAgICAgaUNlbGwsXG4gICAgICBjZWxsLFxuICAgICAgc2l0ZSxcbiAgICAgIGlIYWxmZWRnZSxcbiAgICAgIGhhbGZlZGdlcyxcbiAgICAgIG5IYWxmZWRnZXMsXG4gICAgICBzdGFydCxcbiAgICAgIHN0YXJ0WCxcbiAgICAgIHN0YXJ0WSxcbiAgICAgIGVuZCxcbiAgICAgIGVuZFgsXG4gICAgICBlbmRZLFxuICAgICAgY292ZXIgPSB0cnVlO1xuXG4gIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXM7XG4gICAgICBpSGFsZmVkZ2UgPSBoYWxmZWRnZXMubGVuZ3RoO1xuXG4gICAgICAvLyBSZW1vdmUgYW55IGRhbmdsaW5nIGNsaXBwZWQgZWRnZXMuXG4gICAgICB3aGlsZSAoaUhhbGZlZGdlLS0pIHtcbiAgICAgICAgaWYgKCFlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pIHtcbiAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSW5zZXJ0IGFueSBib3JkZXIgZWRnZXMgYXMgbmVjZXNzYXJ5LlxuICAgICAgaUhhbGZlZGdlID0gMCwgbkhhbGZlZGdlcyA9IGhhbGZlZGdlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaUhhbGZlZGdlIDwgbkhhbGZlZGdlcykge1xuICAgICAgICBlbmQgPSBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZXNbaGFsZmVkZ2VzW2lIYWxmZWRnZV1dKSwgZW5kWCA9IGVuZFswXSwgZW5kWSA9IGVuZFsxXTtcbiAgICAgICAgc3RhcnQgPSBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1toYWxmZWRnZXNbKytpSGFsZmVkZ2UgJSBuSGFsZmVkZ2VzXV0pLCBzdGFydFggPSBzdGFydFswXSwgc3RhcnRZID0gc3RhcnRbMV07XG4gICAgICAgIGlmIChNYXRoLmFicyhlbmRYIC0gc3RhcnRYKSA+IGVwc2lsb24gfHwgTWF0aC5hYnMoZW5kWSAtIHN0YXJ0WSkgPiBlcHNpbG9uKSB7XG4gICAgICAgICAgaGFsZmVkZ2VzLnNwbGljZShpSGFsZmVkZ2UsIDAsIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCBlbmQsXG4gICAgICAgICAgICAgIE1hdGguYWJzKGVuZFggLSB4MCkgPCBlcHNpbG9uICYmIHkxIC0gZW5kWSA+IGVwc2lsb24gPyBbeDAsIE1hdGguYWJzKHN0YXJ0WCAtIHgwKSA8IGVwc2lsb24gPyBzdGFydFkgOiB5MV1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRZIC0geTEpIDwgZXBzaWxvbiAmJiB4MSAtIGVuZFggPiBlcHNpbG9uID8gW01hdGguYWJzKHN0YXJ0WSAtIHkxKSA8IGVwc2lsb24gPyBzdGFydFggOiB4MSwgeTFdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWCAtIHgxKSA8IGVwc2lsb24gJiYgZW5kWSAtIHkwID4gZXBzaWxvbiA/IFt4MSwgTWF0aC5hYnMoc3RhcnRYIC0geDEpIDwgZXBzaWxvbiA/IHN0YXJ0WSA6IHkwXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MCkgPCBlcHNpbG9uICYmIGVuZFggLSB4MCA+IGVwc2lsb24gPyBbTWF0aC5hYnMoc3RhcnRZIC0geTApIDwgZXBzaWxvbiA/IHN0YXJ0WCA6IHgwLCB5MF1cbiAgICAgICAgICAgICAgOiBudWxsKSkgLSAxKTtcbiAgICAgICAgICArK25IYWxmZWRnZXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5IYWxmZWRnZXMpIGNvdmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgdGhlcmUgd2VyZW7igJl0IGFueSBlZGdlcywgaGF2ZSB0aGUgY2xvc2VzdCBzaXRlIGNvdmVyIHRoZSBleHRlbnQuXG4gIC8vIEl0IGRvZXNu4oCZdCBtYXR0ZXIgd2hpY2ggY29ybmVyIG9mIHRoZSBleHRlbnQgd2UgbWVhc3VyZSFcbiAgaWYgKGNvdmVyKSB7XG4gICAgdmFyIGR4LCBkeSwgZDIsIGRjID0gSW5maW5pdHk7XG5cbiAgICBmb3IgKGlDZWxsID0gMCwgY292ZXIgPSBudWxsOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgICAgc2l0ZSA9IGNlbGwuc2l0ZTtcbiAgICAgICAgZHggPSBzaXRlWzBdIC0geDA7XG4gICAgICAgIGR5ID0gc2l0ZVsxXSAtIHkwO1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCBkYykgZGMgPSBkMiwgY292ZXIgPSBjZWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb3Zlcikge1xuICAgICAgdmFyIHYwMCA9IFt4MCwgeTBdLCB2MDEgPSBbeDAsIHkxXSwgdjExID0gW3gxLCB5MV0sIHYxMCA9IFt4MSwgeTBdO1xuICAgICAgY292ZXIuaGFsZmVkZ2VzLnB1c2goXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlID0gY292ZXIuc2l0ZSwgdjAwLCB2MDEpKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MDEsIHYxMSkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYxMSwgdjEwKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjEwLCB2MDApKSAtIDFcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gTGFzdGx5IGRlbGV0ZSBhbnkgY2VsbHMgd2l0aCBubyBlZGdlczsgdGhlc2Ugd2VyZSBlbnRpcmVseSBjbGlwcGVkLlxuICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgaWYgKCFjZWxsLmhhbGZlZGdlcy5sZW5ndGgpIHtcbiAgICAgICAgZGVsZXRlIGNlbGxzW2lDZWxsXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7UmVkQmxhY2tOb2RlfSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcbmltcG9ydCB7Y2lyY2xlcywgZXBzaWxvbjJ9IGZyb20gXCIuL0RpYWdyYW1cIjtcblxudmFyIGNpcmNsZVBvb2wgPSBbXTtcblxuZXhwb3J0IHZhciBmaXJzdENpcmNsZTtcblxuZnVuY3Rpb24gQ2lyY2xlKCkge1xuICBSZWRCbGFja05vZGUodGhpcyk7XG4gIHRoaXMueCA9XG4gIHRoaXMueSA9XG4gIHRoaXMuYXJjID1cbiAgdGhpcy5zaXRlID1cbiAgdGhpcy5jeSA9IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hDaXJjbGUoYXJjKSB7XG4gIHZhciBsQXJjID0gYXJjLlAsXG4gICAgICByQXJjID0gYXJjLk47XG5cbiAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG5cbiAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgY1NpdGUgPSBhcmMuc2l0ZSxcbiAgICAgIHJTaXRlID0gckFyYy5zaXRlO1xuXG4gIGlmIChsU2l0ZSA9PT0gclNpdGUpIHJldHVybjtcblxuICB2YXIgYnggPSBjU2l0ZVswXSxcbiAgICAgIGJ5ID0gY1NpdGVbMV0sXG4gICAgICBheCA9IGxTaXRlWzBdIC0gYngsXG4gICAgICBheSA9IGxTaXRlWzFdIC0gYnksXG4gICAgICBjeCA9IHJTaXRlWzBdIC0gYngsXG4gICAgICBjeSA9IHJTaXRlWzFdIC0gYnk7XG5cbiAgdmFyIGQgPSAyICogKGF4ICogY3kgLSBheSAqIGN4KTtcbiAgaWYgKGQgPj0gLWVwc2lsb24yKSByZXR1cm47XG5cbiAgdmFyIGhhID0gYXggKiBheCArIGF5ICogYXksXG4gICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgeCA9IChjeSAqIGhhIC0gYXkgKiBoYykgLyBkLFxuICAgICAgeSA9IChheCAqIGhjIC0gY3ggKiBoYSkgLyBkO1xuXG4gIHZhciBjaXJjbGUgPSBjaXJjbGVQb29sLnBvcCgpIHx8IG5ldyBDaXJjbGU7XG4gIGNpcmNsZS5hcmMgPSBhcmM7XG4gIGNpcmNsZS5zaXRlID0gY1NpdGU7XG4gIGNpcmNsZS54ID0geCArIGJ4O1xuICBjaXJjbGUueSA9IChjaXJjbGUuY3kgPSB5ICsgYnkpICsgTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpOyAvLyB5IGJvdHRvbVxuXG4gIGFyYy5jaXJjbGUgPSBjaXJjbGU7XG5cbiAgdmFyIGJlZm9yZSA9IG51bGwsXG4gICAgICBub2RlID0gY2lyY2xlcy5fO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKGNpcmNsZS55IDwgbm9kZS55IHx8IChjaXJjbGUueSA9PT0gbm9kZS55ICYmIGNpcmNsZS54IDw9IG5vZGUueCkpIHtcbiAgICAgIGlmIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG4gICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZS5QOyBicmVhazsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobm9kZS5SKSBub2RlID0gbm9kZS5SO1xuICAgICAgZWxzZSB7IGJlZm9yZSA9IG5vZGU7IGJyZWFrOyB9XG4gICAgfVxuICB9XG5cbiAgY2lyY2xlcy5pbnNlcnQoYmVmb3JlLCBjaXJjbGUpO1xuICBpZiAoIWJlZm9yZSkgZmlyc3RDaXJjbGUgPSBjaXJjbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRhY2hDaXJjbGUoYXJjKSB7XG4gIHZhciBjaXJjbGUgPSBhcmMuY2lyY2xlO1xuICBpZiAoY2lyY2xlKSB7XG4gICAgaWYgKCFjaXJjbGUuUCkgZmlyc3RDaXJjbGUgPSBjaXJjbGUuTjtcbiAgICBjaXJjbGVzLnJlbW92ZShjaXJjbGUpO1xuICAgIGNpcmNsZVBvb2wucHVzaChjaXJjbGUpO1xuICAgIFJlZEJsYWNrTm9kZShjaXJjbGUpO1xuICAgIGFyYy5jaXJjbGUgPSBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQge1JlZEJsYWNrTm9kZX0gZnJvbSBcIi4vUmVkQmxhY2tUcmVlXCI7XG5pbXBvcnQge2NyZWF0ZUNlbGx9IGZyb20gXCIuL0NlbGxcIjtcbmltcG9ydCB7YXR0YWNoQ2lyY2xlLCBkZXRhY2hDaXJjbGV9IGZyb20gXCIuL0NpcmNsZVwiO1xuaW1wb3J0IHtjcmVhdGVFZGdlLCBzZXRFZGdlRW5kfSBmcm9tIFwiLi9FZGdlXCI7XG5pbXBvcnQge2JlYWNoZXMsIGVwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxudmFyIGJlYWNoUG9vbCA9IFtdO1xuXG5mdW5jdGlvbiBCZWFjaCgpIHtcbiAgUmVkQmxhY2tOb2RlKHRoaXMpO1xuICB0aGlzLmVkZ2UgPVxuICB0aGlzLnNpdGUgPVxuICB0aGlzLmNpcmNsZSA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJlYWNoKHNpdGUpIHtcbiAgdmFyIGJlYWNoID0gYmVhY2hQb29sLnBvcCgpIHx8IG5ldyBCZWFjaDtcbiAgYmVhY2guc2l0ZSA9IHNpdGU7XG4gIHJldHVybiBiZWFjaDtcbn1cblxuZnVuY3Rpb24gZGV0YWNoQmVhY2goYmVhY2gpIHtcbiAgZGV0YWNoQ2lyY2xlKGJlYWNoKTtcbiAgYmVhY2hlcy5yZW1vdmUoYmVhY2gpO1xuICBiZWFjaFBvb2wucHVzaChiZWFjaCk7XG4gIFJlZEJsYWNrTm9kZShiZWFjaCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVCZWFjaChiZWFjaCkge1xuICB2YXIgY2lyY2xlID0gYmVhY2guY2lyY2xlLFxuICAgICAgeCA9IGNpcmNsZS54LFxuICAgICAgeSA9IGNpcmNsZS5jeSxcbiAgICAgIHZlcnRleCA9IFt4LCB5XSxcbiAgICAgIHByZXZpb3VzID0gYmVhY2guUCxcbiAgICAgIG5leHQgPSBiZWFjaC5OLFxuICAgICAgZGlzYXBwZWFyaW5nID0gW2JlYWNoXTtcblxuICBkZXRhY2hCZWFjaChiZWFjaCk7XG5cbiAgdmFyIGxBcmMgPSBwcmV2aW91cztcbiAgd2hpbGUgKGxBcmMuY2lyY2xlXG4gICAgICAmJiBNYXRoLmFicyh4IC0gbEFyYy5jaXJjbGUueCkgPCBlcHNpbG9uXG4gICAgICAmJiBNYXRoLmFicyh5IC0gbEFyYy5jaXJjbGUuY3kpIDwgZXBzaWxvbikge1xuICAgIHByZXZpb3VzID0gbEFyYy5QO1xuICAgIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICAgIGRldGFjaEJlYWNoKGxBcmMpO1xuICAgIGxBcmMgPSBwcmV2aW91cztcbiAgfVxuXG4gIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICBkZXRhY2hDaXJjbGUobEFyYyk7XG5cbiAgdmFyIHJBcmMgPSBuZXh0O1xuICB3aGlsZSAockFyYy5jaXJjbGVcbiAgICAgICYmIE1hdGguYWJzKHggLSByQXJjLmNpcmNsZS54KSA8IGVwc2lsb25cbiAgICAgICYmIE1hdGguYWJzKHkgLSByQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uKSB7XG4gICAgbmV4dCA9IHJBcmMuTjtcbiAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcbiAgICBkZXRhY2hCZWFjaChyQXJjKTtcbiAgICByQXJjID0gbmV4dDtcbiAgfVxuXG4gIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICBkZXRhY2hDaXJjbGUockFyYyk7XG5cbiAgdmFyIG5BcmNzID0gZGlzYXBwZWFyaW5nLmxlbmd0aCxcbiAgICAgIGlBcmM7XG4gIGZvciAoaUFyYyA9IDE7IGlBcmMgPCBuQXJjczsgKytpQXJjKSB7XG4gICAgckFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjXTtcbiAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcbiAgICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbEFyYy5zaXRlLCByQXJjLnNpdGUsIHZlcnRleCk7XG4gIH1cblxuICBsQXJjID0gZGlzYXBwZWFyaW5nWzBdO1xuICByQXJjID0gZGlzYXBwZWFyaW5nW25BcmNzIC0gMV07XG4gIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsIHZlcnRleCk7XG5cbiAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICBhdHRhY2hDaXJjbGUockFyYyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRCZWFjaChzaXRlKSB7XG4gIHZhciB4ID0gc2l0ZVswXSxcbiAgICAgIGRpcmVjdHJpeCA9IHNpdGVbMV0sXG4gICAgICBsQXJjLFxuICAgICAgckFyYyxcbiAgICAgIGR4bCxcbiAgICAgIGR4cixcbiAgICAgIG5vZGUgPSBiZWFjaGVzLl87XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBkeGwgPSBsZWZ0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpIC0geDtcbiAgICBpZiAoZHhsID4gZXBzaWxvbikgbm9kZSA9IG5vZGUuTDsgZWxzZSB7XG4gICAgICBkeHIgPSB4IC0gcmlnaHRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCk7XG4gICAgICBpZiAoZHhyID4gZXBzaWxvbikge1xuICAgICAgICBpZiAoIW5vZGUuUikge1xuICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLlI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZHhsID4gLWVwc2lsb24pIHtcbiAgICAgICAgICBsQXJjID0gbm9kZS5QO1xuICAgICAgICAgIHJBcmMgPSBub2RlO1xuICAgICAgICB9IGVsc2UgaWYgKGR4ciA+IC1lcHNpbG9uKSB7XG4gICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgckFyYyA9IG5vZGUuTjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsQXJjID0gckFyYyA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlQ2VsbChzaXRlKTtcbiAgdmFyIG5ld0FyYyA9IGNyZWF0ZUJlYWNoKHNpdGUpO1xuICBiZWFjaGVzLmluc2VydChsQXJjLCBuZXdBcmMpO1xuXG4gIGlmICghbEFyYyAmJiAhckFyYykgcmV0dXJuO1xuXG4gIGlmIChsQXJjID09PSByQXJjKSB7XG4gICAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIHJBcmMgPSBjcmVhdGVCZWFjaChsQXJjLnNpdGUpO1xuICAgIGJlYWNoZXMuaW5zZXJ0KG5ld0FyYywgckFyYyk7XG4gICAgbmV3QXJjLmVkZ2UgPSByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgICBhdHRhY2hDaXJjbGUockFyYyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFyQXJjKSB7IC8vICYmIGxBcmNcbiAgICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZWxzZSBsQXJjICE9PSByQXJjXG4gIGRldGFjaENpcmNsZShsQXJjKTtcbiAgZGV0YWNoQ2lyY2xlKHJBcmMpO1xuXG4gIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSxcbiAgICAgIGF4ID0gbFNpdGVbMF0sXG4gICAgICBheSA9IGxTaXRlWzFdLFxuICAgICAgYnggPSBzaXRlWzBdIC0gYXgsXG4gICAgICBieSA9IHNpdGVbMV0gLSBheSxcbiAgICAgIHJTaXRlID0gckFyYy5zaXRlLFxuICAgICAgY3ggPSByU2l0ZVswXSAtIGF4LFxuICAgICAgY3kgPSByU2l0ZVsxXSAtIGF5LFxuICAgICAgZCA9IDIgKiAoYnggKiBjeSAtIGJ5ICogY3gpLFxuICAgICAgaGIgPSBieCAqIGJ4ICsgYnkgKiBieSxcbiAgICAgIGhjID0gY3ggKiBjeCArIGN5ICogY3ksXG4gICAgICB2ZXJ0ZXggPSBbKGN5ICogaGIgLSBieSAqIGhjKSAvIGQgKyBheCwgKGJ4ICogaGMgLSBjeCAqIGhiKSAvIGQgKyBheV07XG5cbiAgc2V0RWRnZUVuZChyQXJjLmVkZ2UsIGxTaXRlLCByU2l0ZSwgdmVydGV4KTtcbiAgbmV3QXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxTaXRlLCBzaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKHNpdGUsIHJTaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gIGF0dGFjaENpcmNsZShyQXJjKTtcbn1cblxuZnVuY3Rpb24gbGVmdEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgdmFyIHNpdGUgPSBhcmMuc2l0ZSxcbiAgICAgIHJmb2N4ID0gc2l0ZVswXSxcbiAgICAgIHJmb2N5ID0gc2l0ZVsxXSxcbiAgICAgIHBieTIgPSByZm9jeSAtIGRpcmVjdHJpeDtcblxuICBpZiAoIXBieTIpIHJldHVybiByZm9jeDtcblxuICB2YXIgbEFyYyA9IGFyYy5QO1xuICBpZiAoIWxBcmMpIHJldHVybiAtSW5maW5pdHk7XG5cbiAgc2l0ZSA9IGxBcmMuc2l0ZTtcbiAgdmFyIGxmb2N4ID0gc2l0ZVswXSxcbiAgICAgIGxmb2N5ID0gc2l0ZVsxXSxcbiAgICAgIHBsYnkyID0gbGZvY3kgLSBkaXJlY3RyaXg7XG5cbiAgaWYgKCFwbGJ5MikgcmV0dXJuIGxmb2N4O1xuXG4gIHZhciBobCA9IGxmb2N4IC0gcmZvY3gsXG4gICAgICBhYnkyID0gMSAvIHBieTIgLSAxIC8gcGxieTIsXG4gICAgICBiID0gaGwgLyBwbGJ5MjtcblxuICBpZiAoYWJ5MikgcmV0dXJuICgtYiArIE1hdGguc3FydChiICogYiAtIDIgKiBhYnkyICogKGhsICogaGwgLyAoLTIgKiBwbGJ5MikgLSBsZm9jeSArIHBsYnkyIC8gMiArIHJmb2N5IC0gcGJ5MiAvIDIpKSkgLyBhYnkyICsgcmZvY3g7XG5cbiAgcmV0dXJuIChyZm9jeCArIGxmb2N4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHJpZ2h0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICB2YXIgckFyYyA9IGFyYy5OO1xuICBpZiAockFyYykgcmV0dXJuIGxlZnRCcmVha1BvaW50KHJBcmMsIGRpcmVjdHJpeCk7XG4gIHZhciBzaXRlID0gYXJjLnNpdGU7XG4gIHJldHVybiBzaXRlWzFdID09PSBkaXJlY3RyaXggPyBzaXRlWzBdIDogSW5maW5pdHk7XG59XG4iLCJpbXBvcnQge2FkZEJlYWNoLCByZW1vdmVCZWFjaH0gZnJvbSBcIi4vQmVhY2hcIjtcbmltcG9ydCB7c29ydENlbGxIYWxmZWRnZXMsIGNlbGxIYWxmZWRnZVN0YXJ0LCBjbGlwQ2VsbHN9IGZyb20gXCIuL0NlbGxcIjtcbmltcG9ydCB7Zmlyc3RDaXJjbGV9IGZyb20gXCIuL0NpcmNsZVwiO1xuaW1wb3J0IHtjbGlwRWRnZXN9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCBSZWRCbGFja1RyZWUgZnJvbSBcIi4vUmVkQmxhY2tUcmVlXCI7XG5cbmV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTY7XG5leHBvcnQgdmFyIGVwc2lsb24yID0gMWUtMTI7XG5leHBvcnQgdmFyIGJlYWNoZXM7XG5leHBvcnQgdmFyIGNlbGxzO1xuZXhwb3J0IHZhciBjaXJjbGVzO1xuZXhwb3J0IHZhciBlZGdlcztcblxuZnVuY3Rpb24gdHJpYW5nbGVBcmVhKGEsIGIsIGMpIHtcbiAgcmV0dXJuIChhWzBdIC0gY1swXSkgKiAoYlsxXSAtIGFbMV0pIC0gKGFbMF0gLSBiWzBdKSAqIChjWzFdIC0gYVsxXSk7XG59XG5cbmZ1bmN0aW9uIGxleGljb2dyYXBoaWMoYSwgYikge1xuICByZXR1cm4gYlsxXSAtIGFbMV1cbiAgICAgIHx8IGJbMF0gLSBhWzBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEaWFncmFtKHNpdGVzLCBleHRlbnQpIHtcbiAgdmFyIHNpdGUgPSBzaXRlcy5zb3J0KGxleGljb2dyYXBoaWMpLnBvcCgpLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBjaXJjbGU7XG5cbiAgZWRnZXMgPSBbXTtcbiAgY2VsbHMgPSBuZXcgQXJyYXkoc2l0ZXMubGVuZ3RoKTtcbiAgYmVhY2hlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG4gIGNpcmNsZXMgPSBuZXcgUmVkQmxhY2tUcmVlO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY2lyY2xlID0gZmlyc3RDaXJjbGU7XG4gICAgaWYgKHNpdGUgJiYgKCFjaXJjbGUgfHwgc2l0ZVsxXSA8IGNpcmNsZS55IHx8IChzaXRlWzFdID09PSBjaXJjbGUueSAmJiBzaXRlWzBdIDwgY2lyY2xlLngpKSkge1xuICAgICAgaWYgKHNpdGVbMF0gIT09IHggfHwgc2l0ZVsxXSAhPT0geSkge1xuICAgICAgICBhZGRCZWFjaChzaXRlKTtcbiAgICAgICAgeCA9IHNpdGVbMF0sIHkgPSBzaXRlWzFdO1xuICAgICAgfVxuICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoY2lyY2xlKSB7XG4gICAgICByZW1vdmVCZWFjaChjaXJjbGUuYXJjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgc29ydENlbGxIYWxmZWRnZXMoKTtcblxuICBpZiAoZXh0ZW50KSB7XG4gICAgdmFyIHgwID0gK2V4dGVudFswXVswXSxcbiAgICAgICAgeTAgPSArZXh0ZW50WzBdWzFdLFxuICAgICAgICB4MSA9ICtleHRlbnRbMV1bMF0sXG4gICAgICAgIHkxID0gK2V4dGVudFsxXVsxXTtcbiAgICBjbGlwRWRnZXMoeDAsIHkwLCB4MSwgeTEpO1xuICAgIGNsaXBDZWxscyh4MCwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICB0aGlzLmVkZ2VzID0gZWRnZXM7XG4gIHRoaXMuY2VsbHMgPSBjZWxscztcblxuICBiZWFjaGVzID1cbiAgY2lyY2xlcyA9XG4gIGVkZ2VzID1cbiAgY2VsbHMgPSBudWxsO1xufVxuXG5EaWFncmFtLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpYWdyYW0sXG5cbiAgcG9seWdvbnM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlZGdlcyA9IHRoaXMuZWRnZXM7XG5cbiAgICByZXR1cm4gdGhpcy5jZWxscy5tYXAoZnVuY3Rpb24oY2VsbCkge1xuICAgICAgdmFyIHBvbHlnb24gPSBjZWxsLmhhbGZlZGdlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaV0pOyB9KTtcbiAgICAgIHBvbHlnb24uZGF0YSA9IGNlbGwuc2l0ZS5kYXRhO1xuICAgICAgcmV0dXJuIHBvbHlnb247XG4gICAgfSk7XG4gIH0sXG5cbiAgdHJpYW5nbGVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHJpYW5nbGVzID0gW10sXG4gICAgICAgIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgIHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG4gICAgICBpZiAoIShtID0gKGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzKS5sZW5ndGgpKSByZXR1cm47XG4gICAgICB2YXIgc2l0ZSA9IGNlbGwuc2l0ZSxcbiAgICAgICAgICBoYWxmZWRnZXMsXG4gICAgICAgICAgaiA9IC0xLFxuICAgICAgICAgIG0sXG4gICAgICAgICAgczAsXG4gICAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbbSAtIDFdXSxcbiAgICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG5cbiAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIGUxID0gZWRnZXNbaGFsZmVkZ2VzW2pdXTtcbiAgICAgICAgczEgPSBlMS5sZWZ0ID09PSBzaXRlID8gZTEucmlnaHQgOiBlMS5sZWZ0O1xuICAgICAgICBpZiAoczAgJiYgczEgJiYgaSA8IHMwLmluZGV4ICYmIGkgPCBzMS5pbmRleCAmJiB0cmlhbmdsZUFyZWEoc2l0ZSwgczAsIHMxKSA8IDApIHtcbiAgICAgICAgICB0cmlhbmdsZXMucHVzaChbc2l0ZS5kYXRhLCBzMC5kYXRhLCBzMS5kYXRhXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0cmlhbmdsZXM7XG4gIH0sXG5cbiAgbGlua3M6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVkZ2VzLmZpbHRlcihmdW5jdGlvbihlZGdlKSB7XG4gICAgICByZXR1cm4gZWRnZS5yaWdodDtcbiAgICB9KS5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlOiBlZGdlLmxlZnQuZGF0YSxcbiAgICAgICAgdGFyZ2V0OiBlZGdlLnJpZ2h0LmRhdGFcbiAgICAgIH07XG4gICAgfSk7XG4gIH0sXG5cbiAgZmluZDogZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzLCBpMCwgaTEgPSB0aGF0Ll9mb3VuZCB8fCAwLCBuID0gdGhhdC5jZWxscy5sZW5ndGgsIGNlbGw7XG5cbiAgICAvLyBVc2UgdGhlIHByZXZpb3VzbHktZm91bmQgY2VsbCwgb3Igc3RhcnQgd2l0aCBhbiBhcmJpdHJhcnkgb25lLlxuICAgIHdoaWxlICghKGNlbGwgPSB0aGF0LmNlbGxzW2kxXSkpIGlmICgrK2kxID49IG4pIHJldHVybiBudWxsO1xuICAgIHZhciBkeCA9IHggLSBjZWxsLnNpdGVbMF0sIGR5ID0geSAtIGNlbGwuc2l0ZVsxXSwgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcblxuICAgIC8vIFRyYXZlcnNlIHRoZSBoYWxmLWVkZ2VzIHRvIGZpbmQgYSBjbG9zZXIgY2VsbCwgaWYgYW55LlxuICAgIGRvIHtcbiAgICAgIGNlbGwgPSB0aGF0LmNlbGxzW2kwID0gaTFdLCBpMSA9IG51bGw7XG4gICAgICBjZWxsLmhhbGZlZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGVkZ2UgPSB0aGF0LmVkZ2VzW2VdLCB2ID0gZWRnZS5sZWZ0O1xuICAgICAgICBpZiAoKHYgPT09IGNlbGwuc2l0ZSB8fCAhdikgJiYgISh2ID0gZWRnZS5yaWdodCkpIHJldHVybjtcbiAgICAgICAgdmFyIHZ4ID0geCAtIHZbMF0sIHZ5ID0geSAtIHZbMV0sIHYyID0gdnggKiB2eCArIHZ5ICogdnk7XG4gICAgICAgIGlmICh2MiA8IGQyKSBkMiA9IHYyLCBpMSA9IHYuaW5kZXg7XG4gICAgICB9KTtcbiAgICB9IHdoaWxlIChpMSAhPT0gbnVsbCk7XG5cbiAgICB0aGF0Ll9mb3VuZCA9IGkwO1xuXG4gICAgcmV0dXJuIHJhZGl1cyA9PSBudWxsIHx8IGQyIDw9IHJhZGl1cyAqIHJhZGl1cyA/IGNlbGwuc2l0ZSA6IG51bGw7XG4gIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBUcmFuc2Zvcm0oaywgeCwgeSkge1xuICB0aGlzLmsgPSBrO1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtLFxuICBzY2FsZTogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBrID09PSAxID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rICogaywgdGhpcy54LCB0aGlzLnkpO1xuICB9LFxuICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4geCA9PT0gMCAmIHkgPT09IDAgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmssIHRoaXMueCArIHRoaXMuayAqIHgsIHRoaXMueSArIHRoaXMuayAqIHkpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gW3BvaW50WzBdICogdGhpcy5rICsgdGhpcy54LCBwb2ludFsxXSAqIHRoaXMuayArIHRoaXMueV07XG4gIH0sXG4gIGFwcGx5WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4ICogdGhpcy5rICsgdGhpcy54O1xuICB9LFxuICBhcHBseVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geSAqIHRoaXMuayArIHRoaXMueTtcbiAgfSxcbiAgaW52ZXJ0OiBmdW5jdGlvbihsb2NhdGlvbikge1xuICAgIHJldHVybiBbKGxvY2F0aW9uWzBdIC0gdGhpcy54KSAvIHRoaXMuaywgKGxvY2F0aW9uWzFdIC0gdGhpcy55KSAvIHRoaXMua107XG4gIH0sXG4gIGludmVydFg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gKHggLSB0aGlzLngpIC8gdGhpcy5rO1xuICB9LFxuICBpbnZlcnRZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuICh5IC0gdGhpcy55KSAvIHRoaXMuaztcbiAgfSxcbiAgcmVzY2FsZVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geC5jb3B5KCkuZG9tYWluKHgucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRYLCB0aGlzKS5tYXAoeC5pbnZlcnQsIHgpKTtcbiAgfSxcbiAgcmVzY2FsZVk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4geS5jb3B5KCkuZG9tYWluKHkucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRZLCB0aGlzKS5tYXAoeS5pbnZlcnQsIHkpKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMueCArIFwiLFwiICsgdGhpcy55ICsgXCIpIHNjYWxlKFwiICsgdGhpcy5rICsgXCIpXCI7XG4gIH1cbn07XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSBuZXcgVHJhbnNmb3JtKDEsIDAsIDApO1xuXG50cmFuc2Zvcm0ucHJvdG90eXBlID0gVHJhbnNmb3JtLnByb3RvdHlwZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtKG5vZGUpIHtcbiAgd2hpbGUgKCFub2RlLl9fem9vbSkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybiBpZGVudGl0eTtcbiAgcmV0dXJuIG5vZGUuX196b29tO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuLy8gaW1wb3J0IHtzZWxlY3QsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG4vLyBpbXBvcnQgdHJhbnNpdGlvbiBmcm9tICdkMy10cmFuc2l0aW9uJztcbmltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sdGlwIHtcbiAgICBjb25zdHJ1Y3RvcihpZCwgdmVyYm9zZT1mYWxzZSwgb2Zmc2V0WD0zMCwgb2Zmc2V0WT0tNDAsIGR1cmF0aW9uPTEwMCl7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy52ZXJib3NlID0gdmVyYm9zZTtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gb2Zmc2V0WDtcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gb2Zmc2V0WTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIH1cblxuICAgIHNob3coaW5mbykge1xuICAgICAgICBpZih0aGlzLnZlcmJvc2UpIGNvbnNvbGUubG9nKGluZm8pO1xuICAgICAgICB0aGlzLmVkaXQoaW5mbyk7XG4gICAgICAgIHRoaXMubW92ZSgpO1xuICAgICAgICBkMy5zZWxlY3QoXCIjXCIgKyB0aGlzLmlkKVxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcImlubGluZVwiKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKHRoaXMuZHVyYXRpb24pXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEuMCk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgZDMuc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjApO1xuICAgICAgICB0aGlzLmVkaXQoXCJcIik7XG4gICAgfVxuXG4gICAgbW92ZSh4ID0gZDMuZXZlbnQucGFnZVgsIHkgPSBkMy5ldmVudC5wYWdlWSkge1xuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh4KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHkpO1xuICAgICAgICB9XG4gICAgICAgIHggPSB4ICsgdGhpcy5vZmZzZXRYOyAvLyBUT0RPOiBnZXQgcmlkIG9mIHRoZSBoYXJkLWNvZGVkIGFkanVzdG1lbnRcbiAgICAgICAgeSA9ICh5ICsgdGhpcy5vZmZzZXRZKTwwPzEwOnkrdGhpcy5vZmZzZXRZO1xuICAgICAgICBkMy5zZWxlY3QoXCIjXCIrdGhpcy5pZClcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgYCR7eH1weGApXG4gICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgYCR7eX1weGApO1xuICAgIH1cblxuICAgIGVkaXQoaW5mbykge1xuICAgICAgICBkMy5zZWxlY3QoXCIjXCIgKyB0aGlzLmlkKVxuICAgICAgICAgICAgLmh0bWwoaW5mbyk7XG4gICAgfVxufVxuXG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5pbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtzY2FsZUJhbmR9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHtuZXN0fSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuXG5pbXBvcnQge3NldENvbG9yU2NhbGUsIGRyYXdDb2xvckxlZ2VuZH0gZnJvbSBcIi4uL3V0aWxzL2NvbG9yLXV0aWxzXCI7XG5pbXBvcnQgVG9vbGJhciBmcm9tIFwiLi9Ub29sYmFyXCI7XG5pbXBvcnQgVG9vbHRpcCBmcm9tIFwiLi9Ub29sdGlwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYXRtYXAge1xuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIGRhdGEge0xpc3R9LCBhIGxpc3Qgb2Ygb2JqZWN0cyB3aXRoIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczogeDogdGhlIHggbGFiZWwsIHk6IHRoZSB5IGxhYmVsXG4gICAgICAgIHZhbHVlOiB0aGUgcmVuZGVyZWQgbnVtZXJpY2FsIHZhbHVlICh0cmFuc2Zvcm1lZClcbiAgICAgICAgZGlzcGxheVZhbHVlOiBkaXNwbGF5IG51bWVyaWNhbCB2YWx1ZVxuICAgICAqIEBwYXJhbSB1c2VMb2cge0Jvb2xlYW59IHBlcmZvcm1zIGxvZyB0cmFuc2Zvcm1hdGlvblxuICAgICAqIEBwYXJhbSBjb2xvclNjaGVtZSB7U3RyaW5nfTogcmVjb2duaXplZCB0ZXJtcyBpbiBDb2xvcnM6Z2V0Q29sb3JJbnRlcnBvbGF0b3JcbiAgICAgKiBAcGFyYW0gciB7SW50ZWdlcn06IGNlbGwgY29ybmVyIHJhZGl1c1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIHVzZUxvZz10cnVlLCBsb2dCYXNlPTEwLCBjb2xvclNjaGVtZT1cIllsR25CdVwiLCByPTIsIHRvb2x0aXBJZD1cImhlYXRtYXBUb29sdGlwXCIsIHRvb2x0aXBDc3NDbGFzcz1cImhlYXRtYXAtdG9vbHRpcFwiKXtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy51c2VMb2cgPSB1c2VMb2c7XG4gICAgICAgIHRoaXMubG9nQmFzZSA9IGxvZ0Jhc2U7XG4gICAgICAgIHRoaXMubnVsbENvbG9yID0gXCIjZTZlNmU2XCI7IC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlLiBtYWtlIGl0IGEgcGFyYW0uXG4gICAgICAgIHRoaXMuY29sb3JTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54TGlzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy55TGlzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54U2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueVNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICB0aGlzLmNvbG9yU2NoZW1lID0gY29sb3JTY2hlbWU7XG5cbiAgICAgICAgLy8gcGVyaXBoZXJhbCBmZWF0dXJlc1xuICAgICAgICAvLy8gVG9vbHRpcFxuICAgICAgICAvLy8gY3JlYXRlIHRoZSB0b29sdGlwIERJVlxuICAgICAgICBpZiAoc2VsZWN0KGAjJHt0b29sdGlwSWR9YCkuZW1wdHkoKSkgc2VsZWN0KFwiYm9keVwiKS5hcHBlbmQoXCJkaXZcIikuYXR0cihcImlkXCIsIHRvb2x0aXBJZCk7XG5cbiAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IFRvb2x0aXAodG9vbHRpcElkKTtcbiAgICAgICAgc2VsZWN0KGAjJHt0b29sdGlwSWR9YCkuY2xhc3NlZCh0b29sdGlwQ3NzQ2xhc3MsIHRydWUpO1xuXG4gICAgICAgIHRoaXMudG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2xiYXIgcGFuZWxcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2xiYXIncyBkb20gSURcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICAgKi9cblxuICAgIGNyZWF0ZVRvb2xiYXIoZG9tSWQsIHRvb2x0aXApe1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSBuZXcgVG9vbGJhcihkb21JZCwgdG9vbHRpcCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xiYXI7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBkcmF3IGNvbG9yIGxlZ2VuZCBmb3IgdGhlIGhlYXQgbWFwXG4gICAgICogQHBhcmFtIGRvbSB7U2VsZWN0aW9ufSBhIGQzIHNlbGVjdGlvbiBvYmplY3RcbiAgICAgKiBAcGFyYW0gbGVnZW5kQ29uZmlnIHtPYmplY3R9IHdpdGggYXR0cjogeCwgeVxuICAgICAqL1xuXG4gICAgZHJhd0NvbG9yTGVnZW5kKGRvbSwgbGVnZW5kQ29uZmlnPXt4OjAsIHk6MH0sIHRpY2tzPTUpe1xuICAgICAgICBkcmF3Q29sb3JMZWdlbmQodGhpcy5kYXRhWzBdLnVuaXR8fFwiVmFsdWVcIiwgZG9tLCB0aGlzLmNvbG9yU2NhbGUsIGxlZ2VuZENvbmZpZywgdGhpcy51c2VMb2csIHRpY2tzLCB0aGlzLmxvZ0Jhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlZHJhd3MgdGhlIGhlYXRtYXA6IHdoZW4gdGhlIHhsaXN0IGFuZCB5bGlzdCBhcmUgY2hhbmdlZCwgcmVkcmF3IHRoZSBoZWF0bWFwXG4gICAgICogQHBhcmFtIGRvbSB7U2VsZWN0aW9ufSBhIGQzIHNlbGVjdGlvbiBvYmplY3RcbiAgICAgKiBAcGFyYW0geExpc3Qge0xpc3R9IGEgbGlzdCBvZiB4IGxhYmVsc1xuICAgICAqIEBwYXJhbSB5TGlzdCB7TGlzdH0gYSBsaXN0IG9mIHkgbGFiZWxzXG4gICAgICogQHBhcmFtIGRpbWVuc2lvbnMge0RpY3Rpb25hcnl9IHt3OkludGVnZXIsIGg6aW50ZWdlcn0gd2l0aCB0d28gYXR0cmlidXRlczogdyBhbmQgaFxuICAgICAqIEBwYXJhbSBhbmdsZSB7SW50ZWdlcn0gZm9yIHRoZSB5IHRleHQgbGFiZWxzXG4gICAgICovXG4gICAgcmVkcmF3KGRvbSwgeExpc3QsIHlMaXN0LCBkaW1lbnNpb25zPXt3OjEwMDAsIGg6MTAwMH0sIGFuZ2xlPTMwKXtcbiAgICAgICAgdGhpcy5fc2V0WFNjYWxlKGRpbWVuc2lvbnMudywgeExpc3QpO1xuICAgICAgICB0aGlzLl9zZXRZU2NhbGUoZGltZW5zaW9ucy5oLCB5TGlzdCk7XG4gICAgICAgIHRoaXMuZHJhdyhkb20sIGRpbWVuc2lvbnMsIGFuZ2xlKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIGRyYXdzIHRoZSBoZWF0bWFwXG4gICAgICogQHBhcmFtIGRvbSB7U2VsZWN0aW9ufVxuICAgICAqIEBwYXJhbSBkaW1lbnNpb25zIHtEaWN0aW9uYXJ5fSB7dzpJbnRlZ2VyLCBoOmludGVnZXJ9IG9mIHRoZSBoZWF0bWFwXG4gICAgICogQHBhcmFtIGFuZ2xlIHtJbnRlZ2VyfSBmb3IgdGhlIHkgdGV4dCBsYWJlbHNcbiAgICAgKiBAcGFyYW0gdXNlTnVsbENvbG9yIHtCb29sZWFufSB3aGV0aGVyIHRvIHJlbmRlciBudWxsIHZhbHVlcyB3aXRoIHRoZSBwcmUtZGVmaW5lZCBudWxsIGNvbG9yXG4gICAgICogQHBhcmFtIHlsYWJlbFBsYWNlbWVudCB7U3RyaW5nfSBsZWZ0IG9yIHJpZ2h0XG4gICAgICovXG5cbiAgICBkcmF3KGRvbSwgZGltZW5zaW9ucz17dzoxMDAwLCBoOjYwMH0sIGFuZ2xlPTMwLCB1c2VOdWxsQ29sb3I9ZmFsc2UsIGNvbHVtbkxhYmVsUG9zQWRqdXN0PW51bGwsIGRtaW49MCwgeWxhYmVsUGxhY2VtZW50PVwicmlnaHRcIil7XG5cbiAgICAgICAgaWYgKHRoaXMueExpc3QgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0WFNjYWxlKGRpbWVuc2lvbnMudyk7XG4gICAgICAgIGlmICh0aGlzLnlMaXN0ID09PSB1bmRlZmluZWQpIHRoaXMuX3NldFlTY2FsZShkaW1lbnNpb25zLmgpO1xuICAgICAgICBpZiAodGhpcy5jb2xvclNjYWxlID09PSB1bmRlZmluZWQpIHRoaXMuX3NldENvbG9yU2NhbGUoZG1pbik7XG5cbiAgICAgICAgLy8gdGV4dCBsYWJlbHNcbiAgICAgICAgLy8vLyBkYXRhIGpvaW5cbiAgICAgICAgY29uc3QgeExhYmVscyA9IGRvbS5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIilcbiAgICAgICAgICAgIC5kYXRhKHRoaXMueExpc3QpO1xuXG4gICAgICAgIC8vLy8gdXBkYXRlIGFuZCB0cmFuc2Zvcm1cbiAgICAgICAgY29uc3QgWSA9IGNvbHVtbkxhYmVsUG9zQWRqdXN0PT1udWxsP3RoaXMueVNjYWxlLnJhbmdlKClbMV0gKyAodGhpcy55U2NhbGUuYmFuZHdpZHRoKCkgKiAyKTp0aGlzLnlTY2FsZS5yYW5nZSgpWzFdK2NvbHVtbkxhYmVsUG9zQWRqdXN0O1xuICAgICAgICBjb25zdCBhZGp1c3QgPSA1O1xuICAgICAgICB4TGFiZWxzLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IHtcbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy54U2NhbGUoZCkgKyBhZGp1c3Q7XG4gICAgICAgICAgICBsZXQgeSA9IFk7XG4gICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KSByb3RhdGUoJHthbmdsZX0pYDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8vLyBlbnRlcnMgbmV3IGVsZW1lbnRzXG4gICAgICAgIHhMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkLCBpKSA9PiBgZXhwLW1hcC14bGFiZWwgeCR7aX1gKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcbiAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKT4xMj8xMjp0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnhTY2FsZShkKSArIGFkanVzdDtcbiAgICAgICAgICAgICAgICBsZXQgeSA9IFk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSkgcm90YXRlKCR7YW5nbGV9KWA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm1lcmdlKHhMYWJlbHMpXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gZCk7XG5cbiAgICAgICAgLy8vLyBleGl0IC0tIHJlbW92ZXMgb2xkIGVsZW1lbnRzIGFzIG5lZWRlZFxuICAgICAgICB4TGFiZWxzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLnlMaXN0KVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLnRleHQoKGQpID0+IGQpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgeWxhYmVsUGxhY2VtZW50PT1cImxlZnRcIj90aGlzLnhTY2FsZS5yYW5nZSgpWzBdIC0gNTp0aGlzLnhTY2FsZS5yYW5nZSgpWzFdICsgNSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCkgPT4gdGhpcy55U2NhbGUoZCkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCAoZCwgaSkgPT4gYGV4cC1tYXAteWxhYmVsIHkke2l9YClcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgeWxhYmVsUGxhY2VtZW50PT1cImxlZnRcIj9cImVuZFwiOlwic3RhcnRcIilcbiAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcbiAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgYWxlcnQoYCR7ZH0gaXMgY2xpY2tlZC4gVG8gYmUgaW1wbGVtZW50ZWRgKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJub3JtYWxcIiwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJub3JtYWxcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW5kZXJzIHRoZSBoZWF0bWFwIGNlbGxzXG5cbiAgICAgICAgLy8vLyBkYXRhIGpvaW5cbiAgICAgICAgY29uc3QgY2VsbHMgPSBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhLCAoZCkgPT4gZC52YWx1ZSk7XG5cbiAgICAgICAgLy8vLyB1cGRhdGUgb2xkIGVsZW1lbnRzXG4gICAgICAgIGNlbGxzLmF0dHIoXCJ4XCIsIChkKSA9PiB0aGlzLnhTY2FsZShkLngpKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkKSA9PiB0aGlzLnlTY2FsZShkLnkpKVxuICAgICAgICAgICAgLmF0dHIoXCJyb3dcIiwgKGQpID0+IGB4JHt0aGlzLnhMaXN0LmluZGV4T2YoZC54KX1gKSAvLyBUT0RPOiByb3cgc2hvdWxkIGJlIHksIGNvbHVtbiBzaG91bGQgYmUgeC4uLlxuICAgICAgICAgICAgLmF0dHIoXCJjb2xcIiwgKGQpID0+IGB5JHt0aGlzLnlMaXN0LmluZGV4T2YoZC55KX1gKTtcblxuICAgICAgICAvLy8vIGVudGVyIG5ldyBlbGVtZW50c1xuICAgICAgICBjb25zdCBudWxsQ29sb3IgPSBcIiNmZmZmZmZcIjtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNlbGxzLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJyb3dcIiwgKGQpID0+IGB4JHt0aGlzLnhMaXN0LmluZGV4T2YoZC54KX1gKVxuICAgICAgICAgICAgLmF0dHIoXCJjb2xcIiwgKGQpID0+IGB5JHt0aGlzLnlMaXN0LmluZGV4T2YoZC55KX1gKVxuXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgKGQpID0+IHRoaXMueFNjYWxlKGQueCkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQpID0+IHRoaXMueVNjYWxlKGQueSkpXG4gICAgICAgICAgICAuYXR0cihcInJ4XCIsIHRoaXMucilcbiAgICAgICAgICAgIC5hdHRyKFwicnlcIiwgdGhpcy5yKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIiNlZWVlZWVcIilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTsgLy8gTm90ZTogXCJ0aGlzXCIgaGVyZSByZWZlcnMgdG8gdGhlIGRvbSBlbGVtZW50IG5vdCB0aGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgc2VsZi5jZWxsTW91c2VvdmVyKGQsIGRvbSwgc2VsZWN0ZWQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgc2VsZi5jZWxsTW91c2VvdXQoZG9tKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWVyZ2UoY2VsbHMpXG5cbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZC5jb2xvcikgcmV0dXJuIGQuY29sb3I7XG4gICAgICAgICAgICAgICAgaWYgKHVzZU51bGxDb2xvciYmZC52YWx1ZT09MCkgY29uc29sZS5pbmZvKGQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB1c2VOdWxsQ29sb3ImJihkLnZhbHVlPT0wfHxkLnZhbHVlPT09bnVsbHx8ZC52YWx1ZT09PXVuZGVmaW5lZCk/bnVsbENvbG9yOnRoaXMudXNlTG9nP3RoaXMuY29sb3JTY2FsZSh0aGlzLl9sb2coZC52YWx1ZSkpOnRoaXMuY29sb3JTY2FsZShkLnZhbHVlKTtcbiAgICAgICAgICAgIH0pIC8vIFRPRE86IHdoYXQgaWYgbnVsbCB2YWx1ZSBpc25cInQgMD9cbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCAoZCk9PntcbiAgICAgICAgICAgICAgICBpZiAodXNlTnVsbENvbG9yJiZkLnZhbHVlPT0wKSByZXR1cm4gXCJsaWdodGdyZXlcIjtcbiAgICAgICAgICAgICAgICBpZihkLnN0cm9rZSkgcmV0dXJuIGQuc3Ryb2tlO1xuICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIFwibm9uZVwiO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCAoZCk9PntcbiAgICAgICAgICAgICAgICBpZiAodXNlTnVsbENvbG9yJiZkLnZhbHVlPT0wKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICBpZihkLnN0cm9rZSkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vLy8gZXhpdCBhbmQgcmVtb3ZlXG4gICAgICAgIGNlbGxzLmV4aXQoKS5yZW1vdmUoKTtcbiAgICB9XG5cblxuICAgIGNlbGxNb3VzZW91dChkb20pe1xuICAgICAgICBkb20uc2VsZWN0QWxsKFwiKlwiKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgIH1cblxuICAgIC8vIG5vdGU6IHRoaXMgaXMgb2Z0ZW4gb3ZlcnJpZGVuIGJ5IGEgY3VzdG9tIHZpc3VhbGl6YXRpb25cbiAgICBjZWxsTW91c2VvdmVyIChkLCBkb20sIHNlbGVjdGVkKSB7XG4gICAgICAgIGNvbnN0IHJvd0NsYXNzID0gc2VsZWN0ZWQuYXR0cihcInJvd1wiKTtcbiAgICAgICAgY29uc3QgY29sQ2xhc3MgPSBzZWxlY3RlZC5hdHRyKFwiY29sXCIpO1xuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpLmZpbHRlcihgLiR7cm93Q2xhc3N9YClcbiAgICAgICAgICAgIC5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIuZXhwLW1hcC15bGFiZWxcIikuZmlsdGVyKGAuJHtjb2xDbGFzc31gKVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgc2VsZWN0ZWQuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICBjb25zdCBkaXNwbGF5VmFsdWUgPSBkLmRpc3BsYXlWYWx1ZSA9PT0gdW5kZWZpbmVkP3BhcnNlRmxvYXQoZC52YWx1ZS50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDQpOmQuZGlzcGxheVZhbHVlO1xuICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhgQ29sdW1uOiAke2QueH0gPGJyLz4gUm93OiAke2QueX08YnIvPiBWYWx1ZTogJHtkaXNwbGF5VmFsdWV9YCk7XG4gICAgfVxuXG4gICAgX3NldFhTY2FsZSh3aWR0aCwgbmV3TGlzdCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBpZihuZXdMaXN0ICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy54TGlzdCA9IG5ld0xpc3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnhMaXN0ID0gbmVzdCgpXG4gICAgICAgICAgICAgICAgLmtleSgoZCkgPT4gZC54KVxuICAgICAgICAgICAgICAgIC5lbnRyaWVzKHRoaXMuZGF0YSlcbiAgICAgICAgICAgICAgICAubWFwKChkKSA9PiBkLmtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy54U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgLmRvbWFpbih0aGlzLnhMaXN0KVxuICAgICAgICAgICAgLnJhbmdlKFswLCB3aWR0aF0pXG4gICAgICAgICAgICAucGFkZGluZyguMDUpOyAvLyBUT0RPOiBlbGltaW5hdGUgaGFyZC1jb2RlZCB2YWx1ZVxuICAgIH1cblxuICAgIF9zZXRZU2NhbGUoaGVpZ2h0LCBuZXdMaXN0KSB7XG4gICAgICAgIGlmKG5ld0xpc3QgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnlMaXN0ID0gbmV3TGlzdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueUxpc3QgPSBuZXN0KClcbiAgICAgICAgICAgICAgICAua2V5KChkKSA9PiBkLnkpXG4gICAgICAgICAgICAgICAgLmVudHJpZXModGhpcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5tYXAoKGQpID0+IGQua2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnlTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAuZG9tYWluKHRoaXMueUxpc3QpXG4gICAgICAgICAgICAucmFuZ2UoWzAsIGhlaWdodF0pXG4gICAgICAgICAgICAucGFkZGluZyguMDUpOyAvLyBUT0RPOiBlbGltaW5hdGUgaGFyZC1jb2RlZCB2YWx1ZVxuICAgIH1cblxuICAgIF9zZXRDb2xvclNjYWxlKG1pbj0wKXtcbiAgICAgICAgbGV0IHVzZUxvZyA9IHRoaXMudXNlTG9nO1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuZGF0YS5tYXAoKGQpPT51c2VMb2c/dGhpcy5fbG9nKGQudmFsdWUpOmQudmFsdWUpO1xuICAgICAgICB0aGlzLmNvbG9yU2NhbGUgPSBzZXRDb2xvclNjYWxlKGRhdGEsIHRoaXMuY29sb3JTY2hlbWUsIG1pbik7XG4gICAgfVxuXG4gICAgX2xvZyh2KXtcbiAgICAgICAgY29uc3QgYWRqdXN0ID0gMTtcbiAgICAgICAgcmV0dXJuIE1hdGgubG9nKE51bWJlcih2K2FkanVzdCkpL01hdGgubG9nKHRoaXMubG9nQmFzZSk7XG4gICAgfVxuXG5cblxufSIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbmltcG9ydCB7Y3JlYXRlU3ZnfSBmcm9tIFwiLi4vdXRpbHMvZG9tLXV0aWxzXCI7XG5pbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5pbXBvcnQgRGVuZHJvSGVhdG1hcENvbmZpZyBmcm9tIFwiLi9EZW5kcm9IZWF0bWFwQ29uZmlnXCI7XG5pbXBvcnQgRGVuZHJvZ3JhbSBmcm9tIFwiLi9EZW5kcm9ncmFtXCI7XG5pbXBvcnQgSGVhdG1hcCBmcm9tIFwiLi9IZWF0bWFwXCI7XG5pbXBvcnQgVG9vbGJhciBmcm9tIFwiLi9Ub29sYmFyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbmRyb0hlYXRtYXAge1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gY29sdW1uVHJlZSB7U3RyaW5nfSBhIG5ld2ljayB0cmVlXG4gICAgICogQHBhcmFtIHJvd1RyZWUge1N0cmluZ30gYSBuZXdpY2sgdHJlZVxuICAgICAqIEBwYXJhbSBoZWF0bWFwRGF0YSB7TGlzdH0gb2Ygb2JqZWN0cyB3aXRoIGF0dHJpYnV0ZXM6IHg6IFN0cmluZywgeTpTdHJpbmcsIHZhbHVlOkZsb2F0LCBkaXNwbGF5VmFsdWU6RmxvYXRcbiAgICAgKiBAcGFyYW0gY29sb3Ige1N0cmluZ30gYSBjb2xvciBuYW1lIHRoYXQncyBhdmFpbGFibGUgaW4gQ29sb3JzLmdldENvbG9ySW50ZXJwb2xhdG9yXG4gICAgICogQHBhcmFtIHIge0ludGVnZXJ9IHRoZSBkZWdyZWVzIG9mIHJvdW5kZWQtY29ybmVycyBvZiB0aGUgaGVhdG1hcCBjZWxsc1xuICAgICAqIEBwYXJhbSBjb25maWcge0RlbmRyb0hlYXRtYXBDb25maWd9XG4gICAgICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2x1bW5UcmVlLCByb3dUcmVlLCBoZWF0bWFwRGF0YSwgY29sb3I9XCJZbEduQnVcIiwgcj0yLCBjb25maWc9bmV3IERlbmRyb0hlYXRtYXBDb25maWcoKSwgdG9vbHRpcElkPVwiZG1hcFRvb2x0aXBcIiwgdXNlTG9nPXRydWUsIGJhc2U9MTAsIHRpdGxlID0gXCJcIil7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnLmdldCgpO1xuICAgICAgICAvL2lucHV0IGV2YWx1YXRpb25zXG4gICAgICAgIGNvbHVtblRyZWUgPSBjb2x1bW5UcmVlPT09dW5kZWZpbmVkfHxjb2x1bW5UcmVlLnN0YXJ0c1dpdGgoXCJOb3QgZW5vdWdoIGRhdGFcIik/dW5kZWZpbmVkOmNvbHVtblRyZWU7XG4gICAgICAgIHJvd1RyZWUgPSByb3dUcmVlPT09dW5kZWZpbmVkfHxyb3dUcmVlLnN0YXJ0c1dpdGgoXCJOb3QgZW5vdWdoIGRhdGFcIik/dW5kZWZpbmVkOnJvd1RyZWU7XG4gICAgICAgIC8vIGFzc2lnbiBhdHRyaWJ1dGUgdmFsdWVzIGJhc2VkIG9uIGlucHV0IGFyZ3VtZW50c1xuICAgICAgICB0aGlzLmRhdGEgPSB7XG4gICAgICAgICAgICBjb2x1bW5UcmVlOiBjb2x1bW5UcmVlLFxuICAgICAgICAgICAgcm93VHJlZTogcm93VHJlZSxcbiAgICAgICAgICAgIGhlYXRtYXA6IGhlYXRtYXBEYXRhLFxuICAgICAgICAgICAgZXh0ZXJuYWw6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9iamVjdHMgPSB7XG4gICAgICAgICAgICBjb2x1bW5UcmVlOiB0aGlzLmRhdGEuY29sdW1uVHJlZT09PXVuZGVmaW5lZD8gdW5kZWZpbmVkOm5ldyBEZW5kcm9ncmFtKHRoaXMuZGF0YS5jb2x1bW5UcmVlLCBcInZcIiksXG4gICAgICAgICAgICByb3dUcmVlOiB0aGlzLmRhdGEucm93VHJlZT09PXVuZGVmaW5lZD91bmRlZmluZWQ6bmV3IERlbmRyb2dyYW0odGhpcy5kYXRhLnJvd1RyZWUsIFwiaFwiKSxcbiAgICAgICAgICAgIGhlYXRtYXA6IG5ldyBIZWF0bWFwKHRoaXMuZGF0YS5oZWF0bWFwLCB1c2VMb2csIGJhc2UsIGNvbG9yLCByLCB0b29sdGlwSWQpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudmlzdWFsQ29tcG9uZW50cyA9IHtcbiAgICAgICAgICAgIHN2ZzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY29sdW1uVHJlZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcm93VHJlZTogdW5kZWZpbmVkXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRoaXMub2JqZWN0cy5oZWF0bWFwLnRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSB0b29sYmFyIHBhbmVsXG4gICAgICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IHRoZSB0b29sYmFyJ3MgZG9tIElEXG4gICAgICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9XG4gICAgICogQHJldHVybnMge1Rvb2xiYXJ9XG4gICAgICovXG5cbiAgICBjcmVhdGVUb29sYmFyKGRvbUlkLCB0b29sdGlwKXtcbiAgICAgICAgdGhpcy50b29sYmFyID0gbmV3IFRvb2xiYXIoZG9tSWQsIHRvb2x0aXApO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciB0aGUgZGVuZHJvZ3JhbXMgYW5kIGNvcnJlc3BvbmRpbmcgaGVhdG1hcFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgcGFyZW50IERPTSBpZCBvZiB0aGUgU1ZHXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IG9mIHRoZSBTVkdcbiAgICAgKiBAcGFyYW0gc2hvd0NvbHVtblRyZWUge0Jvb2xlYW59IHJlbmRlciB0aGUgY29sdW1uIGRlbmRyb2dyYW1cbiAgICAgKiBAcGFyYW0gc2hvd1Jvd1RyZWUge0Jvb2xlYW59IHJlbmRlciB0aGUgcm93IGRlbmRyb2dyYW1cbiAgICAgKiBAcGFyYW0gbGVnZW5kUG9zIHtFbnVtfSB3aGVyZSB0byBwbGFjZSB0aGUgY29sb3IgbGVnZW5kOiBib3R0b20sIHRvcFxuICAgICAqIEBwYXJhbSB0aWNrcyB7SW50ZWdlcn0gbnVtYmVyIG9mIGJpbnMgb2YgdGhlIGNvbG9yIGxlZ2VuZFxuICAgICAqL1xuICAgIHJlbmRlcihkb21JZCwgc3ZnSWQsIHNob3dDb2x1bW5UcmVlPXRydWUsIHNob3dSb3dUcmVlPXRydWUsIGxlZ2VuZFBvcz1cInRvcFwiLCB0aWNrcz01KXtcbiAgICAgICAgdGhpcy5fdXBkYXRlQ29uZmlnKGxlZ2VuZFBvcyk7XG4gICAgICAgIHRoaXMudmlzdWFsQ29tcG9uZW50cy5zdmcgPSBjcmVhdGVTdmcoZG9tSWQsIHRoaXMuY29uZmlnLncsIHRoaXMuY29uZmlnLmgsIHRoaXMuY29uZmlnLm1hcmdpbiwgc3ZnSWQpO1xuXG4gICAgICAgIGxldCB4bGlzdCA9IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHlsaXN0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChzaG93Q29sdW1uVHJlZSAmJiB0aGlzLm9iamVjdHMuY29sdW1uVHJlZSE9PXVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnZpc3VhbENvbXBvbmVudHMuY29sdW1uVHJlZSA9IHRoaXMuX3JlbmRlclRyZWUoXCJjb2x1bW5cIiwgdGhpcy5vYmplY3RzLmNvbHVtblRyZWUsIHRoaXMuY29uZmlnLnBhbmVscy50b3ApO1xuICAgICAgICAgICAgeGxpc3QgPSB0aGlzLm9iamVjdHMuY29sdW1uVHJlZS54U2NhbGUuZG9tYWluKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3dSb3dUcmVlICYmIHRoaXMub2JqZWN0cy5yb3dUcmVlICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy52aXN1YWxDb21wb25lbnRzLnJvd1RyZWUgPSB0aGlzLl9yZW5kZXJUcmVlKFwicm93XCIsIHRoaXMub2JqZWN0cy5yb3dUcmVlLCB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdCk7XG4gICAgICAgICAgICB5bGlzdCA9IHRoaXMub2JqZWN0cy5yb3dUcmVlLnlTY2FsZS5kb21haW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnRpdGxlICE9IFwiXCIpIHtcbiAgICAgICAgICAgIHNlbGVjdChgIyR7ZG9tSWR9LXN2Z2ApLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgMjApXG4gICAgICAgICAgICAgICAgLnRleHQodGhpcy50aXRsZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZW5kZXJIZWF0bWFwKHRoaXMub2JqZWN0cy5oZWF0bWFwLCB4bGlzdCwgeWxpc3QsIHRpY2tzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgYSBuZXdpY2sgdHJlZVxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24ge2VudW19IGNvbHVtbiBvciByb3dcbiAgICAgKiBAcGFyYW0gdHJlZSB7RGVuZHJvZ3JhbX0gYSBEZW5kcm9ncmFtIG9iamVjdFxuICAgICAqIEBwYXJhbSBjb25maWcge09iamVjdH0gYSBwYW5lbCBjb25maWcgd2l0aCBhdHRyaWJ1dGVzOiB4LCB5LCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVuZGVyVHJlZShkaXJlY3Rpb24sIHRyZWUsIGNvbmZpZyl7XG4gICAgICAgIGxldCBzdmcgPSB0aGlzLnZpc3VhbENvbXBvbmVudHMuc3ZnO1xuICAgICAgICBjb25zdCBsYWJlbENsYXNzID0gZGlyZWN0aW9uPT1cInJvd1wiP1wiLmV4cC1tYXAteWxhYmVsXCI6XCIuZXhwLW1hcC14bGFiZWxcIjtcblxuICAgICAgICBjb25zdCBnID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgY29uZmlnLmlkKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYCk7XG4gICAgICAgIHRyZWUuZHJhdyhnLCBjb25maWcudywgY29uZmlnLmgpO1xuXG4gICAgICAgIGNvbnN0IG1vdXNlb3V0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiMzMzNcIik7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKGxhYmVsQ2xhc3MpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKFwiLmxlYWYtY29sb3JcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBtb3VzZW92ZXIgPSBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCA2KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcInJlZFwiKTtcbiAgICAgICAgICAgIGxldCBpZHMgPSBkLmxlYXZlcygpLm1hcCgobm9kZSk9Pm5vZGUuZGF0YS5uYW1lKTtcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwobGFiZWxDbGFzcylcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChsYWJlbCk9Pmlkcy5pbmNsdWRlcyhsYWJlbCkpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoXCIubGVhZi1jb2xvclwiKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGxhYmVsKT0+aWRzLmluY2x1ZGVzKGxhYmVsKSlcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGcuc2VsZWN0QWxsKFwiLmRlbmRyb2dyYW0tbm9kZVwiKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIG1vdXNlb3ZlcilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIG1vdXNlb3V0KTtcbiAgICAgICAgcmV0dXJuIGc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIHRoZSBoZWF0bWFwIGFuZCBjb2xvciBsZWdlbmRcbiAgICAgKiBAcGFyYW0gaGVhdG1hcCB7SGVhdG1hcH0gYSBIZWF0bWFwIG9iamVjdFxuICAgICAqIEBwYXJhbSB4TGlzdCB7TGlzdH0gYSBsaXN0IG9mIHggbGFiZWxzXG4gICAgICogQHBhcmFtIHlMaXN0IHtMaXN0fSBhIGxpc3Qgb2YgeSBsYWJlbHNcbiAgICAgKiBAcGFyYW0gdGlja3Mge0ludGVnZXJ9IHRoZSBudW1iZXIgb2YgYmlucyBpbiB0aGUgY29sb3IgbGVnZW5kXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVuZGVySGVhdG1hcChoZWF0bWFwLCB4TGlzdCwgeUxpc3QsIHRpY2tzPTUpe1xuICAgICAgICBsZXQgZG9tID0gdGhpcy52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWcucGFuZWxzLm1haW47XG4gICAgICAgIGNvbnN0IGcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBjb25maWcuaWQpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7Y29uZmlnLnh9LCAke2NvbmZpZy55fSlgKTtcbiAgICAgICAgaGVhdG1hcC5yZWRyYXcoZywgeExpc3QsIHlMaXN0LCB7dzogY29uZmlnLncsIGg6IGNvbmZpZy5ofSk7XG4gICAgICAgIGhlYXRtYXAuZHJhd0NvbG9yTGVnZW5kKGRvbSwgdGhpcy5jb25maWcucGFuZWxzLmxlZ2VuZCwgdGlja3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkanVzdCB0aGUgbGF5b3V0IGRpbWVuc2lvbnMgYmFzZWQgb24gdGhlIGFjdHVhbCBkYXRhXG4gICAgICogQHBhcmFtIGxlZ2VuZFBvcyB7U3RyaW5nfSBib3R0b20gb3IgdG9wXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdXBkYXRlQ29uZmlnKGxlZ2VuZFBvcyl7XG4gICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLm9iamVjdHMucm93VHJlZT09PXVuZGVmaW5lZD8xOnRoaXMub2JqZWN0cy5yb3dUcmVlLmxlYXZlcy5sZW5ndGg7XG5cbiAgICAgICAgLy8gdXBkYXRlcyB0aGUgbGVmdCBwYW5lbCdzIGhlaWdodCBiYXNlZCBvbiB0aGUgZGF0YVxuICAgICAgICB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdC5oID0gdGhpcy5jb25maWcuY2VsbC5oICogcm93czwyMD8yMDp0aGlzLmNvbmZpZy5jZWxsLmggKiByb3dzO1xuICAgICAgICB0aGlzLmNvbmZpZy5oICs9IHRoaXMuY29uZmlnLnBhbmVscy5sZWZ0Lmg7XG4gICAgICAgIHRoaXMuY29uZmlnLnBhbmVscy5tYWluLmggPSB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdC5oO1xuICAgICAgICBpZihsZWdlbmRQb3M9PVwiYm90dG9tXCIpIHRoaXMuY29uZmlnLnBhbmVscy5sZWdlbmQueSArPSB0aGlzLmNvbmZpZy5wYW5lbHMubWFpbi5oICsgdGhpcy5jb25maWcucGFuZWxzLm1haW4ueCArIDUwO1xuXG5cbiAgICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKlxuVGhpcyBjbGFzcyBkZWZpbmVzIGEgZ2VuZSBtb2RlbCAob3IgaXNvZm9ybSksIHJlbmRlcmluZyB0aGUgZXhvbnMgYW5kIGp1bmN0aW9ucyBvZiBhIGdpdmVuIGdlbmUuIFRoZSBtb2RlbCBpcyByZW5kZXJlZCBiYXNlZCBvblxuZ2Vub21pYyBwb3NpdGlvbnMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHN0cmFuZCBhbmQgdHJhbnNjcmlwdGlvbmFsIGRpcmVjdGlvbi5cblxuVE9ETzogc2ltcGxpZnkgaXNvZm9ybSBzdHJ1Y3R1cmUgcmVuZGVyaW5nP1xuICovXG5cbmltcG9ydCB7Y3VydmVDYXJkaW5hbCwgbGluZX0gZnJvbSBcImQzLXNoYXBlXCI7XG5pbXBvcnQge21heCwgc3VtfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7c2NhbGVMaW5lYXJ9IGZyb20gXCJkMy1zY2FsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZW5lTW9kZWwge1xuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIGdlbmUge09iamVjdH0gd2l0aCBhdHRyaWJ1dGVzOiBzdHJhbmQsIHRyYW5zY3JpcHRJZCwgZ2VuZVN5bWJvbFxuICAgICAqIEBwYXJhbSBleG9ucyB7TGlzdH0gb2YgZXhvbiBvYmplY3RzIHdpdGggYXR0cmlidXRlczogY2hyb20sIGNocm9tU3RhcnQsIGNocm9tRW5kLCBsZW5ndGgsIGV4b25OdW1iZXIsIGV4b25JZFxuICAgICAqIEBwYXJhbSBleG9uc0N1cmF0ZWQge0xpc3R9IG9mIGV4b24gb2JqZWN0cyBpbiB0aGUgZmluYWwgZ2VuZSBtb2RlbC4gVGhpcyBpcyBwcmV0dHkgc3BlY2lmaWMgdG8gR1RFeC4gSWYgdGhpcyBsaXN0IGlzbid0IGF2YWlsYWJsZSBmb3IgeW91ciBkYXRhLCB0aGVuIGp1c3QgcGFzcyBpbiB0aGUgc2FtZSBleG9uIGxpc3QgYWdhaW4uXG4gICAgICogQHBhcmFtIGp1bmN0aW9ucyB7TGlzdH0gb2YganVuY3Rpb24gb2JqZWN0cyB3aXRoIGF0dHJpYnV0ZXM6IGNocm9tLCBjaHJvbVN0YXJ0LCBjaHJvbUVuZCwganVuY3Rpb25JZFxuICAgICAqIEBwYXJhbSBpc0lzb2Zvcm0ge0Jvb2xlYW59XG4gICAgICogQHBhcmFtIG1heEludHJvbkxlbmd0aCB7SW50ZWdlcn0gdGhlIG1heGltdW0gbGVuZ3RoIG9mIGludHJvbi4gSW50cm9uIHJlbmRlcmluZyBpcyBjYXBwZWQgYXQgdGhpcyB2YWx1ZVxuICAgICAqIEBwYXJhbSBtaW5FeG9uV2lkdGgge0ludGVnZXJ9IHRoZSBtaW5pbXVtIHdpZHRoIChwaXhlbHMpIG9mIHRoZSBleG9uIHJlY3RhbmdsZS5cbiAgICAgKi9cblxuICAgIC8qKiBOT1RFOiB0aGUgZXhvbk51bWJlciBpbiBleG9ucyAmIGV4b25zQ3VyYXRlZCBkb24ndCByZWZlciB0byB0aGUgc2FtZSBleG9ucyAoYXQgbGVhc3QgdGhpcyBpcyB0aGUgY2FzZSBpbiBHVEV4KVxuICAgICAqICBUbyBlbnN1cmUgY29ycmVjdCBleG9uIG1hcHBpbmcgb2YgdGhlIGN1cmF0ZWQgZ2VuZSBtb2RlbCB0byB0aGUgb3JpZ2luYWwgbW9kZWwsIGhlcmUgd2UgdXNlIGdlbm9taWMgcG9zaXRpb24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKGdlbmUsIGV4b25zLCBleG9uc0N1cmF0ZWQsIGp1bmN0aW9ucywgaXNJc29mb3JtPWZhbHNlLCBtYXhJbnRyb25MZW5ndGg9MTAwMCwgbWluRXhvbldpZHRoPTApe1xuICAgICAgICB0aGlzLmdlbmUgPSBnZW5lO1xuICAgICAgICB0aGlzLmV4b25zID0gZXhvbnM7XG4gICAgICAgIGlmICh0aGlzLmdlbmUuc3RyYW5kID09IFwiK1wiKSB0aGlzLmV4b25zLnNvcnQoKGEsIGIpPT57cmV0dXJuIE51bWJlcihhLmV4b25OdW1iZXIpLU51bWJlcihiLmV4b25OdW1iZXIpO30pO1xuICAgICAgICBlbHNlIHRoaXMuZXhvbnMuc29ydCgoYSwgYik9PntyZXR1cm4gTnVtYmVyKGIuZXhvbk51bWJlciktTnVtYmVyKGEuZXhvbk51bWJlcik7fSk7XG4gICAgICAgIHRoaXMuZXhvbnNDdXJhdGVkID0gZXhvbnNDdXJhdGVkLnNvcnQoKGEsIGIpPT57cmV0dXJuIE51bWJlcihhLmV4b25OdW1iZXIpLU51bWJlcihiLmV4b25OdW1iZXIpO30pO1xuICAgICAgICB0aGlzLmp1bmN0aW9ucyA9IGp1bmN0aW9ucy5zb3J0KChhLGIpID0+IHtcbiAgICAgICAgICAgIGlmIChhLmp1bmN0aW9uSWQgPCBiLmp1bmN0aW9uSWQpIHJldHVybiAtMTtcbiAgICAgICAgICAgIGlmIChhLmp1bmN0aW9uSWQgPiBiLmp1bmN0aW9uSWQpIHJldHVybiAxO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0pOyAvLyBzb3J0ZWQgYnkganVuY3Rpb24gSURcbiAgICAgICAgdGhpcy5pc0lzb2Zvcm0gPSBpc0lzb2Zvcm07XG4gICAgICAgIHRoaXMubWF4SW50cm9uTGVuZ3RoID0gbWF4SW50cm9uTGVuZ3RoO1xuXG4gICAgICAgIC8vIGhhcmQtY29kZWQgZm9yIG5vd1xuICAgICAgICB0aGlzLmludHJvbkxlbmd0aCA9IDA7IC8vIGZpeGVkIGZha2UgaW50cm9uIGxlbmd0aCBpbiBiYXNlIHBhaXJzLCBvYnNvbGV0ZT9cbiAgICAgICAgdGhpcy5taW5FeG9uV2lkdGggPSBtaW5FeG9uV2lkdGg7IC8vIG1pbmltdW0gZXhvbiB3aWR0aCBpbiBwaXhlbHNcbiAgICAgICAgdGhpcy5udWxsQ29sb3IgPSBcIiNERERERERcIjtcbiAgICB9XG5cbiAgICBjaGFuZ2VUZXh0bGFiZWwoZG9tLCBsYWJlbCl7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIjbW9kZWxJbmZvXCIpLnRleHQobGFiZWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvbSB7T2JqZWN0fSBvZiBEM1xuICAgICAqIEBwYXJhbSBqZGF0YSB7TGlzdH0gb2YganVuY3Rpb24gZXhwcmVzc2lvbiBvYmplY3RzXG4gICAgICogQHBhcmFtIGVkYXRhIHtMaXN0fSBvZiBleG9uIGV4cHJlc3Npb24gb2JqZWN0c1xuICAgICAqIEBwYXJhbSBqc2NhbGUge0QzIHNjYWxlfSBvZiBjb2xvcnMgb2YganVuY3Rpb24gZGF0YVxuICAgICAqIEBwYXJhbSBlc2NhbGUge0QzIHNjYWxlfSBvZiBjb2xvcnMgb2YgZXhvbiBkYXRhXG4gICAgICovXG4gICAgYWRkRGF0YShkb20sIGpkYXRhLCBlZGF0YSwganNjYWxlLCBlc2NhbGUpe1xuICAgICAgICBpZiAoamRhdGEgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmp1bmNcIikuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IGpkYXRhLmZpbHRlcigoeik9PnouanVuY3Rpb25JZD09ZC5qdW5jdGlvbklkKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCBqY29sb3IgPSB2LnZhbHVlPT0wP3RoaXMubnVsbENvbG9yOmpzY2FsZSh2LnZhbHVlKTtcbiAgICAgICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmp1bmMtY3VydmVcIikuZmlsdGVyKChgLmp1bmMke2QuanVuY3Rpb25JZH1gKSkuc3R5bGUoXCJzdHJva2VcIiwgamNvbG9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gamNvbG9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmV4b24tY3VyYXRlZFwiKS5zdHlsZShcImZpbGxcIiwgKGQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBlZGF0YS5maWx0ZXIoKHopPT56LmV4b25JZD09ZC5leG9uSWQpWzBdO1xuICAgICAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCkgdGhyb3cgYCR7ZC5leG9uSWR9IGhhcyBubyBkYXRhYDtcbiAgICAgICAgICAgIGNvbnN0IGVjb2xvciA9IHYudmFsdWUgPT0gMD90aGlzLm51bGxDb2xvcjplc2NhbGUodi52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gZWNvbG9yO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW5kZXIgdGhlIFNWRyBvZiB0aGUgZ2VuZSBtb2RlbFxuICAgICAqIEBwYXJhbSBkb206IGFuIFNWRyBkb20gb2JqZWN0XG4gICAgICogQHBhcmFtIGNvbmZpZ1xuXG4gICAgICovXG4gICAgcmVuZGVyKGRvbSwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuc2V0WHNjYWxlKGNvbmZpZy53KTtcblxuICAgICAgICAvKiBOb3RlOiBleG9uLngsIGV4b24udyBhcmUgaW4gcGl4ZWxzIGZvciB2aXN1YWwgcmVuZGVyaW5nICovXG4gICAgICAgIC8qIE5vdGU6IGV4b24ubGVuZ3RoIGlzIGluIGJhc2UgcGFpcnMgKi9cbiAgICAgICAgLy8gY2FsY3VsYXRpbmcgeCBhbmQgdyBmb3IgZWFjaCBleG9uXG4gICAgICAgIGNvbnN0IGV4b25ZID0gY29uZmlnLmgvMjsgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgIHRoaXMuZXhvbnMuZm9yRWFjaCgoZCwgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKGkgPT0gMCkge1xuICAgICAgICAgICAgICAgIGQueCA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGQueCA9IHRoaXMuZXhvbnNbaS0xXS54ICsgdGhpcy5leG9uc1tpLTFdLncgKyB0aGlzLnhTY2FsZShkLmludHJvbkxlbmd0aD50aGlzLm1heEludHJvbkxlbmd0aD90aGlzLm1heEludHJvbkxlbmd0aDpkLmludHJvbkxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkLncgPSB0aGlzLnhTY2FsZShkLmxlbmd0aCk8dGhpcy5taW5FeG9uV2lkdGg/dGhpcy5taW5FeG9uV2lkdGg6dGhpcy54U2NhbGUoZC5sZW5ndGgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjYWxjdWxhaW5nIHggYW5kIHcgb2YgdGhlIHJlY3RhbmdsZSBmb3IgZWFjaCBjdXJhdGVkIGV4b24gb24gdGhlIGZpbmFsIGdlbmUgbW9kZWxcbiAgICAgICAgdGhpcy5leG9uc0N1cmF0ZWQuZm9yRWFjaCgoZCwgaSkgPT4ge1xuICAgICAgICAgICAgLy8gZmlyc3QsIG1hcCBlYWNoIGZpbmFsIGN1cmF0ZWQgZXhvbiB0byB0aGUgb3JpZ2luYWwgZnVsbCBnZW5lIG1vZGVsLS1maW5kIHRoZSBvcmlnaW5hbCBleG9uXG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBvcmlnaW5hbCBleG9uXG4gICAgICAgICAgICBkLm9yaUV4b24gPSB0aGlzLl9maW5kRXhvbihkLmNocm9tU3RhcnQpfHx0aGlzLl9maW5kRXhvbihkLmNocm9tRW5kKTtcbiAgICAgICAgICAgIGlmIChkLm9yaUV4b24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGlmIG5vdCBmb3VuZFxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHt0aGlzLmdlbmUudHJhbnNjcmlwdElkfS0ke2QuZXhvbklkfSBjYW4ndCBtYXAgdG8gZnVsbCBnZW5lIG1vZGVsYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBpZ25vcmUgdW5tYXBwYWJsZSBleG9ucywgdGhpcyBoYXBwZW5zIGF0IHRpbWVzICh3aHk/KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgZm9yIHhcbiAgICAgICAgICAgIGlmIChOdW1iZXIoZC5vcmlFeG9uLmNocm9tU3RhcnQpID09IE51bWJlcihkLmNocm9tU3RhcnQpKSBkLnggPSBkLm9yaUV4b24ueDtcbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBleG9uIGRvZXNuJ3Qgc3RhcnQgZnJvbSB0aGUgb3JpRXhvbiBzdGFydCBwb3NcbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0ID0gTnVtYmVyKGQuY2hyb21TdGFydCkgLSBOdW1iZXIoZC5vcmlFeG9uLmNocm9tU3RhcnQpICsgMTtcbiAgICAgICAgICAgICAgICBkLnggPSBkLm9yaUV4b24ueCArIHRoaXMueFNjYWxlKGRpc3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgZm9yIHdcbiAgICAgICAgICAgIGlmIChkLmxlbmd0aCA9PT0gdW5kZWZpbmVkKSBkLmxlbmd0aCA9IE51bWJlcihkLmNocm9tRW5kKSAtIE51bWJlcihkLmNocm9tU3RhcnQpICsgMTtcbiAgICAgICAgICAgIGQudyA9IHRoaXMueFNjYWxlKGQubGVuZ3RoKTx0aGlzLm1pbkV4b25XaWR0aD90aGlzLm1pbkV4b25XaWR0aDp0aGlzLnhTY2FsZShkLmxlbmd0aCk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYoIXRoaXMuaXNJc29mb3JtKXtcbiAgICAgICAgICAgIC8vIE5PVEU6IGRvIG5vdCBhbHRlciB0aGUgcmVuZGVyaW5nIG9yZGVyIG9mIHZpc3VhbCBjb21wb25lbnRzLlxuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhIGdlbmUgbW9kZWwsIG5vdCBhbiBpc29mb3JtXG4gICAgICAgICAgICAvLyBjYWxjdWxhdGluZyBwb3NpdGlvbnMgZm9yIGVhY2gganVuY3Rpb25cbiAgICAgICAgICAgIHRoaXMuanVuY3Rpb25zID0gdGhpcy5qdW5jdGlvbnMuZmlsdGVyKChkKT0+e1xuICAgICAgICAgICAgICAgIC8vIGZpcnN0IGZpbHRlciB1bm1hcHBlZCBqdW5jdGlvbnNcbiAgICAgICAgICAgICAgICBkLnN0YXJ0RXhvbiA9IHRoaXMuX2ZpbmRFeG9uKGQuY2hyb21TdGFydCk7XG4gICAgICAgICAgICAgICAgZC5lbmRFeG9uID0gdGhpcy5fZmluZEV4b24oZC5jaHJvbUVuZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQuc3RhcnRFeG9uICE9PSB1bmRlZmluZWQgJiYgZC5lbmRFeG9uICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuanVuY3Rpb25zLnNvcnQoKGEsYik9PntcbiAgICAgICAgICAgICAgICAvLyBmaXJzdCBzb3J0IGJ5IGNocm9tU3RhcnRcbiAgICAgICAgICAgICAgICBpZiAoK2EuY2hyb21TdGFydCA8ICtiLmNocm9tU3RhcnQpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICBpZiAoK2EuY2hyb21TdGFydCA+ICtiLmNocm9tU3RhcnQpIHJldHVybiAxO1xuXG4gICAgICAgICAgICAgICAgLy8gdGhlbiBzb3J0IGJ5IGNocm9tRW5kOlxuICAgICAgICAgICAgICAgIGlmICgrYS5jaHJvbUVuZCA8ICtiLmNocm9tRW5kKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgaWYgKCthLmNocm9tRW5kID4gK2IuY2hyb21FbmQpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmp1bmN0aW9ucy5mb3JFYWNoKChkLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gZC5zdGFydEV4b24gPSB0aGlzLl9maW5kRXhvbihkLmNocm9tU3RhcnQpO1xuICAgICAgICAgICAgICAgIC8vIGQuZW5kRXhvbiA9IHRoaXMuX2ZpbmRFeG9uKGQuY2hyb21FbmQpO1xuICAgICAgICAgICAgICAgIGQuZGlzcGxheU5hbWUgPSBgSnVuY3Rpb24gJHtpKzF9YDtcblxuXG4gICAgICAgICAgICAgICAgLy8gZC5kaXNwbGF5TmFtZSA9IGBFeG9uICR7ZC5zdGFydEV4b24uZXhvbk51bWJlcn0gLSAke2QuZW5kRXhvbi5leG9uTnVtYmVyfWA7XG4gICAgICAgICAgICAgICAgLy8gaWYgKGQuc3RhcnRFeG9uLmV4b25OdW1iZXIgPT0gZC5lbmRFeG9uLmV4b25OdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS53YXJuKGQuanVuY3Rpb25JZCArIFwiIGlzIGluIEV4b246IFwiICtkLnN0YXJ0RXhvbi5jaHJvbVN0YXJ0ICsgXCIgLSBcIiArIGQuc3RhcnRFeG9uLmNocm9tRW5kICk7XG4gICAgICAgICAgICAgICAgLy8gfSAvLyB3aGF0IGlzIGhhcHBlbmluZ1xuXG4gICAgICAgICAgICAgICAgLy8gZC5maWx0ZXJlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIGZvciBwb3NpdGlvbnNcbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0ID0gTnVtYmVyKGQuY2hyb21TdGFydCkgLSBOdW1iZXIoZC5zdGFydEV4b24uY2hyb21TdGFydCkgKyAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3QyID0gTnVtYmVyKGQuY2hyb21FbmQpIC0gTnVtYmVyKGQuZW5kRXhvbi5jaHJvbVN0YXJ0KSArIDE7XG5cbiAgICAgICAgICAgICAgICBkLnN0YXJ0WCA9IGQuc3RhcnRFeG9uLnggKyB0aGlzLnhTY2FsZShkaXN0KTtcbiAgICAgICAgICAgICAgICBkLmVuZFggPSBkLmVuZEV4b24ueCArIHRoaXMueFNjYWxlKGRpc3QyKTtcbiAgICAgICAgICAgICAgICBkLmN4ID0gZC5zdGFydFggKyAoZC5lbmRYIC0gZC5zdGFydFggKyAxKS8yOyAvLyBqdW5jdGlvbiBpcyByZW5kZXJlZCBhdCB0aGUgbWlkcG9pbnQgYmV0d2VlbiBzdGFydFggYW5kIGVuZFhcbiAgICAgICAgICAgICAgICBkLmN5ID0gZXhvblkgLSAxNSAqICggTWF0aC5hYnMoTnVtYmVyKGQuZW5kRXhvbi5leG9uTnVtYmVyKSAtIE51bWJlcihkLnN0YXJ0RXhvbi5leG9uTnVtYmVyKSkgKyAwLjUgKTtcbiAgICAgICAgICAgICAgICBpZiAoZC5jeSA8IDApIGQuY3kgPSAwO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gaGFuZGxpbmcgZWRnZSBjYXNlOiBvdmVybGFwcGluZyBqdW5jdGlvbnMsIGFkZCBqaXR0ZXJcbiAgICAgICAgICAgIC8vIGEucmVkdWNlKChyLGspPT57cltrXT0xK3Jba118fDE7cmV0dXJuIHJ9LHt9KVxuICAgICAgICAgICAgY29uc3QgY291bnRzID0gdGhpcy5qdW5jdGlvbnMucmVkdWNlKChyLGQpPT57cltkLmRpc3BsYXlOYW1lXT0xK3JbZC5kaXNwbGF5TmFtZV18fDE7cmV0dXJuIHI7fSx7fSk7XG4gICAgICAgICAgICB0aGlzLmp1bmN0aW9ucy5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gaml0dGVyXG4gICAgICAgICAgICAgICAgaWYoY291bnRzW2QuZGlzcGxheU5hbWVdID4gMSl7IC8vIG92ZXJsYXBwaW5nIGp1bmN0aW9uc1xuICAgICAgICAgICAgICAgICAgICAvLyBkLmN4ICs9IE1hdGgucmFuZG9tKCkqMjA7XG4gICAgICAgICAgICAgICAgICAgIGQuY3kgLT0gTWF0aC5yYW5kb20oKSoxNTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLyoqKioqIHJlbmRlciBqdW5jdGlvbnMgKi9cbiAgICAgICAgICAgIGNvbnN0IGN1cnZlID0gbGluZSgpXG4gICAgICAgICAgICAgICAgLngoKGQpID0+IGQueClcbiAgICAgICAgICAgICAgICAueSgoZCkgPT4gZC55KVxuICAgICAgICAgICAgICAgIC5jdXJ2ZShjdXJ2ZUNhcmRpbmFsKTtcblxuICAgICAgICAgICAgdGhpcy5qdW5jdGlvbnMuZm9yRWFjaCgoZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGRvbS5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgICAgIC5kYXR1bShbe3g6ZC5zdGFydFgsIHk6ZXhvbll9LCB7eDpkLmN4LCB5OmQuY3l9LCB7eDpkLmVuZFgsIHk6ZXhvbll9XSkgLy8gdGhlIGlucHV0IHBvaW50cyB0byBkcmF3IHRoZSBjdXJ2ZVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGBqdW5jLWN1cnZlIGp1bmMke2QuanVuY3Rpb25JZH1gKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgY3VydmUpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcIiM5MmJjYzlcIik7XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICBjb25zdCBqdW5jRG90cyA9IGRvbS5zZWxlY3RBbGwoXCIuanVuY1wiKVxuICAgICAgICAgICAgICAgIC5kYXRhKHRoaXMuanVuY3Rpb25zKTtcblxuICAgICAgICAgICAgLy8gdXBkYXRpbmcgZWxlbWVudHNcbiAgICAgICAgICAgIGp1bmNEb3RzLmF0dHIoXCJjeFwiLCAoZCkgPT4gZC5jeCk7XG4gICAgICAgICAgICBqdW5jRG90cy5hdHRyKFwiY3lcIiwgKGQpID0+IGQuY3kpOyAvLyBUT0RPOiByZW1vdmUgaGFyZC1jb2RlZCB2YWx1ZXNcblxuICAgICAgICAgICAgLy8gZW50ZXJpbmcgbmV3IGVsZW1lbnRzXG4gICAgICAgICAgICBqdW5jRG90cy5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgKGQpID0+IGBqdW5jIGp1bmMke2QuanVuY3Rpb25JZH1gKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IGQuY3gpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCAoZCkgPT4gZC5jeSlcbiAgICAgICAgICAgICAgICAubWVyZ2UoanVuY0RvdHMpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDQpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcInJnYig4NiwgOTgsIDEwNylcIik7XG5cbiAgICAgICAgICAgIC8qKioqKiByZW5kZXJpbmcgZnVsbCBnZW5lIG1vZGVsIGV4b25zICovXG4gICAgICAgICAgICBjb25zdCBleG9uUmVjdHMgPSBkb20uc2VsZWN0QWxsKFwiLmV4b25cIilcbiAgICAgICAgICAgICAgICAuZGF0YSh0aGlzLmV4b25zKTtcblxuICAgICAgICAgICAgLy8gdXBkYXRpbmcgZWxlbWVudHNcbiAgICAgICAgICAgIGV4b25SZWN0cy5hdHRyKFwieFwiLCAoZCkgPT4gZC54KTtcbiAgICAgICAgICAgIGV4b25SZWN0cy5hdHRyKFwieVwiLCBleG9uWSk7XG5cbiAgICAgICAgICAgIC8vIGVudGVyaW5nIG5ldyBlbGVtZW50c1xuICAgICAgICAgICAgZXhvblJlY3RzLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgKGQpPT5gZXhvbiBleG9uJHtkLmV4b25OdW1iZXJ9YClcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZXhvblkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJyeFwiLCAyKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwicnlcIiwgMilcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIChkKSA9PiBkLncpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgMTUpIC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCkgPT4gZC54KVxuICAgICAgICAgICAgICAgIC5tZXJnZShleG9uUmVjdHMpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwiZGVmYXVsdFwiKTtcblxuICAgICAgICAgICAgLy8gbW9kZWwgaW5mbyB0ZXh0IGxhYmVsXG4gICAgICAgICAgICBkb20uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJtb2RlbEluZm9cIikgLy8gVE9ETzogbm8gaGFyZC1jb2RlZCB2YWx1ZVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy54U2NhbGUoMCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4b25ZLTEwKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCAxMilcbiAgICAgICAgICAgICAgICAudGV4dChcIkdlbmUgTW9kZWxcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gaXNvZm9ybSwgcmVuZGVyIHRoZSBpbnRyb24gbGluZVxuICAgICAgICAgICAgY29uc3QgaW50cm9uTGluZSA9IGRvbS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCB0aGlzLmV4b25zQ3VyYXRlZFswXS54KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgdGhpcy5leG9uc0N1cmF0ZWRbdGhpcy5leG9uc0N1cmF0ZWQubGVuZ3RoLTFdLngpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCBleG9uWSArICgxNS8yKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIGV4b25ZICsgKDE1LzIpKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwiaW50cm9uXCIsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqKioqIHJlbmRlcmluZyBjdXJhdGVkIGV4b25zIG9uIHRoZSBmaW5hbCBnZW5lIG1vZGVsIG9yIGlzb2Zvcm0gZXhvbnMgKi9cbiAgICAgICAgY29uc3QgZXhvblJlY3RzMiA9IGRvbS5zZWxlY3RBbGwoXCIuZXhvbi1jdXJhdGVkXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLmV4b25zQ3VyYXRlZCk7XG5cbiAgICAgICAgLy8gdXBkYXRpbmcgZWxlbWVudHNcbiAgICAgICAgZXhvblJlY3RzMi5hdHRyKFwieFwiLCAoZCkgPT4gZC54KTtcbiAgICAgICAgZXhvblJlY3RzMi5hdHRyKFwieVwiLCBleG9uWSk7XG5cbiAgICAgICAgLy8gZW50ZXJpbmcgbmV3IGVsZW1lbnRzXG4gICAgICAgIGV4b25SZWN0czIuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkKT0+dGhpcy5pc0lzb2Zvcm0/XCJleG9uLWN1cmF0ZWRcIjpgZXhvbi1jdXJhdGVkIGV4b24tY3VyYXRlZCR7ZC5leG9uTnVtYmVyfWApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZXhvblkpXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIChkKSA9PiBkLncpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAxNSkgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgKGQpID0+IGQueClcbiAgICAgICAgICAgIC5tZXJnZShleG9uUmVjdHMyKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIiNlZWVcIilcbiAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIik7XG5cblxuICAgICAgICAvKioqKiogcmVuZGVyaW5nIHRleHQgbGFiZWxzICovXG4gICAgICAgIGlmIChjb25maWcubGFiZWxPbiA9PSBcImxlZnRcIiB8fCBjb25maWcubGFiZWxPbiA9PSBcImJvdGhcIil7XG4gICAgICAgICAgICBkb20uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJtb2RlbExhYmVsXCIpIC8vIFRPRE86IG5vIGhhcmQtY29kZWQgdmFsdWVcbiAgICAgICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMueFNjYWxlLnJhbmdlKClbMF0gLSA1KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleG9uWSArIDcuNSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCI5cHhcIilcbiAgICAgICAgICAgICAgICAudGV4dCh0aGlzLmdlbmUudHJhbnNjcmlwdElkPT09dW5kZWZpbmVkP2Ake3RoaXMuZ2VuZS5nZW5lU3ltYm9sfWA6dGhpcy5nZW5lLnRyYW5zY3JpcHRJZCk7XG5cblxuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcubGFiZWxPbiA9PSBcInJpZ2h0XCIgfHwgY29uZmlnLmxhYmVsT24gPT0gXCJib3RoXCIpe1xuICAgICAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIFwibW9kZWxMYWJlbFJpZ2h0XCIpIC8vIFRPRE86IG5vIGhhcmQtY29kZWQgdmFsdWVcbiAgICAgICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy54U2NhbGUucmFuZ2UoKVsxXSArIDUwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleG9uWSArIDcuNSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCI5cHhcIilcbiAgICAgICAgICAgICAgICAudGV4dCh0aGlzLmdlbmUudHJhbnNjcmlwdElkPT09dW5kZWZpbmVkP2Ake3RoaXMuZ2VuZS5nZW5lU3ltYm9sfWA6dGhpcy5nZW5lLnRyYW5zY3JpcHRJZCk7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldFhzY2FsZSh3KXtcbiAgICAgICAgLy8gY29uY2VwdCBleHBsYWluZWQ6XG4gICAgICAgIC8vIGFzc3VtaW5nIHRoZSBjYW52YXMgd2lkdGggaXMgZml4ZWRcbiAgICAgICAgLy8gdGhlIHRhc2sgaXMgaG93IHRvIHJlbmRlciBhbGwgZXhvbnMgKyBmaXhlZC13aWR0aCBpbnRyb25zIHdpdGhpbiB0aGUgY2FudmFzXG4gICAgICAgIC8vIGZpcnN0IGZpbmQgdGhlIGxhcmdlc3QgZXhvbixcbiAgICAgICAgLy8gdGhlbiBzZXQgdGhlIHggc2NhbGUgb2YgdGhlIGNhbnZhcyB0byBhY2NvbW1vZGF0ZSBtYXgoZXhvbiBsZW5ndGgpKmV4b24gY291bnRzLFxuICAgICAgICAvLyB0aGlzIGVuc3VyZXMgdGhhdCB0aGVyZSdzIGFsd2F5cyBzcGFjZSBmb3IgcmVuZGVyaW5nIGludHJvbnNcbiAgICAgICAgLy8gdGhlIGZpeGVkIGludHJvbiB3aWR0aCBpcyBjYWxjdWxhdGVkIGFzIHN1Y2g6XG4gICAgICAgIC8vICgobWF4KGV4b24gbGVuZ3RoKSAqIGV4b24gY291bnRzKSAtIHRvdGFsIGV4b24gbGVuZ3RoKS8oZXhvbiBjb3VudHMgLSAxKVxuXG4gICAgICAgIHRoaXMuZXhvbnMuc29ydCgoYSxiKT0+e1xuICAgICAgICAgICAgaWYgKE51bWJlcihhLmNocm9tU3RhcnQpIDwgTnVtYmVyKGIuY2hyb21TdGFydCkpIHJldHVybiAtMTtcbiAgICAgICAgICAgIGlmIChOdW1iZXIoYS5jaHJvbVN0YXJ0KSA+IE51bWJlcihiLmNocm9tU3RhcnQpKSByZXR1cm4gMTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgc3VtID0gMDtcbiAgICAgICAgdGhpcy5leG9ucy5mb3JFYWNoKChkLCBpKT0+e1xuICAgICAgICAgICAgZC5sZW5ndGggPSBOdW1iZXIoZC5jaHJvbUVuZCkgLSBOdW1iZXIoZC5jaHJvbVN0YXJ0KSArIDE7XG4gICAgICAgICAgICBpZiAoaSA9PSAwKXtcbiAgICAgICAgICAgICAgICAvLyB0aGUgZmlyc3QgZXhvblxuICAgICAgICAgICAgICAgIHN1bSArPSBkLmxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IG5iID0gdGhpcy5leG9uc1tpLTFdOyAvLyB0aGUgdXBzdHJlYW0gbmVpZ2hib3IgZXhvblxuICAgICAgICAgICAgICAgIGQuaW50cm9uTGVuZ3RoID0gTnVtYmVyKGQuY2hyb21TdGFydCkgLSBOdW1iZXIobmIuY2hyb21FbmQpICsgMTtcbiAgICAgICAgICAgICAgICBzdW0gKz0gZC5sZW5ndGggKyAoZC5pbnRyb25MZW5ndGg+dGhpcy5tYXhJbnRyb25MZW5ndGg/dGhpcy5tYXhJbnRyb25MZW5ndGg6ZC5pbnRyb25MZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBkb21haW4gPSBbMCwgc3VtXTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBbMCwgd107XG4gICAgICAgIHRoaXMueFNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgICAgICAucmFuZ2UocmFuZ2UpO1xuICAgIH1cblxuICAgIHNldFhzY2FsZUZpeEludHJvbih3KXtcbiAgICAgICAgLy8gY29uY2VwdCBleHBsYWluZWQ6XG4gICAgICAgIC8vIGFzc3VtaW5nIHRoZSBjYW52YXMgd2lkdGggaXMgZml4ZWRcbiAgICAgICAgLy8gdGhlIHRhc2sgaXMgaG93IHRvIHJlbmRlciBhbGwgZXhvbnMgKyBmaXhlZC13aWR0aCBpbnRyb25zIHdpdGhpbiB0aGUgY2FudmFzXG4gICAgICAgIC8vIGZpcnN0IGZpbmQgdGhlIGxhcmdlc3QgZXhvbixcbiAgICAgICAgLy8gdGhlbiBzZXQgdGhlIHggc2NhbGUgb2YgdGhlIGNhbnZhcyB0byBhY2NvbW1vZGF0ZSBtYXgoZXhvbiBsZW5ndGgpKmV4b24gY291bnRzLFxuICAgICAgICAvLyB0aGlzIGVuc3VyZXMgdGhhdCB0aGVyZSdzIGFsd2F5cyBzcGFjZSBmb3IgcmVuZGVyaW5nIGludHJvbnNcbiAgICAgICAgLy8gdGhlIGZpeGVkIGludHJvbiB3aWR0aCBpcyBjYWxjdWxhdGVkIGFzIHN1Y2g6XG4gICAgICAgIC8vICgobWF4KGV4b24gbGVuZ3RoKSAqIGV4b24gY291bnRzKSAtIHRvdGFsIGV4b24gbGVuZ3RoKS8oZXhvbiBjb3VudHMgLSAxKVxuXG4gICAgICAgIHRoaXMuZXhvbnMuZm9yRWFjaCgoZCkgPT4ge2QubGVuZ3RoID0gTnVtYmVyKGQuY2hyb21FbmQpIC0gTnVtYmVyKGQuY2hyb21TdGFydCkgKyAxO30pO1xuICAgICAgICBjb25zdCBtYXhFeG9uTGVuZ3RoID0gbWF4KHRoaXMuZXhvbnMsIChkKT0+ZC5sZW5ndGgpO1xuXG4gICAgICAgIGNvbnN0IGRvbWFpbiA9IFswLCBtYXhFeG9uTGVuZ3RoKnRoaXMuZXhvbnMubGVuZ3RoXTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBbMCwgd107XG4gICAgICAgIHRoaXMueFNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgICAgICAucmFuZ2UocmFuZ2UpO1xuXG4gICAgICAgIC8vIGZpeGVkIGludHJvbiB3aWR0aFxuICAgICAgICBjb25zdCBtaW5MZW5ndGggPSB0aGlzLnhTY2FsZS5pbnZlcnQodGhpcy5taW5FeG9uV2lkdGgpOyAvLyB0aGUgbWluaW11bSBleG9uIGxlbmd0aCB0aGF0IG1hcHMgdG8gbWluaW11bSBleG9uIHdpZHRoIChwaXhlbHMpIHVzaW5nIHhTY2FsZVxuICAgICAgICBjb25zdCB0b3RhbEV4b25MZW5ndGggPSBzdW0odGhpcy5leG9ucywgKGQpPT5kLmxlbmd0aD5taW5MZW5ndGg/ZC5sZW5ndGg6bWluTGVuZ3RoKTsgLy8gaWYgYW4gZXhvbiBpcyBzaG9ydGVyIHRoYW4gbWluIGxlbmd0aCwgdXNlIG1pbiBsZW5ndGhcbiAgICAgICAgdGhpcy5pbnRyb25MZW5ndGggPSAobWF4RXhvbkxlbmd0aCAqIHRoaXMuZXhvbnMubGVuZ3RoIC0gdG90YWxFeG9uTGVuZ3RoKS8odGhpcy5leG9ucy5sZW5ndGgtMSk7IC8vIGNhbHVjbGF0ZSB0aGUgZml4ZWQgaW50cm9uIGxlbmd0aFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvciBhIGdpdmVuIHBvc2l0aW9uLCBmaW5kIHRoZSBleG9uXG4gICAgICogQHBhcmFtIHBvcyB7SW50ZWdlcn06IGEgZ2Vub21pYyBwb3NpdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2ZpbmRFeG9uKHBvcyl7XG4gICAgICAgIHBvcyA9IE51bWJlcihwb3MpO1xuICAgICAgICBjb25zdCByZXN1bHRzID0gdGhpcy5leG9ucy5maWx0ZXIoKGQpID0+IHtyZXR1cm4gTnVtYmVyKGQuY2hyb21TdGFydCkgLSAxIDw9IHBvcyAmJiBOdW1iZXIoZC5jaHJvbUVuZCkgKyAxID49IHBvczt9KTtcbiAgICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoID09IDEpIHJldHVybiByZXN1bHRzWzBdO1xuICAgICAgICBlbHNlIGlmKHJlc3VsdHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIGV4b24gZm91bmQgZm9yOiBcIiArIHBvcyk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTW9yZSB0aGFuIG9uZSBleG9ucyBmb3VuZCBmb3I6IFwiICsgcG9zKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgIH1cblxufSIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2N1cnZlL2xpbmVhci5qc1wiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IHBvaW50WCxcbiAgICAgIHkgPSBwb2ludFksXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQodHJ1ZSksXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICBvdXRwdXQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxpbmUoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGQsXG4gICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgIGJ1ZmZlcjtcblxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgZWxzZSBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmluZWQwKSBvdXRwdXQucG9pbnQoK3goZCwgaSwgZGF0YSksICt5KGQsIGksIGRhdGEpKTtcbiAgICB9XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgbGluZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB4O1xuICB9O1xuXG4gIGxpbmUueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeTtcbiAgfTtcblxuICBsaW5lLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgbGluZSkgOiBkZWZpbmVkO1xuICB9O1xuXG4gIGxpbmUuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgbGluZSkgOiBjdXJ2ZTtcbiAgfTtcblxuICBsaW5lLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGxpbmUpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gbGluZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWVzW2ldKSBzdW0gKz0gdmFsdWU7IC8vIE5vdGU6IHplcm8gYW5kIG51bGwgYXJlIGVxdWl2YWxlbnQuXG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZSA9ICt2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgc3VtICs9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdW07XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKlxuVGhpcyBjbGFzcyBpcyBhIHZpZXdlciBvZiB0cmFuc2NyaXB0aW9uYWwgaXNvZm9ybXMsIGVhY2ggaXMgcmVuZGVyIGFzIGEgdHJhY2tcbiAqL1xuXG5pbXBvcnQgR2VuZU1vZGVsIGZyb20gXCIuL0dlbmVNb2RlbFwiO1xuaW1wb3J0IHtzZWxlY3QsIHNlbGVjdEFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtzY2FsZUJhbmR9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHtheGlzVG9wLCBheGlzUmlnaHR9IGZyb20gXCJkMy1heGlzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElzb2Zvcm1UcmFja1ZpZXdlciB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXNvZm9ybXMge0xpc3R9IG9mIGlzb2Zvcm0gb2JqZWN0cyB3aXRoIGF0dHI6IHRyYW5zY3JpcHRJZCwgc3RhcnQsIGVuZFxuICAgICAqIEBwYXJhbSBpc29mb3JtRXhvbnMge0RpY3Rpb25hcnl9IG9mIGxpc3RzIG9mIGlzb2Zvcm0gZXhvbnMgaW5kZXhlZCBieSBpc29mb3JtIElEICh0cmFuc2NyaXB0SWQpXG4gICAgICogQHBhcmFtIG1vZGVsRXhvbnMge0xpc3R9IG9mIHJlZmVyZW5jZSBleG9ucy4uLlxuICAgICAqIEBwYXJhbSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihpc29mb3JtcywgaXNvZm9ybUV4b25zLCBtb2RlbEV4b25zLCBjb25maWcpe1xuICAgICAgICB0aGlzLmlzb2Zvcm1zID0gaXNvZm9ybXM7XG4gICAgICAgIHRoaXMuaXNvZm9ybUV4b25zID0gaXNvZm9ybUV4b25zO1xuICAgICAgICB0aGlzLm1vZGVsRXhvbnMgPSBtb2RlbEV4b25zO1xuICAgICAgICB0aGlzLnZpc3VhbERvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMubnVsbENvbG9yID0gXCIjREREREREXCI7XG4gICAgfVxuXG4gICAgc2hvd0RhdGEoZGF0YSwgY29sb3JTY2FsZSwgYmFyU2NhbGUsIGRhdGFMYWJlbCwgc29ydD10cnVlKXtcbiAgICAgICAgaWYgKHNvcnQpe1xuICAgICAgICAgICAgZGF0YS5zb3J0KChhLGIpPT57cmV0dXJuIC0oYS5kaXNwbGF5VmFsdWUgLSBiLmRpc3BsYXlWYWx1ZSk7fSk7IC8vIGZpcnN0IHNvcnQgdGhlIGV4cHJlc3Npb24gZGF0YVxuICAgICAgICAgICAgY29uc3QgaWRzID0gZGF0YS5tYXAoKGQpPT5kLnRyYW5zY3JpcHRJZCk7XG4gICAgICAgICAgICB0aGlzLnNvcnRUcmFja3MoaWRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgICAgIGNvbnN0IGlzb2Zvcm0gPSB0aGlzLnZpc3VhbERvbS5zZWxlY3QoYCMke2QudHJhbnNjcmlwdElkLnJlcGxhY2UoXCIuXCIsIFwiX1wiKX1gKTtcbiAgICAgICAgICAgIGlzb2Zvcm0uc2VsZWN0QWxsKFwiLmV4b24tY3VyYXRlZFwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZC52YWx1ZT09MD90aGlzLm51bGxDb2xvcjpjb2xvclNjYWxlKGQudmFsdWUpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVuZGVyIHRoZSBsb2xsaXBvcCBncmFwaFxuICAgICAgICB0aGlzLnZpc3VhbERvbS5zZWxlY3QoXCIubG9sbGlwb3BHcmFwaFwiKS5yZW1vdmUoKTtcbiAgICAgICAgY29uc3QgbG9sbGlwb3BHcmFwaCA9IHRoaXMudmlzdWFsRG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5jbGFzc2VkKFwibG9sbGlwb3BHcmFwaFwiLCB0cnVlKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoLTEwMCwgMTMpXCIpOyAvLyBUT0RPOiByZW1vdmUgaGFyZC1jb2RlZCB2YWx1ZXNcblxuICAgICAgICBjb25zdCBsb2xsaXBvcHMgPSBsb2xsaXBvcEdyYXBoLnNlbGVjdEFsbChcIi5sb2xsaXBvcFwiKVxuICAgICAgICAgICAgLmRhdGEoZGF0YSk7XG5cbiAgICAgICAgY29uc3QgZyA9IGxvbGxpcG9wcy5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJsb2xsaXBvcFwiLCB0cnVlKTtcblxuICAgICAgICBnLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpPT50aGlzLnlTY2FsZShkLnRyYW5zY3JpcHRJZCkpXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIChkKT0+dGhpcy55U2NhbGUoZC50cmFuc2NyaXB0SWQpKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIChkKT0+ZC52YWx1ZT09MD90aGlzLm51bGxDb2xvcjpjb2xvclNjYWxlKGQudmFsdWUpKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIDIpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24oMTAwMClcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgKGQpPT5kLnZhbHVlPT0wPzA6YmFyU2NhbGUoZC52YWx1ZSkpO1xuXG4gICAgICAgIGcuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKT0+dGhpcy55U2NhbGUoZC50cmFuc2NyaXB0SWQpIClcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCA1KVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCk9PmQudmFsdWU9PTA/dGhpcy5udWxsQ29sb3I6Y29sb3JTY2FsZShkLnZhbHVlKSlcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbigxMDAwKVxuICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCk9PmJhclNjYWxlKGQudmFsdWUpKTtcblxuICAgICAgICAvLyBhZGQgdGhlIGF4ZXNcbiAgICAgICAgbG9sbGlwb3BHcmFwaC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwibG9sbGlwb3AtYXhpc1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLC0ke3RoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzJ9KWApXG4gICAgICAgICAgICAuY2FsbChcbiAgICAgICAgICAgICAgICBheGlzVG9wKGJhclNjYWxlKVxuICAgICAgICAgICAgICAgICAgICAudGlja3MoMylcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgbG9sbGlwb3BHcmFwaC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIFwibG9sbGlMYWJlbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgLTQwKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIDkpXG4gICAgICAgICAgICAudGV4dChcIlRQTVwiKTsgLy8gVE9ETzogdGhpcyBzaG91bGQgYmUgYSB1c2VyLWRlZmluZWQgdGV4dFxuXG4gICAgICAgIGxvbGxpcG9wR3JhcGguYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxvbGxpcG9wLWF4aXNcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwtJHt0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yfSlgKVxuICAgICAgICAgICAgLmNhbGwoXG4gICAgICAgICAgICAgICAgYXhpc1JpZ2h0KHRoaXMueVNjYWxlKVxuICAgICAgICAgICAgICAgICAgICAudGlja1ZhbHVlcyhbXSkgLy8gc2hvdyBubyB0aWNrc1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAvLyBkYXRhIGxhYmVsXG4gICAgICAgIGxvbGxpcG9wR3JhcGguYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcImxvbGxpTGFiZWxcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAxMClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMjApXG5cbiAgICAgICAgICAgIC50ZXh0KGBUcmFuc2NyaXB0IEV4cHJlc3Npb24gaW4gJHtkYXRhTGFiZWx9YClcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMTJweFwiKTtcblxuXG4gICAgfVxuXG4gICAgc29ydFRyYWNrcyh5bGlzdCl7XG4gICAgICAgIHRoaXMuc2V0WXNjYWxlKHRoaXMuY29uZmlnLmgsIHlsaXN0KTtcbiAgICAgICAgdGhpcy5yZW5kZXIodHJ1ZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKHJlZHJhdz1mYWxzZSwgZG9tPXVuZGVmaW5lZCwgbGFiZWxPbj1cImxlZnRcIiwgZHVyYXRpb249MTAwMCl7XG4gICAgICAgIGlmIChkb20gPT09IHVuZGVmaW5lZCAmJiB0aGlzLnZpc3VhbERvbSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBcIkZhdGFsIEVycm9yOiBtdXN0IHByb3ZpZGUgYSBkb20gZWxlbWVudFwiO1xuICAgICAgICBpZiAoZG9tID09PSB1bmRlZmluZWQpIGRvbSA9IHRoaXMudmlzdWFsRG9tO1xuICAgICAgICBlbHNlIHRoaXMudmlzdWFsRG9tID0gZG9tO1xuXG4gICAgICAgIGlmKHRoaXMueVNjYWxlPT09dW5kZWZpbmVkKSB0aGlzLnNldFlzY2FsZSh0aGlzLmNvbmZpZy5oKTtcblxuICAgICAgICBjb25zdCBpc29UcmFja3MgPSBkb20uc2VsZWN0QWxsKFwiLmlzb3RyYWNrXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLmlzb2Zvcm1zLm1hcCgoZCk9PmQudHJhbnNjcmlwdElkKSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIG9sZCBpc29mb3JtIHRyYWNrcywgaWYgYW55XG4gICAgICAgIGlzb1RyYWNrcy50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKT0+eyByZXR1cm4gYHRyYW5zbGF0ZSgwLCAke3RoaXMueVNjYWxlKGQpfSlgO30pO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBuZXcgdHJhY2tzXG4gICAgICAgIGlzb1RyYWNrcy5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCAoZCk9PihkLnJlcGxhY2UoXCIuXCIsIFwiX1wiKSkpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiaXNvdHJhY2tcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKT0+eyByZXR1cm4gYHRyYW5zbGF0ZSgwLCAwKWA7fSlcblxuICAgICAgICAgICAgLy8gLm1lcmdlKGlzb1RyYWNrcylcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbi8yKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpPT57IHJldHVybiBgdHJhbnNsYXRlKDAsICR7dGhpcy55U2NhbGUoZCl9KWA7fSk7XG5cbiAgICAgICAgaWYgKHJlZHJhdykgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuX3JlbmRlck1vZGVscyh0aGlzLmNvbmZpZy53LCBsYWJlbE9uKTtcblxuICAgIH1cblxuICAgIF9yZW5kZXJNb2RlbHModywgbGFiZWxPbiA9IFwibGVmdFwiKXtcbiAgICAgICAgdGhpcy5pc29mb3Jtcy5mb3JFYWNoKChpc29mb3JtKSA9PiB7XG4gICAgICAgICAgICBsZXQgcmVmZXJlbmNlID0gKHRoaXMubW9kZWxFeG9ucyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMubW9kZWxFeG9ucyA9PT0gbnVsbCk/dGhpcy5pc29mb3JtRXhvbnNbaXNvZm9ybS50cmFuc2NyaXB0SWRdOnRoaXMubW9kZWxFeG9ucztcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsID0gbmV3IEdlbmVNb2RlbChpc29mb3JtLCByZWZlcmVuY2UsIHRoaXMuaXNvZm9ybUV4b25zW2lzb2Zvcm0udHJhbnNjcmlwdElkXSwgW10sIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgaXNvZm9ybUcgPSBzZWxlY3QoYCMke2lzb2Zvcm0udHJhbnNjcmlwdElkLnJlcGxhY2UoXCIuXCIsIFwiX1wiKX1gKTtcbiAgICAgICAgICAgIG1vZGVsLnJlbmRlcihpc29mb3JtRywge3c6dywgaDogdGhpcy55U2NhbGUuYmFuZHdpZHRoKCksIGxhYmVsT246IGxhYmVsT259KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0WXNjYWxlKGgsIHlsaXN0PXVuZGVmaW5lZCl7XG4gICAgICAgIGlmICh5bGlzdCA9PT0gdW5kZWZpbmVkKSB5bGlzdCA9IHRoaXMuaXNvZm9ybXMubWFwKChkKT0+ZC50cmFuc2NyaXB0SWQpO1xuICAgICAgICB0aGlzLnlTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAuZG9tYWluKHlsaXN0KVxuICAgICAgICAgICAgLnJhbmdlKFswLCBoXSlcbiAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7XG4gICAgfVxuXG59IiwiYXN5bmMgZnVuY3Rpb24gUmV0cmlldmVBbGxQYWdpbmF0ZWREYXRhKEJhc2VVUkwsIHBhZ2VTaXplPTI1MCkge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBsZXQgcmV0cmlldmVkRGF0YTtcbiAgICBsZXQgcGFnZU51bWJlciA9IDA7XG4gICAgZG8ge1xuICAgICAgICBjb25zdCByZXF1ZXN0VVJMID0gZ2VuZXJhdGVVUkwoQmFzZVVSTCwgcGFnZU51bWJlciwgcGFnZVNpemUpO1xuICAgICAgICByZXRyaWV2ZWREYXRhID0gYXdhaXQgZmV0Y2gocmVxdWVzdFVSTClcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHsgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsgfSk7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQocmV0cmlldmVkRGF0YS5kYXRhKTtcbiAgICAgICAgcGFnZU51bWJlciArPSAxO1xuICAgIH0gd2hpbGUgKHBhZ2VOdW1iZXIgPCByZXRyaWV2ZWREYXRhLnBhZ2luZ19pbmZvLm51bWJlck9mUGFnZXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIFJldHJpZXZlT25lUGFnZShCYXNlVVJMLCBwYWdlU2l6ZSwgcGFnZU51bWJlcikge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBsZXQgcmV0cmlldmVkRGF0YTtcbiAgICBjb25zdCByZXF1ZXN0VVJMID0gZ2VuZXJhdGVVUkwoQmFzZVVSTCwgcGFnZU51bWJlciwgcGFnZVNpemUpO1xuICAgIHJldHJpZXZlZERhdGEgPSBhd2FpdCBmZXRjaChyZXF1ZXN0VVJMKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7IHJldHVybiByZXNwb25zZS5qc29uKCk7IH0pO1xuICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQocmV0cmlldmVkRGF0YS5kYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBSZXRyaWV2ZU5vblBhZ2luYXRlZERhdGEoQmFzZVVSTCl7XG4gICAgbGV0IHJldHJpZXZlZERhdGEgPSBhd2FpdCBmZXRjaChCYXNlVVJMKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7IHJldHVybiByZXNwb25zZS5qc29uKCk7IH0pO1xuICAgIHJldHVybiByZXRyaWV2ZWREYXRhO1xufVxuXG5leHBvcnQgeyBSZXRyaWV2ZUFsbFBhZ2luYXRlZERhdGEgLCBSZXRyaWV2ZU9uZVBhZ2UsIFJldHJpZXZlTm9uUGFnaW5hdGVkRGF0YX07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVVJMKEJhc2VVUkwsIHBhZ2VOdW1iZXIsIHBhZ2VTaXplID0gMjUwKSB7XG4gICAgbGV0IHJlcXVlc3RCeVBhZ2U7XG4gICAgY29uc3QgcGFnZXMgPSBcInBhZ2U9XCIgKyBwYWdlTnVtYmVyO1xuICAgIGlmIChCYXNlVVJMLmluY2x1ZGVzKFwiP1wiKSkge1xuICAgICAgICByZXF1ZXN0QnlQYWdlID0gQmFzZVVSTCArIFwiJlwiICsgcGFnZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdEJ5UGFnZSA9IEJhc2VVUkwgKyBcIj9cIiArIHBhZ2VzO1xuICAgIH1cbiAgICBjb25zdCBzaXplID0gXCJpdGVtc1BlclBhZ2U9XCIgKyBwYWdlU2l6ZTtcbiAgICByZXF1ZXN0QnlQYWdlID0gcmVxdWVzdEJ5UGFnZSArIFwiJlwiICsgc2l6ZTtcbiAgICByZXR1cm4gcmVxdWVzdEJ5UGFnZTtcbn1cblxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7c2VsZWN0LCBzZWxlY3RBbGx9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2NhbGVMaW5lYXJ9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHttaW4sIG1heH0gZnJvbSBcImQzLWFycmF5XCI7XG5cbmltcG9ydCB7XG4gICAgZ2V0R3RleFVybHMsXG4gICAgcGFyc2VNb2RlbEV4b25zLFxuICAgIHBhcnNlSnVuY3Rpb25zLFxuICAgIHBhcnNlVHJhbnNjcmlwdHMsXG4gICAgcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZSxcbiAgICBwYXJzZUV4b25zLFxuICAgIHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uLFxuICAgIHBhcnNlRXhvbkV4cHJlc3Npb24sXG4gICAgcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvbiwgcGFyc2VHZW5lcywgcGFyc2VUaXNzdWVzXG59IGZyb20gXCIuL21vZHVsZXMvZ3RleERhdGFQYXJzZXJcIjtcblxuaW1wb3J0IHtzZXRDb2xvclNjYWxlLCBkcmF3Q29sb3JMZWdlbmR9IGZyb20gXCIuL3V0aWxzL2NvbG9yLXV0aWxzXCI7XG5pbXBvcnQgRGVuZHJvSGVhdG1hcENvbmZpZyBmcm9tIFwiLi9tb2R1bGVzL0RlbmRyb0hlYXRtYXBDb25maWdcIjtcbmltcG9ydCBEZW5kcm9IZWF0bWFwIGZyb20gXCIuL21vZHVsZXMvRGVuZHJvSGVhdG1hcFwiO1xuaW1wb3J0IEdlbmVNb2RlbCBmcm9tIFwiLi9tb2R1bGVzL0dlbmVNb2RlbFwiO1xuaW1wb3J0IElzb2Zvcm1UcmFja1ZpZXdlciBmcm9tIFwiLi9tb2R1bGVzL0lzb2Zvcm1UcmFja1ZpZXdlclwiO1xuaW1wb3J0IHtSZXRyaWV2ZUFsbFBhZ2luYXRlZERhdGEsIFJldHJpZXZlTm9uUGFnaW5hdGVkRGF0YX0gZnJvbSBcIi4vdXRpbHMvcGFnaW5hdGlvblwiO1xuXG4vKipcbiAqIFJlbmRlciBleHByZXNzaW9uIGhlYXRtYXAsIGdlbmUgbW9kZWwsIGFuZCBpc29mb3JtIHRyYWNrc1xuICogQHBhcmFtIHR5cGUge2VudW19IGlzb2Zvcm0sIGV4b24sIGp1bmN0aW9uXG4gKiBAcGFyYW0gZ2VuZUlkIHtTdHJpbmd9IGEgZ2VuZSBuYW1lIG9yIGdlbmNvZGUgSURcbiAqIEBwYXJhbSByb290SWQge1N0cmluZ30gdGhlIERPTSBJRCBvZiB0aGUgU1ZHXG4gKiBAcGFyYW0gdXJscyB7T2JqZWN0fSBvZiB0aGUgR1RFeCB3ZWIgc2VydmljZSB1cmxzIHdpdGggYXR0cjogZ2VuZUlkLCB0aXNzdWUsIGdlbmVNb2RlbFVuZmlsdGVyZWQsIGdlbmVNb2RlbCwganVuY3Rpb25FeHAsIGV4b25FeHBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcih0eXBlLCBnZW5lSWQsIHJvb3RJZCwgdXJscz1nZXRHdGV4VXJscygpKXtcbiAgICBSZXRyaWV2ZUFsbFBhZ2luYXRlZERhdGEodXJscy5nZW5lSWQgKyBnZW5lSWQpIC8vIHF1ZXJ5IHRoZSBnZW5lIGJ5IGdlbmVJZC0tZ2VuZSBuYW1lIG9yIGdlbmNvZGUgSUQgd2l0aCBvciB3aXRob3V0IHZlcnNpb25pbmdcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAvLyBnZXQgdGhlIGdlbmUgb2JqZWN0IGFuZCBpdHMgZ2VuY29kZSBJZFxuICAgICAgICAgICAgY29uc3QgZ2VuZSA9IHBhcnNlR2VuZXMoZGF0YSwgdHJ1ZSwgZ2VuZUlkKTtcbiAgICAgICAgICAgIGNvbnN0IGdlbmNvZGVJZCA9IGdlbmUuZ2VuY29kZUlkO1xuXG4gICAgICAgICAgICAvLyBidWlsZCB0aGUgcHJvbWlzZXNcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2VzID0gW1xuICAgICAgICAgICAgICAgIFJldHJpZXZlQWxsUGFnaW5hdGVkRGF0YSh1cmxzLnRpc3N1ZSksXG4gICAgICAgICAgICAgICAgUmV0cmlldmVBbGxQYWdpbmF0ZWREYXRhKHVybHMuZ2VuZU1vZGVsVW5maWx0ZXJlZCArIGdlbmNvZGVJZCksXG4gICAgICAgICAgICAgICAgUmV0cmlldmVBbGxQYWdpbmF0ZWREYXRhKHVybHMuZ2VuZU1vZGVsICsgZ2VuY29kZUlkKSxcbiAgICAgICAgICAgICAgICBSZXRyaWV2ZUFsbFBhZ2luYXRlZERhdGEodXJscy50cmFuc2NyaXB0ICsgZ2VuY29kZUlkKSxcbiAgICAgICAgICAgICAgICBSZXRyaWV2ZU5vblBhZ2luYXRlZERhdGEodXJscy5qdW5jdGlvbkV4cCArIGdlbmNvZGVJZCksXG4gICAgICAgICAgICAgICAgUmV0cmlldmVOb25QYWdpbmF0ZWREYXRhKHVybHMuZXhvbkV4cCArIGdlbmNvZGVJZCksXG4gICAgICAgICAgICAgICAgUmV0cmlldmVOb25QYWdpbmF0ZWREYXRhKHVybHMudHJhbnNjcmlwdEV4cCArIGdlbmNvZGVJZCksXG4gICAgICAgICAgICAgICAgUmV0cmlldmVBbGxQYWdpbmF0ZWREYXRhKHVybHMuZXhvbiArIGdlbmNvZGVJZClcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGFyZ3Mpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXNzdWVzID0gcGFyc2VUaXNzdWVzKGFyZ3NbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhvbnMgPSBwYXJzZU1vZGVsRXhvbnMoYXJnc1sxXSksIC8vIGV4b25zIG9mIHRoZSBmdWxsIGdlbmUgbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4b25zQ3VyYXRlZCA9IHBhcnNlTW9kZWxFeG9ucyhhcmdzWzJdKSwgLy8gZXhvbnMgb2YgdGhlIGN1cmF0ZWQgZmluYWwgZ2VuZSBtb2RlbFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNvZm9ybXMgPSBwYXJzZVRyYW5zY3JpcHRzKGFyZ3NbM10pLCAvLyBieSBkZWZhdWx0LCB0aGUgcGFyc2VyIHNvcnRzIHRoZSBpc29mb3JtcyBpbiBkZXNjZW5kaW5nIG9yZGVyIGJ5IGxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNvZm9ybUV4b25zID0gcGFyc2VFeG9ucyhhcmdzWzddKSwgLy8gZXhvbnMgb2YgdGhlIGluZGl2aWR1YWwgaXNvZm9ybXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGp1bmN0aW9ucyA9IHBhcnNlSnVuY3Rpb25zKGFyZ3NbNF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAganVuY3Rpb25FeHByZXNzID0gcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24oYXJnc1s0XSksXG4gICAgICAgICAgICAgICAgICAgICAgICBleG9uRXhwcmVzcyA9IHBhcnNlRXhvbkV4cHJlc3Npb24oYXJnc1s1XSwgIGV4b25zQ3VyYXRlZCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpc29mb3JtRXhwcmVzcyA9IHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb24oYXJnc1s2XSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3IgY2hlY2tpbmdcbiAgICAgICAgICAgICAgICAgICAgbGV0IGV4b25Db2xvclNjYWxlLCBpc29mb3JtQ29sb3JTY2FsZSwganVuY3Rpb25Db2xvclNjYWxlOyAvLyBpbiBsb2dcbiAgICAgICAgICAgICAgICAgICAgaWYgKGp1bmN0aW9ucy5sZW5ndGggPj0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzY2VuYXJpbzE6IG5vdCBhIHNpbmdsZS1leG9uIGdlbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqdW5jdGlvbkV4cHJlc3MgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganVuY3Rpb25Db2xvclNjYWxlID0gc2V0Q29sb3JTY2FsZShqdW5jdGlvbkV4cHJlc3MubWFwKGQ9Pk1hdGgubG9nMTAoZC52YWx1ZSsxKSksIFwiUmVkc1wiLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlZmluZSBhbGwgdGhlIGNvbG9yIHNjYWxlc1xuICAgICAgICAgICAgICAgICAgICBleG9uQ29sb3JTY2FsZSA9IHNldENvbG9yU2NhbGUoZXhvbkV4cHJlc3MubWFwKGQ9Pk1hdGgubG9nMihkLnZhbHVlKzEpKSwgXCJCbHVlc1wiLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaXNvZm9ybUNvbG9yU2NhbGUgPSBzZXRDb2xvclNjYWxlKGlzb2Zvcm1FeHByZXNzLm1hcChkPT5NYXRoLmxvZzEwKGQudmFsdWUrMSkpLCBcIlB1cnBsZXNcIiwgMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaGVhdCBtYXBcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRtYXAgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IHJvb3RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2ZzogYCR7cm9vdElkfS1zdmdgLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogYCR7cm9vdElkfS1pc29mb3JtVG9vbHRpcGAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFyOiBgJHtyb290SWR9LWlzb2Zvcm1Ub29sYmFyYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lOiBgJHtyb290SWR9LWlzb2Zvcm1DbG9uZWAsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZTogYCR7cm9vdElkfS1pc29mb3JtU2F2ZWBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgLy8gYnVpbGQgdGhlIGRvbSBjb21wb25lbnRzXG4gICAgICAgICAgICAgICAgICAgIFtcInRvb2xiYXJcIiwgXCJjbG9uZVwiXS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiPGRpdi8+XCIpLmF0dHIoXCJpZFwiLCBpZHNba2V5XSkuYXBwZW5kVG8oJChgIyR7aWRzLnJvb3R9YCkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ZnVGl0bGUgPSBgJHtnZW5lLmdlbmVTeW1ib2x9OiAke2dlbmUuZ2VuY29kZUlkfSAke2dlbmUuZGVzY3JpcHRpb259YDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSAkKGAjJHtyb290SWR9YCkuaW5uZXJXaWR0aCgpfHx3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2godHlwZSl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpc29mb3JtVHJhbnNwb3NlZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkbWFwQ29uZmlnID0gbmV3IERlbmRyb0hlYXRtYXBDb25maWcod2lkdGgsIDE1MCwgMTAwLCB7dG9wOiA2MCwgcmlnaHQ6IDM1MCwgYm90dG9tOiAyMDAsIGxlZnQ6IDUwfSwgMTIsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IG1vdmUgY2x1c3RlciBkYXRhIHBhcnNpbmcgdG8gZ3RleERhdGFQYXJzZXIuanNcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcInRpc3N1ZVwiLCBcInRyYW5zY3JpcHRcIl0uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighYXJnc1s2XS5jbHVzdGVycy5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGFyZ3NbNl0uY2x1c3RlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyhcIlBhcnNlIEVycm9yOiBSZXF1aXJlZCBjbHVzdGVyIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBcIiArIGspO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRpc3N1ZVRyZWUgPSBhcmdzWzZdLmNsdXN0ZXJzLnRpc3N1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc29mb3JtVHJlZSA9IGFyZ3NbNl0uY2x1c3RlcnMudHJhbnNjcmlwdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc29mb3JtRXhwcmVzc1QgPSBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uVHJhbnNwb3NlKGFyZ3NbNl0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkbWFwID0gbmV3IERlbmRyb0hlYXRtYXAodGlzc3VlVHJlZSwgaXNvZm9ybVRyZWUsIGlzb2Zvcm1FeHByZXNzVCwgXCJQdXJwbGVzXCIsIDUsIGRtYXBDb25maWcsIGlkcy50b29sdGlwLCB0cnVlLCAxMCwgYElzb2Zvcm0gRXhwcmVzc2lvbiBvZiAke3N2Z1RpdGxlfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG1hcC5yZW5kZXIoaWRzLnJvb3QsIGlkcy5zdmcsIHRydWUsIHRydWUsIHRvcCwgNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzb2Zvcm1UcmVlLnN0YXJ0c1dpdGgoXCJOb3QgZW5vdWdoIGRhdGFcIikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yZGVycyA9IGRtYXAub2JqZWN0cy5yb3dUcmVlLnlTY2FsZS5kb21haW4oKTsgLy8gdGhlIGxlYWYgb3JkZXIgb2YgdGhlIGlzb2Zvcm0gZGVuZHJvZ3JhbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzb2Zvcm1zLnNvcnQoKGEsIGIpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmRlcnMuaW5kZXhPZihhLnRyYW5zY3JpcHRJZCkgPCBvcmRlcnMuaW5kZXhPZihiLnRyYW5zY3JpcHRJZCkpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yZGVycy5pbmRleE9mKGEudHJhbnNjcmlwdElkKSA+IG9yZGVycy5pbmRleE9mKGIudHJhbnNjcmlwdElkKSkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwianVuY3Rpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGp1bmN0aW9ucy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYCMke3Jvb3RJZH1gKS50ZXh0KFwiVGhpcyBnZW5lIGhhcyBubyBqdW5jdGlvbnMgYXZhaWxhYmxlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRtYXBDb25maWcgPSBuZXcgRGVuZHJvSGVhdG1hcENvbmZpZyh3aWR0aCwgMTUwLCAwLCB7dG9wOiA2MCwgcmlnaHQ6IDM1MCwgYm90dG9tOiAyMDAsIGxlZnQ6IDUwfSwgMTIsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aXNzdWVUcmVlID0gYXJnc1s0XS5jbHVzdGVycy50aXNzdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkbWFwID0gbmV3IERlbmRyb0hlYXRtYXAodW5kZWZpbmVkLCB0aXNzdWVUcmVlLCBqdW5jdGlvbkV4cHJlc3MsIFwiUmVkc1wiLCA1LCBkbWFwQ29uZmlnLCBpZHMudG9vbHRpcCwgdHJ1ZSwgMTAsIGBKdW5jdGlvbiBFeHByZXNzaW9uIG9mICR7c3ZnVGl0bGV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkbWFwLnJlbmRlcihpZHMucm9vdCwgaWRzLnN2ZywgZmFsc2UsIHRydWUsIHRvcCwgNSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJleG9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRtYXBDb25maWcgPSBuZXcgRGVuZHJvSGVhdG1hcENvbmZpZyh3aWR0aCwgMTUwLCAwLCB7dG9wOiA2MCwgcmlnaHQ6IDM1MCwgYm90dG9tOiAyMDAsIGxlZnQ6IDUwfSwgMTIsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aXNzdWVUcmVlID0gYXJnc1s1XS5jbHVzdGVycy50aXNzdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkbWFwID0gbmV3IERlbmRyb0hlYXRtYXAodW5kZWZpbmVkLCB0aXNzdWVUcmVlLCBleG9uRXhwcmVzcywgXCJCbHVlc1wiLCA1LCBkbWFwQ29uZmlnLCBpZHMudG9vbHRpcCwgdHJ1ZSwgMiwgYEV4b24gRXhwcmVzc2lvbiBvZiAke3N2Z1RpdGxlfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG1hcC5yZW5kZXIoaWRzLnJvb3QsIGlkcy5zdmcsIGZhbHNlLCB0cnVlLCB0b3AsIDUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIklucHV0IHR5cGUgaXMgbm90IHJlY29nbml6ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICQoXCIjc3Bpbm5lclwiKS5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogY29kZSByZXZpZXdcblxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmUgdGhlIGdlbmUgbW9kZWwgYW5kIGlzb2Zvcm0gdHJhY2tzIGxheW91dCBkaW1lbnNpb25zXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHlBZGp1c3QgPSB0eXBlLnN0YXJ0c1dpdGgoXCJpc29mb3JtXCIpPzYwOjgwOyAvLyB2ZXJ0aWNhbCBzcGFjZSBiZXR3ZWVuIHRoZSBoZWF0bWFwIGFuZCBnZW5lIG1vZGVsL2lzb2Zvcm0gdHJhY2tzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGVsQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogZG1hcC5jb25maWcucGFuZWxzLm1haW4ueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGRtYXAuY29uZmlnLnBhbmVscy5tYWluLmggKyBkbWFwLmNvbmZpZy5wYW5lbHMubWFpbi55ICsgeUFkanVzdCwgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICB3OiBkbWFwLmNvbmZpZy5wYW5lbHMubWFpbi53LFxuICAgICAgICAgICAgICAgICAgICAgICAgaDogMTAwXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhvbkggPSAyMDsgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzb1RyYWNrVmlld2VyQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogbW9kZWxDb25maWcueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IG1vZGVsQ29uZmlnLnkgKyBtb2RlbENvbmZpZy5oLFxuICAgICAgICAgICAgICAgICAgICAgICAgdzogbW9kZWxDb25maWcudyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGg6IGV4b25IKihpc29mb3Jtcy5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxPbjogXCJsZWZ0XCJcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBleHRlbmQgdGhlIFNWRyBoZWlnaHQgdG8gYWNjb21tb25kYXRlIHRoZSBnZW5lIG1vZGVsIGFuZCBpc29mb3JtIHRyYWNrc1xuICAgICAgICAgICAgICAgICAgICBsZXQgaCA9ICtzZWxlY3QoYCMke2lkcy5zdmd9YCkuYXR0cihcImhlaWdodFwiKTsgLy8gZ2V0IHRoZSBjdXJyZW50IGhlaWdodFxuICAgICAgICAgICAgICAgICAgICBsZXQgYWRqdXN0ID0gaCArIG1vZGVsQ29uZmlnLmggKyBpc29UcmFja1ZpZXdlckNvbmZpZy5oO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXR5cGUuc3RhcnRzV2l0aChcImlzb2Zvcm1cIikpIGFkanVzdCA9IGFkanVzdCA8IDEyMDA/MTIwMDphZGp1c3Q7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdChgIyR7aWRzLnN2Z31gKS5hdHRyKFwiaGVpZ2h0XCIsIGFkanVzdCk7IC8vIHNldCBtaW5pbXVtIGhlaWdodCB0byAxMjAwIGZvciBjb2xvciBsZWdlbmRzIC8vIFRPRE86IGNvZGUgcmV2aWV3LCByZW1vdmUgaGFyZC1jb2RlZCB2YWx1ZXNcblxuICAgICAgICAgICAgICAgICAgICAvLyByZW5kZXIgdGhlIGdlbmUgbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2VuZU1vZGVsID0gbmV3IEdlbmVNb2RlbChnZW5lLCBleG9ucywgZXhvbnNDdXJhdGVkLCBqdW5jdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RlbEcgPSBkbWFwLnZpc3VhbENvbXBvbmVudHMuc3ZnLmFwcGVuZChcImdcIikuYXR0cihcImlkXCIsIFwiZ2VuZU1vZGVsXCIpIC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIGlkXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bW9kZWxDb25maWcueH0sICR7bW9kZWxDb25maWcueX0pYCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHlwZS5zdGFydHNXaXRoKFwiaXNvZm9ybVwiKSkgZ2VuZU1vZGVsLnJlbmRlcihtb2RlbEcsIG1vZGVsQ29uZmlnKTsgLy8gZ2VuZSBtb2RlbCBpcyBub3QgcmVuZGVyZWQgd2hlbiB0aGUgcGFnZSBpcyBpbiBpc29mb3JtIHZpZXcgbW9kZVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbmRlciBpc29mb3JtIHRyYWNrcywgaWdub3JpbmcgaW50cm9uIGxlbmd0aHNcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNvZm9ybVRyYWNrVmlld2VyID0gbmV3IElzb2Zvcm1UcmFja1ZpZXdlcihpc29mb3JtcywgaXNvZm9ybUV4b25zLCBleG9ucywgaXNvVHJhY2tWaWV3ZXJDb25maWcpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFja1ZpZXdlckcgPSBkbWFwLnZpc3VhbENvbXBvbmVudHMuc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtpc29UcmFja1ZpZXdlckNvbmZpZy54fSwgJHtpc29UcmFja1ZpZXdlckNvbmZpZy55fSlgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWxPbiA9IHR5cGUuc3RhcnRzV2l0aChcImlzb2Zvcm1cIik/XCJib3RoXCI6XCJsZWZ0XCI7XG4gICAgICAgICAgICAgICAgICAgIGlzb2Zvcm1UcmFja1ZpZXdlci5yZW5kZXIoZmFsc2UsIHRyYWNrVmlld2VyRywgbGFiZWxPbik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY3VzdG9taXphdGlvblxuICAgICAgICAgICAgICAgICAgICBpZighdHlwZS5zdGFydHNXaXRoKFwiaXNvZm9ybVwiKSkgX2FkZENvbG9yTGVnZW5kc0ZvckdlbmVNb2RlbChkbWFwLCBqdW5jdGlvbkNvbG9yU2NhbGUsIGV4b25Db2xvclNjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZVRvb2xiYXIoZG1hcCwgaWRzKTtcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2godHlwZSl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpc29mb3JtVHJhbnNwb3NlZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9taXplSXNvZm9ybVRyYW5zcG9zZWRNYXAodGlzc3VlcywgZG1hcCwgaXNvZm9ybVRyYWNrVmlld2VyLCBqdW5jdGlvbkNvbG9yU2NhbGUsIGV4b25Db2xvclNjYWxlLCBpc29mb3JtQ29sb3JTY2FsZSwganVuY3Rpb25FeHByZXNzLCBleG9uRXhwcmVzcywgaXNvZm9ybUV4cHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2N1c3RvbWl6ZUlzb2Zvcm1UcmFja3MoZG1hcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwianVuY3Rpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGp1bmN0aW9ucy5sZW5ndGggPT0gMCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9taXplSGVhdE1hcCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXAsIGlzb2Zvcm1UcmFja1ZpZXdlciwganVuY3Rpb25Db2xvclNjYWxlLCBleG9uQ29sb3JTY2FsZSwgaXNvZm9ybUNvbG9yU2NhbGUsIGp1bmN0aW9uRXhwcmVzcywgZXhvbkV4cHJlc3MsIGlzb2Zvcm1FeHByZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXN0b21pemVKdW5jdGlvbk1hcCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2N1c3RvbWl6ZUdlbmVNb2RlbCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2N1c3RvbWl6ZUlzb2Zvcm1UcmFja3MoZG1hcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJleG9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXN0b21pemVIZWF0TWFwKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCwgaXNvZm9ybVRyYWNrVmlld2VyLCBqdW5jdGlvbkNvbG9yU2NhbGUsIGV4b25Db2xvclNjYWxlLCBpc29mb3JtQ29sb3JTY2FsZSwganVuY3Rpb25FeHByZXNzLCBleG9uRXhwcmVzcywgaXNvZm9ybUV4cHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2N1c3RvbWl6ZUV4b25NYXAodGlzc3VlcywgZ2VuZU1vZGVsLCBkbWFwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXN0b21pemVHZW5lTW9kZWwodGlzc3VlcywgZ2VuZU1vZGVsLCBkbWFwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXN0b21pemVJc29mb3JtVHJhY2tzKGRtYXApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcInVucmVjb2duaXplZCB0eXBlXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNzcGlubmVyXCIpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAkKFwiI3NwaW5uZXJcIikuaGlkZSgpO1xuICAgICAgICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgdGhlIFNWRyB0b29sYmFyXG4gKiBAcGFyYW0gZG1hcCB7RGVuZHJvSGVhdG1hcH1cbiAqIEBwYXJhbSBpZHMge0RpY3Rpb25hcnl9IG9mIERPTSBJRHMgd2l0aCBidXR0b25zXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfY3JlYXRlVG9vbGJhcihkbWFwLCBpZHMpe1xuICAgIGxldCB0b29sYmFyID0gZG1hcC5jcmVhdGVUb29sYmFyKGlkcy50b29sYmFyLCBkbWFwLnRvb2x0aXApO1xuICAgIHRvb2xiYXIuY3JlYXRlRG93bmxvYWRTdmdCdXR0b24oaWRzLmJ1dHRvbnMuc2F2ZSwgaWRzLnN2ZywgYCR7aWRzLnJvb3R9LXNhdmUuc3ZnYCwgaWRzLmNsb25lKTtcbn1cblxuLyoqXG4gKiBjdXN0b21pemluZyB0aGUgaGVhdG1hcFxuICogZGVwZW5kZW5jaWVzOiBDU1MgY2xhc3NlcyBmcm9tIGV4cHJlc3NNYXAuY3NzLCBqdW5jdGlvbk1hcC5jc3NcbiAqIEBwYXJhbSB0aXNzdWVzIHtMaXN0fSBvZiBHVEV4IHRpc3N1ZSBvYmplY3RzIHdpdGggYXR0cjogY29sb3JIZXgsIHRpc3N1ZVNpdGVEZXRhaWxJZCwgdGlzc3VlU2l0ZURldGFpbFxuICogQHBhcmFtIGdlbmVNb2RlbCB7R2VuZU1vZGVsfSBvZiB0aGUgY29sbGFwc2VkIGdlbmUgbW9kZWxcbiAqIEBwYXJhbSBkbWFwIHtPYmplY3R9IG9mIERlbmRyb0hlYXRtYXBcbiAqIEBwYXJhbSBpc29UcmFja1ZpZXdlciB7SXNvZm9ybVRyYWNrVmlld2VyfVxuICogQHBhcmFtIGp1bmN0aW9uU2NhbGVcbiAqIEBwYXJhbSBleG9uU2NhbGVcbiAqIEBwYXJhbSBpc29mb3JtU2NhbGVcbiAqIEBwYXJhbSBqdW5jdGlvbkRhdGEge0xpc3R9IG9mIGp1bmN0aW9uIGV4cHJlc3Npb24gZGF0YSBvYmplY3RzXG4gKiBAcGFyYW0gZXhvbkRhdGEge0xpc3R9IG9mIGV4b24gZXhwcmVzc2lvbiBkYXRhIG9iamVjdHNcbiAqIEBwYXJhbSBpc29mb3JtRGF0YSB7TGlzdH0gb2YgaXNvZm9ybSBleHByZXNzaW9uIGRhdGEgb2JqZWN0c1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2N1c3RvbWl6ZUhlYXRNYXAodGlzc3VlcywgZ2VuZU1vZGVsLCBkbWFwLCBpc29UcmFja1ZpZXdlciwganVuY3Rpb25TY2FsZSwgZXhvblNjYWxlLCBpc29mb3JtU2NhbGUsIGp1bmN0aW9uRGF0YSwgZXhvbkRhdGEsIGlzb2Zvcm1EYXRhKXtcbiAgICBjb25zdCBtYXBTdmcgPSBkbWFwLnZpc3VhbENvbXBvbmVudHMuc3ZnO1xuICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xuXG4gICAgLy8gcmVwbGFjZSB0aXNzdWUgSUQgd2l0aCB0aXNzdWUgc2l0ZSBkZXRhaWxcbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpXG4gICAgICAgIC50ZXh0KChkKT0+dGlzc3VlRGljdFtkXSE9PXVuZGVmaW5lZD90aXNzdWVEaWN0W2RdLnRpc3N1ZVNpdGVEZXRhaWw6ZClcbiAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgICAuYXR0cihcInhcIiwgZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLnJhbmdlKClbMV0gKyAxNSk7IC8vIG1ha2Ugcm9vbSBmb3IgdGlzc3VlIGNvbG9yIGJveGVzXG5cbiAgICAvLyBhZGQgdGlzc3VlIGJhbmRzXG4gICAgbWFwU3ZnLnNlbGVjdChcIiNoZWF0bWFwXCIpLnNlbGVjdEFsbChcIi5leHAtbWFwLXljb2xvclwiKVxuICAgICAgICAuZGF0YShkbWFwLm9iamVjdHMuaGVhdG1hcC55U2NhbGUuZG9tYWluKCkpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwieFwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUucmFuZ2UoKVsxXSArIDUpXG4gICAgICAgIC5hdHRyKFwieVwiLCAoZCk9PmRtYXAub2JqZWN0cy5oZWF0bWFwLnlTY2FsZShkKSlcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCA1KVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC55U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgIC5jbGFzc2VkKFwiZXhwLW1hcC15Y29sb3JcIiwgdHJ1ZSlcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCk9PmAjJHt0aXNzdWVEaWN0W2RdLmNvbG9ySGV4fWApO1xuXG4gICAgaWYgKGRtYXAub2JqZWN0cy5oZWF0bWFwLnhTY2FsZS5kb21haW4oKS5sZW5ndGggPiAxNSkge1xuICAgICAgICAvLyBBZGQgYW4gZXh0cmEgdGlzc3VlIGNvbG9yIGJhbmQgaWYgdGhlIG51bWJlciBvZiBjb2x1bW5zIGFyZSBsYXJnZXIgdGhhbiAxNVxuICAgICAgICBtYXBTdmcuc2VsZWN0KFwiI2hlYXRtYXBcIikuc2VsZWN0QWxsKFwiLmxlYWYtY29sb3JcIilcbiAgICAgICAgICAgIC5kYXRhKGRtYXAub2JqZWN0cy5oZWF0bWFwLnlTY2FsZS5kb21haW4oKSlcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGRtYXAub2JqZWN0cy5oZWF0bWFwLnhTY2FsZS5yYW5nZSgpWzBdIC0gNSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCkgPT4gZG1hcC5vYmplY3RzLmhlYXRtYXAueVNjYWxlKGQpKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCA1KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZG1hcC5vYmplY3RzLmhlYXRtYXAueVNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJsZWFmLWNvbG9yXCIsIHRydWUpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiBgIyR7dGlzc3VlRGljdFtkXS5jb2xvckhleH1gKTtcbiAgICB9XG5cbiAgICAvLyBkZWZpbmUgdGlzc3VlIGxhYmVsIG1vdXNlIGV2ZW50c1xuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC15bGFiZWxcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuXG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leHAtbWFwLXlsYWJlbFwiKS5jbGFzc2VkKFwiY2xpY2tlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBzZWxlY3QodGhpcykuY2xhc3NlZChcImNsaWNrZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCB0aXNzdWUgPSBkO1xuICAgICAgICAgICAgbGV0IGo7XG4gICAgICAgICAgICBpZiAoanVuY3Rpb25EYXRhICE9PSB1bmRlZmluZWQpIGogPSBqdW5jdGlvbkRhdGEuZmlsdGVyKChqKT0+ai50aXNzdWVTaXRlRGV0YWlsSWQ9PXRpc3N1ZSk7IC8vIGp1bmN0aW9uIGRhdGFcbiAgICAgICAgICAgIGNvbnN0IGV4ID0gZXhvbkRhdGEuZmlsdGVyKChlKT0+IGUudGlzc3VlU2l0ZURldGFpbElkPT10aXNzdWUpOyAvLyBleG9uIGRhdGFcbiAgICAgICAgICAgIC8vIGdlbmVNb2RlbC5jaGFuZ2VUZXh0bGFiZWwobWFwU3ZnLnNlbGVjdChcIiNnZW5lTW9kZWxcIiksIHRpc3N1ZURpY3RbdGlzc3VlXS50aXNzdWVTaXRlRGV0YWlsKTtcbiAgICAgICAgICAgIGdlbmVNb2RlbC5hZGREYXRhKG1hcFN2Zy5zZWxlY3QoXCIjZ2VuZU1vZGVsXCIpLCBqLCBleCwganVuY3Rpb25TY2FsZSwgZXhvblNjYWxlKTtcblxuICAgICAgICAgICAgLy8gaXNvZm9ybXMgdXBkYXRlXG4gICAgICAgICAgICBjb25zdCBpc29CYXJTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKFttaW4oaXNvZm9ybURhdGEubWFwKGQ9PmQudmFsdWUpKSwgbWF4KGlzb2Zvcm1EYXRhLm1hcChkPT5kLnZhbHVlKSldKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgLTEwMF0pO1xuICAgICAgICAgICAgY29uc3QgaXNvRGF0YSA9IGlzb2Zvcm1EYXRhLmZpbHRlcigoaXNvKT0+aXNvLnRpc3N1ZVNpdGVEZXRhaWxJZD09dGlzc3VlKTtcbiAgICAgICAgICAgIGlzb1RyYWNrVmlld2VyLnNob3dEYXRhKGlzb0RhdGEsIGlzb2Zvcm1TY2FsZSwgaXNvQmFyU2NhbGUsIHRpc3N1ZURpY3RbdGlzc3VlXS50aXNzdWVTaXRlRGV0YWlsKTtcbiAgICAgICAgfSk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB0aXNzdWVzIHtMaXN0fSBvZiB0aGUgR1RFeCB0aXNzdWUgb2JqZWN0cyB3aXRoIGF0dHI6IHRpc3N1ZVNpdGVEZXRhaWxcbiAqIEBwYXJhbSBkbWFwIHtPYmplY3R9IG9mIERlbmRyb0hlYXRtYXBcbiAqIEBwYXJhbSBpc29UcmFja1ZpZXdlciB7SXNvVHJhY2tWaWV3ZXJ9XG4gKiBAcGFyYW0ganVuY3Rpb25TY2FsZVxuICogQHBhcmFtIGV4b25TY2FsZVxuICogQHBhcmFtIGlzb2Zvcm1TY2FsZVxuICogQHBhcmFtIGp1bmN0aW9uRGF0YSB7TGlzdH0gb2YganVuY3Rpb24gZXhwcmVzc2lvbiBkYXRhIG9iamVjdHNcbiAqIEBwYXJhbSBleG9uRGF0YSB7TGlzdH0gb2YgZXhvbiBleHByZXNzaW9uIGRhdGEgb2JqZWN0c1xuICogQHBhcmFtIGlzb2Zvcm1EYXRhIHtMaXN0fSBvZiBpc29mb3JtIGV4cHJlc3Npb24gZGF0YSBvYmplY3RzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfY3VzdG9taXplSXNvZm9ybVRyYW5zcG9zZWRNYXAodGlzc3VlcywgZG1hcCwgaXNvVHJhY2tWaWV3ZXIsIGp1bmN0aW9uU2NhbGUsIGV4b25TY2FsZSwgaXNvZm9ybVNjYWxlLCBqdW5jdGlvbkRhdGEsIGV4b25EYXRhLCBpc29mb3JtRGF0YSl7XG4gICAgY29uc3QgbWFwU3ZnID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICBjb25zdCB0aXNzdWVEaWN0ID0gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PnthcnJbZC50aXNzdWVTaXRlRGV0YWlsSWRdID0gZDsgcmV0dXJuIGFycjt9LHt9KTtcbiAgICBjb25zdCB0b29sdGlwID0gZG1hcC50b29sdGlwO1xuXG4gICAgLy9yZXBsYWNlIHRpc3N1ZSBzaXRlIGRldGFpbCBJRCB3aXRoIHRpc3N1ZSBzaXRlIGRldGFpbFxuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIilcbiAgICAgICAgLnRleHQoKGQpPT50aXNzdWVEaWN0W2RdIT09dW5kZWZpbmVkP3Rpc3N1ZURpY3RbZF0udGlzc3VlU2l0ZURldGFpbDpkKVxuICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpO1xuXG4gICAgLy8gYWRkIHRpc3N1ZSBiYW5kc1xuICAgIG1hcFN2Zy5zZWxlY3QoXCIjaGVhdG1hcFwiKS5zZWxlY3RBbGwoXCIuZXhwLW1hcC14Y29sb3JcIilcbiAgICAgICAgLmRhdGEoZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLmRvbWFpbigpKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcInhcIiwgKGQpPT5kbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUoZCkpXG4gICAgICAgIC5hdHRyKFwieVwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC55U2NhbGUucmFuZ2UoKVsxXSArIDUpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCA1KVxuICAgICAgICAuY2xhc3NlZChcImV4cC1tYXAteGNvbG9yXCIsIHRydWUpXG4gICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpPT5gIyR7dGlzc3VlRGljdFtkXS5jb2xvckhleH1gKTtcblxuICAgIGlmIChkbWFwLm9iamVjdHMuaGVhdG1hcC55U2NhbGUuZG9tYWluKCkubGVuZ3RoID4gMTUpe1xuICAgICAgICAvLyB3aGVuIHRoZXJlIGFyZSBtb3JlIHRoYW4gMTUgaXNvZm9ybXMsIGFkZCBhbm90aGVyIHRpc3N1ZSBjb2xvciBiYW5kcyB1bmRlciB0aGUgZGVuZHJvZ3JhbSdzIGxlYWYgbm9kZXNcbiAgICAgICAgbWFwU3ZnLnNlbGVjdChcIiNoZWF0bWFwXCIpLnNlbGVjdEFsbChcIi5sZWFmLWNvbG9yXCIpXG4gICAgICAgICAgICAuZGF0YShkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUuZG9tYWluKCkpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCk9PmRtYXAub2JqZWN0cy5oZWF0bWFwLnhTY2FsZShkKSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC55U2NhbGUucmFuZ2UoKVswXSAtIDEwKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCA1KVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJsZWFmLWNvbG9yXCIsIHRydWUpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKT0+YCMke3Rpc3N1ZURpY3RbZF0uY29sb3JIZXh9YCk7XG4gICAgfVxuXG5cbiAgICAvLyBkZWZpbmUgdGlzc3VlIGxhYmVsIG1vdXNlIGV2ZW50c1xuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuXG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcblxuICAgICAgICB9KVxuICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIikuY2xhc3NlZChcImNsaWNrZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJjbGlja2VkXCIsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgdGlzc3VlID0gZDtcbiAgICAgICAgICAgIGxldCBqO1xuICAgICAgICAgICAgaWYgKGp1bmN0aW9uRGF0YSAhPT0gdW5kZWZpbmVkKSBqID0ganVuY3Rpb25EYXRhLmZpbHRlcigoaik9PmoudGlzc3VlU2l0ZURldGFpbElkPT10aXNzdWUpOyAvLyBqdW5jdGlvbiBkYXRhXG4gICAgICAgICAgICBjb25zdCBleCA9IGV4b25EYXRhLmZpbHRlcigoZSk9PmUudGlzc3VlU2l0ZURldGFpbElkPT10aXNzdWUpOyAvLyBleG9uIGRhdGFcblxuICAgICAgICAgICAgLy8gaXNvZm9ybXMgdXBkYXRlXG5cbiAgICAgICAgICAgIGNvbnN0IGlzb0JhclNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgICAgIC5kb21haW4oW21pbihpc29mb3JtRGF0YS5tYXAoZD0+ZC52YWx1ZSkpLCBtYXgoaXNvZm9ybURhdGEubWFwKGQ9PmQudmFsdWUpKV0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCAtMTAwXSk7XG4gICAgICAgICAgICBjb25zdCBpc29EYXRhID0gaXNvZm9ybURhdGEuZmlsdGVyKChpc28pPT5pc28udGlzc3VlU2l0ZURldGFpbElkPT10aXNzdWUpO1xuICAgICAgICAgICAgY29uc3Qgc29ydCA9IGZhbHNlO1xuICAgICAgICAgICAgaXNvVHJhY2tWaWV3ZXIuc2hvd0RhdGEoaXNvRGF0YSwgaXNvZm9ybVNjYWxlLCBpc29CYXJTY2FsZSwgdGlzc3VlRGljdFt0aXNzdWVdLnRpc3N1ZVNpdGVEZXRhaWwsIHNvcnQpO1xuICAgICAgICB9KTtcblxuXG5cbiAgICAvLyBkZWZpbmUgdGhlIGlzb2Zvcm0gaGVhdG1hcCBjZWxscycgbW91c2UgZXZlbnRzXG4gICAgLy8gbm90ZTogdG8gcmVmZXJlbmNlIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgZnVuY3Rpb24gKGUuZy4gZDMuc2VsZWN0KHRoaXMpKSBoZXJlIHdlIG11c3QgdXNlIGEgbm9ybWFsIGFub255bW91cyBmdW5jdGlvbi5cbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTsgLy8gJ3RoaXMnIHJlZmVycyB0byB0aGUgZDMgRE9NIG9iamVjdFxuICAgICAgICAgICAgZG1hcC5vYmplY3RzLmhlYXRtYXAuY2VsbE1vdXNlb3ZlcihkLCBtYXBTdmcsIHNlbGVjdGVkKTtcbiAgICAgICAgICAgIGNvbnN0IHRpc3N1ZSA9IHRpc3N1ZURpY3RbZC54XSA9PT0gdW5kZWZpbmVkP2QueDp0aXNzdWVEaWN0W2QueF0udGlzc3VlU2l0ZURldGFpbDsgLy8gZ2V0IHRpc3N1ZSBuYW1lIG9yIElEXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlRmxvYXQoZC5kaXNwbGF5VmFsdWUudG9FeHBvbmVudGlhbCgpKS50b1ByZWNpc2lvbigzKTtcbiAgICAgICAgICAgIGNvbnN0IHRvb2x0aXBEYXRhID0gW1xuICAgICAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cInRvb2x0aXAta2V5XCI+VGlzc3VlPC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHt0aXNzdWV9PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5Jc29mb3JtPC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHtkLnRyYW5zY3JpcHRJZH08L3NwYW4+YCxcbiAgICAgICAgICAgICAgICBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLWtleVwiPiR7ZC51bml0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZC51bml0LnNsaWNlKDEpfTwvc3Bhbj46IDxzcGFuIGNsYXNzPVwidG9vbHRpcC12YWx1ZVwiPiR7dmFsdWV9PC9zcGFuPmBcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB0b29sdGlwLnNob3codG9vbHRpcERhdGEuam9pbihcIjxici8+XCIpKTtcblxuICAgICAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSBpc29mb3JtIHRyYWNrXG4gICAgICAgICAgICBjb25zdCBpZCA9IGQudHJhbnNjcmlwdElkLnJlcGxhY2UoXCIuXCIsIFwiX1wiKTsgLy8gZG90IGlzIG5vdCBhbiBhbGxvd2FibGUgY2hhcmFjdGVyLCBzbyBpdCBoYXMgYmVlbiByZXBsYWNlZCB3aXRoIGFuIHVuZGVyc2NvcmVcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3QoYCMke2lkfWApLnNlbGVjdEFsbChcIi5leG9uLWN1cmF0ZWRcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpOyAvLyBUT0RPOiBwZXJoYXBzIGNoYW5nZSB0aGUgY29uZnVzaW5nIGNsYXNzIG5hbWVcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3QoYCMke2lkfWApLnNlbGVjdEFsbChcIi5pbnRyb25cIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIqXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICB0b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAvLyBpc29mb3JtIGxhYmVsc1xuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC15bGFiZWxcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSBpc29mb3JtIHRyYWNrXG4gICAgICAgICAgICBjb25zdCBpZCA9IGQucmVwbGFjZShcIi5cIiwgXCJfXCIpOyAvLyBkb3QgaXMgbm90IGFuIGFsbG93YWJsZSBjaGFyYWN0ZXIsIHNvIGl0IGhhcyBiZWVuIHJlcGxhY2VkIHdpdGggYW4gdW5kZXJzY29yZVxuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdChgIyR7aWR9YCkuc2VsZWN0QWxsKFwiLmV4b24tY3VyYXRlZFwiKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7IC8vIFRPRE86IHBlcmhhcHMgY2hhbmdlIHRoZSBjb25mdXNpbmcgY2xhc3MgbmFtZVxuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdChgIyR7aWR9YCkuc2VsZWN0QWxsKFwiLmludHJvblwiKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcykuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhvbi1jdXJhdGVkXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmludHJvblwiKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICB9KVxuICAgICAgICAub24gKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIG5vIGFjdGlvbiBpbXBsZW1lbnRlZFxuICAgICAgICB9KTtcblxufVxuXG4vKipcbiAqIGN1c3RvbWl6aW5nIHRoZSBleG9uIGhlYXQgbWFwXG4gKiBAcGFyYW0gdGlzc3VlcyB7TGlzdH0gb2YgdGhlIEdURXggdGlzc3VlIG9iamVjdHMgd2l0aCBhdHRyOiB0aXNzdWVTaXRlRGV0YWlsXG4gKiBAcGFyYW0gZ2VuZU1vZGVsIHtHZW5lTW9kZWx9XG4gKiBAcGFyYW0gZG1hcCB7RGVuZHJvSGVhdG1hcH1cblxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2N1c3RvbWl6ZUV4b25NYXAodGlzc3VlcywgZ2VuZU1vZGVsLCBkbWFwKXtcbiAgICBjb25zdCBtYXBTdmcgPSBkbWFwLnZpc3VhbENvbXBvbmVudHMuc3ZnO1xuICAgIGNvbnN0IHRvb2x0aXAgPSBkbWFwLnRvb2x0aXA7XG4gICAgY29uc3QgdGlzc3VlRGljdCA9IHRpc3N1ZXMucmVkdWNlKChhcnIsIGQpPT57YXJyW2QudGlzc3VlU2l0ZURldGFpbElkXSA9IGQ7IHJldHVybiBhcnI7fSx7fSk7XG5cbiAgICAvLyBkZWZpbmUgdGhlIGV4b24gaGVhdG1hcCBjZWxscycgbW91c2UgZXZlbnRzXG4gICAgLy8gbm90ZTogdG8gcmVmZXJlbmNlIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgZnVuY3Rpb24gKGUuZy4gZDMuc2VsZWN0KHRoaXMpKSBoZXJlIHdlIG11c3QgdXNlIGEgbm9ybWFsIGFub255bW91cyBmdW5jdGlvbi5cbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTsgLy8gJ3RoaXMnIHJlZmVycyB0byB0aGUgZDMgRE9NIG9iamVjdFxuICAgICAgICAgICAgZG1hcC5vYmplY3RzLmhlYXRtYXAuY2VsbE1vdXNlb3ZlcihkLCBtYXBTdmcsIHNlbGVjdGVkKTtcbiAgICAgICAgICAgIGNvbnN0IHRpc3N1ZSA9IHRpc3N1ZURpY3RbZC55XSA9PT0gdW5kZWZpbmVkP2QueDp0aXNzdWVEaWN0W2QueV0udGlzc3VlU2l0ZURldGFpbDsgLy8gZ2V0IHRpc3N1ZSBuYW1lIG9yIElEXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlRmxvYXQoZC5kaXNwbGF5VmFsdWUudG9FeHBvbmVudGlhbCgpKS50b1ByZWNpc2lvbigzKTtcbiAgICAgICAgICAgIGNvbnN0IHRvb2x0aXBEYXRhID0gW1xuICAgICAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cInRvb2x0aXAta2V5XCI+VGlzc3VlPC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHt0aXNzdWV9PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5FeG9uPC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHtkLmV4b25JZH08L3NwYW4+YCxcbiAgICAgICAgICAgICAgICBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLWtleVwiPlN0YXJ0PC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHtkLmNocm9tU3RhcnR9PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5FbmQ8L3NwYW4+OiA8c3BhbiBjbGFzcz1cInRvb2x0aXAtdmFsdWVcIj4ke2QuY2hyb21FbmR9PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5FeG9uIGxlbmd0aDwvc3Bhbj46IDxzcGFuIGNsYXNzPVwidG9vbHRpcC12YWx1ZVwiPiR7TnVtYmVyKGQuY2hyb21FbmQpLU51bWJlcihkLmNocm9tU3RhcnQpICsgMX0gYnA8L3NwYW4+YCxcbiAgICAgICAgICAgICAgICBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLWtleVwiPiR7ZC51bml0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZC51bml0LnNsaWNlKDEpfTwvc3Bhbj46IDxzcGFuIGNsYXNzPVwidG9vbHRpcC12YWx1ZVwiPiR7dmFsdWV9PC9zcGFuPmBcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB0b29sdGlwLnNob3codG9vbHRpcERhdGEuam9pbihcIjxici8+XCIpKTtcblxuICAgICAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSBleG9uIG9uIHRoZSBnZW5lIG1vZGVsXG4gICAgICAgICAgICBjb25zdCBleG9uTnVtYmVyID0gZC5leG9uSWQuc3BsaXQoXCJfXCIpWzFdO1xuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChgLmV4b24tY3VyYXRlZCR7ZXhvbk51bWJlcn1gKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChcIipcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHRvb2x0aXAuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgIC8vIGV4b24gbGFiZWxzXG4gICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leHAtbWFwLXhsYWJlbFwiKVxuICAgICAgICAuZWFjaChmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIC8vIHNpbXBsaWZpZWQgdGhlIGV4b24gbGFiZWxcbiAgICAgICAgICAgIGNvbnN0IGV4b25OdW1iZXIgPSBkLnNwbGl0KFwiX1wiKVsxXTtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS50ZXh0KGBFeG9uICR7ZXhvbk51bWJlcn1gKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSBleG9uIG9uIHRoZSBnZW5lIG1vZGVsXG4gICAgICAgICAgICBjb25zdCBleG9uTnVtYmVyID0gZC5zcGxpdChcIl9cIilbMV07XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKGAuZXhvbi1jdXJhdGVkJHtleG9uTnVtYmVyfWApLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leG9uLWN1cmF0ZWRcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbn1cblxuLyoqXG4gKiBjdXN0b21pemluZyB0aGUganVuY3Rpb24gaGVhdCBtYXBcbiAqIEBwYXJhbSB0aXNzdWVzIHtMaXN0fSBvZiB0aGUgR1RFeCB0aXNzdWUgb2JqZWN0cyB3aXRoIGF0dHI6IHRpc3N1ZVNpdGVEZXRhaWxcbiAqIEBwYXJhbSBnZW5lTW9kZWwge0dlbmVNb2RlbH1cbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2N1c3RvbWl6ZUp1bmN0aW9uTWFwKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCl7XG4gICAgY29uc3QgbWFwU3ZnID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICBjb25zdCB0b29sdGlwID0gZG1hcC50b29sdGlwO1xuICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xuXG4gICAgLy8gZGVmaW5lIHRoZSBqdW5jdGlvbiBoZWF0bWFwIGNlbGxzJyBtb3VzZSBldmVudHNcbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTtcbiAgICAgICAgICAgIGRtYXAub2JqZWN0cy5oZWF0bWFwLmNlbGxNb3VzZW92ZXIoZCwgbWFwU3ZnLCBzZWxlY3RlZCk7XG4gICAgICAgICAgICBjb25zdCB0aXNzdWUgPSB0aXNzdWVEaWN0W2QueV0gPT09IHVuZGVmaW5lZD9kLng6dGlzc3VlRGljdFtkLnldLnRpc3N1ZVNpdGVEZXRhaWw7IC8vIGdldCB0aXNzdWUgbmFtZSBvciBJRFxuICAgICAgICAgICAgY29uc3QganVuYyA9IGdlbmVNb2RlbC5qdW5jdGlvbnMuZmlsdGVyKChqKT0+ai5qdW5jdGlvbklkID09IGQueCAmJiAhai5maWx0ZXJlZClbMF07IC8vIGdldCB0aGUganVuY3Rpb24gZGlzcGxheSBuYW1lXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlRmxvYXQoZC5kaXNwbGF5VmFsdWUudG9FeHBvbmVudGlhbCgpKS50b1ByZWNpc2lvbigzKTtcblxuICAgICAgICAgICAgY29uc3QgdG9vbHRpcERhdGEgPSBbXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5UaXNzdWU8L3NwYW4+OiA8c3BhbiBjbGFzcz1cInRvb2x0aXAtdmFsdWVcIj4ke3Rpc3N1ZX08L3NwYW4+YCxcbiAgICAgICAgICAgICAgICBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLWtleVwiPkp1bmN0aW9uPC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHtqdW5jLmRpc3BsYXlOYW1lfTwvc3Bhbj5gLFxuICAgICAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cInRvb2x0aXAta2V5XCI+U3RhcnQ8L3NwYW4+OiA8c3BhbiBjbGFzcz1cInRvb2x0aXAtdmFsdWVcIj4ke2p1bmMuY2hyb21TdGFydH08L3NwYW4+YCxcbiAgICAgICAgICAgICAgICBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLWtleVwiPkVuZDwvc3Bhbj46IDxzcGFuIGNsYXNzPVwidG9vbHRpcC12YWx1ZVwiPiR7anVuYy5jaHJvbUVuZH08L3NwYW4+YCxcbiAgICAgICAgICAgICAgICBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLWtleVwiPkV4b24gbGVuZ3RoPC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHtOdW1iZXIoanVuYy5jaHJvbUVuZCktTnVtYmVyKGp1bmMuY2hyb21TdGFydCkgKyAxfSBicDwvc3Bhbj5gLFxuICAgICAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cInRvb2x0aXAta2V5XCI+JHtkLnVuaXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBkLnVuaXQuc2xpY2UoMSl9PC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHt2YWx1ZX08L3NwYW4+YFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHRvb2x0aXAuc2hvdyh0b29sdGlwRGF0YS5qb2luKFwiPGJyLz5cIikpO1xuXG4gICAgICAgICAgICAvLyBoaWdobGlnaHQgdGhlIGp1bmN0aW9uIGFuZCBpdHMgZXhvbnMgb24gdGhlIGdlbmUgbW9kZWxcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoYC5qdW5jJHtqdW5jLmp1bmN0aW9uSWR9YCkuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgaWYgKGp1bmMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoYC5leG9uJHtqdW5jLnN0YXJ0RXhvbi5leG9uTnVtYmVyfWApLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKGAuZXhvbiR7anVuYy5lbmRFeG9uLmV4b25OdW1iZXJ9YCkuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIqXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICB0b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAvLyBqdW5jdGlvbiBsYWJlbHNcbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyBhZGQganVuY3Rpb24gSUQgYXMgdGhlIGRvbSBpZFxuICAgICAgICAgICAgY29uc3QgeGxhYmVsID0gc2VsZWN0KHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgaklkID0geGxhYmVsLnRleHQoKTtcbiAgICAgICAgICAgIHhsYWJlbC5hdHRyKFwiaWRcIiwgYCR7aklkfWApO1xuICAgICAgICAgICAgeGxhYmVsLmNsYXNzZWQoYGp1bmMke2pJZH1gLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gYW5kIHRoZW4gY2hhbmdlIHRoZSB0ZXh0IHRvIHN0YXJ0RXhvbi1lbmRFeG9uIGZvcm1hdFxuICAgICAgICAgICAgY29uc3QganVuYyA9IGdlbmVNb2RlbC5qdW5jdGlvbnMuZmlsdGVyKChkKT0+ZC5qdW5jdGlvbklkID09IGAke2pJZH1gICYmICFkLmZpbHRlcmVkKVswXTtcbiAgICAgICAgICAgIGlmIChqdW5jICE9PSB1bmRlZmluZWQpIHhsYWJlbC50ZXh0KGp1bmMuZGlzcGxheU5hbWUpO1xuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNvbnN0IGpJZCA9IHNlbGVjdCh0aGlzKS5hdHRyKFwiaWRcIik7XG4gICAgICAgICAgICBzZWxlY3QodGhpcykuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBoaWdobGlnaHQgdGhlIGp1bmN0aW9uIGFuZCBpdHMgZXhvbnMgb24gdGhlIGdlbmUgbW9kZWxcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoYC5qdW5jJHtqSWR9YCkuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QganVuYyA9IGdlbmVNb2RlbC5qdW5jdGlvbnMuZmlsdGVyKChkKT0+ZC5qdW5jdGlvbklkID09IGpJZCAmJiAhZC5maWx0ZXJlZClbMF07XG4gICAgICAgICAgICBpZiAoanVuYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChgLmV4b24ke2p1bmMuc3RhcnRFeG9uLmV4b25OdW1iZXJ9YCkuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoYC5leG9uJHtqdW5jLmVuZEV4b24uZXhvbk51bWJlcn1gKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcykuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHNlbGVjdEFsbChcIi5qdW5jXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBzZWxlY3RBbGwoXCIuanVuYy1jdXJ2ZVwiKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leG9uXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuXG5cbn1cblxuZnVuY3Rpb24gX2N1c3RvbWl6ZUdlbmVNb2RlbCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXApe1xuICAgIGNvbnN0IG1hcFN2ZyA9IGRtYXAudmlzdWFsQ29tcG9uZW50cy5zdmc7XG4gICAgY29uc3QgdG9vbHRpcCA9IGRtYXAudG9vbHRpcDtcbiAgICBjb25zdCBtb2RlbCA9IG1hcFN2Zy5zZWxlY3QoXCIjZ2VuZU1vZGVsXCIpO1xuICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xuICAgIC8vIG1vdXNlIGV2ZW50cyBvbiB0aGUgZ2VuZSBtb2RlbFxuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuanVuY1wiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBzZWxlY3RBbGwoYC5qdW5jJHtkLmp1bmN0aW9uSWR9YCkuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgdG9vbHRpcERhdGEgPSBbXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1oZWFkXCI+JHtkLmRpc3BsYXlOYW1lfTwvc3Bhbj5gLFxuICAgICAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cInRvb2x0aXAta2V5XCI+SUQ8L3NwYW4+OiA8c3BhbiBjbGFzcz1cInRvb2x0aXAtdmFsdWVcIj4ke2QuanVuY3Rpb25JZH08L3NwYW4+YCxcbiAgICAgICAgICAgICAgICBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLWtleVwiPkp1bmN0aW9uIGxlbmd0aDwvc3Bhbj46IDxzcGFuIGNsYXNzPVwidG9vbHRpcC12YWx1ZVwiPiR7TnVtYmVyKGQuY2hyb21FbmQpLU51bWJlcihkLmNocm9tU3RhcnQpICsgMX0gYnA8L3NwYW4+YCxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB0b29sdGlwLnNob3codG9vbHRpcERhdGEuam9pbihcIjxici8+XCIpKTtcblxuICAgICAgICAgICAgaWYgKGQuc3RhcnRFeG9uICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgIG1vZGVsLnNlbGVjdEFsbChcIi5leG9uXCIpLmZpbHRlcihgLmV4b24ke2Quc3RhcnRFeG9uLmV4b25OdW1iZXJ9YCkuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIG1vZGVsLnNlbGVjdEFsbChcIi5leG9uXCIpLmZpbHRlcihgLmV4b24ke2QuZW5kRXhvbi5leG9uTnVtYmVyfWApLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gb24gdGhlIGp1bmN0aW9uIGhlYXQgbWFwLCBsYWJlbCB0aGUgeGxhYmVsXG4gICAgICAgICAgICBtb2RlbC5zZWxlY3QoYC5qdW5jJHtkLmp1bmN0aW9uSWR9YCkuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJub3JtYWxcIiwgZmFsc2UpO1xuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHNlbGVjdEFsbChgLmp1bmMke2QuanVuY3Rpb25JZH1gKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgbW9kZWwuc2VsZWN0QWxsKFwiLmV4b25cIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIG1vZGVsLnNlbGVjdEFsbChcIi54TGFiZWxcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwibm9ybWFsXCIsIHRydWUpO1xuICAgICAgICAgICAgdG9vbHRpcC5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgIG1vZGVsLnNlbGVjdEFsbChcIi5leG9uLWN1cmF0ZWRcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHRvb2x0aXBEYXRhID0gW1xuICAgICAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cInRvb2x0aXAtaGVhZFwiPkV4b24gJHtkLmV4b25OdW1iZXJ9PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5TdGFydDwvc3Bhbj46IDxzcGFuIGNsYXNzPVwidG9vbHRpcC12YWx1ZVwiPiR7ZC5jaHJvbVN0YXJ0fTwvc3Bhbj5gLFxuICAgICAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cInRvb2x0aXAta2V5XCI+RW5kPC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHtkLmNocm9tRW5kfTwvc3Bhbj5gLFxuICAgICAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cInRvb2x0aXAta2V5XCI+RXhvbiBsZW5ndGg8L3NwYW4+OiA8c3BhbiBjbGFzcz1cInRvb2x0aXAtdmFsdWVcIj4ke051bWJlcihkLmNocm9tRW5kKS1OdW1iZXIoZC5jaHJvbVN0YXJ0KSArIDF9IGJwPC9zcGFuPmAsXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgdG9vbHRpcC5zaG93KHRvb2x0aXBEYXRhLmpvaW4oXCI8YnIvPlwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICB0b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIF9jdXN0b21pemVJc29mb3JtVHJhY2tzKGRtYXApe1xuICAgIGNvbnN0IG1hcFN2ZyA9IGRtYXAudmlzdWFsQ29tcG9uZW50cy5zdmc7XG4gICAgY29uc3QgdG9vbHRpcCA9IGRtYXAudG9vbHRpcDtcblxuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuaXNvdHJhY2tcIikuc2VsZWN0QWxsKFwiLmV4b24tY3VyYXRlZFwiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcykuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgdG9vbHRpcERhdGEgPSBbXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1oZWFkXCI+RXhvbiAke2QuZXhvbk51bWJlcn08L3NwYW4+YCxcbiAgICAgICAgICAgICAgICBgPHNwYW4gY2xhc3M9XCJ0b29sdGlwLWtleVwiPlN0YXJ0PC9zcGFuPjogPHNwYW4gY2xhc3M9XCJ0b29sdGlwLXZhbHVlXCI+JHtkLmNocm9tU3RhcnR9PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5FbmQ8L3NwYW4+OiA8c3BhbiBjbGFzcz1cInRvb2x0aXAtdmFsdWVcIj4ke2QuY2hyb21FbmR9PC9zcGFuPmAsXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwidG9vbHRpcC1rZXlcIj5FeG9uIGxlbmd0aDwvc3Bhbj46IDxzcGFuIGNsYXNzPVwidG9vbHRpcC12YWx1ZVwiPiR7TnVtYmVyKGQuY2hyb21FbmQpLU51bWJlcihkLmNocm9tU3RhcnQpICsgMX0gYnA8L3NwYW4+YCxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB0b29sdGlwLnNob3codG9vbHRpcERhdGEuam9pbihcIjxici8+XCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leG9uLWN1cmF0ZWRcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHRvb2x0aXAuaGlkZSgpO1xuICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gX2FkZENvbG9yTGVnZW5kc0ZvckdlbmVNb2RlbChkbWFwLCBqdW5jdGlvblNjYWxlLCBleG9uU2NhbGUpe1xuICAgIGNvbnN0IG1hcFN2ZyA9IGRtYXAudmlzdWFsQ29tcG9uZW50cy5zdmc7XG4gICAgbGV0IFggPSBkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUucmFuZ2UoKVsxXSArIDUwO1xuICAgIGNvbnN0IFkgPSAzMDtcbiAgICBjb25zdCBpbmMgPSA1MDtcbiAgICBkcmF3Q29sb3JMZWdlbmQoXCJFeG9uIHJlYWQgY291bnRzIHBlciBiYXNlXCIsIG1hcFN2Zy5zZWxlY3QoXCIjZ2VuZU1vZGVsXCIpLCBleG9uU2NhbGUsIHt4OiBYLCB5Oll9LCB0cnVlLCA1LCAyLCB7aDoyMCwgdzoxMH0sIFwidlwiKTtcblxuICAgIFggPSBYICsgaW5jO1xuICAgIGlmIChqdW5jdGlvblNjYWxlICE9PSB1bmRlZmluZWQpIGRyYXdDb2xvckxlZ2VuZChcIkp1bmN0aW9uIHJlYWQgY291bnRzXCIsIG1hcFN2Zy5zZWxlY3QoXCIjZ2VuZU1vZGVsXCIpLCBqdW5jdGlvblNjYWxlLCB7eDogWCwgeTpZfSwgdHJ1ZSwgNSwgMTAsIHtoOjIwLCB3OjEwfSwgXCJ2XCIpO1xufVxuXG5leHBvcnQgdmFyIFRyYW5zY3JpcHRCcm93c2VyID0ge1xuICAgIHJlbmRlcjogcmVuZGVyXG59O1xuIl0sIm5hbWVzIjpbInhodG1sIiwibmFtZXNwYWNlcyIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJuYW1lc3BhY2UiLCJuYW1lIiwicHJlZml4IiwiaSIsImluZGV4T2YiLCJzbGljZSIsImhhc093blByb3BlcnR5Iiwic3BhY2UiLCJsb2NhbCIsImNyZWF0b3JJbmhlcml0IiwiZG9jdW1lbnQiLCJ0aGlzIiwib3duZXJEb2N1bWVudCIsInVyaSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdG9yRml4ZWQiLCJmdWxsbmFtZSIsImNyZWF0b3IiLCJub25lIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiZW1wdHkiLCJzZWxlY3RvckFsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXRjaGVyIiwibWF0Y2hlcyIsInNwYXJzZSIsInVwZGF0ZSIsIkFycmF5IiwibGVuZ3RoIiwiRW50ZXJOb2RlIiwicGFyZW50IiwiZGF0dW0iLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJjaGlsZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJrZXlQcmVmaXgiLCJiaW5kSW5kZXgiLCJncm91cCIsImVudGVyIiwiZXhpdCIsImRhdGEiLCJub2RlIiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJjYWxsIiwiYXNjZW5kaW5nIiwiYSIsImIiLCJOYU4iLCJhdHRyUmVtb3ZlIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0clJlbW92ZU5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJhdHRyQ29uc3RhbnQiLCJ2YWx1ZSIsInNldEF0dHJpYnV0ZSIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJ2IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJhdHRyRnVuY3Rpb25OUyIsImRlZmF1bHRWaWV3Iiwic3R5bGVSZW1vdmUiLCJzdHlsZSIsInJlbW92ZVByb3BlcnR5Iiwic3R5bGVDb25zdGFudCIsInByaW9yaXR5Iiwic2V0UHJvcGVydHkiLCJzdHlsZUZ1bmN0aW9uIiwic3R5bGVWYWx1ZSIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRDb21wdXRlZFN0eWxlIiwicHJvcGVydHlSZW1vdmUiLCJwcm9wZXJ0eUNvbnN0YW50IiwicHJvcGVydHlGdW5jdGlvbiIsImNsYXNzQXJyYXkiLCJzdHJpbmciLCJ0cmltIiwic3BsaXQiLCJjbGFzc0xpc3QiLCJDbGFzc0xpc3QiLCJfbm9kZSIsIl9uYW1lcyIsImdldEF0dHJpYnV0ZSIsImNsYXNzZWRBZGQiLCJuYW1lcyIsImxpc3QiLCJuIiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsInJlbW92ZSIsImNsYXNzZWRUcnVlIiwiY2xhc3NlZEZhbHNlIiwiY2xhc3NlZEZ1bmN0aW9uIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwidGV4dENvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsImh0bWxDb25zdGFudCIsImh0bWxGdW5jdGlvbiIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwiY29uc3RhbnROdWxsIiwicmVtb3ZlQ2hpbGQiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93IiwiY2xvbmUiLCJjbG9uZU5vZGUiLCJzZWxlY3Rpb25fY2xvbmVEZWVwIiwicHVzaCIsImpvaW4iLCJzcGxpY2UiLCJjb250YWlucyIsImZpbHRlckV2ZW50cyIsImV2ZW50IiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImluZGV4IiwiY29udGV4dExpc3RlbmVyIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsImV2ZW50MCIsIm9uUmVtb3ZlIiwidHlwZW5hbWUiLCJvbiIsIl9fb24iLCJvIiwiaiIsIm0iLCJ0eXBlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhcHR1cmUiLCJvbkFkZCIsIndyYXAiLCJkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJwYXJhbXMiLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJkaXNwYXRjaENvbnN0YW50IiwiZGlzcGF0Y2hGdW5jdGlvbiIsInJvb3QiLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic2VsZWN0aW9uIiwic2VsZWN0Iiwic2VsZWN0QWxsIiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwiZmlsdGVyIiwibWF0Y2giLCJzaXplIiwiZWFjaCIsImJpbmQiLCJ4IiwiY29uc3RhbnQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJwcmV2aW91cyIsImkwIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsIm1hcCIsIm9uZW50ZXIiLCJvbnVwZGF0ZSIsIm9uZXhpdCIsImFwcGVuZCIsIm1lcmdlIiwib3JkZXIiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJNYXRoIiwibWluIiwibWVyZ2VzIiwiZ3JvdXAwIiwiZ3JvdXAxIiwic29ydCIsImNvbXBhcmUiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJjYWxsYmFjayIsIm5vZGVzIiwiYXR0ciIsImdldEF0dHJpYnV0ZU5TIiwicHJvcGVydHkiLCJjbGFzc2VkIiwidGV4dCIsImh0bWwiLCJjcmVhdGUiLCJpbnNlcnQiLCJiZWZvcmUiLCJkZWVwIiwidCIsInR5cGVuYW1lcyIsInBhcnNlVHlwZW5hbWVzIiwiZGlzcGF0Y2giLCJmIiwiYXNjZW5kaW5nQmlzZWN0IiwibGVmdCIsImxvIiwiaGkiLCJtaWQiLCJyaWdodCIsImJpc2VjdFJpZ2h0IiwiZTEwIiwic3FydCIsImU1IiwiZTIiLCJ0aWNrSW5jcmVtZW50Iiwic3RhcnQiLCJzdG9wIiwiY291bnQiLCJzdGVwIiwibWF4IiwicG93ZXIiLCJmbG9vciIsImxvZyIsIkxOMTAiLCJlcnJvciIsInBvdyIsInZhbHVlcyIsInZhbHVlb2YiLCJpbml0UmFuZ2UiLCJkb21haW4iLCJyYW5nZSIsImluaXRJbnRlcnBvbGF0b3IiLCJpbnRlcnBvbGF0b3IiLCJNYXAiLCJvYmplY3QiLCJzZXQiLCJpc0FycmF5IiwibmVzdCIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJrZXlzIiwic29ydEtleXMiLCJhcnJheSIsImRlcHRoIiwiY3JlYXRlUmVzdWx0Iiwic2V0UmVzdWx0IiwidmFsdWVzQnlLZXkiLCJyZXN1bHQiLCJnZXQiLCJlbnRyaWVzIiwic29ydEtleSIsImsiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJTZXQiLCJoYXMiLCJjbGVhciIsInByb3RvIiwiaW1wbGljaXQiLCJvcmRpbmFsIiwidW5rbm93biIsInNjYWxlIiwiXyIsImNvcHkiLCJiYW5kIiwiYmFuZHdpZHRoIiwidW5kZWZpbmVkIiwib3JkaW5hbFJhbmdlIiwicm91bmQiLCJwYWRkaW5nSW5uZXIiLCJwYWRkaW5nT3V0ZXIiLCJhbGlnbiIsInJlc2NhbGUiLCJyZXZlcnNlIiwiY2VpbCIsInNlcXVlbmNlIiwicmFuZ2VSb3VuZCIsInBhZGRpbmciLCJkZWZpbmUiLCJmYWN0b3J5IiwiZXh0ZW5kIiwiZGVmaW5pdGlvbiIsIk9iamVjdCIsIkNvbG9yIiwiZGFya2VyIiwiYnJpZ2h0ZXIiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleCIsInJlUmdiSW50ZWdlciIsIlJlZ0V4cCIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvcl9mb3JtYXRIZXgiLCJyZ2IiLCJmb3JtYXRIZXgiLCJjb2xvcl9mb3JtYXRSZ2IiLCJmb3JtYXRSZ2IiLCJjb2xvciIsImZvcm1hdCIsImwiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJwYXJzZUludCIsInJnYm4iLCJSZ2IiLCJyZ2JhIiwiaHNsYSIsInIiLCJnIiwib3BhY2l0eSIsInJnYl9mb3JtYXRIZXgiLCJoZXgiLCJyZ2JfZm9ybWF0UmdiIiwiaXNOYU4iLCJ0b1N0cmluZyIsImgiLCJzIiwiSHNsIiwiaHNsQ29udmVydCIsImhzbDJyZ2IiLCJtMiIsImNvbnN0YW50JDIiLCJnYW1tYSIsInkiLCJub2dhbW1hIiwiZXhwb25lbnRpYWwiLCJsaW5lYXIiLCJjaGFubmVscyIsImFzc2lnbiIsImRpc3BsYXlhYmxlIiwiZm9ybWF0SHNsIiwiaW50ZXJwb2xhdGVSZ2IiLCJyZ2JHYW1tYSIsImVuZCIsImNvbG9yUmdiIiwic3BsaW5lIiwicmdiQmFzaXMiLCJ2MSIsInYyIiwidjAiLCJ2MyIsInQxIiwidDIiLCJ0MyIsImJhc2lzIiwiY29sb3JzIiwibnVtYmVyQXJyYXkiLCJjIiwiZ2VuZXJpY0FycmF5IiwibmIiLCJuYSIsImRhdGUiLCJEYXRlIiwic2V0VGltZSIsImludGVycG9sYXRlTnVtYmVyIiwicmVBIiwicmVCIiwic291cmNlIiwiaW50ZXJwb2xhdGVTdHJpbmciLCJhbSIsImJtIiwiYnMiLCJiaSIsImxhc3RJbmRleCIsInEiLCJudW1iZXIiLCJvbmUiLCJ6ZXJvIiwiaW50ZXJwb2xhdGUkMSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiRGF0YVZpZXciLCJpc051bWJlckFycmF5IiwidmFsdWVPZiIsImludGVycG9sYXRlUm91bmQiLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwiZGVncmVlcyIsIlBJIiwiaWRlbnRpdHkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiZGVjb21wb3NlIiwiZSIsImF0YW4yIiwiYXRhbiIsImludGVycG9sYXRlVHJhbnNmb3JtIiwicGFyc2UiLCJweENvbW1hIiwicHhQYXJlbiIsImRlZ1BhcmVuIiwicG9wIiwieGEiLCJ5YSIsInhiIiwieWIiLCJ0cmFuc2xhdGUiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyIsInRyYW5zZm9ybSIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwibWF0cml4IiwibnVtYmVyJDEiLCJ1bml0Iiwibm9ybWFsaXplIiwiY2xhbXBlciIsImJpbWFwIiwiaW50ZXJwb2xhdGUiLCJkMCIsImQxIiwicjAiLCJyMSIsInBvbHltYXAiLCJiaXNlY3QiLCJjb250aW51b3VzIiwidW50cmFuc2Zvcm0iLCJwaWVjZXdpc2UiLCJvdXRwdXQiLCJpbnB1dCIsImludGVycG9sYXRlVmFsdWUiLCJjbGFtcCIsImludmVydCIsInUiLCJ0cmFuc2Zvcm1lciIsImZvcm1hdERlY2ltYWxQYXJ0cyIsInAiLCJ0b0V4cG9uZW50aWFsIiwiY29lZmZpY2llbnQiLCJleHBvbmVudCIsImFicyIsInByZWZpeEV4cG9uZW50IiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJFcnJvciIsIkZvcm1hdFNwZWNpZmllciIsImZpbGwiLCJzaWduIiwic3ltYm9sIiwid2lkdGgiLCJjb21tYSIsInByZWNpc2lvbiIsImZvcm1hdFJvdW5kZWQiLCJmb3JtYXRUeXBlcyIsInRvRml4ZWQiLCJ0b0xvY2FsZVN0cmluZyIsInJlcGxhY2UiLCJ0b1ByZWNpc2lvbiIsIlgiLCJ0b1VwcGVyQ2FzZSIsImlkZW50aXR5JDEiLCJsb2NhbGUiLCJmb3JtYXRQcmVmaXgiLCJwcmVmaXhlcyIsImZvcm1hdExvY2FsZSIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwiY3VycmVuY3lQcmVmaXgiLCJjdXJyZW5jeSIsImN1cnJlbmN5U3VmZml4IiwiZGVjaW1hbCIsIm51bWVyYWxzIiwiZm9ybWF0TnVtZXJhbHMiLCJTdHJpbmciLCJwZXJjZW50IiwibWludXMiLCJuYW4iLCJuZXdGb3JtYXQiLCJ0ZXN0Iiwic3VmZml4IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJvdXQiLCJmb3JtYXRUcmltIiwiY2hhckNvZGVBdCIsIkluZmluaXR5IiwidGlja0Zvcm1hdCIsInN0ZXAwIiwic3RlcDEiLCJ0aWNrU3RlcCIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJsaW5lYXJpc2giLCJ0aWNrcyIsImlzRmluaXRlIiwibmljZSIsInNlcXVlbnRpYWwiLCJ0MCIsImsxMCIsIngwIiwieDEiLCJwYXJzZU1vZGVsRXhvbnMiLCJqc29uIiwiZm9yRWFjaCIsImNocm9tU3RhcnQiLCJjaHJvbUVuZCIsInJhbXAiLCJzY2hlbWUiLCJpbnRlcnBvbGF0ZVJnYkJhc2lzIiwiUGlZRyIsImNvbmNhdCIsIlB1T3IiLCJSZEJ1IiwiUmRHeSIsIlJkWWxCdSIsIkJ1R24iLCJPclJkIiwiUHVCdSIsIllsR25CdSIsIkJsdWVzIiwiR3JlZW5zIiwiR3JleXMiLCJQdXJwbGVzIiwiUmVkcyIsIk9yYW5nZXMiLCJzZXRDb2xvclNjYWxlIiwiZG1pbiIsImRtYXgiLCJzY2FsZVNlcXVlbnRpYWwiLCJpbnRlcnBvbGF0b3JzIiwiZDNDaHJvbWF0aWMiLCJHcmF5cyIsImVyciIsImFsZXJ0IiwiZ2V0Q29sb3JJbnRlcnBvbGF0b3IiLCJkcmF3Q29sb3JMZWdlbmQiLCJ0aXRsZSIsImRvbSIsImNvbmZpZyIsInVzZUxvZyIsImJhc2UiLCJjZWxsIiwidyIsIm9yaWVudGF0aW9uIiwiZGl2ZXJnaW5nIiwiaW50ZXJ2YWwiLCJEZW5kcm9IZWF0bWFwQ29uZmlnIiwicm9vdFciLCJpbm5lcldpZHRoIiwibGVmdFBhbmVsVyIsInRvcFBhbmVsSCIsIm1hcmdpbiIsInRvcCIsImJvdHRvbSIsImNlbGxIIiwiYWRqdXN0IiwibGVmdFRyZWVQYW5lbCIsImlkIiwidG9wVHJlZVBhbmVsIiwiaGVhdG1hcFBhbmVsIiwibGVnZW5kUGFuZWwiLCJwYW5lbHMiLCJtYWluIiwibGVnZW5kIiwiY3JlYXRlU3ZnIiwiaGVpZ2h0Iiwic3ZnSWQiLCJjb25zb2xlIiwid2FybiIsImNoZWNrRG9tSWQiLCJzdW0iLCJjaGlsZHJlbiIsImhpZXJhcmNoeSIsImNoaWxkcyIsIk5vZGUiLCJ2YWx1ZWQiLCJkZWZhdWx0Q2hpbGRyZW4iLCJlYWNoQmVmb3JlIiwiY29tcHV0ZUhlaWdodCIsImNvcHlEYXRhIiwiZWFjaEFmdGVyIiwiY3VycmVudCIsInBhdGgiLCJhbmNlc3RvciIsImFOb2RlcyIsImFuY2VzdG9ycyIsImJOb2RlcyIsImxlYXN0Q29tbW9uQW5jZXN0b3IiLCJkZXNjZW5kYW50cyIsImxlYXZlcyIsImxpbmtzIiwidGFyZ2V0IiwiZXBzaWxvbiIsImNlbnRlciIsIm9mZnNldCIsImVudGVyaW5nIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja1NpemVJbm5lciIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrUGFkZGluZyIsImNvbnRleHQiLCJzcGFjaW5nIiwicmFuZ2UwIiwicmFuZ2UxIiwicG9zaXRpb24iLCJ0aWNrIiwidGlja0V4aXQiLCJ0aWNrRW50ZXIiLCJsaW5lIiwidHJhbnNpdGlvbiIsInRpY2tTaXplIiwiRGVuZHJvZ3JhbSIsIm5ld2ljayIsInBvc3RvcmRlciIsInRyZWUiLCJ0b2tlbnMiLCJ0b2tlbiIsInN1YnRyZWUiLCJicmFuY2hzZXQiLCJwYXJzZUZsb2F0IiwicGFyc2VOZXdpY2siLCJ4U2NhbGUiLCJ5U2NhbGUiLCJkcmF3IiwiX3NldFhTY2FsZSIsIl9zZXRZU2NhbGUiLCJfZHJhd0hUcmVlIiwiX2RyYXdWVHJlZSIsInNldFkiLCJyZWR1Y2UiLCJzZXRYIiwiX2dldEJyYW5jaExlbmd0aFRvUm9vdCIsIl9zb3J0Tm9kZXNCeUxldmVsIiwiaW5vZGVzIiwiX2dldE1heEJyYW5jaExlbmd0aCIsIl9hc3NpZ25Qb3N0b3JkZXIiLCJzY2FsZUxpbmVhciIsInNjYWxlQmFuZCIsImdsb2JhbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJmbGF0IiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc0Z1bmN0aW9uIiwib2JqIiwibm9kZVR5cGUiLCJpdGVtIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwic3JjIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwiZG9jIiwidmFsIiwic2NyaXB0IiwiaGVhZCIsInRvVHlwZSIsInZlcnNpb24iLCJyaHRtbFN1ZmZpeCIsImpRdWVyeSIsImZuIiwiaW5pdCIsImlzQXJyYXlMaWtlIiwibm9kZU5hbWUiLCJlbGVtIiwianF1ZXJ5IiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwicHJldk9iamVjdCIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZXZlbiIsImdyZXAiLCJfZWxlbSIsIm9kZCIsImxlbiIsIm9wdGlvbnMiLCJjb3B5SXNBcnJheSIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwicmFuZG9tIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJub2RlVmFsdWUiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsImlzWE1MRG9jIiwiZG9jRWxlbSIsInNlY29uZCIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX2kiLCJ3aGl0ZXNwYWNlIiwicnRyaW1DU1MiLCJidXAiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJlc2NhcGVTZWxlY3RvciIsInNlbCIsInByZWZlcnJlZERvYyIsInB1c2hOYXRpdmUiLCJFeHByIiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJib29sZWFucyIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwicmNvbW1hIiwicmxlYWRpbmdDb21iaW5hdG9yIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlIiwibm9uSGV4IiwiaGlnaCIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJzZXREb2N1bWVudCIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsImNoaWxkTm9kZXMiLCJlbHMiLCJmaW5kIiwic2VlZCIsIm5pZCIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwidGVzdENvbnRleHQiLCJzY29wZSIsInRva2VuaXplIiwidG9TZWxlY3RvciIsInFzYUVycm9yIiwiY2FjaGUiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsInN1YldpbmRvdyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjc3NIYXMiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwiY2xhc3NOYW1lIiwic29ydERldGFjaGVkIiwiZXhwciIsImVsZW1lbnRzIiwibWF0Y2hlc1NlbGVjdG9yIiwiYXR0ckhhbmRsZSIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwiZXhwZWN0ZWROb2RlTmFtZSIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJ1c2VDYWNoZSIsImRpZmYiLCJsYXN0Q2hpbGQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJub3QiLCJjb21waWxlIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwiZm9jdXMiLCJhY3RpdmVFbGVtZW50Iiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiX21hdGNoSW5kZXhlcyIsImx0IiwiZ3QiLCJudGgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsImNvbWJpbmF0b3IiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJtYXRjaGVyT3V0IiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0Iiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImNvbXBpbGVkIiwiZmlsdGVycyIsInVuaXF1ZSIsImdldFRleHQiLCJpc1hNTCIsInNlbGVjdG9ycyIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJjdXIiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsImNhdGNoIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiaGFuZGxlciIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwicmVqZWN0V2l0aCIsImdldEVycm9ySG9vayIsImdldFN0YWNrSG9vayIsInNldFRpbWVvdXQiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJwcmltYXJ5IiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwiYXN5bmNFcnJvciIsIm1lc3NhZ2UiLCJzdGFjayIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY29tcGxldGVkIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJsZXR0ZXIiLCJjYW1lbENhc2UiLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiYXR0cnMiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwidW5zaGlmdCIsInNldHRlciIsImNsZWFyUXVldWUiLCJ0bXAiLCJkZWZlciIsInBudW0iLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJkaXNwbGF5IiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5IiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsImhpZGUiLCJ0b2dnbGUiLCJkaXYiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsIm5vQ2xvbmVDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwiaWdub3JlZCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInR5cGVzIiwib3JpZ0ZuIiwib2ZmIiwibGV2ZXJhZ2VOYXRpdmUiLCJpc1NldHVwIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwidGltZVN0YW1wIiwibm93IiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImJsdXIiLCJmb2N1c01hcHBlZEhhbmRsZXIiLCJkb2N1bWVudE1vZGUiLCJzaW11bGF0ZSIsImF0dGFjaGVzIiwiZGF0YUhvbGRlciIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwicHJlcGVuZCIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwicm51bW5vbnB4IiwicmN1c3RvbVByb3AiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJzd2FwIiwib2xkIiwicmJveFN0eWxlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiaXNDdXN0b21Qcm9wIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsIm9mZnNldEhlaWdodCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImZpbmFsIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJyZGlzcGxheXN3YXAiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwibWFyZ2luRGVsdGEiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VTbGljZSIsImNvbHVtbkNvdW50IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZ3JpZEFyZWEiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1N0YXJ0IiwibGluZUhlaWdodCIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwib3JpZ05hbWUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxib3hTaXplQnVnZ3kiLCJib3JkZXIiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsInN3aW5nIiwiY29zIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NOYW1lcyIsImN1clZhbHVlIiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJwYXJzZXJFcnJvckVsZW0iLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93IiwidHJpZ2dlckhhbmRsZXIiLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsImFuaW1hdGVkIiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInJ0cmltIiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJUb29sYmFyIiwiZG9tSWQiLCJ0b29sdGlwIiwidmVydGljYWwiLCJidG5DbGFzc2VzIiwiYmFyIiwiY3JlYXRlRG93bmxvYWRTdmdCdXR0b24iLCJvdXRmaWxlTmFtZSIsImNsb25lSWQiLCJpY29uIiwiY3JlYXRlQnV0dG9uIiwiZG93bmxvYWRTdmciLCJjcmVhdGVSZXNldEJ1dHRvbiIsIiRidXR0b24iLCJzdGFydHNXaXRoIiwiYXR0YWNoVG9vbHRpcCIsImZpbGVOYW1lIiwic3ZnT2JqIiwiJHN2Z0NvcHkiLCJ1c2VkIiwic2hlZXRzIiwic3R5bGVTaGVldHMiLCJjc3NSdWxlcyIsInJ1bGVzIiwicnVsZSIsInNlbGVjdG9yVGV4dCIsInBhcnNlQ3NzU3R5bGVzIiwic3ZnSHRtbCIsInN2Z0Jsb2IiLCJCbG9iIiwic2F2ZUFzIiwiRGlzcGF0Y2giLCJUIiwidGFza0hlYWQiLCJ0YXNrVGFpbCIsImZyYW1lIiwicG9rZURlbGF5IiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwic2V0RnJhbWUiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInJlc3RhcnQiLCJ3YWtlIiwidGltZXJGbHVzaCIsInNsZWVwIiwibmFwIiwicG9rZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImVsYXBzZWQiLCJlbXB0eU9uIiwiZW1wdHlUd2VlbiIsIkNSRUFURUQiLCJTQ0hFRFVMRUQiLCJTVEFSVElORyIsIlNUQVJURUQiLCJSVU5OSU5HIiwiRU5ESU5HIiwiRU5ERUQiLCJ0aW1pbmciLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJlYXNlIiwidHdlZW5SZW1vdmUiLCJ0d2VlbjAiLCJ0d2VlbjEiLCJ0d2VlbkZ1bmN0aW9uIiwidHdlZW5WYWx1ZSIsIl9pZCIsInZhbHVlMSIsInN0cmluZzAwIiwiaW50ZXJwb2xhdGUwIiwic3RyaW5nMSIsInN0cmluZzAiLCJzdHJpbmcxMCIsImF0dHJUd2Vlbk5TIiwiYXR0ckludGVycG9sYXRlTlMiLCJfdmFsdWUiLCJhdHRyVHdlZW4iLCJhdHRySW50ZXJwb2xhdGUiLCJkZWxheUZ1bmN0aW9uIiwiZGVsYXlDb25zdGFudCIsImR1cmF0aW9uRnVuY3Rpb24iLCJkdXJhdGlvbkNvbnN0YW50IiwiVHJhbnNpdGlvbiIsIl9uYW1lIiwibmV3SWQiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsIm9uMCIsIm9uMSIsInNpdCIsImV2ZXJ5Iiwib25GdW5jdGlvbiIsInN0eWxlVHdlZW4iLCJzdHlsZU51bGwiLCJsaXN0ZW5lcjAiLCJzdHlsZU1heWJlUmVtb3ZlIiwic3R5bGVJbnRlcnBvbGF0ZSIsInRleHRUd2VlbiIsInRleHRJbnRlcnBvbGF0ZSIsInJlbW92ZUZ1bmN0aW9uIiwiZWFzZUNvbnN0YW50IiwiUHJvbWlzZSIsImNhbmNlbCIsImludGVycnVwdCIsImRlZmF1bHRUaW1pbmciLCJwaSIsInRhdSIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwiZGVmYXVsdFNvdXJjZSIsIm1vdmVUbyIsImNsb3NlUGF0aCIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJ5MSIsImJlemllckN1cnZlVG8iLCJ4MiIsInkyIiwiYXJjVG8iLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiZHgiLCJkeSIsInNpbiIsImN3IiwiZGEiLCJzb3VyY2VSYW5kb21Vbmlmb3JtIiwicmFuZG9tVW5pZm9ybSIsIm5vcm1hbCIsInNvdXJjZVJhbmRvbU5vcm1hbCIsInJhbmRvbU5vcm1hbCIsIm11Iiwic2lnbWEiLCJzb3VyY2VSYW5kb21Mb2dOb3JtYWwiLCJyYW5kb21Mb2dOb3JtYWwiLCJleHAiLCJpcndpbkhhbGwiLCJzb3VyY2VSYW5kb21JcndpbkhhbGwiLCJyYW5kb21JcndpbkhhbGwiLCJMaW5lYXIiLCJjdXJ2ZUxpbmVhciIsInBvaW50IiwiX2siLCJfeDIiLCJfeTIiLCJDYXJkaW5hbCIsInRlbnNpb24iLCJzb3VyY2VSYW5kb21CYXRlcyIsInJhbmRvbUJhdGVzIiwic291cmNlUmFuZG9tRXhwb25lbnRpYWwiLCJyYW5kb21FeHBvbmVudGlhbCIsImxhbWJkYSIsImFyZWFTdGFydCIsIl9saW5lIiwiYXJlYUVuZCIsImxpbmVTdGFydCIsIl9wb2ludCIsImxpbmVFbmQiLCJjdXJ2ZUNhcmRpbmFsIiwiY3VzdG9tIiwiY2FyZGluYWwiLCJSZWRCbGFja1RyZWUiLCJSZWRCbGFja05vZGUiLCJVIiwiQyIsIkwiLCJSIiwiUCIsIk4iLCJSZWRCbGFja1JvdGF0ZUxlZnQiLCJSZWRCbGFja1JvdGF0ZVJpZ2h0IiwiUmVkQmxhY2tGaXJzdCIsImNyZWF0ZUVkZ2UiLCJlZGdlIiwiZWRnZXMiLCJzZXRFZGdlRW5kIiwiY2VsbHMiLCJoYWxmZWRnZXMiLCJjcmVhdGVCb3JkZXJFZGdlIiwidmVydGV4IiwiY2xpcEVkZ2UiLCJheCIsImF5IiwiY29ubmVjdEVkZ2UiLCJmbSIsImZiIiwibHgiLCJseSIsInJ4IiwicnkiLCJmeSIsImNlbGxIYWxmZWRnZUFuZ2xlIiwic2l0ZSIsInZhIiwidmIiLCJjZWxsSGFsZmVkZ2VTdGFydCIsImNlbGxIYWxmZWRnZUVuZCIsImdyYW5kcGEiLCJ1bmNsZSIsImZpcnN0Q2lyY2xlIiwiY2lyY2xlUG9vbCIsIkNpcmNsZSIsImN5IiwiYXR0YWNoQ2lyY2xlIiwibEFyYyIsInJBcmMiLCJsU2l0ZSIsImNTaXRlIiwiclNpdGUiLCJieCIsImJ5IiwiY3giLCJlcHNpbG9uMiIsImhhIiwiaGMiLCJjaXJjbGUiLCJjaXJjbGVzIiwiZGV0YWNoQ2lyY2xlIiwiYmVhY2hQb29sIiwiQmVhY2giLCJjcmVhdGVCZWFjaCIsImJlYWNoIiwiZGV0YWNoQmVhY2giLCJiZWFjaGVzIiwicmVtb3ZlQmVhY2giLCJkaXNhcHBlYXJpbmciLCJpQXJjIiwibkFyY3MiLCJhZGRCZWFjaCIsImR4bCIsImR4ciIsImRpcmVjdHJpeCIsImxlZnRCcmVha1BvaW50IiwicmlnaHRCcmVha1BvaW50IiwiY3JlYXRlQ2VsbCIsIm5ld0FyYyIsImhiIiwicmZvY3giLCJyZm9jeSIsInBieTIiLCJsZm9jeCIsImxmb2N5IiwicGxieTIiLCJobCIsImFieTIiLCJsZXhpY29ncmFwaGljIiwiRGlhZ3JhbSIsInNpdGVzIiwiZXh0ZW50Iiwic29ydENlbGxIYWxmZWRnZXMiLCJjbGlwRWRnZXMiLCJpQ2VsbCIsImlIYWxmZWRnZSIsIm5IYWxmZWRnZXMiLCJzdGFydFgiLCJzdGFydFkiLCJlbmRYIiwiZW5kWSIsIm5DZWxscyIsImNvdmVyIiwiZDIiLCJkYyIsInYwMCIsInYwMSIsInYxMSIsInYxMCIsImNsaXBDZWxscyIsIlRyYW5zZm9ybSIsInBvbHlnb25zIiwicG9seWdvbiIsInRyaWFuZ2xlcyIsInMwIiwiZTEiLCJzMSIsInJhZGl1cyIsIl9mb3VuZCIsInZ4IiwidnkiLCJhcHBseVgiLCJhcHBseVkiLCJpbnZlcnRYIiwiaW52ZXJ0WSIsInJlc2NhbGVYIiwicmVzY2FsZVkiLCJUb29sdGlwIiwidmVyYm9zZSIsImluZm8iLCJlZGl0IiwibW92ZSIsImQzIiwiSGVhdG1hcCIsImxvZ0Jhc2UiLCJjb2xvclNjaGVtZSIsInRvb2x0aXBJZCIsInRvb2x0aXBDc3NDbGFzcyIsIm51bGxDb2xvciIsImNvbG9yU2NhbGUiLCJ4TGlzdCIsInlMaXN0IiwidG9vbGJhciIsImNyZWF0ZVRvb2xiYXIiLCJsZWdlbmRDb25maWciLCJyZWRyYXciLCJkaW1lbnNpb25zIiwiYW5nbGUiLCJ1c2VOdWxsQ29sb3IiLCJjb2x1bW5MYWJlbFBvc0FkanVzdCIsInlsYWJlbFBsYWNlbWVudCIsIl9zZXRDb2xvclNjYWxlIiwieExhYmVscyIsIlkiLCJjZWxsTW91c2VvdmVyIiwiY2VsbE1vdXNlb3V0IiwiX2xvZyIsInN0cm9rZSIsInJvd0NsYXNzIiwiY29sQ2xhc3MiLCJkaXNwbGF5VmFsdWUiLCJuZXdMaXN0IiwiRGVuZHJvSGVhdG1hcCIsImNvbHVtblRyZWUiLCJyb3dUcmVlIiwiaGVhdG1hcERhdGEiLCJoZWF0bWFwIiwiZXh0ZXJuYWwiLCJvYmplY3RzIiwidmlzdWFsQ29tcG9uZW50cyIsInJlbmRlciIsInNob3dDb2x1bW5UcmVlIiwic2hvd1Jvd1RyZWUiLCJsZWdlbmRQb3MiLCJ4bGlzdCIsInlsaXN0IiwiX3VwZGF0ZUNvbmZpZyIsIl9yZW5kZXJUcmVlIiwiX3JlbmRlckhlYXRtYXAiLCJkaXJlY3Rpb24iLCJsYWJlbENsYXNzIiwiaWRzIiwibGFiZWwiLCJpbmNsdWRlcyIsInJvd3MiLCJHZW5lTW9kZWwiLCJnZW5lIiwiZXhvbnMiLCJleG9uc0N1cmF0ZWQiLCJqdW5jdGlvbnMiLCJpc0lzb2Zvcm0iLCJtYXhJbnRyb25MZW5ndGgiLCJtaW5FeG9uV2lkdGgiLCJzdHJhbmQiLCJleG9uTnVtYmVyIiwianVuY3Rpb25JZCIsImludHJvbkxlbmd0aCIsImNoYW5nZVRleHRsYWJlbCIsImFkZERhdGEiLCJqZGF0YSIsImVkYXRhIiwianNjYWxlIiwiZXNjYWxlIiwieiIsImpjb2xvciIsImV4b25JZCIsInNldFhzY2FsZSIsImV4b25ZIiwib3JpRXhvbiIsIl9maW5kRXhvbiIsImRpc3QiLCJ0cmFuc2NyaXB0SWQiLCJzdGFydEV4b24iLCJlbmRFeG9uIiwiZGlzcGxheU5hbWUiLCJkaXN0MiIsImNvdW50cyIsImN1cnZlIiwicG9pbnRYIiwicG9pbnRZIiwiZGVmaW5lZCIsImJ1ZmZlciIsImRlZmluZWQwIiwianVuY0RvdHMiLCJleG9uUmVjdHMiLCJleG9uUmVjdHMyIiwibGFiZWxPbiIsImdlbmVTeW1ib2wiLCJzZXRYc2NhbGVGaXhJbnRyb24iLCJtYXhFeG9uTGVuZ3RoIiwibWluTGVuZ3RoIiwidG90YWxFeG9uTGVuZ3RoIiwiSXNvZm9ybVRyYWNrVmlld2VyIiwiaXNvZm9ybXMiLCJpc29mb3JtRXhvbnMiLCJtb2RlbEV4b25zIiwidmlzdWFsRG9tIiwic2hvd0RhdGEiLCJiYXJTY2FsZSIsImRhdGFMYWJlbCIsInNvcnRUcmFja3MiLCJsb2xsaXBvcEdyYXBoIiwiYXhpc1JpZ2h0Iiwic2V0WXNjYWxlIiwiaXNvVHJhY2tzIiwiX3JlbmRlck1vZGVscyIsImlzb2Zvcm0iLCJyZWZlcmVuY2UiLCJtb2RlbCIsImlzb2Zvcm1HIiwiUmV0cmlldmVBbGxQYWdpbmF0ZWREYXRhIiwiQmFzZVVSTCIsInBhZ2VTaXplIiwicmV0cmlldmVkRGF0YSIsInBhZ2VOdW1iZXIiLCJyZXF1ZXN0VVJMIiwiZ2VuZXJhdGVVUkwiLCJmZXRjaCIsInBhZ2luZ19pbmZvIiwibnVtYmVyT2ZQYWdlcyIsIlJldHJpZXZlTm9uUGFnaW5hdGVkRGF0YSIsInJlcXVlc3RCeVBhZ2UiLCJwYWdlcyIsImdlbmVJZCIsInJvb3RJZCIsInVybHMiLCJkYXRhc2V0SWQiLCJzaW5nbGVDZWxsRXhwcmVzc2lvbiIsInNpbmdsZUNlbGxFeHByZXNzaW9uU3VtbWFyeSIsImR5bmVxdGwiLCJzbnAiLCJ2YXJpYW50SWQiLCJleG9uRXhwIiwidHJhbnNjcmlwdEV4cCIsImp1bmN0aW9uRXhwIiwidHJhbnNjcmlwdCIsImV4b24iLCJnZW5lTW9kZWwiLCJnZW5lTW9kZWxVbmZpbHRlcmVkIiwiZ2VuZUV4cCIsIm1lZEdlbmVFeHAiLCJ0b3BJblRpc3N1ZUZpbHRlcmVkIiwidG9wSW5UaXNzdWUiLCJ0aXNzdWUiLCJzYW1wbGUiLCJybmFzZXFDcmFtIiwid2dzQ3JhbSIsImR5bnNxdGwiLCJmY0JpbGxpbmciLCJmY1dvcmtTcGFjZSIsImZjUG9ydGFsV29ya1NwYWNlIiwiZ2V0R3RleFVybHMiLCJzaW5nbGUiLCJmaWx0ZXJlZCIsImdlbmVTeW1ib2xVcHBlciIsImdlbmNvZGVJZCIsInBhcnNlR2VuZXMiLCJwcm9taXNlcyIsImFsbCIsInRpc3N1ZXMiLCJwYXJzZVRyYW5zY3JpcHRzIiwiY2hyb20iLCJjaHJvbW9zb21lIiwicGFyc2VFeG9ucyIsInRpc3N1ZVNpdGVEZXRhaWxJZCIsInBhcnNlSnVuY3Rpb25zIiwianVuY3Rpb25FeHByZXNzIiwibWVkaWFuIiwidGlzc3VlSWQiLCJwYXJzZUp1bmN0aW9uRXhwcmVzc2lvbiIsImV4b25FeHByZXNzIiwiZXhvbkRpY3QiLCJleG9uT2JqZWN0cyIsInBhcnNlRXhvbkV4cHJlc3Npb24iLCJleG9uQ29sb3JTY2FsZSIsImlzb2Zvcm1Db2xvclNjYWxlIiwianVuY3Rpb25Db2xvclNjYWxlIiwiZG1hcCIsImlzb2Zvcm1FeHByZXNzIiwicGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvbiIsImxvZzEwIiwibG9nMiIsInNhdmUiLCJzdmdUaXRsZSIsImRlc2NyaXB0aW9uIiwiZG1hcENvbmZpZyIsImNsdXN0ZXJzIiwidGlzc3VlVHJlZSIsImlzb2Zvcm1UcmVlIiwiaXNvZm9ybUV4cHJlc3NUIiwicGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZSIsIm9yZGVycyIsInlBZGp1c3QiLCJtb2RlbENvbmZpZyIsImlzb1RyYWNrVmlld2VyQ29uZmlnIiwibW9kZWxHIiwiaXNvZm9ybVRyYWNrVmlld2VyIiwidHJhY2tWaWV3ZXJHIiwianVuY3Rpb25TY2FsZSIsImV4b25TY2FsZSIsIm1hcFN2ZyIsImluYyIsIl9hZGRDb2xvckxlZ2VuZHNGb3JHZW5lTW9kZWwiLCJfY3JlYXRlVG9vbGJhciIsImlzb1RyYWNrVmlld2VyIiwiaXNvZm9ybVNjYWxlIiwianVuY3Rpb25EYXRhIiwiZXhvbkRhdGEiLCJpc29mb3JtRGF0YSIsInRpc3N1ZURpY3QiLCJ0aXNzdWVTaXRlRGV0YWlsIiwiY29sb3JIZXgiLCJpc29CYXJTY2FsZSIsImlzb0RhdGEiLCJpc28iLCJ0b29sdGlwRGF0YSIsImNoYXJBdCIsIl9jdXN0b21pemVJc29mb3JtVHJhbnNwb3NlZE1hcCIsIl9jdXN0b21pemVJc29mb3JtVHJhY2tzIiwiX2N1c3RvbWl6ZUhlYXRNYXAiLCJqdW5jIiwieGxhYmVsIiwiaklkIiwiX2N1c3RvbWl6ZUp1bmN0aW9uTWFwIiwiX2N1c3RvbWl6ZUdlbmVNb2RlbCIsIl9jdXN0b21pemVFeG9uTWFwIiwiVHJhbnNjcmlwdEJyb3dzZXIiXSwibWFwcGluZ3MiOiJ1U0FBTyxJQUFJQSxFQUFRLCtCQUVKQyxFQUFBLENBQ2JDLElBQUssNkJBQ0xGLE1BQU9BLEVBQ1BHLE1BQU8sK0JBQ1BDLElBQUssdUNBQ0xDLE1BQU8saUNDTE0sU0FBUUMsRUFBQ0MsR0FDdEIsSUFBSUMsRUFBU0QsR0FBUSxHQUFJRSxFQUFJRCxFQUFPRSxRQUFRLEtBRTVDLE9BRElELEdBQUssR0FBcUMsV0FBL0JELEVBQVNELEVBQUtJLE1BQU0sRUFBR0YsTUFBaUJGLEVBQU9BLEVBQUtJLE1BQU1GLEVBQUksSUFDdEVSLEVBQVdXLGVBQWVKLEdBQVUsQ0FBQ0ssTUFBT1osRUFBV08sR0FBU00sTUFBT1AsR0FBUUEsQ0FDeEYsQ0NIQSxTQUFTUSxFQUFlUixHQUN0QixPQUFPLFdBQ0wsSUFBSVMsRUFBV0MsS0FBS0MsY0FDaEJDLEVBQU1GLEtBQUtHLGFBQ2YsT0FBT0QsSUFBUW5CLEdBQVNnQixFQUFTSyxnQkFBZ0JELGVBQWlCcEIsRUFDNURnQixFQUFTTSxjQUFjZixHQUN2QlMsRUFBU08sZ0JBQWdCSixFQUFLWixFQUN4QyxDQUNBLENBRUEsU0FBU2lCLEVBQWFDLEdBQ3BCLE9BQU8sV0FDTCxPQUFPUixLQUFLQyxjQUFjSyxnQkFBZ0JFLEVBQVNaLE1BQU9ZLEVBQVNYLE1BQ3ZFLENBQ0EsQ0FFZSxTQUFRWSxFQUFDbkIsR0FDdEIsSUFBSWtCLEVBQVduQixFQUFVQyxHQUN6QixPQUFRa0IsRUFBU1gsTUFDWFUsRUFDQVQsR0FBZ0JVLEVBQ3hCLENDeEJBLFNBQVNFLElB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VSxhQUFhQSxVQUFVLGlCQUNuQy9CLEdBQUcsYUFBYSxTQUFTVSxHQUN0Qm9CLEdBQU96SyxNQUFNc04sUUFBUSxlQUFlLEdBQ3BDLE1BQU04bkUsRUFBYyxDQUNmLG1DQUFrQy9yRSxFQUFFOGhFLG9CQUNwQyx1RUFBc0U5aEUsRUFBRXloQixvQkFDeEUscUVBQW9FemhCLEVBQUUwaEIsa0JBQ3RFLDZFQUE0RTVDLE9BQU85ZSxFQUFFMGhCLFVBQVU1QyxPQUFPOWUsRUFBRXloQixZQUFjLGVBRTNIeW9DLEVBQVF2akIsS0FBS29sQyxFQUFZM3RFLEtBQUssU0FDbEMsSUFDQ2tCLEdBQUcsWUFBWSxXQUNaOEIsR0FBT3pLLE1BQU1zTixRQUFRLGVBQWUsR0FDcEMrbUUsRUFBTzNwRSxVQUFVLGlCQUFpQjRDLFFBQVEsZUFBZSxHQUN6RGltRCxFQUFRdGpCLE1BQ1osR0FDUixDQWFPLElBQUk4bEMsR0FBb0IsQ0FDM0JwTSxPQUFRQSIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswLDEsMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLDYyLDYzLDY0LDY1LDY2LDY3LDY4LDY5LDcwLDcxLDcyLDczLDc0LDc1LDc2LDc3LDc4LDc5LDgwLDgxLDgyLDgzLDg0LDg1LDg2LDg3LDg4LDg5LDkwLDkxLDkyLDkzLDk0LDk2LDk3LDk4LDk5LDEwMCwxMDEsMTAyLDEwMywxMDQsMTA1LDEwNiwxMDcsMTA4LDEwOSwxMTAsMTExLDExMiwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTIzLDEyNCwxMjUsMTI2LDEyNywxMjgsMTI5LDEzMCwxMzMsMTM2LDEzNywxMzgsMTM5LDE0MCwxNDEsMTQyLDE0MywxNDQsMTQ1LDE0NiwxNDcsMTQ4LDE0OSwxNTAsMTUxLDE1MiwxNTMsMTU0LDE1NSwxNTYsMTU3LDE1OCwxNTksMTYwLDE2MSwxNjIsMTYzLDE2NCwxNjUsMTY2LDE2NywxNjgsMTY5LDE3MCwxNzEsMTcyLDE3MywxNzQsMTc1LDE3NiwxNzcsMTc4LDE3OSwxODAsMTgxLDE4MiwxODMsMTg0LDE4OSwxOTBdfQ==
