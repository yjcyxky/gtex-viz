!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("file-saver")):"function"==typeof define&&define.amd?define(["exports","file-saver"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).QtlViolinPlot={},t.saveAs)}(this,(function(t,e){"use strict";var n="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function r(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var i={exports:{}};
/*!
     * jQuery JavaScript Library v3.7.1
     * https://jquery.com/
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license
     * https://jquery.org/license
     *
     * Date: 2023-08-28T13:37Z
     */!function(t){!function(e,n){t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}}("undefined"!=typeof window?window:n,(function(t,e){var n=[],r=Object.getPrototypeOf,i=n.slice,o=n.flat?function(t){return n.flat.call(t)}:function(t){return n.concat.apply([],t)},a=n.push,s=n.indexOf,u={},l=u.toString,c=u.hasOwnProperty,f=c.toString,h=f.call(Object),p={},d=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},g=function(t){return null!=t&&t===t.window},v=t.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function m(t,e,n){var r,i,o=(n=n||v).createElement("script");if(o.text=t,e)for(r in y)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?u[l.call(t)]||"object":typeof t}var b="3.7.1",w=/HTML$/i,_=function(t,e){return new _.fn.init(t,e)};function k(t){var e=!!t&&"length"in t&&t.length,n=x(t);return!d(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function M(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}_.fn=_.prototype={jquery:b,constructor:_,length:0,toArray:function(){return i.call(this)},get:function(t){return null==t?i.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=_.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return _.each(this,t)},map:function(t){return this.pushStack(_.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(i.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(_.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(_.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:n.sort,splice:n.splice},_.extend=_.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||d(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(l&&r&&(_.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||_.isPlainObject(n)?n:{},i=!1,a[e]=_.extend(l,o,r)):void 0!==r&&(a[e]=r));return a},_.extend({expando:"jQuery"+(b+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==l.call(t))&&(!(e=r(t))||"function"==typeof(n=c.call(e,"constructor")&&e.constructor)&&f.call(n)===h)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){m(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,r=0;if(k(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},text:function(t){var e,n="",r=0,i=t.nodeType;if(!i)for(;e=t[r++];)n+=_.text(e);return 1===i||11===i?t.textContent:9===i?t.documentElement.textContent:3===i||4===i?t.nodeValue:n},makeArray:function(t,e){var n=e||[];return null!=t&&(k(Object(t))?_.merge(n,"string"==typeof t?[t]:t):a.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:s.call(e,t,n)},isXMLDoc:function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!w.test(e||n&&n.nodeName||"HTML")},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,a=0,s=[];if(k(t))for(r=t.length;a<r;a++)null!=(i=e(t[a],a,n))&&s.push(i);else for(a in t)null!=(i=e(t[a],a,n))&&s.push(i);return o(s)},guid:1,support:p}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=n[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){u["[object "+e+"]"]=e.toLowerCase()}));var T=n.pop,C=n.sort,A=n.splice,E="[\\x20\\t\\r\\n\\f]",S=new RegExp("^"+E+"+|((?:^|[^\\\\])(?:\\\\.)*)"+E+"+$","g");_.contains=function(t,e){var n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(t.contains?t.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))};var N=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function D(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}_.escapeSelector=function(t){return(t+"").replace(N,D)};var j=v,L=a;!function(){var e,r,o,a,u,l,f,h,d,g,v=L,y=_.expando,m=0,x=0,b=tt(),w=tt(),k=tt(),N=tt(),D=function(t,e){return t===e&&(u=!0),0},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",q="(?:\\\\[\\da-fA-F]{1,6}"+E+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\["+E+"*("+q+")(?:"+E+"*([*^$|!~]?=)"+E+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+E+"*\\]",H=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",I=new RegExp(E+"+","g"),O=new RegExp("^"+E+"*,"+E+"*"),$=new RegExp("^"+E+"*([>+~]|"+E+")"+E+"*"),z=new RegExp(E+"|>"),F=new RegExp(H),B=new RegExp("^"+q+"$"),V={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+E+"*(even|odd|(([+-]|)(\\d*)n|)"+E+"*(?:([+-]|)"+E+"*(\\d+)|))"+E+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+E+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+E+"*((?:-\\d)?\\d*)"+E+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,U=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Y=/[+~]/,G=new RegExp("\\\\[\\da-fA-F]{1,6}"+E+"?|\\\\([^\\r\\n\\f])","g"),Q=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},K=function(){ut()},J=ht((function(t){return!0===t.disabled&&M(t,"fieldset")}),{dir:"parentNode",next:"legend"});try{v.apply(n=i.call(j.childNodes),j.childNodes),n[j.childNodes.length].nodeType}catch(t){v={apply:function(t,e){L.apply(t,i.call(e))},call:function(t){L.apply(t,i.call(arguments,1))}}}function Z(t,e,n,r){var i,o,a,s,u,c,f,g=e&&e.ownerDocument,m=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==m&&9!==m&&11!==m)return n;if(!r&&(ut(e),e=e||l,h)){if(11!==m&&(u=U.exec(t)))if(i=u[1]){if(9===m){if(!(a=e.getElementById(i)))return n;if(a.id===i)return v.call(n,a),n}else if(g&&(a=g.getElementById(i))&&Z.contains(e,a)&&a.id===i)return v.call(n,a),n}else{if(u[2])return v.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&e.getElementsByClassName)return v.apply(n,e.getElementsByClassName(i)),n}if(!(N[t+" "]||d&&d.test(t))){if(f=t,g=e,1===m&&(z.test(t)||$.test(t))){for((g=Y.test(t)&&st(e.parentNode)||e)==e&&p.scope||((s=e.getAttribute("id"))?s=_.escapeSelector(s):e.setAttribute("id",s=y)),o=(c=ct(t)).length;o--;)c[o]=(s?"#"+s:":scope")+" "+ft(c[o]);f=c.join(",")}try{return v.apply(n,g.querySelectorAll(f)),n}catch(e){N(t,!0)}finally{s===y&&e.removeAttribute("id")}}}return mt(t.replace(S,"$1"),e,n,r)}function tt(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function et(t){return t[y]=!0,t}function nt(t){var e=l.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function rt(t){return function(e){return M(e,"input")&&e.type===t}}function it(t){return function(e){return(M(e,"input")||M(e,"button"))&&e.type===t}}function ot(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&J(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function at(t){return et((function(e){return e=+e,et((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function st(t){return t&&void 0!==t.getElementsByTagName&&t}function ut(t){var e,n=t?t.ownerDocument||t:j;return n!=l&&9===n.nodeType&&n.documentElement?(f=(l=n).documentElement,h=!_.isXMLDoc(l),g=f.matches||f.webkitMatchesSelector||f.msMatchesSelector,f.msMatchesSelector&&j!=l&&(e=l.defaultView)&&e.top!==e&&e.addEventListener("unload",K),p.getById=nt((function(t){return f.appendChild(t).id=_.expando,!l.getElementsByName||!l.getElementsByName(_.expando).length})),p.disconnectedMatch=nt((function(t){return g.call(t,"*")})),p.scope=nt((function(){return l.querySelectorAll(":scope")})),p.cssHas=nt((function(){try{return l.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),p.getById?(r.filter.ID=function(t){var e=t.replace(G,Q);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(G,Q);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):e.querySelectorAll(t)},r.find.CLASS=function(t,e){if(void 0!==e.getElementsByClassName&&h)return e.getElementsByClassName(t)},d=[],nt((function(t){var e;f.appendChild(t).innerHTML="<a id='"+y+"' href='' disabled='disabled'></a><select id='"+y+"-\r\\' disabled='disabled'><option selected=''></option></select>",t.querySelectorAll("[selected]").length||d.push("\\["+E+"*(?:value|"+P+")"),t.querySelectorAll("[id~="+y+"-]").length||d.push("~="),t.querySelectorAll("a#"+y+"+*").length||d.push(".#.+[+~]"),t.querySelectorAll(":checked").length||d.push(":checked"),(e=l.createElement("input")).setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&d.push(":enabled",":disabled"),(e=l.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||d.push("\\["+E+"*name"+E+"*="+E+"*(?:''|\"\")")})),p.cssHas||d.push(":has"),d=d.length&&new RegExp(d.join("|")),D=function(t,e){if(t===e)return u=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!p.sortDetached&&e.compareDocumentPosition(t)===n?t===l||t.ownerDocument==j&&Z.contains(j,t)?-1:e===l||e.ownerDocument==j&&Z.contains(j,e)?1:a?s.call(a,t)-s.call(a,e):0:4&n?-1:1)},l):l}for(e in Z.matches=function(t,e){return Z(t,null,null,e)},Z.matchesSelector=function(t,e){if(ut(t),h&&!N[e+" "]&&(!d||!d.test(e)))try{var n=g.call(t,e);if(n||p.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){N(e,!0)}return Z(e,l,null,[t]).length>0},Z.contains=function(t,e){return(t.ownerDocument||t)!=l&&ut(t),_.contains(t,e)},Z.attr=function(t,e){(t.ownerDocument||t)!=l&&ut(t);var n=r.attrHandle[e.toLowerCase()],i=n&&c.call(r.attrHandle,e.toLowerCase())?n(t,e,!h):void 0;return void 0!==i?i:t.getAttribute(e)},Z.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},_.uniqueSort=function(t){var e,n=[],r=0,o=0;if(u=!p.sortStable,a=!p.sortStable&&i.call(t,0),C.call(t,D),u){for(;e=t[o++];)e===t[o]&&(r=n.push(o));for(;r--;)A.call(t,n[r],1)}return a=null,t},_.fn.uniqueSort=function(){return this.pushStack(_.uniqueSort(i.apply(this)))},r=_.expr={cacheLength:50,createPseudo:et,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(G,Q),t[3]=(t[3]||t[4]||t[5]||"").replace(G,Q),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||Z.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&Z.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return V.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&F.test(n)&&(e=ct(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(G,Q).toLowerCase();return"*"===t?function(){return!0}:function(t){return M(t,e)}},CLASS:function(t){var e=b[t+" "];return e||(e=new RegExp("(^|"+E+")"+t+"("+E+"|$)"))&&b(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=Z.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(I," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,u){var l,c,f,h,p,d=o!==a?"nextSibling":"previousSibling",g=e.parentNode,v=s&&e.nodeName.toLowerCase(),x=!u&&!s,b=!1;if(g){if(o){for(;d;){for(f=e;f=f[d];)if(s?M(f,v):1===f.nodeType)return!1;p=d="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?g.firstChild:g.lastChild],a&&x){for(b=(h=(l=(c=g[y]||(g[y]={}))[t]||[])[0]===m&&l[1])&&l[2],f=h&&g.childNodes[h];f=++h&&f&&f[d]||(b=h=0)||p.pop();)if(1===f.nodeType&&++b&&f===e){c[t]=[m,h,b];break}}else if(x&&(b=h=(l=(c=e[y]||(e[y]={}))[t]||[])[0]===m&&l[1]),!1===b)for(;(f=++h&&f&&f[d]||(b=h=0)||p.pop())&&(!(s?M(f,v):1===f.nodeType)||!++b||(x&&((c=f[y]||(f[y]={}))[t]=[m,b]),f!==e)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||Z.error("unsupported pseudo: "+t);return i[y]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?et((function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=s.call(t,o[a])]=!(n[r]=o[a])})):function(t){return i(t,0,n)}):i}},pseudos:{not:et((function(t){var e=[],n=[],r=yt(t.replace(S,"$1"));return r[y]?et((function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:et((function(t){return function(e){return Z(t,e).length>0}})),contains:et((function(t){return t=t.replace(G,Q),function(e){return(e.textContent||_.text(e)).indexOf(t)>-1}})),lang:et((function(t){return B.test(t||"")||Z.error("unsupported lang: "+t),t=t.replace(G,Q).toLowerCase(),function(e){var n;do{if(n=h?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===function(){try{return l.activeElement}catch(t){}}()&&l.hasFocus()&&!!(t.type||t.href||~t.tabIndex)},enabled:ot(!1),disabled:ot(!0),checked:function(t){return M(t,"input")&&!!t.checked||M(t,"option")&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return X.test(t.nodeName)},input:function(t){return W.test(t.nodeName)},button:function(t){return M(t,"input")&&"button"===t.type||M(t,"button")},text:function(t){var e;return M(t,"input")&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:at((function(){return[0]})),last:at((function(t,e){return[e-1]})),eq:at((function(t,e,n){return[n<0?n+e:n]})),even:at((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:at((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:at((function(t,e,n){var r;for(r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:at((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=rt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=it(e);function lt(){}function ct(t,e){var n,i,o,a,s,u,l,c=w[t+" "];if(c)return e?0:c.slice(0);for(s=t,u=[],l=r.preFilter;s;){for(a in n&&!(i=O.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=$.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(S," ")}),s=s.slice(n.length)),r.filter)!(i=V[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?Z.error(t):w(t,u).slice(0)}function ft(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function ht(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=x++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,u){var l,c,f=[m,s];if(u){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,u))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(c=e[y]||(e[y]={}),i&&M(e,i))e=e[r]||e;else{if((l=c[o])&&l[0]===m&&l[1]===s)return f[2]=l[2];if(c[o]=f,f[2]=t(e,n,u))return!0}return!1}}function pt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function dt(t,e,n,r,i){for(var o,a=[],s=0,u=t.length,l=null!=e;s<u;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),l&&e.push(s)));return a}function gt(t,e,n,r,i,o){return r&&!r[y]&&(r=gt(r)),i&&!i[y]&&(i=gt(i,o)),et((function(o,a,u,l){var c,f,h,p,d=[],g=[],y=a.length,m=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)Z(t,e[r],n);return n}(e||"*",u.nodeType?[u]:u,[]),x=!t||!o&&e?m:dt(m,d,t,u,l);if(n?n(x,p=i||(o?t:y||r)?[]:a,u,l):p=x,r)for(c=dt(p,g),r(c,[],u,l),f=c.length;f--;)(h=c[f])&&(p[g[f]]=!(x[g[f]]=h));if(o){if(i||t){if(i){for(c=[],f=p.length;f--;)(h=p[f])&&c.push(x[f]=h);i(null,p=[],c,l)}for(f=p.length;f--;)(h=p[f])&&(c=i?s.call(o,h):d[f])>-1&&(o[c]=!(a[c]=h))}}else p=dt(p===a?p.splice(y,p.length):p),i?i(null,a,p,l):v.apply(a,p)}))}function vt(t){for(var e,n,i,a=t.length,u=r.relative[t[0].type],l=u||r.relative[" "],c=u?1:0,f=ht((function(t){return t===e}),l,!0),h=ht((function(t){return s.call(e,t)>-1}),l,!0),p=[function(t,n,r){var i=!u&&(r||n!=o)||((e=n).nodeType?f(t,n,r):h(t,n,r));return e=null,i}];c<a;c++)if(n=r.relative[t[c].type])p=[ht(pt(p),n)];else{if((n=r.filter[t[c].type].apply(null,t[c].matches))[y]){for(i=++c;i<a&&!r.relative[t[i].type];i++);return gt(c>1&&pt(p),c>1&&ft(t.slice(0,c-1).concat({value:" "===t[c-2].type?"*":""})).replace(S,"$1"),n,c<i&&vt(t.slice(c,i)),i<a&&vt(t=t.slice(i)),i<a&&ft(t))}p.push(n)}return pt(p)}function yt(t,e){var n,i=[],a=[],s=k[t+" "];if(!s){for(e||(e=ct(t)),n=e.length;n--;)(s=vt(e[n]))[y]?i.push(s):a.push(s);s=k(t,function(t,e){var n=e.length>0,i=t.length>0,a=function(a,s,u,c,f){var p,d,g,y=0,x="0",b=a&&[],w=[],k=o,M=a||i&&r.find.TAG("*",f),C=m+=null==k?1:Math.random()||.1,A=M.length;for(f&&(o=s==l||s||f);x!==A&&null!=(p=M[x]);x++){if(i&&p){for(d=0,s||p.ownerDocument==l||(ut(p),u=!h);g=t[d++];)if(g(p,s||l,u)){v.call(c,p);break}f&&(m=C)}n&&((p=!g&&p)&&y--,a&&b.push(p))}if(y+=x,n&&x!==y){for(d=0;g=e[d++];)g(b,w,s,u);if(a){if(y>0)for(;x--;)b[x]||w[x]||(w[x]=T.call(c));w=dt(w)}v.apply(c,w),f&&!a&&w.length>0&&y+e.length>1&&_.uniqueSort(c)}return f&&(m=C,o=k),b};return n?et(a):a}(a,i)),s.selector=t}return s}function mt(t,e,n,i){var o,a,s,u,l,c="function"==typeof t&&t,f=!i&&ct(t=c.selector||t);if(n=n||[],1===f.length){if((a=f[0]=f[0].slice(0)).length>2&&"ID"===(s=a[0]).type&&9===e.nodeType&&h&&r.relative[a[1].type]){if(!(e=(r.find.ID(s.matches[0].replace(G,Q),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(a.shift().value.length)}for(o=V.needsContext.test(t)?0:a.length;o--&&(s=a[o],!r.relative[u=s.type]);)if((l=r.find[u])&&(i=l(s.matches[0].replace(G,Q),Y.test(a[0].type)&&st(e.parentNode)||e))){if(a.splice(o,1),!(t=i.length&&ft(a)))return v.apply(n,i),n;break}}return(c||yt(t,f))(i,e,!h,n,!e||Y.test(t)&&st(e.parentNode)||e),n}lt.prototype=r.filters=r.pseudos,r.setFilters=new lt,p.sortStable=y.split("").sort(D).join("")===y,ut(),p.sortDetached=nt((function(t){return 1&t.compareDocumentPosition(l.createElement("fieldset"))})),_.find=Z,_.expr[":"]=_.expr.pseudos,_.unique=_.uniqueSort,Z.compile=yt,Z.select=mt,Z.setDocument=ut,Z.tokenize=ct,Z.escape=_.escapeSelector,Z.getText=_.text,Z.isXML=_.isXMLDoc,Z.selectors=_.expr,Z.support=_.support,Z.uniqueSort=_.uniqueSort}();var P=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&_(t).is(n))break;r.push(t)}return r},q=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},R=_.expr.match.needsContext,H=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(t,e,n){return d(e)?_.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?_.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?_.grep(t,(function(t){return s.call(e,t)>-1!==n})):_.filter(e,t,n)}_.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?_.find.matchesSelector(r,t)?[r]:[]:_.find.matches(t,_.grep(e,(function(t){return 1===t.nodeType})))},_.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(_(t).filter((function(){for(e=0;e<r;e++)if(_.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)_.find(t,i[e],n);return r>1?_.uniqueSort(n):n},filter:function(t){return this.pushStack(I(this,t||[],!1))},not:function(t){return this.pushStack(I(this,t||[],!0))},is:function(t){return!!I(this,"string"==typeof t&&R.test(t)?_(t):t||[],!1).length}});var O,$=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,z=_.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||O,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:$.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof _?e[0]:e,_.merge(this,_.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:v,!0)),H.test(r[1])&&_.isPlainObject(e))for(r in e)d(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=v.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):d(t)?void 0!==n.ready?n.ready(t):t(_):_.makeArray(t,this)};z.prototype=_.fn,O=_(v);var F=/^(?:parents|prev(?:Until|All))/,B={children:!0,contents:!0,next:!0,prev:!0};function V(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}_.fn.extend({has:function(t){var e=_(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(_.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&_(t);if(!R.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&_.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?_.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?s.call(_(t),this[0]):s.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),_.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return P(t,"parentNode")},parentsUntil:function(t,e,n){return P(t,"parentNode",n)},next:function(t){return V(t,"nextSibling")},prev:function(t){return V(t,"previousSibling")},nextAll:function(t){return P(t,"nextSibling")},prevAll:function(t){return P(t,"previousSibling")},nextUntil:function(t,e,n){return P(t,"nextSibling",n)},prevUntil:function(t,e,n){return P(t,"previousSibling",n)},siblings:function(t){return q((t.parentNode||{}).firstChild,t)},children:function(t){return q(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(M(t,"template")&&(t=t.content||t),_.merge([],t.childNodes))}},(function(t,e){_.fn[t]=function(n,r){var i=_.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=_.filter(r,i)),this.length>1&&(B[t]||_.uniqueSort(i),F.test(t)&&i.reverse()),this.pushStack(i)}}));var W=/[^\x20\t\r\n\f]+/g;function X(t){return t}function U(t){throw t}function Y(t,e,n,r){var i;try{t&&d(i=t.promise)?i.call(t).done(e).fail(n):t&&d(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}_.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return _.each(t.match(W)||[],(function(t,n){e[n]=!0})),e}(t):_.extend({},t);var e,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){_.each(n,(function(n,r){d(r)?t.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==x(r)&&e(r)}))}(arguments),n&&!e&&u()),this},remove:function(){return _.each(arguments,(function(t,e){for(var n;(n=_.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?_.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},_.extend({Deferred:function(e){var n=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return _.Deferred((function(e){_.each(n,(function(n,r){var i=d(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&d(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(e,r,i){var o=0;function a(e,n,r,i){return function(){var s=this,u=arguments,l=function(){var t,l;if(!(e<o)){if((t=r.apply(s,u))===n.promise())throw new TypeError("Thenable self-resolution");l=t&&("object"==typeof t||"function"==typeof t)&&t.then,d(l)?i?l.call(t,a(o,n,X,i),a(o,n,U,i)):(o++,l.call(t,a(o,n,X,i),a(o,n,U,i),a(o,n,X,n.notifyWith))):(r!==X&&(s=void 0,u=[t]),(i||n.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(t){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(t,c.error),e+1>=o&&(r!==U&&(s=void 0,u=[t]),n.rejectWith(s,u))}};e?c():(_.Deferred.getErrorHook?c.error=_.Deferred.getErrorHook():_.Deferred.getStackHook&&(c.error=_.Deferred.getStackHook()),t.setTimeout(c))}}return _.Deferred((function(t){n[0][3].add(a(0,t,d(i)?i:X,t.notifyWith)),n[1][3].add(a(0,t,d(e)?e:X)),n[2][3].add(a(0,t,d(r)?r:U))})).promise()},promise:function(t){return null!=t?_.extend(t,i):i}},o={};return _.each(n,(function(t,e){var a=e[2],s=e[5];i[e[1]]=a.add,s&&a.add((function(){r=s}),n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),a.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),o=i.call(arguments),a=_.Deferred(),s=function(t){return function(n){r[t]=this,o[t]=arguments.length>1?i.call(arguments):n,--e||a.resolveWith(r,o)}};if(e<=1&&(Y(t,a.done(s(n)).resolve,a.reject,!e),"pending"===a.state()||d(o[n]&&o[n].then)))return a.then();for(;n--;)Y(o[n],s(n),a.reject);return a.promise()}});var G=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&G.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},_.readyException=function(e){t.setTimeout((function(){throw e}))};var Q=_.Deferred();function K(){v.removeEventListener("DOMContentLoaded",K),t.removeEventListener("load",K),_.ready()}_.fn.ready=function(t){return Q.then(t).catch((function(t){_.readyException(t)})),this},_.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--_.readyWait:_.isReady)||(_.isReady=!0,!0!==t&&--_.readyWait>0||Q.resolveWith(v,[_]))}}),_.ready.then=Q.then,"complete"===v.readyState||"loading"!==v.readyState&&!v.documentElement.doScroll?t.setTimeout(_.ready):(v.addEventListener("DOMContentLoaded",K),t.addEventListener("load",K));var J=function(t,e,n,r,i,o,a){var s=0,u=t.length,l=null==n;if("object"===x(n))for(s in i=!0,n)J(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,d(r)||(a=!0),l&&(a?(e.call(t,r),e=null):(l=e,e=function(t,e,n){return l.call(_(t),n)})),e))for(;s<u;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:l?e.call(t):u?e(t[0],n):o},Z=/^-ms-/,tt=/-([a-z])/g;function et(t,e){return e.toUpperCase()}function nt(t){return t.replace(Z,"ms-").replace(tt,et)}var rt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function it(){this.expando=_.expando+it.uid++}it.uid=1,it.prototype={cache:function(t){var e=t[this.expando];return e||(e={},rt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[nt(e)]=n;else for(r in e)i[nt(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][nt(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(nt):(e=nt(e))in r?[e]:e.match(W)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||_.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!_.isEmptyObject(e)}};var ot=new it,at=new it,st=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ut=/[A-Z]/g;function lt(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(ut,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:st.test(t)?JSON.parse(t):t)}(n)}catch(t){}at.set(t,e,n)}else n=void 0;return n}_.extend({hasData:function(t){return at.hasData(t)||ot.hasData(t)},data:function(t,e,n){return at.access(t,e,n)},removeData:function(t,e){at.remove(t,e)},_data:function(t,e,n){return ot.access(t,e,n)},_removeData:function(t,e){ot.remove(t,e)}}),_.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=at.get(o),1===o.nodeType&&!ot.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=nt(r.slice(5)),lt(o,r,i[r]));ot.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){at.set(this,t)})):J(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=at.get(o,t))||void 0!==(n=lt(o,t))?n:void 0;this.each((function(){at.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){at.remove(this,t)}))}}),_.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=ot.get(t,e),n&&(!r||Array.isArray(n)?r=ot.access(t,e,_.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=_.queue(t,e),r=n.length,i=n.shift(),o=_._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){_.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return ot.get(t,n)||ot.access(t,n,{empty:_.Callbacks("once memory").add((function(){ot.remove(t,[e+"queue",n])}))})}}),_.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?_.queue(this[0],t):void 0===e?this:this.each((function(){var n=_.queue(this,t,e);_._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&_.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){_.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=_.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=ot.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var ct=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ft=new RegExp("^(?:([+-])=|)("+ct+")([a-z%]*)$","i"),ht=["Top","Right","Bottom","Left"],pt=v.documentElement,dt=function(t){return _.contains(t.ownerDocument,t)},gt={composed:!0};pt.getRootNode&&(dt=function(t){return _.contains(t.ownerDocument,t)||t.getRootNode(gt)===t.ownerDocument});var vt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&dt(t)&&"none"===_.css(t,"display")};function yt(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return _.css(t,e,"")},u=s(),l=n&&n[3]||(_.cssNumber[e]?"":"px"),c=t.nodeType&&(_.cssNumber[e]||"px"!==l&&+u)&&ft.exec(_.css(t,e));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;a--;)_.style(t,e,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,_.style(t,e,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var mt={};function xt(t){var e,n=t.ownerDocument,r=t.nodeName,i=mt[r];return i||(e=n.body.appendChild(n.createElement(r)),i=_.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),mt[r]=i,i)}function bt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=ot.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&vt(r)&&(i[o]=xt(r))):"none"!==n&&(i[o]="none",ot.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}_.fn.extend({show:function(){return bt(this,!0)},hide:function(){return bt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){vt(this)?_(this).show():_(this).hide()}))}});var wt,_t,kt=/^(?:checkbox|radio)$/i,Mt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Tt=/^$|^module$|\/(?:java|ecma)script/i;wt=v.createDocumentFragment().appendChild(v.createElement("div")),(_t=v.createElement("input")).setAttribute("type","radio"),_t.setAttribute("checked","checked"),_t.setAttribute("name","t"),wt.appendChild(_t),p.checkClone=wt.cloneNode(!0).cloneNode(!0).lastChild.checked,wt.innerHTML="<textarea>x</textarea>",p.noCloneChecked=!!wt.cloneNode(!0).lastChild.defaultValue,wt.innerHTML="<option></option>",p.option=!!wt.lastChild;var Ct={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function At(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&M(t,e)?_.merge([t],n):n}function Et(t,e){for(var n=0,r=t.length;n<r;n++)ot.set(t[n],"globalEval",!e||ot.get(e[n],"globalEval"))}Ct.tbody=Ct.tfoot=Ct.colgroup=Ct.caption=Ct.thead,Ct.th=Ct.td,p.option||(Ct.optgroup=Ct.option=[1,"<select multiple='multiple'>","</select>"]);var St=/<|&#?\w+;/;function Nt(t,e,n,r,i){for(var o,a,s,u,l,c,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===x(o))_.merge(h,o.nodeType?[o]:o);else if(St.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(Mt.exec(o)||["",""])[1].toLowerCase(),u=Ct[s]||Ct._default,a.innerHTML=u[1]+_.htmlPrefilter(o)+u[2],c=u[0];c--;)a=a.lastChild;_.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(r&&_.inArray(o,r)>-1)i&&i.push(o);else if(l=dt(o),a=At(f.appendChild(o),"script"),l&&Et(a),n)for(c=0;o=a[c++];)Tt.test(o.type||"")&&n.push(o);return f}var Dt=/^([^.]*)(?:\.(.+)|)/;function jt(){return!0}function Lt(){return!1}function Pt(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)Pt(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Lt;else if(!i)return t;return 1===o&&(a=i,i=function(t){return _().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=_.guid++)),t.each((function(){_.event.add(this,e,i,r,n)}))}function qt(t,e,n){n?(ot.set(t,e,!1),_.event.add(t,e,{namespace:!1,handler:function(t){var n,r=ot.get(this,e);if(1&t.isTrigger&&this[e]){if(r)(_.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=i.call(arguments),ot.set(this,e,r),this[e](),n=ot.get(this,e),ot.set(this,e,!1),r!==n)return t.stopImmediatePropagation(),t.preventDefault(),n}else r&&(ot.set(this,e,_.event.trigger(r[0],r.slice(1),this)),t.stopPropagation(),t.isImmediatePropagationStopped=jt)}})):void 0===ot.get(t,e)&&_.event.add(t,e,jt)}_.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,h,p,d,g,v=ot.get(t);if(rt(t))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&_.find.matchesSelector(pt,i),n.guid||(n.guid=_.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return void 0!==_&&_.event.triggered!==e.type?_.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(W)||[""]).length;l--;)p=g=(s=Dt.exec(e[l])||[])[1],d=(s[2]||"").split(".").sort(),p&&(f=_.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=_.event.special[p]||{},c=_.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&_.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=u[p])||((h=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,d,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,c):h.push(c),_.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,s,u,l,c,f,h,p,d,g,v=ot.hasData(t)&&ot.get(t);if(v&&(u=v.events)){for(l=(e=(e||"").match(W)||[""]).length;l--;)if(p=g=(s=Dt.exec(e[l])||[])[1],d=(s[2]||"").split(".").sort(),p){for(f=_.event.special[p]||{},h=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(t,c));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,d,v.handle)||_.removeEvent(t,p,v.handle),delete u[p])}else for(p in u)_.event.remove(t,p+e[l],n,r,!0);_.isEmptyObject(u)&&ot.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=new Array(arguments.length),u=_.event.fix(t),l=(ot.get(this,"events")||Object.create(null))[u.type]||[],c=_.event.special[u.type]||{};for(s[0]=u,e=1;e<arguments.length;e++)s[e]=arguments[e];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){for(a=_.event.handlers.call(this,u,l),e=0;(i=a[e++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((_.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(t,e){var n,r,i,o,a,s=[],u=e.delegateCount,l=t.target;if(u&&l.nodeType&&!("click"===t.type&&t.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==t.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?_(i,this).index(l)>-1:_.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<e.length&&s.push({elem:l,handlers:e.slice(u)}),s},addProp:function(t,e){Object.defineProperty(_.Event.prototype,t,{enumerable:!0,configurable:!0,get:d(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[_.expando]?t:new _.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return kt.test(e.type)&&e.click&&M(e,"input")&&qt(e,"click",!0),!1},trigger:function(t){var e=this||t;return kt.test(e.type)&&e.click&&M(e,"input")&&qt(e,"click"),!0},_default:function(t){var e=t.target;return kt.test(e.type)&&e.click&&M(e,"input")&&ot.get(e,"click")||M(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},_.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},_.Event=function(t,e){if(!(this instanceof _.Event))return new _.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?jt:Lt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&_.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:Lt,isPropagationStopped:Lt,isImmediatePropagationStopped:Lt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=jt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=jt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=jt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},_.event.addProp),_.each({focus:"focusin",blur:"focusout"},(function(t,e){function n(t){if(v.documentMode){var n=ot.get(this,"handle"),r=_.event.fix(t);r.type="focusin"===t.type?"focus":"blur",r.isSimulated=!0,n(t),r.target===r.currentTarget&&n(r)}else _.event.simulate(e,t.target,_.event.fix(t))}_.event.special[t]={setup:function(){var r;if(qt(this,t,!0),!v.documentMode)return!1;(r=ot.get(this,e))||this.addEventListener(e,n),ot.set(this,e,(r||0)+1)},trigger:function(){return qt(this,t),!0},teardown:function(){var t;if(!v.documentMode)return!1;(t=ot.get(this,e)-1)?ot.set(this,e,t):(this.removeEventListener(e,n),ot.remove(this,e))},_default:function(e){return ot.get(e.target,t)},delegateType:e},_.event.special[e]={setup:function(){var r=this.ownerDocument||this.document||this,i=v.documentMode?this:r,o=ot.get(i,e);o||(v.documentMode?this.addEventListener(e,n):r.addEventListener(t,n,!0)),ot.set(i,e,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=v.documentMode?this:r,o=ot.get(i,e)-1;o?ot.set(i,e,o):(v.documentMode?this.removeEventListener(e,n):r.removeEventListener(t,n,!0),ot.remove(i,e))}}})),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){_.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||_.contains(this,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}})),_.fn.extend({on:function(t,e,n,r){return Pt(this,t,e,n,r)},one:function(t,e,n,r){return Pt(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,_(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Lt),this.each((function(){_.event.remove(this,t,n,e)}))}});var Rt=/<script|<style|<link/i,Ht=/checked\s*(?:[^=]|=\s*.checked.)/i,It=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Ot(t,e){return M(t,"table")&&M(11!==e.nodeType?e:e.firstChild,"tr")&&_(t).children("tbody")[0]||t}function $t(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function zt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ft(t,e){var n,r,i,o,a,s;if(1===e.nodeType){if(ot.hasData(t)&&(s=ot.get(t).events))for(i in ot.remove(e,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)_.event.add(e,i,s[i][n]);at.hasData(t)&&(o=at.access(t),a=_.extend({},o),at.set(e,a))}}function Bt(t,e){var n=e.nodeName.toLowerCase();"input"===n&&kt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Vt(t,e,n,r){e=o(e);var i,a,s,u,l,c,f=0,h=t.length,g=h-1,v=e[0],y=d(v);if(y||h>1&&"string"==typeof v&&!p.checkClone&&Ht.test(v))return t.each((function(i){var o=t.eq(i);y&&(e[0]=v.call(this,i,o.html())),Vt(o,e,n,r)}));if(h&&(a=(i=Nt(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=a),a||r)){for(u=(s=_.map(At(i,"script"),$t)).length;f<h;f++)l=i,f!==g&&(l=_.clone(l,!0,!0),u&&_.merge(s,At(l,"script"))),n.call(t[f],l,f);if(u)for(c=s[s.length-1].ownerDocument,_.map(s,zt),f=0;f<u;f++)l=s[f],Tt.test(l.type||"")&&!ot.access(l,"globalEval")&&_.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?_._evalUrl&&!l.noModule&&_._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):m(l.textContent.replace(It,""),l,c))}return t}function Wt(t,e,n){for(var r,i=e?_.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||_.cleanData(At(r)),r.parentNode&&(n&&dt(r)&&Et(At(r,"script")),r.parentNode.removeChild(r));return t}_.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),u=dt(t);if(!(p.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||_.isXMLDoc(t)))for(a=At(s),r=0,i=(o=At(t)).length;r<i;r++)Bt(o[r],a[r]);if(e)if(n)for(o=o||At(t),a=a||At(s),r=0,i=o.length;r<i;r++)Ft(o[r],a[r]);else Ft(t,s);return(a=At(s,"script")).length>0&&Et(a,!u&&At(t,"script")),s},cleanData:function(t){for(var e,n,r,i=_.event.special,o=0;void 0!==(n=t[o]);o++)if(rt(n)){if(e=n[ot.expando]){if(e.events)for(r in e.events)i[r]?_.event.remove(n,r):_.removeEvent(n,r,e.handle);n[ot.expando]=void 0}n[at.expando]&&(n[at.expando]=void 0)}}}),_.fn.extend({detach:function(t){return Wt(this,t,!0)},remove:function(t){return Wt(this,t)},text:function(t){return J(this,(function(t){return void 0===t?_.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Vt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ot(this,t).appendChild(t)}))},prepend:function(){return Vt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ot(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Vt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Vt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(_.cleanData(At(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return _.clone(this,t,e)}))},html:function(t){return J(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Rt.test(t)&&!Ct[(Mt.exec(t)||["",""])[1].toLowerCase()]){t=_.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(_.cleanData(At(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Vt(this,arguments,(function(e){var n=this.parentNode;_.inArray(this,t)<0&&(_.cleanData(At(this)),n&&n.replaceChild(e,this))}),t)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){_.fn[t]=function(t){for(var n,r=[],i=_(t),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),_(i[s])[e](n),a.apply(r,n.get());return this.pushStack(r)}}));var Xt=new RegExp("^("+ct+")(?!px)[a-z%]+$","i"),Ut=/^--/,Yt=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Gt=function(t,e,n){var r,i,o={};for(i in e)o[i]=t.style[i],t.style[i]=e[i];for(i in r=n.call(t),e)t.style[i]=o[i];return r},Qt=new RegExp(ht.join("|"),"i");function Kt(t,e,n){var r,i,o,a,s=Ut.test(e),u=t.style;return(n=n||Yt(t))&&(a=n.getPropertyValue(e)||n[e],s&&a&&(a=a.replace(S,"$1")||void 0),""!==a||dt(t)||(a=_.style(t,e)),!p.pixelBoxStyles()&&Xt.test(a)&&Qt.test(e)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function Jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",pt.appendChild(l).appendChild(c);var e=t.getComputedStyle(c);r="1%"!==e.top,u=12===n(e.marginLeft),c.style.right="60%",a=36===n(e.right),i=36===n(e.width),c.style.position="absolute",o=12===n(c.offsetWidth/3),pt.removeChild(l),c=null}}function n(t){return Math.round(parseFloat(t))}var r,i,o,a,s,u,l=v.createElement("div"),c=v.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",p.clearCloneStyle="content-box"===c.style.backgroundClip,_.extend(p,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,n,r,i;return null==s&&(e=v.createElement("table"),n=v.createElement("tr"),r=v.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",n.style.cssText="box-sizing:content-box;border:1px solid",n.style.height="1px",r.style.height="9px",r.style.display="block",pt.appendChild(e).appendChild(n).appendChild(r),i=t.getComputedStyle(n),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===n.offsetHeight,pt.removeChild(e)),s}}))}();var Zt=["Webkit","Moz","ms"],te=v.createElement("div").style,ee={};function ne(t){var e=_.cssProps[t]||ee[t];return e||(t in te?t:ee[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Zt.length;n--;)if((t=Zt[n]+e)in te)return t}(t)||t)}var re=/^(none|table(?!-c[ea]).+)/,ie={position:"absolute",visibility:"hidden",display:"block"},oe={letterSpacing:"0",fontWeight:"400"};function ae(t,e,n){var r=ft.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function se(t,e,n,r,i,o){var a="width"===e?1:0,s=0,u=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=_.css(t,n+ht[a],!0,i)),r?("content"===n&&(u-=_.css(t,"padding"+ht[a],!0,i)),"margin"!==n&&(u-=_.css(t,"border"+ht[a]+"Width",!0,i))):(u+=_.css(t,"padding"+ht[a],!0,i),"padding"!==n?u+=_.css(t,"border"+ht[a]+"Width",!0,i):s+=_.css(t,"border"+ht[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-u-s-.5))||0),u+l}function ue(t,e,n){var r=Yt(t),i=(!p.boxSizingReliable()||n)&&"border-box"===_.css(t,"boxSizing",!1,r),o=i,a=Kt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(Xt.test(a)){if(!n)return a;a="auto"}return(!p.boxSizingReliable()&&i||!p.reliableTrDimensions()&&M(t,"tr")||"auto"===a||!parseFloat(a)&&"inline"===_.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===_.css(t,"boxSizing",!1,r),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+se(t,e,n||(i?"border":"content"),o,r,a)+"px"}function le(t,e,n,r,i){return new le.prototype.init(t,e,n,r,i)}_.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Kt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=nt(e),u=Ut.test(e),l=t.style;if(u||(e=ne(s)),a=_.cssHooks[e]||_.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:l[e];"string"===(o=typeof n)&&(i=ft.exec(n))&&i[1]&&(n=yt(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(_.cssNumber[s]?"":"px")),p.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(u?l.setProperty(e,n):l[e]=n))}},css:function(t,e,n,r){var i,o,a,s=nt(e);return Ut.test(e)||(e=ne(s)),(a=_.cssHooks[e]||_.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=Kt(t,e,r)),"normal"===i&&e in oe&&(i=oe[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),_.each(["height","width"],(function(t,e){_.cssHooks[e]={get:function(t,n,r){if(n)return!re.test(_.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ue(t,e,r):Gt(t,ie,(function(){return ue(t,e,r)}))},set:function(t,n,r){var i,o=Yt(t),a=!p.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===_.css(t,"boxSizing",!1,o),u=r?se(t,e,r,s,o):0;return s&&a&&(u-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-se(t,e,"border",!1,o)-.5)),u&&(i=ft.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=_.css(t,e)),ae(0,n,u)}}})),_.cssHooks.marginLeft=Jt(p.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Kt(t,"marginLeft"))||t.getBoundingClientRect().left-Gt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),_.each({margin:"",padding:"",border:"Width"},(function(t,e){_.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ht[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(_.cssHooks[t+e].set=ae)})),_.fn.extend({css:function(t,e){return J(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Yt(t),i=e.length;a<i;a++)o[e[a]]=_.css(t,e[a],!1,r);return o}return void 0!==n?_.style(t,e,n):_.css(t,e)}),t,e,arguments.length>1)}}),_.Tween=le,le.prototype={constructor:le,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||_.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(_.cssNumber[n]?"":"px")},cur:function(){var t=le.propHooks[this.prop];return t&&t.get?t.get(this):le.propHooks._default.get(this)},run:function(t){var e,n=le.propHooks[this.prop];return this.options.duration?this.pos=e=_.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):le.propHooks._default.set(this),this}},le.prototype.init.prototype=le.prototype,le.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=_.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){_.fx.step[t.prop]?_.fx.step[t.prop](t):1!==t.elem.nodeType||!_.cssHooks[t.prop]&&null==t.elem.style[ne(t.prop)]?t.elem[t.prop]=t.now:_.style(t.elem,t.prop,t.now+t.unit)}}},le.propHooks.scrollTop=le.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},_.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},_.fx=le.prototype.init,_.fx.step={};var ce,fe,he=/^(?:toggle|show|hide)$/,pe=/queueHooks$/;function de(){fe&&(!1===v.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(de):t.setTimeout(de,_.fx.interval),_.fx.tick())}function ge(){return t.setTimeout((function(){ce=void 0})),ce=Date.now()}function ve(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ht[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function ye(t,e,n){for(var r,i=(me.tweeners[e]||[]).concat(me.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function me(t,e,n){var r,i,o=0,a=me.prefilters.length,s=_.Deferred().always((function(){delete u.elem})),u=function(){if(i)return!1;for(var e=ce||ge(),n=Math.max(0,l.startTime+l.duration-e),r=1-(n/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(t,[l,r,n]),r<1&&a?n:(a||s.notifyWith(t,[l,1,0]),s.resolveWith(t,[l]),!1)},l=s.promise({elem:t,props:_.extend({},e),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},n),originalProperties:e,originalOptions:n,startTime:ce||ge(),duration:n.duration,tweens:[],createTween:function(e,n){var r=_.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(r),r},stop:function(e){var n=0,r=e?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return e?(s.notifyWith(t,[l,1,0]),s.resolveWith(t,[l,e])):s.rejectWith(t,[l,e]),this}}),c=l.props;for(!function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=nt(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=_.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(c,l.opts.specialEasing);o<a;o++)if(r=me.prefilters[o].call(l,t,c,l.opts))return d(r.stop)&&(_._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return _.map(c,ye,l),d(l.opts.start)&&l.opts.start.call(t,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),_.fx.timer(_.extend(u,{elem:t,anim:l,queue:l.opts.queue})),l}_.Animation=_.extend(me,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return yt(n.elem,t,ft.exec(e),n),n}]},tweener:function(t,e){d(t)?(e=t,t=["*"]):t=t.match(W);for(var n,r=0,i=t.length;r<i;r++)n=t[r],me.tweeners[n]=me.tweeners[n]||[],me.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,u,l,c,f="width"in e||"height"in e,h=this,p={},d=t.style,g=t.nodeType&&vt(t),v=ot.get(t,"fxshow");for(r in n.queue||(null==(a=_._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always((function(){h.always((function(){a.unqueued--,_.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],he.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}p[r]=v&&v[r]||_.style(t,r)}if((u=!_.isEmptyObject(e))||!_.isEmptyObject(p))for(r in f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(l=v&&v.display)&&(l=ot.get(t,"display")),"none"===(c=_.css(t,"display"))&&(l?c=l:(bt([t],!0),l=t.style.display||l,c=_.css(t,"display"),bt([t]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===_.css(t,"float")&&(u||(h.done((function(){d.display=l})),null==l&&(c=d.display,l="none"===c?"":c)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),u=!1,p)u||(v?"hidden"in v&&(g=v.hidden):v=ot.access(t,"fxshow",{display:l}),o&&(v.hidden=!g),g&&bt([t],!0),h.done((function(){for(r in g||bt([t]),ot.remove(t,"fxshow"),p)_.style(t,r,p[r])}))),u=ye(g?v[r]:0,r,h),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(t,e){e?me.prefilters.unshift(t):me.prefilters.push(t)}}),_.speed=function(t,e,n){var r=t&&"object"==typeof t?_.extend({},t):{complete:n||!n&&e||d(t)&&t,duration:t,easing:n&&e||e&&!d(e)&&e};return _.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in _.fx.speeds?r.duration=_.fx.speeds[r.duration]:r.duration=_.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){d(r.old)&&r.old.call(this),r.queue&&_.dequeue(this,r.queue)},r},_.fn.extend({fadeTo:function(t,e,n,r){return this.filter(vt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=_.isEmptyObject(t),o=_.speed(e,n,r),a=function(){var e=me(this,_.extend({},t),o);(i||ot.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=_.timers,a=ot.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&pe.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||_.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=ot.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=_.timers,a=r?r.length:0;for(n.finish=!0,_.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),_.each(["toggle","show","hide"],(function(t,e){var n=_.fn[e];_.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(ve(e,!0),t,r,i)}})),_.each({slideDown:ve("show"),slideUp:ve("hide"),slideToggle:ve("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){_.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),_.timers=[],_.fx.tick=function(){var t,e=0,n=_.timers;for(ce=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||_.fx.stop(),ce=void 0},_.fx.timer=function(t){_.timers.push(t),_.fx.start()},_.fx.interval=13,_.fx.start=function(){fe||(fe=!0,de())},_.fx.stop=function(){fe=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(e,n){return e=_.fx&&_.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,r){var i=t.setTimeout(n,e);r.stop=function(){t.clearTimeout(i)}}))},function(){var t=v.createElement("input"),e=v.createElement("select").appendChild(v.createElement("option"));t.type="checkbox",p.checkOn=""!==t.value,p.optSelected=e.selected,(t=v.createElement("input")).value="t",t.type="radio",p.radioValue="t"===t.value}();var xe,be=_.expr.attrHandle;_.fn.extend({attr:function(t,e){return J(this,_.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){_.removeAttr(this,t)}))}}),_.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?_.prop(t,e,n):(1===o&&_.isXMLDoc(t)||(i=_.attrHooks[e.toLowerCase()]||(_.expr.match.bool.test(e)?xe:void 0)),void 0!==n?null===n?void _.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=_.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!p.radioValue&&"radio"===e&&M(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(W);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),xe={set:function(t,e,n){return!1===e?_.removeAttr(t,n):t.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=be[e]||_.find.attr;be[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=be[a],be[a]=i,i=null!=n(t,e,r)?a:null,be[a]=o),i}}));var we=/^(?:input|select|textarea|button)$/i,_e=/^(?:a|area)$/i;function ke(t){return(t.match(W)||[]).join(" ")}function Me(t){return t.getAttribute&&t.getAttribute("class")||""}function Te(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(W)||[]}_.fn.extend({prop:function(t,e){return J(this,_.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[_.propFix[t]||t]}))}}),_.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&_.isXMLDoc(t)||(e=_.propFix[e]||e,i=_.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=_.find.attr(t,"tabindex");return e?parseInt(e,10):we.test(t.nodeName)||_e.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),p.optSelected||(_.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){_.propFix[this.toLowerCase()]=this})),_.fn.extend({addClass:function(t){var e,n,r,i,o,a;return d(t)?this.each((function(e){_(this).addClass(t.call(this,e,Me(this)))})):(e=Te(t)).length?this.each((function(){if(r=Me(this),n=1===this.nodeType&&" "+ke(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=ke(n),r!==a&&this.setAttribute("class",a)}})):this},removeClass:function(t){var e,n,r,i,o,a;return d(t)?this.each((function(e){_(this).removeClass(t.call(this,e,Me(this)))})):arguments.length?(e=Te(t)).length?this.each((function(){if(r=Me(this),n=1===this.nodeType&&" "+ke(r)+" "){for(o=0;o<e.length;o++)for(i=e[o];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");a=ke(n),r!==a&&this.setAttribute("class",a)}})):this:this.attr("class","")},toggleClass:function(t,e){var n,r,i,o,a=typeof t,s="string"===a||Array.isArray(t);return d(t)?this.each((function(n){_(this).toggleClass(t.call(this,n,Me(this),e),e)})):"boolean"==typeof e&&s?e?this.addClass(t):this.removeClass(t):(n=Te(t),this.each((function(){if(s)for(o=_(this),i=0;i<n.length;i++)r=n[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==a||((r=Me(this))&&ot.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":ot.get(this,"__className__")||""))})))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+ke(Me(n))+" ").indexOf(e)>-1)return!0;return!1}});var Ce=/\r/g;_.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=d(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,_(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=_.map(i,(function(t){return null==t?"":t+""}))),(e=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=_.valHooks[i.type]||_.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Ce,""):null==n?"":n:void 0}}),_.extend({valHooks:{option:{get:function(t){var e=_.find.attr(t,"value");return null!=e?e:ke(_.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!M(n.parentNode,"optgroup"))){if(e=_(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=_.makeArray(e),a=i.length;a--;)((r=i[a]).selected=_.inArray(_.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),_.each(["radio","checkbox"],(function(){_.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=_.inArray(_(t).val(),e)>-1}},p.checkOn||(_.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}));var Ae=t.location,Ee={guid:Date.now()},Se=/\?/;_.parseXML=function(e){var n,r;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){}return r=n&&n.getElementsByTagName("parsererror")[0],n&&!r||_.error("Invalid XML: "+(r?_.map(r.childNodes,(function(t){return t.textContent})).join("\n"):e)),n};var Ne=/^(?:focusinfocus|focusoutblur)$/,De=function(t){t.stopPropagation()};_.extend(_.event,{trigger:function(e,n,r,i){var o,a,s,u,l,f,h,p,y=[r||v],m=c.call(e,"type")?e.type:e,x=c.call(e,"namespace")?e.namespace.split("."):[];if(a=p=s=r=r||v,3!==r.nodeType&&8!==r.nodeType&&!Ne.test(m+_.event.triggered)&&(m.indexOf(".")>-1&&(x=m.split("."),m=x.shift(),x.sort()),l=m.indexOf(":")<0&&"on"+m,(e=e[_.expando]?e:new _.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=x.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+x.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),n=null==n?[e]:_.makeArray(n,[e]),h=_.event.special[m]||{},i||!h.trigger||!1!==h.trigger.apply(r,n))){if(!i&&!h.noBubble&&!g(r)){for(u=h.delegateType||m,Ne.test(u+m)||(a=a.parentNode);a;a=a.parentNode)y.push(a),s=a;s===(r.ownerDocument||v)&&y.push(s.defaultView||s.parentWindow||t)}for(o=0;(a=y[o++])&&!e.isPropagationStopped();)p=a,e.type=o>1?u:h.bindType||m,(f=(ot.get(a,"events")||Object.create(null))[e.type]&&ot.get(a,"handle"))&&f.apply(a,n),(f=l&&a[l])&&f.apply&&rt(a)&&(e.result=f.apply(a,n),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(y.pop(),n)||!rt(r)||l&&d(r[m])&&!g(r)&&((s=r[l])&&(r[l]=null),_.event.triggered=m,e.isPropagationStopped()&&p.addEventListener(m,De),r[m](),e.isPropagationStopped()&&p.removeEventListener(m,De),_.event.triggered=void 0,s&&(r[l]=s)),e.result}},simulate:function(t,e,n){var r=_.extend(new _.Event,n,{type:t,isSimulated:!0});_.event.trigger(r,null,e)}}),_.fn.extend({trigger:function(t,e){return this.each((function(){_.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return _.event.trigger(t,e,n,!0)}});var je=/\[\]$/,Le=/\r?\n/g,Pe=/^(?:submit|button|image|reset|file)$/i,qe=/^(?:input|select|textarea|keygen)/i;function Re(t,e,n,r){var i;if(Array.isArray(e))_.each(e,(function(e,i){n||je.test(t)?r(t,i):Re(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==x(e))r(t,e);else for(i in e)Re(t+"["+i+"]",e[i],n,r)}_.param=function(t,e){var n,r=[],i=function(t,e){var n=d(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!_.isPlainObject(t))_.each(t,(function(){i(this.name,this.value)}));else for(n in t)Re(n,t[n],e,i);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=_.prop(this,"elements");return t?_.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!_(this).is(":disabled")&&qe.test(this.nodeName)&&!Pe.test(t)&&(this.checked||!kt.test(t))})).map((function(t,e){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,(function(t){return{name:e.name,value:t.replace(Le,"\r\n")}})):{name:e.name,value:n.replace(Le,"\r\n")}})).get()}});var He=/%20/g,Ie=/#.*$/,Oe=/([?&])_=[^&]*/,$e=/^(.*?):[ \t]*([^\r\n]*)$/gm,ze=/^(?:GET|HEAD)$/,Fe=/^\/\//,Be={},Ve={},We="*/".concat("*"),Xe=v.createElement("a");function Ue(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(W)||[];if(d(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Ye(t,e,n,r){var i={},o=t===Ve;function a(s){var u;return i[s]=!0,_.each(t[s]||[],(function(t,s){var l=s(e,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(e.dataTypes.unshift(l),a(l),!1)})),u}return a(e.dataTypes[0])||!i["*"]&&a("*")}function Ge(t,e){var n,r,i=_.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&_.extend(!0,t,r),t}Xe.href=Ae.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ae.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ae.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":We,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ge(Ge(t,_.ajaxSettings),e):Ge(_.ajaxSettings,t)},ajaxPrefilter:Ue(Be),ajaxTransport:Ue(Ve),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var r,i,o,a,s,u,l,c,f,h,p=_.ajaxSetup({},n),d=p.context||p,g=p.context&&(d.nodeType||d.jquery)?_(d):_.event,y=_.Deferred(),m=_.Callbacks("once memory"),x=p.statusCode||{},b={},w={},k="canceled",M={readyState:0,getResponseHeader:function(t){var e;if(l){if(!a)for(a={};e=$e.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(t,e){return null==l&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==l&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)M.always(t[M.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||k;return r&&r.abort(e),T(0,e),this}};if(y.promise(M),p.url=((e||p.url||Ae.href)+"").replace(Fe,Ae.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(W)||[""],null==p.crossDomain){u=v.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=Xe.protocol+"//"+Xe.host!=u.protocol+"//"+u.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=_.param(p.data,p.traditional)),Ye(Be,p,n,M),l)return M;for(f in(c=_.event&&p.global)&&0==_.active++&&_.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!ze.test(p.type),i=p.url.replace(Ie,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(He,"+")):(h=p.url.slice(i.length),p.data&&(p.processData||"string"==typeof p.data)&&(i+=(Se.test(i)?"&":"?")+p.data,delete p.data),!1===p.cache&&(i=i.replace(Oe,"$1"),h=(Se.test(i)?"&":"?")+"_="+Ee.guid+++h),p.url=i+h),p.ifModified&&(_.lastModified[i]&&M.setRequestHeader("If-Modified-Since",_.lastModified[i]),_.etag[i]&&M.setRequestHeader("If-None-Match",_.etag[i])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&M.setRequestHeader("Content-Type",p.contentType),M.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+We+"; q=0.01":""):p.accepts["*"]),p.headers)M.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(d,M,p)||l))return M.abort();if(k="abort",m.add(p.complete),M.done(p.success),M.fail(p.error),r=Ye(Ve,p,n,M)){if(M.readyState=1,c&&g.trigger("ajaxSend",[M,p]),l)return M;p.async&&p.timeout>0&&(s=t.setTimeout((function(){M.abort("timeout")}),p.timeout));try{l=!1,r.send(b,T)}catch(t){if(l)throw t;T(-1,t)}}else T(-1,"No Transport");function T(e,n,a,u){var f,h,v,b,w,k=n;l||(l=!0,s&&t.clearTimeout(s),r=void 0,o=u||"",M.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(b=function(t,e,n){for(var r,i,o,a,s=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||t.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(p,M,a)),!f&&_.inArray("script",p.dataTypes)>-1&&_.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),b=function(t,e,n,r){var i,o,a,s,u,l={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)l[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}(p,b,M,f),f?(p.ifModified&&((w=M.getResponseHeader("Last-Modified"))&&(_.lastModified[i]=w),(w=M.getResponseHeader("etag"))&&(_.etag[i]=w)),204===e||"HEAD"===p.type?k="nocontent":304===e?k="notmodified":(k=b.state,h=b.data,f=!(v=b.error))):(v=k,!e&&k||(k="error",e<0&&(e=0))),M.status=e,M.statusText=(n||k)+"",f?y.resolveWith(d,[h,k,M]):y.rejectWith(d,[M,k,v]),M.statusCode(x),x=void 0,c&&g.trigger(f?"ajaxSuccess":"ajaxError",[M,p,f?h:v]),m.fireWith(d,[M,k]),c&&(g.trigger("ajaxComplete",[M,p]),--_.active||_.event.trigger("ajaxStop")))}return M},getJSON:function(t,e,n){return _.get(t,e,n,"json")},getScript:function(t,e){return _.get(t,void 0,e,"script")}}),_.each(["get","post"],(function(t,e){_[e]=function(t,n,r,i){return d(n)&&(i=i||r,r=n,n=void 0),_.ajax(_.extend({url:t,type:e,dataType:i,data:n,success:r},_.isPlainObject(t)&&t))}})),_.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),_._evalUrl=function(t,e,n){return _.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){_.globalEval(t,e,n)}})},_.fn.extend({wrapAll:function(t){var e;return this[0]&&(d(t)&&(t=t.call(this[0])),e=_(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return d(t)?this.each((function(e){_(this).wrapInner(t.call(this,e))})):this.each((function(){var e=_(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=d(t);return this.each((function(n){_(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){_(this).replaceWith(this.childNodes)})),this}}),_.expr.pseudos.hidden=function(t){return!_.expr.pseudos.visible(t)},_.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var Qe={0:200,1223:204},Ke=_.ajaxSettings.xhr();p.cors=!!Ke&&"withCredentials"in Ke,p.ajax=Ke=!!Ke,_.ajaxTransport((function(e){var n,r;if(p.cors||Ke&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);n=function(t){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Qe[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&t.setTimeout((function(){n&&r()}))},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}})),_.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return _.globalEval(t),t}}}),_.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),_.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=_("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),v.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Je,Ze=[],tn=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ze.pop()||_.expando+"_"+Ee.guid++;return this[t]=!0,t}}),_.ajaxPrefilter("json jsonp",(function(e,n,r){var i,o,a,s=!1!==e.jsonp&&(tn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&tn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=d(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(tn,"$1"+i):!1!==e.jsonp&&(e.url+=(Se.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||_.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=t[i],t[i]=function(){a=arguments},r.always((function(){void 0===o?_(t).removeProp(i):t[i]=o,e[i]&&(e.jsonpCallback=n.jsonpCallback,Ze.push(i)),a&&d(o)&&o(a[0]),a=o=void 0})),"script"})),p.createHTMLDocument=((Je=v.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Je.childNodes.length),_.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(p.createHTMLDocument?((r=(e=v.implementation.createHTMLDocument("")).createElement("base")).href=v.location.href,e.head.appendChild(r)):e=v),o=!n&&[],(i=H.exec(t))?[e.createElement(i[1])]:(i=Nt([t],e,o),o&&o.length&&_(o).remove(),_.merge([],i.childNodes)));var r,i,o},_.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=ke(t.slice(s)),t=t.slice(0,s)),d(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&_.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?_("<div>").append(_.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},_.expr.pseudos.animated=function(t){return _.grep(_.timers,(function(e){return t===e.elem})).length},_.offset={setOffset:function(t,e,n){var r,i,o,a,s,u,l=_.css(t,"position"),c=_(t),f={};"static"===l&&(t.style.position="relative"),s=c.offset(),o=_.css(t,"top"),u=_.css(t,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),d(e)&&(e=e.call(t,n,_.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+i),"using"in e?e.using.call(t,f):c.css(f)}},_.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){_.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===_.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===_.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=_(t).offset()).top+=_.css(t,"borderTopWidth",!0),i.left+=_.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-_.css(r,"marginTop",!0),left:e.left-i.left-_.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===_.css(t,"position");)t=t.offsetParent;return t||pt}))}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;_.fn[t]=function(r){return J(this,(function(t,r,i){var o;if(g(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),_.each(["top","left"],(function(t,e){_.cssHooks[e]=Jt(p.pixelPosition,(function(t,n){if(n)return n=Kt(t,e),Xt.test(n)?_(t).position()[e]+"px":n}))})),_.each({Height:"height",Width:"width"},(function(t,e){_.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){_.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return J(this,(function(e,n,i){var o;return g(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?_.css(e,n,s):_.style(e,n,i,s)}),e,a?i:void 0,a)}}))})),_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){_.fn[e]=function(t){return this.on(e,t)}})),_.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.on("mouseenter",t).on("mouseleave",e||t)}}),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){_.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var en=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;_.proxy=function(t,e){var n,r,o;if("string"==typeof e&&(n=t[e],e=t,t=n),d(t))return r=i.call(arguments,2),o=function(){return t.apply(e||this,r.concat(i.call(arguments)))},o.guid=t.guid=t.guid||_.guid++,o},_.holdReady=function(t){t?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=M,_.isFunction=d,_.isWindow=g,_.camelCase=nt,_.type=x,_.now=Date.now,_.isNumeric=function(t){var e=_.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},_.trim=function(t){return null==t?"":(t+"").replace(en,"$1")};var nn=t.jQuery,rn=t.$;return _.noConflict=function(e){return t.$===_&&(t.$=rn),e&&t.jQuery===_&&(t.jQuery=nn),_},void 0===e&&(t.jQuery=t.$=_),_}))}(i);var o=r(i.exports);function a(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var s,u,l=(1===(s=a).length&&(u=s,s=function(t,e){return a(u(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;s(t[i],e)<0?n=i+1:r=i}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var i=n+r>>>1;s(t[i],e)>0?r=i:n=i+1}return n}}),c=l.right;function f(t){return null===t?NaN:+t}function h(t,e){var n=function(t,e){var n,r,i=t.length,o=0,a=-1,s=0,u=0;if(null==e)for(;++a<i;)isNaN(n=f(t[a]))||(u+=(r=n-s)*(n-(s+=r/++o)));else for(;++a<i;)isNaN(n=f(e(t[a],a,t)))||(u+=(r=n-s)*(n-(s+=r/++o)));if(o>1)return u/(o-1)}(t,e);return n?Math.sqrt(n):n}function p(t,e){var n,r,i,o=t.length,a=-1;if(null==e){for(;++a<o;)if(null!=(n=t[a])&&n>=n)for(r=i=n;++a<o;)null!=(n=t[a])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++a<o;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=i=n;++a<o;)null!=(n=e(t[a],a,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]}var d=Math.sqrt(50),g=Math.sqrt(10),v=Math.sqrt(2);function y(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=d?10:o>=g?5:o>=v?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=d?10:o>=g?5:o>=v?2:1)}function m(t,e,n){if(null==n&&(n=f),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),a=+n(t[o],o,t);return a+(+n(t[o+1],o+1,t)-a)*(i-o)}}function x(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r}function b(t,e){var n,r=t.length,i=r,o=-1,a=0;if(null==e)for(;++o<r;)isNaN(n=f(t[o]))?--i:a+=n;else for(;++o<r;)isNaN(n=f(e(t[o],o,t)))?--i:a+=n;if(i)return a/i}function w(t,e){var n,r=t.length,i=-1,o=[];if(null==e)for(;++i<r;)isNaN(n=f(t[i]))||o.push(n);else for(;++i<r;)isNaN(n=f(e(t[i],i,t)))||o.push(n);return m(o.sort(a),.5)}var _="$";function k(){}function M(t,e){var n=new k;if(t instanceof k)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}function T(){var t,e,n,r=[],i=[];function o(n,i,a,s){if(i>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var u,l,c,f=-1,h=n.length,p=r[i++],d=M(),g=a();++f<h;)(c=d.get(u=p(l=n[f])+""))?c.push(l):d.set(u,[l]);return d.each((function(t,e){s(g,e,o(t,i,a,s))})),g}function a(t,n){if(++n>r.length)return t;var o,s=i[n-1];return null!=e&&n>=r.length?o=t.entries():(o=[],t.each((function(t,e){o.push({key:e,values:a(t,n)})}))),null!=s?o.sort((function(t,e){return s(t.key,e.key)})):o}return n={object:function(t){return o(t,0,C,A)},map:function(t){return o(t,0,E,S)},entries:function(t){return a(o(t,0,E,S),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return i[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function C(){return{}}function A(t,e,n){t[e]=n}function E(){return M()}function S(t,e,n){t.set(e,n)}function N(){}k.prototype=M.prototype={constructor:k,has:function(t){return _+t in this},get:function(t){return this[_+t]},set:function(t,e){return this[_+t]=e,this},remove:function(t){var e=_+t;return e in this&&delete this[e]},clear:function(){for(var t in this)t[0]===_&&delete this[t]},keys:function(){var t=[];for(var e in this)e[0]===_&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)e[0]===_&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)e[0]===_&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)e[0]===_&&++t;return t},empty:function(){for(var t in this)if(t[0]===_)return!1;return!0},each:function(t){for(var e in this)e[0]===_&&t(this[e],e.slice(1),this)}};var D=M.prototype;function j(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}N.prototype={constructor:N,has:D.has,add:function(t){return this[_+(t+="")]=t,this},remove:D.remove,clear:D.clear,values:D.keys,size:D.size,empty:D.empty,each:D.each};var L=Array.prototype,P=L.map,q=L.slice,R={name:"implicit"};function H(){var t=M(),e=[],n=[],r=R;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==R)return r;t.set(o,a=e.push(i))}return n[(a-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=M();for(var r,o,a=-1,s=n.length;++a<s;)t.has(o=(r=n[a])+"")||t.set(o,e.push(r));return i},i.range=function(t){return arguments.length?(n=q.call(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return H(e,n).unknown(r)},j.apply(i,arguments),i}function I(){var t,e,n=H().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,s=0,u=0,l=.5;function c(){var n=r().length,c=o[1]<o[0],f=o[c-0],h=o[1-c];t=(h-f)/Math.max(1,n-s+2*u),a&&(t=Math.floor(t)),f+=(h-f-t*(n-s))*l,e=t*(1-s),a&&(f=Math.round(f),e=Math.round(e));var p=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o}(n).map((function(e){return f+t*e}));return i(c?p.reverse():p)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),c()):r()},n.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},n.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(a=!!t,c()):a},n.padding=function(t){return arguments.length?(s=Math.min(1,u=+t),c()):s},n.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),c()):s},n.paddingOuter=function(t){return arguments.length?(u=+t,c()):u},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},n.copy=function(){return I(r(),o).round(a).paddingInner(s).paddingOuter(u).align(l)},j.apply(c(),arguments)}function O(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function $(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function z(){}var F=.7,B=1/F,V="\\s*([+-]?\\d+)\\s*",W="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",X="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",U=/^#([0-9a-f]{3,8})$/,Y=new RegExp("^rgb\\("+[V,V,V]+"\\)$"),G=new RegExp("^rgb\\("+[X,X,X]+"\\)$"),Q=new RegExp("^rgba\\("+[V,V,V,W]+"\\)$"),K=new RegExp("^rgba\\("+[X,X,X,W]+"\\)$"),J=new RegExp("^hsl\\("+[W,X,X]+"\\)$"),Z=new RegExp("^hsla\\("+[W,X,X,W]+"\\)$"),tt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function et(){return this.rgb().formatHex()}function nt(){return this.rgb().formatRgb()}function rt(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=U.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?it(e):3===n?new st(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?ot(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?ot(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=Y.exec(t))?new st(e[1],e[2],e[3],1):(e=G.exec(t))?new st(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Q.exec(t))?ot(e[1],e[2],e[3],e[4]):(e=K.exec(t))?ot(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=J.exec(t))?ft(e[1],e[2]/100,e[3]/100,1):(e=Z.exec(t))?ft(e[1],e[2]/100,e[3]/100,e[4]):tt.hasOwnProperty(t)?it(tt[t]):"transparent"===t?new st(NaN,NaN,NaN,0):null}function it(t){return new st(t>>16&255,t>>8&255,255&t,1)}function ot(t,e,n,r){return r<=0&&(t=e=n=NaN),new st(t,e,n,r)}function at(t,e,n,r){return 1===arguments.length?((i=t)instanceof z||(i=rt(i)),i?new st((i=i.rgb()).r,i.g,i.b,i.opacity):new st):new st(t,e,n,null==r?1:r);var i}function st(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function ut(){return"#"+ct(this.r)+ct(this.g)+ct(this.b)}function lt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function ct(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function ft(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new pt(t,e,n,r)}function ht(t){if(t instanceof pt)return new pt(t.h,t.s,t.l,t.opacity);if(t instanceof z||(t=rt(t)),!t)return new pt;if(t instanceof pt)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new pt(a,s,u,t.opacity)}function pt(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function dt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function gt(t){return function(){return t}}function vt(t){return 1==(t=+t)?yt:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):gt(isNaN(e)?n:e)}}function yt(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):gt(isNaN(t)?e:t)}O(z,rt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:et,formatHex:et,formatHsl:function(){return ht(this).formatHsl()},formatRgb:nt,toString:nt}),O(st,at,$(z,{brighter:function(t){return t=null==t?B:Math.pow(B,t),new st(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?F:Math.pow(F,t),new st(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:ut,formatHex:ut,formatRgb:lt,toString:lt})),O(pt,(function(t,e,n,r){return 1===arguments.length?ht(t):new pt(t,e,n,null==r?1:r)}),$(z,{brighter:function(t){return t=null==t?B:Math.pow(B,t),new pt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?F:Math.pow(F,t),new pt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new st(dt(t>=240?t-240:t+120,i,r),dt(t,i,r),dt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var mt=function t(e){var n=vt(e);function r(t,e){var r=n((t=at(t)).r,(e=at(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=yt(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function xt(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}}function bt(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=At(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}function wt(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function _t(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function kt(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=At(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}var Mt=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Tt=new RegExp(Mt.source,"g");function Ct(t,e){var n,r,i,o=Mt.lastIndex=Tt.lastIndex=0,a=-1,s=[],u=[];for(t+="",e+="";(n=Mt.exec(t))&&(r=Tt.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:_t(n,r)})),o=Tt.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})}function At(t,e){var n,r=typeof e;return null==e||"boolean"===r?gt(e):("number"===r?_t:"string"===r?(n=rt(e))?(e=n,mt):Ct:e instanceof rt?mt:e instanceof Date?wt:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?xt:Array.isArray(e)?bt:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?kt:_t)(t,e)}function Et(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var St,Nt,Dt,jt,Lt=180/Math.PI,Pt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function qt(t,e,n,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),t*r<e*n&&(t=-t,e=-e,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Lt,skewX:Math.atan(u)*Lt,scaleX:a,scaleY:s}}function Rt(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,e,null,n);s.push({i:u-4,x:_t(t,i)},{i:u-2,x:_t(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:_t(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,u),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:_t(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,u),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:_t(t,n)},{i:s-2,x:_t(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var e,n=-1,r=u.length;++n<r;)s[(e=u[n]).i]=e.x(t);return s.join("")}}}var Ht=Rt((function(t){return"none"===t?Pt:(St||(St=document.createElement("DIV"),Nt=document.documentElement,Dt=document.defaultView),St.style.transform=t,t=Dt.getComputedStyle(Nt.appendChild(St),null).getPropertyValue("transform"),Nt.removeChild(St),qt(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),It=Rt((function(t){return null==t?Pt:(jt||(jt=document.createElementNS("http://www.w3.org/2000/svg","g")),jt.setAttribute("transform",t),(t=jt.transform.baseVal.consolidate())?qt((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Pt)}),", ",")",")");function Ot(t){return+t}var $t=[0,1];function zt(t){return t}function Ft(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function Bt(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function Vt(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=Ft(i,r),o=n(a,o)):(r=Ft(r,i),o=n(o,a)),function(t){return o(r(t))}}function Wt(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=Ft(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=c(t,e,1,r)-1;return o[n](i[n](e))}}function Xt(t,e){return function(){var t,e,n,r,i,o,a=$t,s=$t,u=At,l=zt;function c(){return r=Math.min(a.length,s.length)>2?Wt:Vt,i=o=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,u)))(t(l(e)))}return f.invert=function(n){return l(e((o||(o=r(s,a.map(t),_t)))(n)))},f.domain=function(t){return arguments.length?(a=P.call(t,Ot),l===zt||(l=Bt(a)),c()):a.slice()},f.range=function(t){return arguments.length?(s=q.call(t),c()):s.slice()},f.rangeRound=function(t){return s=q.call(t),u=Et,c()},f.clamp=function(t){return arguments.length?(l=t?Bt(a):zt,f):l!==zt},f.interpolate=function(t){return arguments.length?(u=t,c()):u},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}()(t,e)}function Ut(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function Yt(t){return(t=Ut(Math.abs(t)))?t[1]:NaN}var Gt,Qt=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Kt(t){if(!(e=Qt.exec(t)))throw new Error("invalid format: "+t);var e;return new Jt({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Jt(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Zt(t,e){var n=Ut(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}Kt.prototype=Jt.prototype,Jt.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var te={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Zt(100*t,e)},r:Zt,s:function(t,e){var n=Ut(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Gt=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ut(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function ee(t){return t}var ne,re,ie,oe=Array.prototype.map,ae=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];function se(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?ee:(e=oe.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?ee:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(oe.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=Kt(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,g=t.comma,v=t.precision,y=t.trim,m=t.type;"n"===m?(g=!0,m="g"):te[m]||(void 0===v&&(v=12),y=!0,m="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var x="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",b="$"===h?o:/[%p]/.test(m)?u:"",w=te[m],_=/[defgprs%]/.test(m);function k(t){var i,o,u,h=x,k=b;if("c"===m)k=w(t)+k,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:w(Math.abs(t),v),y&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),M&&0==+t&&"+"!==f&&(M=!1),h=(M?"("===f?f:l:"-"===f||"("===f?"":f)+h,k=("s"===m?ae[8+Gt/3]:"")+k+(M&&"("===f?")":""),_)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){k=(46===u?a+t.slice(i+1):t.slice(i))+k,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var T=h.length+t.length+k.length,C=T<d?new Array(d-T+1).join(e):"";switch(g&&p&&(t=r(C+t,C.length?d-k.length:1/0),C=""),n){case"<":t=h+t+k+C;break;case"=":t=h+C+t+k;break;case"^":t=C.slice(0,T=C.length>>1)+h+t+k+C.slice(T);break;default:t=C+h+t+k}return s(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),k.toString=function(){return t+""},k}return{format:f,formatPrefix:function(t,e){var n=f(((t=Kt(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Yt(e)/3))),i=Math.pow(10,-r),o=ae[8+r/3];return function(t){return n(i*t)+o}}}}function ue(t,e,n,r){var i,o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=d?i*=10:o>=g?i*=5:o>=v&&(i*=2),e<t?-i:i}(t,e,n);switch((r=Kt(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Yt(e)/3)))-Yt(Math.abs(t)))}(o,a))||(r.precision=i),ie(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Yt(e)-Yt(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Yt(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return re(r)}function le(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,o,a,s=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=y(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return ue(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,s=i[o],u=i[a];return u<s&&(r=s,s=u,u=r,r=o,o=a,a=r),(r=y(s,u,n))>0?r=y(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=y(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,n)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(u/r)*r,e(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(u*r)/r,e(i)),t},t}function ce(){var t=Xt(zt,zt);return t.copy=function(){return e=t,ce().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown());var e},j.apply(t,arguments),le(t)}ne=se({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),re=ne.format,ie=ne.formatPrefix;var fe=Math.PI,he=2*fe,pe=1e-6,de=he-pe;function ge(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ve(){return new ge}function ye(t){return function(){return t}}function me(t){this._context=t}function xe(t){return new me(t)}function be(t){return t[0]}function we(t){return t[1]}function _e(){var t=be,e=null,n=ye(0),r=we,i=ye(!0),o=null,a=xe,s=null;function u(u){var l,c,f,h,p,d=u.length,g=!1,v=new Array(d),y=new Array(d);for(null==o&&(s=a(p=ve())),l=0;l<=d;++l){if(!(l<d&&i(h=u[l],l,u))===g)if(g=!g)c=l,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),f=l-1;f>=c;--f)s.point(v[f],y[f]);s.lineEnd(),s.areaEnd()}g&&(v[l]=+t(h,l,u),y[l]=+n(h,l,u),s.point(e?+e(h,l,u):v[l],r?+r(h,l,u):y[l]))}if(p)return s=null,p+""||null}function l(){return function(){var t=be,e=we,n=ye(!0),r=null,i=xe,o=null;function a(a){var s,u,l,c=a.length,f=!1;for(null==r&&(o=i(l=ve())),s=0;s<=c;++s)!(s<c&&n(u=a[s],s,a))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(u,s,a),+e(u,s,a));if(l)return o=null,l+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:ye(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:ye(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:ye(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:ye(+n),e=null,u):t},u.x0=function(e){return arguments.length?(t="function"==typeof e?e:ye(+e),u):t},u.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:ye(+t),u):e},u.y=function(t){return arguments.length?(n="function"==typeof t?t:ye(+t),r=null,u):n},u.y0=function(t){return arguments.length?(n="function"==typeof t?t:ye(+t),u):n},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ye(+t),u):r},u.lineX0=u.lineY0=function(){return l().x(t).y(n)},u.lineY1=function(){return l().x(t).y(r)},u.lineX1=function(){return l().x(e).y(n)},u.defined=function(t){return arguments.length?(i="function"==typeof t?t:ye(!!t),u):i},u.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),u):a},u.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),u):o},u}ge.prototype=ve.prototype={constructor:ge,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,s=n-t,u=r-e,l=o-t,c=a-e,f=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>pe)if(Math.abs(c*s-u*l)>pe&&i){var h=n-o,p=r-a,d=s*s+u*u,g=h*h+p*p,v=Math.sqrt(d),y=Math.sqrt(f),m=i*Math.tan((fe-Math.acos((d+f-g)/(2*v*y)))/2),x=m/y,b=m/v;Math.abs(x-1)>pe&&(this._+="L"+(t+x*l)+","+(e+x*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>l*p)+","+(this._x1=t+b*s)+","+(this._y1=e+b*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),s=n*Math.sin(r),u=t+a,l=e+s,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>pe||Math.abs(this._y1-l)>pe)&&(this._+="L"+u+","+l),n&&(f<0&&(f=f%he+he),f>de?this._+="A"+n+","+n+",0,1,"+c+","+(t-a)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):f>pe&&(this._+="A"+n+","+n+",0,"+ +(f>=fe)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}},me.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var ke=Array.prototype.slice;function Me(t){return t}var Te=1,Ce=2,Ae=3,Ee=4,Se=1e-6;function Ne(t){return"translate("+(t+.5)+",0)"}function De(t){return"translate(0,"+(t+.5)+")"}function je(t){return function(e){return+t(e)}}function Le(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function Pe(){return!this.__axis}function qe(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,u=t===Te||t===Ee?-1:1,l=t===Ee||t===Ce?"x":"y",c=t===Te||t===Ae?Ne:De;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,p=null==i?e.tickFormat?e.tickFormat.apply(e,n):Me:i,d=Math.max(o,0)+s,g=e.range(),v=+g[0]+.5,y=+g[g.length-1]+.5,m=(e.bandwidth?Le:je)(e.copy()),x=f.selection?f.selection():f,b=x.selectAll(".domain").data([null]),w=x.selectAll(".tick").data(h,e).order(),_=w.exit(),k=w.enter().append("g").attr("class","tick"),M=w.select("line"),T=w.select("text");b=b.merge(b.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(k),M=M.merge(k.append("line").attr("stroke","currentColor").attr(l+"2",u*o)),T=T.merge(k.append("text").attr("fill","currentColor").attr(l,u*d).attr("dy",t===Te?"0em":t===Ae?"0.71em":"0.32em")),f!==x&&(b=b.transition(f),w=w.transition(f),M=M.transition(f),T=T.transition(f),_=_.transition(f).attr("opacity",Se).attr("transform",(function(t){return isFinite(t=m(t))?c(t):this.getAttribute("transform")})),k.attr("opacity",Se).attr("transform",(function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:m(t))}))),_.remove(),b.attr("d",t===Ee||t==Ce?a?"M"+u*a+","+v+"H0.5V"+y+"H"+u*a:"M0.5,"+v+"V"+y:a?"M"+v+","+u*a+"V0.5H"+y+"V"+u*a:"M"+v+",0.5H"+y),w.attr("opacity",1).attr("transform",(function(t){return c(m(t))})),M.attr(l+"2",u*o),T.attr(l,u*d).text(p),x.filter(Pe).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Ce?"start":t===Ee?"end":"middle"),x.each((function(){this.__axis=m}))}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=ke.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:ke.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:ke.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f}function Re(t){return qe(Ae,t)}var He="http://www.w3.org/1999/xhtml",Ie={svg:"http://www.w3.org/2000/svg",xhtml:He,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Oe(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Ie.hasOwnProperty(e)?{space:Ie[e],local:t}:t}function $e(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===He&&e.documentElement.namespaceURI===He?e.createElement(t):e.createElementNS(n,t)}}function ze(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Fe(t){var e=Oe(t);return(e.local?ze:$e)(e)}function Be(){}function Ve(t){return null==t?Be:function(){return this.querySelector(t)}}function We(){return[]}function Xe(t){return null==t?We:function(){return this.querySelectorAll(t)}}function Ue(t){return function(){return this.matches(t)}}function Ye(t){return new Array(t.length)}function Ge(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}Ge.prototype={constructor:Ge,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Qe="$";function Ke(t,e,n,r,i,o){for(var a,s=0,u=e.length,l=o.length;s<l;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new Ge(t,o[s]);for(;s<u;++s)(a=e[s])&&(i[s]=a)}function Je(t,e,n,r,i,o,a){var s,u,l,c={},f=e.length,h=o.length,p=new Array(f);for(s=0;s<f;++s)(u=e[s])&&(p[s]=l=Qe+a.call(u,u.__data__,s,e),l in c?i[s]=u:c[l]=u);for(s=0;s<h;++s)(u=c[l=Qe+a.call(t,o[s],s,o)])?(r[s]=u,u.__data__=o[s],c[l]=null):n[s]=new Ge(t,o[s]);for(s=0;s<f;++s)(u=e[s])&&c[p[s]]===u&&(i[s]=u)}function Ze(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function tn(t){return function(){this.removeAttribute(t)}}function en(t){return function(){this.removeAttributeNS(t.space,t.local)}}function nn(t,e){return function(){this.setAttribute(t,e)}}function rn(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function on(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function an(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function sn(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function un(t){return function(){this.style.removeProperty(t)}}function ln(t,e,n){return function(){this.style.setProperty(t,e,n)}}function cn(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function fn(t,e){return t.style.getPropertyValue(e)||sn(t).getComputedStyle(t,null).getPropertyValue(e)}function hn(t){return function(){delete this[t]}}function pn(t,e){return function(){this[t]=e}}function dn(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function gn(t){return t.trim().split(/^|\s+/)}function vn(t){return t.classList||new yn(t)}function yn(t){this._node=t,this._names=gn(t.getAttribute("class")||"")}function mn(t,e){for(var n=vn(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function xn(t,e){for(var n=vn(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function bn(t){return function(){mn(this,t)}}function wn(t){return function(){xn(this,t)}}function _n(t,e){return function(){(e.apply(this,arguments)?mn:xn)(this,t)}}function kn(){this.textContent=""}function Mn(t){return function(){this.textContent=t}}function Tn(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Cn(){this.innerHTML=""}function An(t){return function(){this.innerHTML=t}}function En(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Sn(){this.nextSibling&&this.parentNode.appendChild(this)}function Nn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Dn(){return null}function jn(){var t=this.parentNode;t&&t.removeChild(this)}function Ln(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Pn(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}yn.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var qn={},Rn=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(qn={mouseenter:"mouseover",mouseleave:"mouseout"}));function Hn(t,e,n){return t=In(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function In(t,e,n){return function(r){var i=Rn;Rn=r;try{t.call(this,this.__data__,e,n)}finally{Rn=i}}}function On(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function $n(t,e,n){var r=qn.hasOwnProperty(t.type)?Hn:In;return function(i,o,a){var s,u=this.__on,l=r(e,o,a);if(u)for(var c=0,f=u.length;c<f;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=n),void(s.value=e);this.addEventListener(t.type,l,n),s={type:t.type,name:t.name,value:e,listener:l,capture:n},u?u.push(s):this.__on=[s]}}function zn(t,e,n){var r=sn(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Fn(t,e){return function(){return zn(this,t,e)}}function Bn(t,e){return function(){return zn(this,t,e.apply(this,arguments))}}var Vn=[null];function Wn(t,e){this._groups=t,this._parents=e}function Xn(){return new Wn([[document.documentElement]],Vn)}function Un(t){return"string"==typeof t?new Wn([[document.querySelector(t)]],[document.documentElement]):new Wn([[t]],Vn)}function Yn(){for(var t,e=Rn;t=e.sourceEvent;)e=t;return e}function Gn(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]}function Qn(t){var e=Yn();return e.changedTouches&&(e=e.changedTouches[0]),Gn(t,e)}Wn.prototype=Xn.prototype={constructor:Wn,select:function(t){"function"!=typeof t&&(t=Ve(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new Wn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=Xe(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new Wn(r,i)},filter:function(t){"function"!=typeof t&&(t=Ue(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new Wn(r,this._parents)},data:function(t,e){if(!t)return p=new Array(this.size()),l=-1,this.each((function(t){p[++l]=t})),p;var n=e?Je:Ke,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var o=i.length,a=new Array(o),s=new Array(o),u=new Array(o),l=0;l<o;++l){var c=r[l],f=i[l],h=f.length,p=t.call(c,c&&c.__data__,l,r),d=p.length,g=s[l]=new Array(d),v=a[l]=new Array(d);n(c,f,g,v,u[l]=new Array(h),p,e);for(var y,m,x=0,b=0;x<d;++x)if(y=g[x]){for(x>=b&&(b=x+1);!(m=v[b])&&++b<d;);y._next=m||null}}return(a=new Wn(a,r))._enter=s,a._exit=u,a},enter:function(){return new Wn(this._enter||this._groups.map(Ye),this._parents)},exit:function(){return new Wn(this._exit||this._groups.map(Ye),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=e[s],c=n[s],f=l.length,h=a[s]=new Array(f),p=0;p<f;++p)(u=l[p]||c[p])&&(h[p]=u);for(;s<r;++s)a[s]=e[s];return new Wn(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=Ze);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(e)}return new Wn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=Oe(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?en:tn:"function"==typeof e?n.local?an:on:n.local?rn:nn)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?un:"function"==typeof e?cn:ln)(t,e,null==n?"":n)):fn(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?hn:"function"==typeof e?dn:pn)(t,e)):this.node()[t]},classed:function(t,e){var n=gn(t+"");if(arguments.length<2){for(var r=vn(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?_n:e?bn:wn)(n,e))},text:function(t){return arguments.length?this.each(null==t?kn:("function"==typeof t?Tn:Mn)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Cn:("function"==typeof t?En:An)(t)):this.node().innerHTML},raise:function(){return this.each(Sn)},lower:function(){return this.each(Nn)},append:function(t){var e="function"==typeof t?t:Fe(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:Fe(t),r=null==e?Dn:"function"==typeof e?e:Ve(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(jn)},clone:function(t){return this.select(t?Pn:Ln)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?$n:On,null==n&&(n=!1),r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?Bn:Fn)(t,e))}};var Kn={value:function(){}};function Jn(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Zn(r)}function Zn(t){this._=t}function tr(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function er(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Kn,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}function nr(){Rn.preventDefault(),Rn.stopImmediatePropagation()}Zn.prototype=Jn.prototype={constructor:Zn,on:function(t,e){var n,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<s;)if(n=(t=o[a]).type)i[n]=er(i[n],t.name,e);else if(null==e)for(n in i)i[n]=er(i[n],t.name,null);return this}for(;++a<s;)if((n=(t=o[a]).type)&&(n=tr(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Zn(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var rr,ir,or=0,ar=0,sr=0,ur=1e3,lr=0,cr=0,fr=0,hr="object"==typeof performance&&performance.now?performance:Date,pr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function dr(){return cr||(pr(gr),cr=hr.now()+fr)}function gr(){cr=0}function vr(){this._call=this._time=this._next=null}function yr(t,e,n){var r=new vr;return r.restart(t,e,n),r}function mr(){cr=(lr=hr.now())+fr,or=ar=0;try{!function(){dr(),++or;for(var t,e=rr;e;)(t=cr-e._time)>=0&&e._call.call(null,t),e=e._next;--or}()}finally{or=0,function(){var t,e,n=rr,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:rr=e);ir=t,br(r)}(),cr=0}}function xr(){var t=hr.now(),e=t-lr;e>ur&&(fr-=e,lr=t)}function br(t){or||(ar&&(ar=clearTimeout(ar)),t-cr>24?(t<1/0&&(ar=setTimeout(mr,t-hr.now()-fr)),sr&&(sr=clearInterval(sr))):(sr||(lr=hr.now(),sr=setInterval(xr,ur)),or=1,pr(mr)))}function wr(t,e,n){var r=new vr;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r}vr.prototype=yr.prototype={constructor:vr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?dr():+n)+(null==e?0:+e),this._next||ir===this||(ir?ir._next=this:rr=this,ir=this),this._call=t,this._time=n,br()},stop:function(){this._call&&(this._call=null,this._time=1/0,br())}};var _r=Jn("start","end","cancel","interrupt"),kr=[],Mr=0,Tr=1,Cr=2,Ar=3,Er=4,Sr=5,Nr=6;function Dr(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(t){n.state=Tr,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)}function a(o){var l,c,f,h;if(n.state!==Tr)return u();for(l in i)if((h=i[l]).name===n.name){if(h.state===Ar)return wr(a);h.state===Er?(h.state=Nr,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[l]):+l<e&&(h.state=Nr,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[l])}if(wr((function(){n.state===Ar&&(n.state=Er,n.timer.restart(s,n.delay,n.time),s(o))})),n.state=Cr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Cr){for(n.state=Ar,r=new Array(f=n.tween.length),l=0,c=-1;l<f;++l)(h=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function s(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=Sr,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===Sr&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=Nr,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=yr(o,0,n.time)}(t,n,{name:e,index:r,group:i,on:_r,tween:kr,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Mr})}function jr(t,e){var n=Pr(t,e);if(n.state>Mr)throw new Error("too late; already scheduled");return n}function Lr(t,e){var n=Pr(t,e);if(n.state>Ar)throw new Error("too late; already running");return n}function Pr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function qr(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>Cr&&n.state<Sr,n.state=Nr,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}function Rr(t,e){var n,r;return function(){var i=Lr(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function Hr(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Lr(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},u=0,l=i.length;u<l;++u)if(i[u].name===e){i[u]=s;break}u===l&&i.push(s)}o.tween=i}}function Ir(t,e,n){var r=t._id;return t.each((function(){var t=Lr(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Pr(t,r).value[e]}}function Or(t,e){var n;return("number"==typeof e?_t:e instanceof rt?mt:(n=rt(e))?(e=n,mt):Ct)(t,e)}function $r(t){return function(){this.removeAttribute(t)}}function zr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Fr(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function Br(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function Vr(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttribute(t)}}function Wr(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttributeNS(t.space,t.local)}}function Xr(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,i)),n}return i._value=e,i}function Ur(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,i)),n}return i._value=e,i}function Yr(t,e){return function(){jr(this,t).delay=+e.apply(this,arguments)}}function Gr(t,e){return e=+e,function(){jr(this,t).delay=e}}function Qr(t,e){return function(){Lr(this,t).duration=+e.apply(this,arguments)}}function Kr(t,e){return e=+e,function(){Lr(this,t).duration=e}}var Jr=Xn.prototype.constructor;function Zr(t){return function(){this.style.removeProperty(t)}}var ti=0;function ei(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function ni(){return++ti}var ri=Xn.prototype;ei.prototype={constructor:ei,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Ve(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,f=o[a]=new Array(c),h=0;h<c;++h)(s=l[h])&&(u=t.call(s,s.__data__,h,l))&&("__data__"in s&&(u.__data__=s.__data__),f[h]=u,Dr(f[h],e,n,h,f,Pr(s,n)));return new ei(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Xe(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,f=0;f<c;++f)if(u=l[f]){for(var h,p=t.call(u,u.__data__,f,l),d=Pr(u,n),g=0,v=p.length;g<v;++g)(h=p[g])&&Dr(h,e,n,g,p,d);o.push(p),a.push(u)}return new ei(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=Ue(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new ei(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=e[s],c=n[s],f=l.length,h=a[s]=new Array(f),p=0;p<f;++p)(u=l[p]||c[p])&&(h[p]=u);for(;s<r;++s)a[s]=e[s];return new ei(a,this._parents,this._name,this._id)},selection:function(){return new Jr(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=ni(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=Pr(a,e);Dr(a,t,n,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new ei(r,this._parents,t,n)},call:ri.call,nodes:ri.nodes,node:ri.node,size:ri.size,empty:ri.empty,each:ri.each,on:function(t,e){var n=this._id;return arguments.length<2?Pr(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?jr:Lr;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}(n,t,e))},attr:function(t,e){var n=Oe(t),r="transform"===n?It:Or;return this.attrTween(t,"function"==typeof e?(n.local?Wr:Vr)(n,r,Ir(this,"attr."+t,e)):null==e?(n.local?zr:$r)(n):(n.local?Br:Fr)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Oe(t);return this.tween(n,(r.local?Xr:Ur)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Ht:Or;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=fn(this,t),a=(this.style.removeProperty(t),fn(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,Zr(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=fn(this,t),s=n(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=fn(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=e(r=a,s))}}(t,r,Ir(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var u=Lr(this,t),l=u.on,c=null==u.value[a]?o||(o=Zr(e)):void 0;l===n&&i===c||(r=(n=l).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=fn(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,o,n)),r}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Ir(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Pr(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?Rr:Hr)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Yr:Gr)(e,t)):Pr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Qr:Kr)(e,t)):Pr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Lr(this,t).ease=e}}(e,t)):Pr(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};n.each((function(){var n=Lr(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(u)),n.on=e}))}))}};var ii={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function oi(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return ii.time=dr(),ii;return n}function ai(t){return function(){return t}}function si(t,e,n){this.target=t,this.type=e,this.selection=n}function ui(){Rn.stopImmediatePropagation()}function li(){Rn.preventDefault(),Rn.stopImmediatePropagation()}Xn.prototype.interrupt=function(t){return this.each((function(){qr(this,t)}))},Xn.prototype.transition=function(t){var e,n;t instanceof ei?(e=t._id,t=t._name):(e=ni(),(n=ii).time=dr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&Dr(a,t,e,l,s,n||oi(a,e));return new ei(r,this._parents,t,e)};var ci={name:"drag"},fi={name:"space"},hi={name:"handle"},pi={name:"center"};function di(t){return[+t[0],+t[1]]}function gi(t){return[di(t[0]),di(t[1])]}function vi(t){return function(e){return function(t,e,n){arguments.length<3&&(n=e,e=Yn().changedTouches);for(var r,i=0,o=e?e.length:0;i<o;++i)if((r=e[i]).identifier===n)return Gn(t,r);return null}(e,Rn.touches,t)}}var yi={name:"x",handles:["w","e"].map(Ti),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},mi={name:"y",handles:["n","s"].map(Ti),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},xi={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Ti),input:function(t){return null==t?null:gi(t)},output:function(t){return t}},bi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},wi={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},_i={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},ki={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Mi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Ti(t){return{type:t}}function Ci(){return!Rn.ctrlKey&&!Rn.button}function Ai(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Ei(){return navigator.maxTouchPoints||"ontouchstart"in this}function Si(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ni(){return function(t){var e,n=Ai,r=Ci,i=Ei,o=!0,a=Jn("start","brush","end"),s=6;function u(e){var n=e.property("__brush",g).selectAll(".overlay").data([Ti("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",bi.overlay).merge(n).each((function(){var t=Si(this).extent;Un(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([Ti("selection")]).enter().append("rect").attr("class","selection").attr("cursor",bi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return bi[t.type]})),e.each(l).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",p).on("touchend.brush touchcancel.brush",d).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function l(){var t=Un(this),e=Si(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-s/2:e[0][0]-s/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-s/2:e[0][1]-s/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+s:s})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+s:s}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,e,n){var r=t.__brush.emitter;return!r||n&&r.clean?new f(t,e,n):r}function f(t,e,n){this.that=t,this.args=e,this.state=t.__brush,this.active=0,this.clean=n}function h(){if((!e||Rn.touches)&&r.apply(this,arguments)){var n,i,a,s,u,f,h,p,d,g,v,y=this,m=Rn.target.__data__.type,x="selection"===(o&&Rn.metaKey?m="overlay":m)?ci:o&&Rn.altKey?pi:hi,b=t===mi?null:ki[m],w=t===yi?null:Mi[m],_=Si(y),k=_.extent,M=_.selection,T=k[0][0],C=k[0][1],A=k[1][0],E=k[1][1],S=0,N=0,D=b&&w&&o&&Rn.shiftKey,j=Rn.touches?vi(Rn.changedTouches[0].identifier):Qn,L=j(y),P=L,q=c(y,arguments,!0).beforestart();"overlay"===m?(M&&(d=!0),_.selection=M=[[n=t===mi?T:L[0],a=t===yi?C:L[1]],[u=t===mi?A:n,h=t===yi?E:a]]):(n=M[0][0],a=M[0][1],u=M[1][0],h=M[1][1]),i=n,s=a,f=u,p=h;var R=Un(y).attr("pointer-events","none"),H=R.selectAll(".overlay").attr("cursor",bi[m]);if(Rn.touches)q.moved=O,q.ended=z;else{var I=Un(Rn.view).on("mousemove.brush",O,!0).on("mouseup.brush",z,!0);o&&I.on("keydown.brush",F,!0).on("keyup.brush",B,!0),function(t){var e=t.document.documentElement,n=Un(t).on("dragstart.drag",nr,!0);"onselectstart"in e?n.on("selectstart.drag",nr,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(Rn.view)}ui(),qr(y),l.call(y),q.start()}function O(){var t=j(y);!D||g||v||(Math.abs(t[0]-P[0])>Math.abs(t[1]-P[1])?v=!0:g=!0),P=t,d=!0,li(),$()}function $(){var t;switch(S=P[0]-L[0],N=P[1]-L[1],x){case fi:case ci:b&&(S=Math.max(T-n,Math.min(A-u,S)),i=n+S,f=u+S),w&&(N=Math.max(C-a,Math.min(E-h,N)),s=a+N,p=h+N);break;case hi:b<0?(S=Math.max(T-n,Math.min(A-n,S)),i=n+S,f=u):b>0&&(S=Math.max(T-u,Math.min(A-u,S)),i=n,f=u+S),w<0?(N=Math.max(C-a,Math.min(E-a,N)),s=a+N,p=h):w>0&&(N=Math.max(C-h,Math.min(E-h,N)),s=a,p=h+N);break;case pi:b&&(i=Math.max(T,Math.min(A,n-S*b)),f=Math.max(T,Math.min(A,u+S*b))),w&&(s=Math.max(C,Math.min(E,a-N*w)),p=Math.max(C,Math.min(E,h+N*w)))}f<i&&(b*=-1,t=n,n=u,u=t,t=i,i=f,f=t,m in wi&&H.attr("cursor",bi[m=wi[m]])),p<s&&(w*=-1,t=a,a=h,h=t,t=s,s=p,p=t,m in _i&&H.attr("cursor",bi[m=_i[m]])),_.selection&&(M=_.selection),g&&(i=M[0][0],f=M[1][0]),v&&(s=M[0][1],p=M[1][1]),M[0][0]===i&&M[0][1]===s&&M[1][0]===f&&M[1][1]===p||(_.selection=[[i,s],[f,p]],l.call(y),q.brush())}function z(){if(ui(),Rn.touches){if(Rn.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else!function(t,e){var n=t.document.documentElement,r=Un(t).on("dragstart.drag",null);e&&(r.on("click.drag",nr,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(Rn.view,d),I.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);R.attr("pointer-events","all"),H.attr("cursor",bi.overlay),_.selection&&(M=_.selection),function(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}(M)&&(_.selection=null,l.call(y)),q.end()}function F(){switch(Rn.keyCode){case 16:D=b&&w;break;case 18:x===hi&&(b&&(u=f-S*b,n=i+S*b),w&&(h=p-N*w,a=s+N*w),x=pi,$());break;case 32:x!==hi&&x!==pi||(b<0?u=f-S:b>0&&(n=i-S),w<0?h=p-N:w>0&&(a=s-N),x=fi,H.attr("cursor",bi.selection),$());break;default:return}li()}function B(){switch(Rn.keyCode){case 16:D&&(g=v=D=!1,$());break;case 18:x===pi&&(b<0?u=f:b>0&&(n=i),w<0?h=p:w>0&&(a=s),x=hi,$());break;case 32:x===fi&&(Rn.altKey?(b&&(u=f-S*b,n=i+S*b),w&&(h=p-N*w,a=s+N*w),x=pi):(b<0?u=f:b>0&&(n=i),w<0?h=p:w>0&&(a=s),x=hi),H.attr("cursor",bi[m]),$());break;default:return}li()}}function p(){c(this,arguments).moved()}function d(){c(this,arguments).ended()}function g(){var e=this.__brush||{selection:null};return e.extent=gi(n.apply(this,arguments)),e.dim=t,e}return u.move=function(e,n){e.selection?e.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var e=this,r=e.__brush,i=c(e,arguments),o=r.selection,a=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),s=At(o,a);function u(t){r.selection=1===t&&null===a?null:s(t),l.call(e),i.brush()}return null!==o&&null!==a?u:u(1)})):e.each((function(){var e=this,r=arguments,i=e.__brush,o=t.input("function"==typeof n?n.apply(e,r):n,i.extent),a=c(e,r).beforestart();qr(e),i.selection=null===o?null:o,l.call(e),a.start().brush().end()}))},u.clear=function(t){u.move(t,null)},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,r){var i=Rn;t.sourceEvent=Rn,Rn=t;try{return e.apply(n,r)}finally{Rn=i}}(new si(u,e,t.output(this.state.selection)),a.apply,a,[e,this.that,this.args])}},u.extent=function(t){return arguments.length?(n="function"==typeof t?t:ai(gi(t)),u):n},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:ai(!!t),u):r},u.touchable=function(t){return arguments.length?(i="function"==typeof t?t:ai(!!t),u):i},u.handleSize=function(t){return arguments.length?(s=+t,u):s},u.keyModifiers=function(t){return arguments.length?(o=!!t,u):o},u.on=function(){var t=a.on.apply(a,arguments);return t===a?u:t},u}(xi)}function Di(){return Math.random()}!function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(Di);var ji=function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(Di);!function t(e){function n(){var t=ji.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(Di);var Li=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(Di);function Pi(){this._=null}function qi(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Ri(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Hi(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Ii(t){for(;t.L;)t=t.L;return t}function Oi(t,e,n,r){var i=[null,null],o=lo.push(i)-1;return i.left=t,i.right=e,n&&zi(i,t,e,n),r&&zi(i,e,t,r),so[t.index].halfedges.push(o),so[e.index].halfedges.push(o),i}function $i(t,e,n){var r=[e,n];return r.left=t,r}function zi(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Fi(t,e,n,r,i){var o,a=t[0],s=t[1],u=a[0],l=a[1],c=0,f=1,h=s[0]-u,p=s[1]-l;if(o=e-u,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>c&&(c=o)}if(o=r-u,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<f&&(f=o)}if(o=n-l,p||!(o>0)){if(o/=p,p<0){if(o<c)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>c&&(c=o)}if(o=i-l,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>c&&(c=o)}else if(p>0){if(o<c)return;o<f&&(f=o)}return!(c>0||f<1)||(c>0&&(t[0]=[u+c*h,l+c*p]),f<1&&(t[1]=[u+f*h,l+f*p]),!0)}}}}}function Bi(t,e,n,r,i){var o=t[1];if(o)return!0;var a,s,u=t[0],l=t.left,c=t.right,f=l[0],h=l[1],p=c[0],d=c[1],g=(f+p)/2,v=(h+d)/2;if(d===h){if(g<e||g>=r)return;if(f>p){if(u){if(u[1]>=i)return}else u=[g,n];o=[g,i]}else{if(u){if(u[1]<n)return}else u=[g,i];o=[g,n]}}else if(s=v-(a=(f-p)/(d-h))*g,a<-1||a>1)if(f>p){if(u){if(u[1]>=i)return}else u=[(n-s)/a,n];o=[(i-s)/a,i]}else{if(u){if(u[1]<n)return}else u=[(i-s)/a,i];o=[(n-s)/a,n]}else if(h<d){if(u){if(u[0]>=r)return}else u=[e,a*e+s];o=[r,a*r+s]}else{if(u){if(u[0]<e)return}else u=[r,a*r+s];o=[e,a*e+s]}return t[0]=u,t[1]=o,!0}function Vi(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Wi(t,e){return e[+(e.left!==t.site)]}function Xi(t,e){return e[+(e.left===t.site)]}!function t(e){function n(t){var n=Li.source(e)(t);return function(){return n()/t}}return n.source=t,n}(Di),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(Di),Pi.prototype={constructor:Pi,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Ii(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Ri(this,n),n=(t=n).U),n.C=!1,r.C=!0,Hi(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Hi(this,n),n=(t=n).U),n.C=!1,r.C=!0,Ri(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Ii(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Ri(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Hi(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Ri(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Hi(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Ri(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Hi(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Ui,Yi=[];function Gi(){qi(this),this.x=this.y=this.arc=this.site=this.cy=null}function Qi(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i[0],s=i[1],u=r[0]-a,l=r[1]-s,c=o[0]-a,f=o[1]-s,h=2*(u*f-l*c);if(!(h>=-fo)){var p=u*u+l*l,d=c*c+f*f,g=(f*p-l*d)/h,v=(u*d-c*p)/h,y=Yi.pop()||new Gi;y.arc=t,y.site=i,y.x=g+a,y.y=(y.cy=v+s)+Math.sqrt(g*g+v*v),t.circle=y;for(var m=null,x=uo._;x;)if(y.y<x.y||y.y===x.y&&y.x<=x.x){if(!x.L){m=x.P;break}x=x.L}else{if(!x.R){m=x;break}x=x.R}uo.insert(m,y),m||(Ui=y)}}}}function Ki(t){var e=t.circle;e&&(e.P||(Ui=e.N),uo.remove(e),Yi.push(e),qi(e),t.circle=null)}var Ji=[];function Zi(){qi(this),this.edge=this.site=this.circle=null}function to(t){var e=Ji.pop()||new Zi;return e.site=t,e}function eo(t){Ki(t),ao.remove(t),Ji.push(t),qi(t)}function no(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,a=t.N,s=[t];eo(t);for(var u=o;u.circle&&Math.abs(n-u.circle.x)<co&&Math.abs(r-u.circle.cy)<co;)o=u.P,s.unshift(u),eo(u),u=o;s.unshift(u),Ki(u);for(var l=a;l.circle&&Math.abs(n-l.circle.x)<co&&Math.abs(r-l.circle.cy)<co;)a=l.N,s.push(l),eo(l),l=a;s.push(l),Ki(l);var c,f=s.length;for(c=1;c<f;++c)l=s[c],u=s[c-1],zi(l.edge,u.site,l.site,i);u=s[0],(l=s[f-1]).edge=Oi(u.site,l.site,null,i),Qi(u),Qi(l)}function ro(t){for(var e,n,r,i,o=t[0],a=t[1],s=ao._;s;)if((r=io(s,a)-o)>co)s=s.L;else{if(!((i=o-oo(s,a))>co)){r>-co?(e=s.P,n=s):i>-co?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){so[t.index]={site:t,halfedges:[]}}(t);var u=to(t);if(ao.insert(e,u),e||n){if(e===n)return Ki(e),n=to(e.site),ao.insert(u,n),u.edge=n.edge=Oi(e.site,u.site),Qi(e),void Qi(n);if(n){Ki(e),Ki(n);var l=e.site,c=l[0],f=l[1],h=t[0]-c,p=t[1]-f,d=n.site,g=d[0]-c,v=d[1]-f,y=2*(h*v-p*g),m=h*h+p*p,x=g*g+v*v,b=[(v*m-p*x)/y+c,(h*x-g*m)/y+f];zi(n.edge,l,d,b),u.edge=Oi(l,t,null,b),n.edge=Oi(t,d,null,b),Qi(e),Qi(n)}else u.edge=Oi(e.site,u.site)}}function io(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var s=(n=a.site)[0],u=n[1],l=u-e;if(!l)return s;var c=s-r,f=1/o-1/l,h=c/l;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*l)-u+l/2+i-o/2)))/f+r:(r+s)/2}function oo(t,e){var n=t.N;if(n)return io(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var ao,so,uo,lo,co=1e-6,fo=1e-12;function ho(t,e){return e[1]-t[1]||e[0]-t[0]}function po(t,e){var n,r,i,o=t.sort(ho).pop();for(lo=[],so=new Array(t.length),ao=new Pi,uo=new Pi;;)if(i=Ui,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(ro(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;no(i.arc)}if(function(){for(var t,e,n,r,i=0,o=so.length;i<o;++i)if((t=so[i])&&(r=(e=t.halfedges).length)){var a=new Array(r),s=new Array(r);for(n=0;n<r;++n)a[n]=n,s[n]=Vi(t,lo[e[n]]);for(a.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[a[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var a=+e[0][0],s=+e[0][1],u=+e[1][0],l=+e[1][1];!function(t,e,n,r){for(var i,o=lo.length;o--;)Bi(i=lo[o],t,e,n,r)&&Fi(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>co||Math.abs(i[0][1]-i[1][1])>co)||delete lo[o]}(a,s,u,l),function(t,e,n,r){var i,o,a,s,u,l,c,f,h,p,d,g,v=so.length,y=!0;for(i=0;i<v;++i)if(o=so[i]){for(a=o.site,s=(u=o.halfedges).length;s--;)lo[u[s]]||u.splice(s,1);for(s=0,l=u.length;s<l;)d=(p=Xi(o,lo[u[s]]))[0],g=p[1],f=(c=Wi(o,lo[u[++s%l]]))[0],h=c[1],(Math.abs(d-f)>co||Math.abs(g-h)>co)&&(u.splice(s,0,lo.push($i(a,p,Math.abs(d-t)<co&&r-g>co?[t,Math.abs(f-t)<co?h:r]:Math.abs(g-r)<co&&n-d>co?[Math.abs(h-r)<co?f:n,r]:Math.abs(d-n)<co&&g-e>co?[n,Math.abs(f-n)<co?h:e]:Math.abs(g-e)<co&&d-t>co?[Math.abs(h-e)<co?f:t,e]:null))-1),++l);l&&(y=!1)}if(y){var m,x,b,w=1/0;for(i=0,y=null;i<v;++i)(o=so[i])&&(b=(m=(a=o.site)[0]-t)*m+(x=a[1]-e)*x)<w&&(w=b,y=o);if(y){var _=[t,e],k=[t,r],M=[n,r],T=[n,e];y.halfedges.push(lo.push($i(a=y.site,_,k))-1,lo.push($i(a,k,M))-1,lo.push($i(a,M,T))-1,lo.push($i(a,T,_))-1)}}for(i=0;i<v;++i)(o=so[i])&&(o.halfedges.length||delete so[i])}(a,s,u,l)}this.edges=lo,this.cells=so,ao=uo=lo=so=null}function go(t,e,n){this.k=t,this.x=e,this.y=n}po.prototype={constructor:po,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return Wi(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(o=(i=n.halfedges).length)for(var i,o,a,s,u,l,c=n.site,f=-1,h=e[i[o-1]],p=h.left===c?h.right:h.left;++f<o;)a=p,p=(h=e[i[f]]).left===c?h.right:h.left,a&&p&&r<a.index&&r<p.index&&(u=a,l=p,((s=c)[0]-l[0])*(u[1]-s[1])-(s[0]-u[0])*(l[1]-s[1])<0)&&t.push([c.data,a.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,i,o=this,a=o._found||0,s=o.cells.length;!(i=o.cells[a]);)if(++a>=s)return null;var u=t-i.site[0],l=e-i.site[1],c=u*u+l*l;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(n){var r=o.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var u=t-s[0],l=e-s[1],f=u*u+l*l;f<c&&(c=f,a=s.index)}}))}while(null!==a);return o._found=r,null==n||c<=n*n?i.site:null}},go.prototype={constructor:go,scale:function(t){return 1===t?this:new go(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new go(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},go.prototype;const vo=function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)},yo=function(t){let e=(m(t,.75)-m(t,.25))/1.34;return 1.06*Math.min(h(t),e)*Math.pow(t.length,-.2)};class mo{constructor(t,e=!1,n=30,r=-40,i=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),Un("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){Un("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=Rn.pageX,e=Rn.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY,Un("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){Un("#"+this.id).html(t)}}class xo{constructor(t,e=void 0,n=!1){o(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=o("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,i="fa-download"){this.createButton(t,i),Un(`#${t}`).on("click",(()=>{this.downloadSvg(e,n,r)})).on("mouseover",(()=>{this.tooltip.show("Download the plot")})).on("mouseout",(()=>{this.tooltip.hide()}))}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n),Un(`#${t}`).on("click",e).on("mouseover",(()=>{this.tooltip.show("Reset the scales")})).on("mouseout",(()=>{this.tooltip.hide()}))}createButton(t,e="fa-download",n="need to define",r=void 0){const i=o("<a/>").attr("id",t).addClass("btn btn-default btn-light btn-sm").appendTo(this.bar);return e.startsWith("fa-")?o("<i/>").addClass(`fa ${e}`).appendTo(i):i.text(e),this.buttons[t]=i,"foo"!=t&&Un(`#${t}`).on("click",(()=>{void 0===r?alert("need to define the click event"):r()})).on("mouseover",(()=>{this.tooltip.show(n)})).on("mouseout",(()=>{this.tooltip.hide()})),i}attachTooltip(t){this.tooltip=t}downloadSvg(t,n,r){console.log(t,n,r);let i=o(o(o(""+("#"+t)))[0]),a=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),s=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var i=n[r].cssRules,a=0;a<i.length;a++){var s=i[a];if(void 0!==s.style){var u,l=void 0===s.selectorText?s.selectorText:s.selectorText.replace(`#${t[0].id} `,"");try{u=o(t).find(l)}catch(t){u=[]}u.length>0&&(e+=s.selectorText+" { "+s.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var c=document.createElement("style");return c.setAttribute("type","text/css"),c.innerHTML="<![CDATA[\n"+e+"\n]]>",c}(i.get());a.prepend(s),o("#"+r).html("").hide();let u=o(`#${r}`).append(a).html(),l=new Blob([u],{type:"image/svg+xml"});e.saveAs(l,n),o(`#${r}`).html("").hide()}}class bo{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0,this.groups=T().key((t=>{if(void 0===t.group)throw"required attribute does not exist";return t.group})).entries(this.data)}setYDomain(t){if(void 0===t||0==t.length){let e=[];this.data.forEach((t=>e=e.concat(t.values))),t=p(e)}return t}render(t,e=500,n=357,r=void 0,i=void 0,o={show:!0,angle:30,paddingInner:.01,paddingOuter:.01,textAnchor:"start",adjustHeight:0,showLabels:!0,showTicks:!0},a={show:!0,angle:0,paddingInner:0,paddingOuter:0,sort:!1,adjustHeight:5},s={label:"Y label"},u={show:!1,angle:0,adjustHeight:void 0},l=!1,c=!1,f=!1,h=!1,p=0,d=void 0,g="kdeScott"){this.dom=t,this.width=e,this.height=n,this.config={x:o,subx:a,y:s,size:u},this.scale={x:I().range([0,this.width]).domain(r||this.groups.map((t=>t.key))).paddingOuter(this.config.x.paddingOuter).paddingInner(this.config.x.paddingInner),subx:I(),y:ce().rangeRound([this.height,0]).domain(this.setYDomain(i)),z:ce()},this.show={whisker:l,outliers:h,divider:c,legend:f,points:p},this.kdeOption=g,this.vColor=d,this.reset()}update(){this.groups.forEach((t=>{t.index=this.scale.x.domain().indexOf(t.key);let e=this.groupInfo[t.key];void 0!==e&&this._renderGroupInfoText(e,t.key);this.scale.subx.domain((()=>(this.config.subx.sort&&t.values.sort(((t,e)=>t.label<e.label?-1:t.label>e.label?1:0)),t.values.map((t=>t.label))))()).range([this.scale.x(t.key),this.scale.x(t.key)+this.scale.x.bandwidth()]),t.values.forEach((e=>{0!=e.values.length&&(e.values=e.values.sort(a),void 0!==this.vColor&&(e.color=this.vColor),t.dom=this._drawViolin(e,t.index))})),this.config.size.show&&this._renderSizeAxis(t),this.config.subx.show&&this._renderSubXAxis(t)})),this._renderXAxis(),this._renderYAxis(),this.dom.on("mouseout",(()=>{void 0!==this.tooltip&&this.tooltip.hide()})),this.show.divider&&this._addGroupDivider(),this.show.legend&&this._addLegend()}addPlotTitle(t,e){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${r})`).text(e)}createTooltip(t){return 0==o(`#${t}`).length&&o("<div/>").attr("id",t).appendTo(o("body")),this.tooltip=new mo(t),Un(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return void 0===e&&(e=this.createTooltip(t)),this.toolbar=new xo(t,e),this.toolbar}addBrush(t){const e=Ni();e.on("end",(()=>{this.zoom(t,e)})),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,r=Rn.selection;if(void 0===e)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter(((t,e)=>{const n=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return e>=n&&e<=i})));const n=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([n,i]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout((function(){n=null}),350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((e=>{let n=e.key,r=e.values;this.scale.subx.range([this.scale.x(n),this.scale.x(n)+this.scale.x.bandwidth()]),r.forEach((r=>{if(0==r.values.length)return;this.scale.x.domain().indexOf(n),this.scale.z.range([this.scale.subx(r.label),this.scale.subx(r.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${e.index}-${r.label}`);o.select(".violin").transition(i).attr("d",_e().x0((t=>this.scale.z(t[1]))).x1((t=>this.scale.z(-t[1]))).y((t=>this.scale.y(t[0]))));const a=m(r.values,.25),s=m(r.values,.75),u=.1;o.select(".violin-ir").transition(i).attr("x",this.scale.z(-u)).attr("y",this.scale.y(s)).attr("width",Math.abs(this.scale.z(-u)-this.scale.z(u))).attr("height",Math.abs(this.scale.y(s)-this.scale.y(a)));const l=w(r.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-u)).attr("x2",this.scale.z(u)).attr("y1",this.scale.y(l)).attr("y2",this.scale.y(l))}))}))}reset(){this.dom.selectAll("*").remove(),this.update()}updateData(t,e=!1,n=!0){this.data=t,this.groups=T().key((t=>{if(void 0===t.group)throw"required attribute does not exist";return t.group})).entries(this.data),this.updateYScale(),this.updateXScale(),this.show.outliers=n,e&&this.reset()}updateYScale(t=void 0,e=void 0,n=!1){void 0!==t&&(this.config.y.label=t),this.scale.y=ce().rangeRound([this.height,0]).domain(this.setYDomain(e)),n&&this.reset()}updateXScale(t=void 0,e=!1){this.scale.x=I().range([0,this.width]).domain(t||this.groups.map((t=>t.key))).paddingOuter(this.config.x.paddingOuter).paddingInner(this.config.x.paddingInner),e&&this.reset()}_drawViolin(t,e){const n=e=>{this.scale.z.domain([-e,e]).range([this.scale.subx(t.label),this.scale.subx(t.label)+this.scale.subx.bandwidth()])},r=this._generateVertices(t.values,this.kdeOption),i=this.dom.append("g").attr("id",`violin${e}-${t.label}`).attr("class","violin-g").datum(t);if(t.values.length>this.show.points&&r.length&&this._validVertices(r)){n(x(r,(t=>Math.abs(t[1]))));const o=m(t.values,.25),a=m(t.values,.75),s=Math.abs(a-o),u=p(t.values.filter((t=>t<=a+1.5*s))),l=u[1],c=u[0],f=w(t.values);if(this._renderViolinShape(i,t,r,f,e%2==0),(void 0===t.showBoxplot||t.showBoxplot)&&this._renderBoxPlot(i,t,c,l,o,a,f),this.show.outliers){const e=t.values.filter((t=>t<c||t>l));this._renderDataDots(i,{values:e,color:t.color},1)}t.showPoints&&this._renderDataDots(i,t,1)}else if(this.show.points>0){n(x(t.values,(t=>Math.abs(t)))),this._renderDataDots(i,t,1)}return i}_renderViolinShape(t,e,n,r,i,o="#94a8b8",a="#90c1c1"){let s=_e().x0((t=>this.scale.z("left"==e.showHalfViolin?0:t[1]))).x1((t=>this.scale.z("right"==e.showHalfViolin?0:-t[1]))).y((t=>this.scale.y(t[0])));const u=()=>void 0!==e.color?e.color:i?a:o,l=t.append("path").datum(n).attr("d",s).classed("violin",!0).style("fill",e.fill?e.fill:u).style("stroke",e.stroke?e.stroke:u);t.on("mouseover",(()=>{l.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+r.toPrecision(4)+"<br/>")})),t.on("mouseout",(()=>{l.classed("highlighted",!1)}))}_renderBoxPlot(t,e,n,r,i,o,a){const s=this.scale.z.domain()[1]/3;this.show.whisker&&t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(n)).style("stroke","#fff"),t.append("rect").attr("x","right"==e.showHalfViolin?this.scale.z(0):this.scale.z(-s)).attr("y",this.scale.y(o)).attr("width",void 0===e.showHalfViolin?Math.abs(this.scale.z(-s)-this.scale.z(s)):Math.abs(this.scale.z(0)-this.scale.z(s))).attr("height",Math.abs(this.scale.y(o)-this.scale.y(i))).style("fill",e.altColor||"#555f66").style("stroke-width",.2),t.append("line").attr("x1","right"==e.showHalfViolin?this.scale.z(0):this.scale.z(-s)).attr("x2","left"==e.showHalfViolin?this.scale.z(0):this.scale.z(s)).attr("y1",this.scale.y(a)).attr("y2",this.scale.y(a)).attr("class","violin-median")}_renderDataDots(t,e,n=2){const r=this.scale.z.domain()[1],i=ji(0,r/4);t.append("g").attr("class","violin-points").selectAll("circle").data(e.values).enter().append("circle").attr("cx",(()=>this.scale.z("left"==e.showHalfViolin?-Math.abs(i()):Math.abs(i())))).attr("cy",(t=>this.scale.y(t))).attr("fill",e.color).attr("r",n)}_sanityCheck(t){const e=["group","label","values"];t.forEach((t=>{e.forEach((e=>{if(void 0===t[e])throw"GroupedViolin: input data error."}))}))}_addGroupDivider(){const t=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),n=(n,r)=>r!==t.length-1?this.scale.x(n)+ +this.scale.x.bandwidth()+e/2:0;this.dom.selectAll(".vline").data(t).enter().append("line").classed("vline",!0).attr("x1",n).attr("x2",n).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",((e,n)=>n!=t.length-1?1:0)).style("stroke","rgb(86,98,107)").style("opacity",.5)}_addLegend(){const t=this.dom.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");t.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const e=t.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0);e.append("rect").attr("x",((t,e)=>5+60*e+this.scale.x.range()[0])).attr("y",-28).attr("width",10).attr("height",10).style("fill",(t=>t.color)),e.append("text").attr("class","violin-legend-text").text((t=>t.label)).attr("x",((t,e)=>17+60*e+this.scale.x.range()[0])).attr("y",-20)}_renderGroupInfoText(t,e){this.dom.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","middle").attr("fill",(e=>"pvalue"==e&&parseFloat(t[e])<=parseFloat(t.pvalueThreshold)?"orangered":"SlateGray")).attr("transform",(()=>`translate(${this.scale.x(e)+this.scale.x.bandwidth()/2}, ${this.scale.y(this.scale.y.domain()[0])+50})`)).text((e=>`${e}: ${parseFloat(parseFloat(t[e]).toPrecision(3)).toExponential()}`))}_renderXAxis(){let t=this.config.subx.show?55:0;const e=this.config.x;var n;e.show&&(this.xAxis="top"==e.direction?(n=this.scale.x,qe(Te,n)):Re(this.scale.x),e.hideLabels&&(this.Axis=this.xAxis.tickFormat("")),e.hideTicks&&(this.Axis=this.xAxis.tickSize(0)),this.dom.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${void 0!==e.adjustHeight?e.adjustHeight:this.height+t})`).call(this.xAxis).selectAll("text").attr("text-anchor",e.textAnchor?e.textAnchor:"start").attr("transform",`rotate(${e.angle}, 0, 10)`))}_renderYAxis(t=!1){var e;this.yAxis=(e=this.scale.y,qe(Ee,e)).tickValues(this.scale.y.ticks(5)),t&&this.dom.select(".violin-y-axis").empty().remove(),this.dom.append("g").attr("class","violin-y-axis axis--y").attr("transform","translate(-5, 0)").call(this.yAxis),this.dom.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${10+Un(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(this.config.y.label)}_renderSizeAxis(t){let e={};t.values.forEach((t=>e[t.label]=`(${t.size||t.values.length})`));let n=Re(I().domain(t.values.map((t=>t.label))).rangeRound([this.scale.x(t.key),this.scale.x(t.key)+this.scale.x.bandwidth()])).tickFormat((t=>e[t]));const r=this.height+18,i=this.config.size,o=t.dom.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${i.adjustHeight||r})`).call(n);i.angle>0&&o.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${i.angle}, 2, 10)`)}_renderSubXAxis(t){const e=this.config.subx,n=e.adjustHeight?e.adjustHeight:5;let r=Re(this.scale.subx);e.hideTicks&&(r=r.tickSize(0));const i=t.dom.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${this.height+n})`).call(r);e.angle>0&&i.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${e.angle}, 2, 10)`)}_generateVertices(t,e){let n=function(t,e,n){return function(r){return e.map((e=>[e,b(r,(r=>t((e-r)/n)))/n]))}}(vo,this.scale.y.ticks(100),yo(t));const r=p(t);let i="default"==e?n(t):function(t,e){void 0===e&&(e=ce().domain(p(t)).nice().ticks(100));const n=Math.pow(t.length,-.2),r=1/h(t)/n,i=Math.pow(2*Math.PI,-.5)*r/t.length;return e.map((e=>{let n=0;return t.forEach((t=>{n+=Math.exp(-Math.pow((t-e)*r,2)/2)})),[e,n*i]}))}(t);return i=i.filter((t=>t[0]>=r[0]&&t[0]<=r[1])),i}_validVertices(t){return!t.reduce(((t,e)=>t.concat(e)),[]).filter((t=>isNaN(t))).length}}async function wo(t,e=250){let n,r=[],i=0;do{const o=ko(t,i,e);n=await fetch(o).then((t=>t.json())),r=r.concat(n.data),i+=1}while(i<n.paging_info.numberOfPages);return r}async function _o(t){return await fetch(t).then((t=>t.json()))}function ko(t,e,n=250){let r;const i="page="+e;r=t.includes("?")?t+"&"+i:t+"?"+i;return r=r+"&"+("itemsPerPage="+n),r}function Mo(t,e,n,r,i=void 0){return function(t){if(Un(`#${t}`).empty()){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}(t),void 0===i&&(i=`${t}-svg`),void 0===r&&(r={top:0,left:0}),Un("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",i).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}function To(t,e,n,r,i=void 0,o="eqtl",a=function(){const t="http://gtexportal.org/api/v2/",e="gtex_v8";return{singleCellExpression:t+"expression/singleNucleusGeneExpression?datasetId=gtex_snrnaseq_pilot&gencodeId=",singleCellExpressionSummary:t+"expression/singleNucleusGeneExpressionSummary",dyneqtl:t+"association/dyneqtl",snp:t+"dataset/variant?snpId=",variantId:t+"dataset/variant?variantId=",exonExp:t+"expression/clusteredMedianExonExpression?gencodeId=",transcriptExp:t+"expression/clusteredMedianTranscriptExpression?gencodeId=",junctionExp:t+"expression/clusteredMedianJunctionExpression?gencodeId=",transcript:t+`reference/transcript?datasetId=${e}&gencodeId=`,exon:t+`reference/exon?datasetId=${e}&gencodeId=`,geneModel:t+"dataset/collapsedGeneModelExon?gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?gencodeId=",geneExp:t+"expression/geneExpression?gencodeId=",medGeneExp:t+"expression/clusteredMedianGeneExpression",topInTissueFiltered:t+"expression/topExpressedGene?filterMtGene=true&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?&filterMtGene=false&tissueSiteDetailId=",geneId:t+"reference/gene?geneId=",tissue:t+"dataset/tissueSiteDetail",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",dynsqtl:t+"association/dynsqtl",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){let s="";s="sqtl"==o.toLowerCase()?a.dynsqtl+`?variantId=${n}&phenotypeId=${e}&tissueSiteDetailId=${r}`:a.dyneqtl+`?variantId=${n}&gencodeId=${e}&tissueSiteDetailId=${r}`;const u=[wo(a.geneId+e),_o(s),wo(a.tissue)];Promise.all(u).then((function(r){let o=1==r[0].length?r[0][0].geneSymbol:e,a=function(t){["data","genotypes","pValue","pValueThreshold","tissueSiteDetailId"].forEach((e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parse Error: Required json attribute is missing: "+e})),t.expression_values=t.data.map((t=>parseFloat(t))),t.genotypes=t.genotypes.map((t=>parseFloat(t))),t.homoRefExp=t.expression_values.filter(((e,n)=>0==t.genotypes[n])),t.homoAltExp=t.expression_values.filter(((e,n)=>2==t.genotypes[n])),t.heteroExp=t.expression_values.filter(((e,n)=>1==t.genotypes[n]));let e=t.variantId.split(/_/)[2],n=t.variantId.split(/_/)[3];return t.het=e+n,t.ref=e+e,t.alt=n+n,t}(r[1]),s=i||a.tissueSiteDetailId,u=function(t){const e=t;return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach((t=>{if(!e[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t})),e.reduce(((t,e)=>(t[e.tissueSiteDetailId]=e,t)),{})}(r[2]),l=u[a.tissueSiteDetailId].tissueSiteDetail;t.data=[{group:s,label:a.ref.length>2?"ref":a.ref,size:a.homoRefExp.length,values:a.homoRefExp},{group:s,label:a.het.length>2?"het":a.het,size:a.heteroExp.length,values:a.heteroExp},{group:s,label:a.alt.length>2?"alt":a.alt,size:a.homoAltExp.length,values:a.homoAltExp}],t.numPoints=10;let c={};c[s]={pvalue:null===a.pValue?1:parseFloat(a.pValue).toPrecision(3),pvalueThreshold:null===a.pValueThreshold?0:parseFloat(a.pValueThreshold).toPrecision(3)};let f=new bo(t.data,c),h=t.width-(t.margin.left+t.margin.right),p=t.height-(t.margin.top+t.margin.bottom),d=`${t.id}Tooltip`,g=Mo(t.id,t.width,t.height,t.margin);return f.render(g,h,p,void 0,[],t.xAxis,t.subXAxis,t.yAxis,t.sizeAxis,t.showWhisker,t.showDivider,t.showLegend,t.showOutliers,t.numPoints,t.vColor),g.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1),f.createTooltip(d),function(t,e,n,r=!0,i){let o=e,a=n;r&&(o=e.geneSymbol,a=n.variantId),t.dom.selectAll(".violin-g").on("mouseover",((e,n,r)=>{Un(r[n]).classed("highlighted",!0);const s=[`<span class="tooltip-key">Gene</span>: <span class="tooltip-value">${o}</span>`,`<span class="tooltip-key">Variant</span>: <span class="tooltip-value">${a}</span>`,`<span class="tooltip-key">Tissue</span>: <span class="tooltip-value">${null==i?e.group:i}</span>`,`<span class="tooltip-key">Genotype</span>: <span class="tooltip-value">${e.label}</span>`,`<span class="tooltip-key">Sample size</span>: <span class="tooltip-value">${e.size}</span>`,`<span class="tooltip-key">Median</span>: <span class="tooltip-value">${w(e.values).toPrecision(4)}</span>`];t.tooltip.show(s.join("<br/>"))}))}(f,o,n,!1,l),g}))}var Co={render:To};t.QtlViolinPlot=Co,t.render=To}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
